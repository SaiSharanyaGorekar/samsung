omnia.ui.readable.handler = {
							
							clsId: 'omnia.ui.readable.handler',
							
							args: null,
							elems: null,
							root: null,
							
							init: function(args) {
								this.args = args;
								this.render(args);
								//this.debug();
							},
							reset: function(args) {
								this.render(args);
							},
							
							// Protected functions - UI
							
							getRoot: function() {
								return this.root;
							},
							render: function(args) {
								this.root = args.root;
								var e = this.elems = ox.el.getAll(args.root, true);
								
								if(args.title) e.title.text(args.title); 
								ox.css(e.head, 'ox-hidden', !args.title);
								
								if(args.body) { ox.node(args.body, e.body); }
								
								if(args.lang) e.body.attr('lang', args.lang);
								
								if(args.image) ox.node({oid: 'image', css: 'ox-id-banner col-light-4-back w100', style: {'height': ox.pf.isPhone ? 250 : 400}, url: args.image}, e.banner);
								ox.css(e.head, 'ox-border-bottom', !args.image);
								
								if(args.isNarrow) this.root.find('.ox-id-strip').addClass('ox-narrow');
								
								this.cleanup();
								//log({body: e.body, title: args.title});
							},
							cleanup: async function() {
								ox.el.replaceNodes(this.elems.body, 'a', 'span', 'ox-was-a');
								
								this.elems.body.find('img').get().forEach(n => {
									$(n).on('error', () => $(this).css('display', 'none'));
									//if($(n).width() < 100) $(n).addClass('ox-hidden');
									
									if($(n).attr('data-retina-src')) $(n).attr('src', $(n).attr('data-retina-src'));
								})
								
								await ox.el.renderFrame();
								
								var nodes = ox.el.getNodes();
								nodes.forEach(n => {
									var cs = window.getComputedStyle(n);
									var isHidden = (cs.display == 'none') || !n.offsetHeight;
					
									if(isHidden) $(n).remove(); //.addClass('col-red-i col-red-light-back'); //remove();
								});
								
								//this.debug();
							},
							
};omnia.ui.readable.html = {
							
							t: 'div', css: 'ox-readable ox-col-ui-dialog-1-back', c: [
								{t: 'div', css: 'pl10 pr10 cropped w100', c: [
									{oid: 'strip', oxid: 'head strip', css: 'pt30 pb30 pl15 pr15', c: [
										{oid: 'headline', oxid: 'title', css: 'ox-h2 semibold'},
									]},
								]},
								{t: 'div', oxid: 'banner', css: 'col-light-4-back'},
								{t: 'div', css: 'pl10 pr10 cropped w100', c: [
									{oid: 'strip', oxid: 'strip', css: 'pt15 pb15 pl15 pr15', c: [
										{t: 'div', oxid: 'body', css: 'ox-plain-content'},
									]},
								]},
							],
							
};omnia.ui.colorpicker.handler = {
	
							clsId: 'omnia.ui.colorpicker.handler',
							args: null,
							root: null,
							
							h: null,
							s: null,
							l: null,
							
							r: null,
							g: null,
							b: null,
							
							hex: null,
							
							ref: null,
							previewId: null,
							
							panel: {t: 'div', style: 'min-height:335px', c: [
								{oid: 'bar2', css: 'ox-stretch ox-line', c: [
									{oid: 'label', css: 'ox-id-color'},
								]},
								{oid: 'bar2', css: 'ox-border-bottom-i ox-line ox-split pl15 pr15', c: [
									{oid: 'label', css: 'hleft p0-i mr5 _ox-border-thin-right', text: 'HEX', style: 'text-align:left'},
									{oid: 'input', css: 'ox-inbar ox-id-hex-input ox-slim _ox-inline font-code', placeholder: 'HEX', style: 'width:240px'},
								]},
								{oid: 'bar2', css: 'ox-border-bottom-i ox-line ox-split pl15 pr15', c: [
									{oid: 'label', css: 'hleft p0-i mr5 _ox-border-thin-right', text: 'RGB', style: 'text-align:left'},
									{t: 'div', c: [
										{oid: 'input', css: 'ox-id-r-input ox-inbar ox-slim _ox-inline', placeholder: 'R', style: 'width:80px', type: 'tel'},
										{oid: 'input', css: 'ox-id-g-input ox-inbar ox-slim _ox-inline', placeholder: 'G', style: 'width:80px', type: 'tel'},
										{oid: 'input', css: 'ox-id-b-input ox-inbar ox-slim _ox-inline', placeholder: 'B', style: 'width:80px', type: 'tel'},
									]},
								]},
								{oid: 'bar2', css: 'ox-border-bottom-i ox-line ox-split pl15 pr15', c: [
									{oid: 'label', css: 'hleft p0-i mr5 _ox-border-thin-right', text: 'HSL', style: 'text-align:left'},
									{t: 'div', c: [
										{oid: 'input', css: 'ox-id-h-input ox-inbar ox-slim _ox-inline', placeholder: 'H', style: 'width:80px', type: 'tel'},
										{oid: 'input', css: 'ox-id-s-input ox-inbar ox-slim _ox-inline', placeholder: 'S', style: 'width:80px', type: 'tel'},
										{oid: 'input', css: 'ox-id-l-input ox-inbar ox-slim _ox-inline', placeholder: 'L', style: 'width:80px', type: 'tel'},
									]},
								]},
								
								{oid: 'bar2', css: 'ox-stretch _ox-border-bottom-i no-crop ml5 mr5 mt5', c: [
									{t: 'div', css: 'ox-id-h ml30 mr30 abs t00 br4', style: 'height:10px; width:calc(100% - 60px); top:' + (35 / 2) + 'px'},
									{
										oid: 'slider', 
										css: 'ox-id-h-slider no-crop abs _ox-d',
										back: {css: 'ox-hidden'},
										handle: {css: 'ox-id-h-slider-handle no-crop z1 w60px ox-border col-highlight-border-i', style: 'background-color:rgba(255, 255, 255, 0.75) !important; border-width:1.5px; _height:44px; line-height:32px; border-radius:4px;', html: '<i class="fa fa-sort fa-rotate-90 col-highlight"></i>'},
									},
								]},
								{oid: 'bar2', css: 'ox-stretch _ox-border-top-i no-crop ml5 mr5 mt5 ox-col-ui-dialog-1-back', c: [
									{t: 'div', css: 'ox-id-s ml30 mr30 abs t00 br4', style: 'height:10px; width:calc(100% - 60px); top:' + (35 / 2) + 'px'},
									{
										oid: 'slider', 
										css: 'ox-id-s-slider no-crop abs _ox-d2',
										back: {css: 'ox-hidden'},
										handle: {css: 'ox-id-s-slider-handle no-crop z1 w60px ox-border col-highlight-border-i', style: 'background-color:rgba(255, 255, 255, 0.75) !important; border-width:1.5px; _height:44px; line-height:32px; border-radius:4px;', html: '<i class="fa fa-sort fa-rotate-90 col-highlight"></i>'},
									},
								]},
								{oid: 'bar2', css: 'ox-stretch _ox-border-top-i no-crop ml5 mr5 mt5 ox-col-ui-dialog-1-back', c: [
									{t: 'div', css: 'ox-id-l ml30 mr30 abs t00 br4', style: 'height:10px; width:calc(100% - 60px); top:' + (35 / 2) + 'px'},
									{
										oid: 'slider', 
										css: 'ox-id-l-slider no-crop abs _ox-d',
										back: {css: 'ox-hidden'},
										handle: {css: 'ox-id-l-slider-handle no-crop z1 w60px ox-border col-highlight-border-i', style: 'background-color:rgba(255, 255, 255, 0.75) !important; border-width:1.5px; _height:44px; line-height:32px; border-radius:4px;', html: '<i class="fa fa-sort fa-rotate-90 col-highlight"></i>'},
									},
								]},
							]},
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								
								this.render();
								//if(!this.args.isDirect) return;
								if(args.onRegister) args.onRegister(this, args);
			
								if(args.hex) {
									this.hex = args.hex[0] == '#' ? args.hex.substr(1) : args.hex;
									this.setColor(false, false, false, true);
								} else if(args.r) {
									this.r = args.r;
									this.g = args.g;
									this.b = args.b;
									
									this.setColor(false, false, true, false);
								} else {
									this.h = args.h || 180;
									this.s = args.s || 75;
									this.l = args.l || 50;
									
									this.setColor(false, true, false, false);
								}
								
								//if(!this.hex) this.setValue('#ff00ff');
								
								//var me = this;
								//ox.el.onRefresh(function() { me.onResize(); });
							},
							reset: function(args) {
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.onSetColor) this.args.onSetColor = args.onSetColor;
								if(args.hex) this.setValue(args.hex);
								if(args.color) this.setValue(args.color);
							},				
							getRoot: function() {
								return this.root;
							},
							render: function() {
								var me = this;
								
								var isNoArrow = this.args.isNoArrow || this.root.hasClass('ox-noarrrow');
								if(this.root.hasClass('ox-direct') || this.args.isDirect) {
									ox.node(this.panel, this.root);
								} else {
									var id = this.previewId = ox.id();
									//this.ref = {}; //{hex: me.args.hex};
			
									// Picker
									ox.el.onRefresh(function() {
										
										var node = ox.node({oid: 'dropdown', css: 'flex-center ' + (me.args && me.args.cfg && me.args.cfg.css ? me.args.cfg.css : ''), style: 'display:flex;' + (me.args && me.args.cfg && me.args.cfg.style && typeof me.args.cfg.style == 'string' ? me.args.cfg.style : ''), args: {
											label: '<div class="ox-id-color-preview ox-id-color-preview-' + id + ' inline h100 vtop br4 ox-border" style="width:25px; height:25px;"></div>',
											isFixedLabel: true,
											isPanel: true,
											isNoArrow: isNoArrow,
											handler: me,
											onClose: function() {
												//if(me.args.onSelect) me.args.onSelect(me.ref.colorpicker.getValue());
												if(me.args.onSelect) me.args.onSelect(me.hex);
												if(me.args.onChanged) me.args.onChanged({value: me.getValue()});
											},
											getValue: function() {
												//if(me.ref.colorpicker) return me.ref.colorpicker.getValue();
												return me.getValue();
											},
											setValue: function(value) {
												me.setValue(value);
												//if(me.ref.colorpicker) me.ref.colorpicker.setValue(value);
											},
											items: [
												{oid: 'colorpicker', args: {
													hex: me.args.hex,
													isDirect: true,
													onRegister: function(colorpicker, args2) {
														//log('#onRegister ', colorpicker);
														//me.ref.colorpicker = colorpicker;
														
														args2.hex = me.hex;
														args2.onSetColor(me.hex);
													},
													onSetColor: function(hex) { 
														//$('.ox-id-color-preview-' + id).css({'background-color': '#' + hex});
														me.setValue(hex);
													},
												}},
											],
											close: '#ok',
										}});
										
										me.root.replaceWith(node.getRoot());
										me.root = node.getRoot();
									});
			
									return;
								}
								
								ox.el.get('h-slider', this.root, true).reset({onSelect: function(p) { me.h = Math.round(p * 360); me.setColor(true); }});
								ox.el.get('s-slider', this.root, true).reset({onSelect: function(p) { me.s = Math.round(p * 100); me.setColor(true); }});
								ox.el.get('l-slider', this.root, true).reset({onSelect: function(p) { me.l = Math.round(p * 100); me.setColor(true); }});
								
								var hex = this.hexInput = ox.el.get('hex-input', this.root);
								hex.on('input', function(e) { 
									var v = hex[0].value;
									if(v[0] == '#') v = v.substr(1);
									if(v.length != 6) return;
									
									me.hex = v;
									me.setColor(false, false, false, true);
								});
								
								var rgb = function(input, val) {
									var v = parseInt(input[0].value);
									if(!(v >= 0 && v <= 255)) return;
									
									me[val] = v;
									me.setColor(false, false, true, false);
								};
			
								var r = this.rInput = ox.el.get('r-input', this.root);
								r.on('input', function() { rgb(r, 'r'); });
			
								var g = this.gInput = ox.el.get('g-input', this.root);
								g.on('input', function() { rgb(g, 'g'); });
			
								var b = this.bInput = ox.el.get('b-input', this.root);
								b.on('input', function() { rgb(b, 'b'); });
								
								var hsl = function(input, val, max) {
									var v = parseInt(input[0].value);
									if(!(v >= 0 && v <= max)) return;
									
									me[val] = v;
									me.setColor(false, true, false, false);
								};
			
								var h = this.hInput = ox.el.get('h-input', this.root);
								h.on('input', function() { hsl(h, 'h', 360); });
			
								var s = this.sInput = ox.el.get('s-input', this.root);
								s.on('input', function() { hsl(s, 's', 100); });
			
								var l = this.lInput = ox.el.get('l-input', this.root);
								l.on('input', function() { hsl(l, 'l', 100); });
							},
							setValue: function(hex) {
								/*if(this.ref) {
									this.ref.colorpicker.setValue(hex);
									return;
								}*/
								
								//log('#omnia.ui.colorpicker.setValue ' + hex + ' ' + this.previewId);
								
								this.hex = hex[0] == '#' ? hex.substr(1) : hex;
								this.setColor(false, false, false, true);
								
								if(this.previewId) {
									var me = this;
									
									$('.ox-id-color-preview-' + this.previewId).css({'background-color': '#' + this.hex});
									ox.el.onRefresh(function() {
										$('.ox-id-color-preview-' + me.previewId).css({'background-color': '#' + me.hex});
									});
								}
							},
							getValue: function(isFull) {
								//if(this.ref) return this.ref.colorpicker.getValue(isFull);
								
								if(isFull) return {hex: '#' + this.hex, r: this.r, g: this.g, b: this.b, h: this.h, s: this.s, l: this.l};
								return '#' + this.hex;
							},
							setColor: function(isHSLSlider, isHSL, isRGB, isHEX) {
								
								// Calc
								if(isHSL || isHSLSlider) {
									var rgb = omnia.tools.color.hslToRgb(this.h / 360, this.s / 100, this.l / 100);
									this.r = Math.round(rgb.r);
									this.g = Math.round(rgb.g);
									this.b = Math.round(rgb.b);
			
									this.hex = omnia.tools.color.rgbToHex(this.r, this.g, this.b);
								}
								
								if(isHEX) {
									var rgb = omnia.tools.color.hexToRgb(this.hex);
									this.r = Math.round(rgb.r);
									this.g = Math.round(rgb.g);
									this.b = Math.round(rgb.b);
								}
			
								if(isRGB || isHEX) {
									var hsl = omnia.tools.color.rgbToHsl(this.r, this.g, this.b);
									this.h = Math.round(hsl.h * 360);
									this.s = Math.round(hsl.s * 100);
									this.l = Math.round(hsl.l * 100);
									
									if(isRGB) this.hex = omnia.tools.color.rgbToHex(this.r, this.g, this.b);
								}
							
			
								if(this.args.isDirect) {
									
									// HSL Sliders
									var steps = [];
									for(var g = 0; g < 360; g += 15) {
										//steps.push('hsl(' + g + ', ' + this.s +'%, ' + this.l + '%) ' + (g / 360 * 100) + '%');
										steps.push('hsl(' + g + ', ' + '100%, ' + '50%) ' + (g / 360 * 100) + '%');
									}
									var s = 'linear-gradient(to right, ' + steps.join(',') + ')';
									ox.el.get('h', this.root).css('background', s);
									//ox.el.get('s', this.root).css('background', 'linear-gradient(to right, hsl(' + this.h + ', 0%, ' + this.l + '%) 0%, hsl(' + this.h + ', 100%, ' + this.l + '%) 100%)');
									ox.el.get('s', this.root).css('background', 'linear-gradient(to right, hsl(' + this.h + ', 0%, ' + '50%) 0%, hsl(' + this.h + ', 100%, ' + '50%) 100%)');
									//ox.el.get('l', this.root).css('background', 'linear-gradient(to right, hsl(' + this.h + ', ' + this.s + '%, 0%) 0%, hsl(' + this.h + ', ' + this.s + '%, 50%) 50%, hsl(' + this.h + ', ' + this.s + '%, 100%) 100%)');
									ox.el.get('l', this.root).css('background', 'linear-gradient(to right, hsl(' + this.h + ', ' + '100%, 0%) 0%, hsl(' + this.h + ', ' + '100%, 50%) 50%, hsl(' + this.h + ', ' + '100%, 100%) 100%)');
			
				
									// HSL Input
									this.hInput[0].value = this.h;
									this.sInput[0].value = this.s;
									this.lInput[0].value = this.l;
									
									// RGB Input
									this.rInput[0].value = Math.round(this.r);
									this.gInput[0].value = Math.round(this.g);
									this.bInput[0].value = Math.round(this.b);
									
									// HEX Input
									this.hexInput[0].value = '#' + this.hex;
			
									// Color
									ox.el.get('color', this.root).css('background', 'hsl(' + this.h + ', ' + this.s + '%, ' + this.l + '%)');
									
									// HSL Sliders
									if(!isHSLSlider) {
										ox.el.get('h-slider', this.root, true).setPos(this.h / 360);
										ox.el.get('s-slider', this.root, true).setPos(this.s / 100);
										ox.el.get('l-slider', this.root, true).setPos(this.l / 100);
									}
								}
								
								if(this.args.onSetColor) this.args.onSetColor(this.hex, this.r, this.g, this.b, this.h, this.s, this.l);
							},
	
};omnia.ui.colorpicker.html = {
							t: 'div', css: 'ox-colorpicker ox-data'
};omnia.ui.fontpicker.handler = {

							clsId: 'omnia.ui.fontpicker.handler',
							args: null,
							root: null,
							dropdown: null,
							isFontsLoaded: false,
							items: null,

							init: function(args) {
								var me = this;
								this.args = args;
								this.root = args.root;
								this.dropdown = args.root.data('ox-handler-dropdown');
								
								if(args.isLoadInitial) this.loadFonts();
								this.dropdown.reset({
									isDynamic: true,
									onOpen: function(overlay, isUpdate) {
										//log('#onOpen isUpdate = ' + isUpdate);
										
										if(!me.isFontsLoaded && !isUpdate) {
											log('omnia.ui.fontpicker.init: Dropdown.onOpen: Load Google Fonts info');
											
											me.loadFonts();
											/*omnia.tools.net.googlefonts.getWebfontsMeta({
												max: args.max || omnia.tools.net.googlefonts.max,
												onLoaded: function(fonts) { me.onFontsLoaded(fonts); },
											});*/
										}
									},
									items: args.value ? [{label: args.value, v: args.value}] : null,
								});
							},
							
							// Public functions - UI
							
							reset: function(args) {
								if(args.value) this.setValue(value);
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.onChanged) this.args.onChanged = args.onChanged;
							},
							getRoot: function() {
								return this.root;
							},
							prevItem: function() {
								this.dropdown.prevItem();
							},
							nextItem: function() {
								this.dropdown.nextItem();
							},
							random: function() {
								this.dropdown.random();
							},
							
							// Private events
							
							onFontsLoaded: function(fonts) {
								if(!fonts) return false;
								log('omnia.ui.fontpicker.onFontsLoaded: ' + fonts.length + ' fonts found');
								this.isFontsLoaded = true;
								
								var items = this.items = [];
								ox.each(fonts, function(idx, font) {
									items.push({label: font.family, v: font.family});
								});

								var me = this;
								this.dropdown.reset({
									items: items,
									onChanged: function(args) {
										if(me.args.onChanged) me.onSelect(args.value);
									},
									onSelect: function(item) {
										me.onSelect(item);
									},
								});

								if(this.args.value) this.dropdown.setValue(this.args.value);
							},
							onSelect: function(item) {
								if(this.args.elem) omnia.tools.fonts.replaceFont({
									elem: $(this.args.elem),
									provider: 'google',
									fontname: item.v,
								});
								
								if(this.args.onChanged) this.args.onChanged({value: this.dropdown.getValue()});
								if(this.args.onSelect) this.args.onSelect(this.dropdown.getValue());
							},

							// Public functions - Data
							
							getValue: function() {
								return this.dropdown.getValue();
							},
							setValue: function(value) {
								this.args.value = value;
								if(!this.items) this.dropdown.reset({items: [{label: value, v: value}]}),
								this.dropdown.setValue(value);
							},
							loadFonts: function() {
								var me = this;
								
								omnia.tools.net.googlefonts.getWebfontsMeta({
									max: me.args.max ? (me.args.max == 'all' ? null : me.args.max) : omnia.tools.net.googlefonts.max,
									onLoaded: function(fonts) { me.onFontsLoaded(fonts); },
								});
							},

};omnia.ui.fontpicker.html = {

							oid: 'dropdown', css: 'ox-fontpicker ox-medium', label: '#select-font'

};omnia.ui.form.handler = {

							clsId: 'omnia.ui.form.handler',
							args: null,
							root: null,
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								
								this.render(args);
								if(args.value || args.data) this.reset(args);
								
								/*var me = this;
								ox.el.onRefresh(() => {
									me.setAllLabelStates();
								});*/
							},
							
							// Public functions UI
							
							getRoot: function() {
								return this.root;
							},
							
							// Public functions data
							
							reset: function(args) {
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.value) this.setValue(args.value);
								if(args.data) this.setValue(args.data);
							},
							getItems: function() {
								try {
									var formEl = ox.el.get('.ox-form-element', this.root);
									if(!(formEl instanceof Array)) formEl = [formEl];
								
									var items = [];
									ox.each(formEl, function(i, el) {
										var it = ox.el.get('.ox-form-item', el, true);
										if(it instanceof Array) items = items.concat(it);
										else if(it && it.getValue) items.push(it);
									});
								
									formEl = ox.el.get('.ox-form-element', this.root, true);
									if(!(formEl instanceof Array)) formEl = [formEl];
									items = items.concat(formEl.filter(function(item) { return item && item.getValue; }));
									
									return items;
								}
								catch(e) {
									ox.error(e);
								}
							},
							setValue: function(data, isTriggerOnChange) {
								//log(this.clsId + '.setValue: data = ', data);	
								
								var me = this;
								var items = this.getItems(); 
								$.each(items, function(i, itemHandler) { 
									if(itemHandler && itemHandler.setValue) {
										var id = ox.el.getClassByPrefix(itemHandler.getRoot(), 'ox-form-id-') || ox.id();
										id = id.split('ox-form-id-').join('');
										if(data[id] !== undefined) { 
											//log('#' + this.clsId + '.setValue: ' + id + ' = ' + data[id]);
											//var vi = itemHandler.getValue();
											//if(vi != data[id]) 
											
											var isToSet = typeof data[id] != 'string' || itemHandler.getValue() != data[id];
											//if(isToSet) log({id, dataId: data[id], v: itemHandler.getValue()});
											if(isToSet) itemHandler.setValue(data[id], true);
											
											me.setLabelsState(itemHandler);
										}
									}		
								});
								
								//if(isTriggerOnChange) this.onChanged();
							},
							clear: function() {
								var me = this;
								var items = this.getItems(); 
								$.each(items, function(i, itemHandler) { 
									if(itemHandler && itemHandler.setValue) {
										var id = ox.el.getClassByPrefix(itemHandler.getRoot(), 'ox-form-id-') || ox.id();
										id = id.split('ox-form-id-').join('');

										itemHandler.setValue('', true);
										me.setLabelsState(itemHandler);
									}		
								});								
							},
							getValue: function(isStrict) {
								var r = {}; 

								var items = this.getItems();
								if(!(items instanceof Array)) items = [items];

								$.each(items, function(i, itemHandler) {
									if(itemHandler && itemHandler.getValue) {
								
										var id = ox.el.getClassByPrefix(itemHandler.getRoot(), 'ox-form-id-') || ox.id();
										id = id.split('ox-form-id-').join('');

										var value = itemHandler.getValue(); 
										if(value !== undefined && value !== null) {
											if(typeof value == 'object') {
												if(value.value !== undefined) value = value.value;
												else if(value.v && !value.c) value = value.v;
												else if(isStrict) value = null;
											}
										}; 

										r[id] = value;
									}		
								});

								return r;
							},
							random: function() {
								var items = this.getItems(); 
								$.each(items, function(i, itemHandler) {
									if(itemHandler && itemHandler.random && typeof itemHandler.random == 'function') itemHandler.random();
								});
							},
	
							// Private functions UI
						
							render: function(args) {
								if(!args || !args.items) return;
								log(this.clsId + '.render');
			
								var me = this;
								this.root.html('');
			
								var items = args.items;
								var cfg = [];
								var isInBar = this.root.hasClass('ox-inbar') || args.isInBar;
								var isBorder = !this.root.hasClass('ox-noborder');
								var format = args.format || 'inline';
								
								// Draw items
								$.each(items, function(i, item) {
									if(!item) return;
									if(!item.css) item.css = '';
								
									// Defaults
									if(item.oid) {
										if(!item.css) item.css = '';
										var ioid = item.oid;
										switch(item.oid) {
											case 'inputfield':
											case 'searchfield2':
											case 'searchtextfield':
												ioid = 'textfield';
											case 'dropdown':
											//case 'inputfield':
											//case 'colorpicker':
											case 'searchfield':
											case 'textfield':
												var ioid 
												item.css += ' ox-form-trans ox-form-full w100';
												if(ioid == 'dropdown' || ioid == 'textfield' || oid == 'colorpicker') item.css += ' ox-text-right';
												if(ioid == 'inputfield' || ioid == 'textfield' || ioid == 'searchfield') item.css += ' ox-form-label-compact';
												break;
											case 'toggle':
												item.css += ' ox-form-trans';
												break;
										}
									}
									
									var isNoItem = item.css && item.css.indexOf('ox-form-noitem') >= 0;
									if(isNoItem) {
										cfg.push(item);
										return;
									}
									
									var line = [];
									var isTrans = item.css && item.css.indexOf('ox-form-trans') >= 0;
									var isFull = item.css && item.css.indexOf('ox-form-full') >= 0;
									if(isFull) item.css += ' w100';
									item.css += ' ox-form-element z1';
									
									switch(format) {
										default:
											item.css += ' ox-form-right';
											line.push({
												oid: 'bar2', 
												css: 'ox-height-auto rel ox-right ox-dark-col-pitch-2-back' + 
													(isBorder ? ' ox-border-between' : '') + 
													(isInBar && !isFull ? 
														' pr15' + (args.isInBar == 'right' ? ' pl5' : ' _pl15') : 
														''
													) + ' ' + 
													(item.cssBar || '') + ' ' + 
													(args.cssItem || ''), 
												c: [
													item,
													{oid: 'label', css: 'ani-005 ox-form-label abs t00 hleft-i col-medium-1 ox-dark-col-night-3' + (isInBar ? (args.isInBar == 'right' ? ' ml5' : ' ml15') : ''), style: {'pointer-events': 'none', 'z-index': 2}, text: item.formlabel},
												],
											});
											break;
										case '_top':
											line.push({t: 'div', css: 'font bold mb5 ox-dark-col-white ' + (i ? ' mt10' : '') + (isInBar ? (args.isInBar == 'right' ? ' ml5' : ' ml15') : ''), text: item.formlabel});
											line.push({
												oid: 'bar2', 
												css: 'ox-height-auto rel ox-border-thin-top-i' + (isTrans ? '' : ' ox-col-ui-dialog-1-back ox-border-thin-bottom-i') + (isInBar && !item.css || !(item.css.indexOf('ox-formfull') >= 0) ? ' pr15' + (args.isInBar == 'right' ? '' : ' pl15') : ''), 
												c: [
													item,
												],
											});
											break;
										case '_left':
											line.push({
												oid: 'bar2', 
												css: 'ox-height-auto rel ox-stretch no-crop' + (i ? ' mt10' : '') + (isInBar ? ' pr15' + (args.isInBar == 'right' ?  ' pl5' : ' pl15') : ''), 
												c: [
													{oid: 'label', css: 'flex-fix hleft-i', style: {'flex': '1 1 ' + (args.width || '40%'), 'pointer-events': 'none'}, text: item.formlabel},
													{t: 'div', css: (isTrans ? '' : 'ox-shadow-1 ox-dark-shadow-none ox-col-ui-dialog-1-back br2 no-crop') + (!isFull ? ' pl5 pr5' : ''), style: {'_flex': '1 1 80%'}, c: [item]},
												],
											});
											break;
									}
									cfg.push(line);
								}); 
								ox.node(cfg, this.root);
								
								var f = this.root.data('ox-handler-frame');
								f.update();
								
								// Connect item events
								var items = this.getItems();
								$.each(items, function(i, itemHandler) {
									if(!itemHandler) return;
									
									if(itemHandler.reset) itemHandler.reset({
										onSelect: function() { me.onSelect(); }, 
										onChanged: function(args) { me.onChanged(args, itemHandler); },
										onFocus: function() { me.setLabelsState(itemHandler, true); },
										onBlur: function() { me.setLabelsState(itemHandler); },
									}); 
									me.setLabelsState(itemHandler);
									
									ox.el.onRefresh(() => {
										me.setLabelsState(itemHandler);
									});
								});
							},
							setAllLabelStates: function() {
								var me = this;
								var items = this.getItems(); 
								
								items.forEach((itemHandler) => { 
									if(!itemHandler) return;
									me.setLabelsState(itemHandler);
								})
							},
							setLabelsState: function(itemHandler, isCompact) { 
								var isLabelCompact = itemHandler.getRoot && itemHandler.getRoot().hasClass('ox-form-label-compact');
								if(!isLabelCompact) return;
								
								var v = itemHandler.getValue();
								var isShowCompact = isCompact || itemHandler.getRoot().hasClass('ox-focused') || (v !== undefined && v != '');
								//log({id:'setLabelsState', isLabelCompact, v, isShowCompact, isCompact, css: itemHandler.getRoot().attr('class')})
								
								ox.css($(itemHandler.getRoot().parent().find('.ox-form-label')), 'ox-compact', isShowCompact);
								ox.css($(itemHandler.getRoot().parent()), 'pt20', isShowCompact);
								ox.css($(itemHandler.getRoot()), 'ox-form-label-space', isShowCompact);
							},
							
							// Private events
							
							onChanged: function(args, itemHandler) {
								if(itemHandler) this.setLabelsState(itemHandler);
								if(this.args.onChanged) this.args.onChanged({value: this.getValue(), form: this, handler: itemHandler});
							},
							onSelect: function() {
								//log(this.getValue());
								
								if(this.args.onSelect) this.args.onSelect(this.getValue(), this);
							},
					
};omnia.ui.form.html = {
							
							oid: 'frame2',
							css: 'ox-form',
							
};omnia.ui.formitem.html = {
	
							oid: 'bar2', css: 'ox-formitem ox-split pl15 pr15 no-crop ox-data ox-border-between', c: [
								{oid: 'label', css: 'ox-id-label ox-id-name z1 ani-005'},
								{t: 'div', css: 'ox-id-option ox-id-childs'},
							]
							
};omnia.ui.formitemdropdown.html = {
	
							oid: 'formitem', onRendered: function(elem, args) { 
								if(args) { 
									//log('omnia.ui.formitemdropdown.onRendered: Set dropdown', args);
									var opt = $(elem.find('.ox-id-option')); 
									if(opt) ox.node({oid: 'dropdown', css: 'ox-id-data-sub abs t00 w100 h100 ox-text-right', args: args}, opt);
								}
							}
							
};omnia.ui.formiteminput.html = {
						
							oid: 'formitem', onRendered: function(elem, args) { 
								if(args) { 
									args.formitem = elem;
									var opt = $(elem.find('.ox-id-option')); 
									if(opt) ox.node({oid: 'inputfield', css: 'ox-id-data-sub t00 w100 h100', placeholder: args.placeholder || '', style: 'position:absolute !important;', args: args}, opt);
								}
							}
							
};omnia.ui.formitemstatic.html = {
							
							oid: 'formitem', option: {
								c: [
									{oid: 'label', css: 'ox-id-data-sub col-medium-4 ox-dark-col-dark ox-id-value', style: 'min-width:auto;', text: 'Value'},
								]
							}
							
};omnia.ui.formitemtoggle.html = {
							
							oid: 'formitem', css: 'ox-data', onRendered: function(elem, args) { 
								if(args) { 
									//log('omnia.ui.formitemtoggle.onRendered: Set toggle', args);
									var opt = $(elem.find('.ox-id-option')); 
									if(opt) ox.node({oid: 'toggle', css: 'ox-id-data-sub', args: {items: args.items, active: args.active, onActivate: args.onActivate}}, opt);
								}
							}
							
};omnia.ui.numberfield.handler = {

							clsId: 'omnia.ui.numberfield',
							args: null,
							root: null,
							elems: null,
							v: 0,
							input: null,
							min: 0,
							step: 1,
							lastValue: null,
							
							init: function(args) {
								var me = this;
								this.args = args;
								this.root = args.root;
								var e = this.elems = ox.el.getAll(args.root);
			
								e.minus.on(ox.b.CLICK, function() { me.setValue(me.v - me.step); me.focus(); });
								e.plus.on(ox.b.CLICK, function() { me.setValue(me.v + me.step); me.focus(); });
								e.number.on('beforeinput', function(event) { me.onBeforeInput(event); });
								e.number.on('input', function(event) { me.setValue(parseInt(e.number[0].value), event); });
								
								if(args.isKeypad) {
									var id = ox.id();
									ox.node({t: 'div', c: [
										{oid: 'textarea', css: 'br4 ml5 mr5 mt5 ox-border-i inline ox-id-' + id, style: {'height': 35, 'width': 50, 'line-height': 35}},
										{
											oid: 'keyboard', 
											css: 'flex-fix z1000 ox-id-bar-cursor',
											args: {
												isStatic: true,
												layout: 'numberpad',
												ref: id,
												onKeyPressed: function() {
													//me.onInput();
												},
											},
										},
									]}, e.keypad);
									e['input-native'].addClass('ox-hidden');
								}
								
								if(!args.value) args.value = 0;
								this.reset(args);
							},
							getRoot: function() { return this.root; },
							reset: function(args) {
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.min) this.args.min = args.min;
								if(args.value !== undefined) this.setValue(args.value);
								if(args.step !== undefined) this.step = args.step; 
							},
							focus: function() {
								this.elems.number.focus();
							},
							getValue: function() { return this.v; },
							onBeforeInput: function(event) {
								this.lastValue = parseInt(this.elems.number[0].value);
							},
							setValue: function(v, event) { 
								if(event && this.lastValue == 0) v = parseInt(event.originalEvent.data);
								
								v = parseInt(v);
								//log({v, is: (v < this.args.min), min: this.args.min});
								if(!v || v < this.args.min) v = this.args.min || 0;
								if(this.args.max && v > this.args.max) v = this.args.max;
								if(this.args.mod) v %= this.args.mod;
								
								//if(this.lastValue == 0 && this.args.shift) v /= this.args.shift;
								
								this.v = v;
								this.elems.number[0].value = (this.args.format && this.args.format == '00' && v < 10 ? '0' : '') + v.toString();
								
								if(this.args.onChanged) this.args.onChanged({value: this.v});
							},

};omnia.ui.numberfield.html = {
							t: 'div', css: 'ox-numberfield ox-data rel inline', c: [
								{t: 'div', css: 'ox-id-input-native hright', c: [
									{oid: 'buttonicon', css: 'ox-id-minus ox-medium ox-inline', icon: 'fa fa-minus ox-font-10-i'},
									{oid: 'input', type: 'tel', css: 'ox-id-number online ox-inline ox-border-i br4 ox-inbar _ox-alone', style: {'text-align': 'center', 'width': 50, 'padding-left': '0px', 'padding-right': '0px'}},
									{oid: 'buttonicon', css: 'ox-id-plus ox-medium ox-inline', icon: 'fa fa-plus ox-font-10-i'},
								]},
								{t: 'div', css: 'ox-id-keypad', style: {'max-width': 200}},
							]
};omnia.ui.slider.handler = {

							clsId: 'omnia.ui.slider.handler',
							id: null,
							root: null,
							elems: null,
							handle: null,
							p: null,
							
							init: function(args) {
								var id = this.id = 'ox-slider-' + omnia.tools.getUniqueId();
								var me = this;
								this.args = args;
								
								ox.el.onRefresh(() => {
									me.render(args);
								});
								
							},
							render: function(args) {
								var me = this;
								this.root = args.root; 
								this.elems = ox.el.getAll(this.root, true);
								var handle = this.handle = ox.el.get('handle', this.root);
								
								if(!this.args.cfg.handle) ox.node({
									t: 'div',
									css: 'ox-id-slider-handle z1 ox-col-ui-dialog-1-back ox-border cropped col-white br4', 
									style: {'width': 45, 'height': 35},
									//style: 'background-color:rgba(255, 255, 255, 0.75) !important; border-width:1.5px; _height:44px; line-height:32px; border-radius:4px;', 
									html: '<i class="fa fa-sort fa-rotate-90 col-highlight"></i>'
								}, handle);
								

								this.setDrag();
								//log(handle);
							},
							setDrag: function(t) {
								var me = this;
								if(!this.handle || !this.handle.draggable) {
									if(!t || t < 5) setTimeout(() => me.setDrag(t ? t + 1 : 1), 500);
									return ox.error(this.clsId + '.setDrag: draggable not available (try ' + t + ')');
								}
								log(this.clsId + '.setDrag: t = ' + t);
								
								this.handle.draggable({
									axis: 'x',
									containment: 'parent',
									drag: function(event, ui) {
										me.onDrag(event, ui);
									},
									stop: function(event, ui) {
										me.onDragEnd(event, ui);	
									},
								});
							},
							getRoot: function() {
								return this.root;
							},
							reset: function(args) {
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.onDragEnd) this.args.onDragEnd = args.onDragEnd;
								if(args.p) this.setValue(args.p);
								if(args.value) this.setValue(args.value);
								
								//this.setDrag();
							},
							setValue: function(p) {
								this.setPos(p);
							},
							getValue: function() {
								return this.p;
							},
							setPos: function(p) {
								if(!this.root) return;
								var w = this.root.width();
								var wh = this.handle.width();
			
								this.handle.css('left', (p * (w - wh - 1)) + 'px');
								this.p = p;
								this.setProgress(this.p);
							},
							onDrag: function(event, ui) {
								var w = this.root.width();
								var wh = this.handle.width();
								
								this.p = ui.position.left / (w - wh - 1);
								this.setProgress(this.p);
								
								if(this.args.onSelect) this.args.onSelect(this.p);
								if(this.args.onChanged) this.args.onChanged({value: this.getValue()});
								
							},
							onDragEnd: function(event, ui) {
								if(this.args.onDragEnd) this.args.onDragEnd(this.p);
							},
							setProgress: function(p) {
								if(p > 1) p = 1;
								if(p < 0) p = 0;
								if(p === undefined) p = this.p;
								this.elems['back-progress'].css('width', (p * 100) + '%');
							},
							onResize: function() {
								this.setPos(this.p);
							},

};omnia.ui.slider.html = {

							t: 'div', css: 'ox-slider inline h100 _ox-d rel ox-resize', c: [
								{t: 'div', css: 'ox-id-back abs t00 col-highlight-10-back cropped', style: 'height:5px; width:calc(100%); top:' + (40 / 2) + 'px', c: [
									{t: 'div', css: 'ox-id-back-progress h100 col-blue-back'},
								]},
								{oid: 'label', css: 'ox-id-handle col-white font ox-inline z1000', /*c: [
									{t: 'i', css: 'fa fa-grip-lines-vertical h100'},
								]*/},
							]
							
};omnia.ui.tags.handler = {

							id: null,
							root: null,
							//onSelect: null,
							tags: null,
			
							init: function(args) {
								var id = this.id = 'ox-tags-' + ox.id();
								var me = this;

								this.args = args;
								this.root = args.root.hasClass('ox-inbar') ? args.root.parent() : args.root;
								if(args.root.hasClass('ox-inbar')) args.root.addClass('ox-hidden');
			
								//this.onSelect = args.onSelect;
								this.reset(args);
							},
							
							// Public functions
							
							reset: function(args) {
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.onSelect) this.args.onSelect = args.onSelect;
								
								if(args.tags) args.items = args.tags;
								if(args.selected) args.value = args.selected;
								if(args.items || args.value) this.setTags(args);
							},
							setValue: function(value) {
								this.setTags({value: value});
							},
							getValue: function(asObject) {
								return this.getTags(asObject);
							},
							
							// Private functions - UI
							
							getRoot: function() {
								return this.root;
							},
							render: function() {
								ox.el.get('tag', this.root).remove();
								
								var me = this;
								var cfg = [];
								$.each(this.tags, function(tag, info) {
									var isSet = info.selected;
									var label = info.label || tag;
									if(label[0] == '#') label = ox.tx(label);
									
									cfg.push({
										oid: 'button',
										css: 'ox-medium ox-inline ox-id-tag ox-id-tag-' + tag + (!isSet ? ' ' + (me.args.cssUnselected || 'ox-soft') : ' ' + (me.args.cssSelected || 'ox-green')),
										label: '<span css="vmiddle">' + label + '</span>' + (!isSet || me.args.isNoCheck ? '' : '<i class="ml5 fa fa-check ox-font-9-i vmiddle ox-id-icon" style="width:10px; margin-top:-2px;"></i>'),
										style: {'border-radius': 45},
										click: function(e, elem) { me.onSelectTag(tag); },
									});
								});
								this.root.find('.ox-id-tag').remove();
								ox.node(cfg, this.root);
							},
							
							// Private functions - Data
						
							setTags: function(args) {
								var me = this;
								
								if(args.items) {
									this.tags = {};
								
									if(typeof args.items == 'string') args.items = args.items.split(',');
									ox.each(args.items, function(i, item) {
										if(typeof item == 'string') item = {value: item};
										if(!item.value) item.value = item.label || ox.id();
										me.tags[item.value.toString()] = item;
									});
								}
								if(args.value) {
									var value = args.value.split(',');
									ox.each(me.tags, function(id, info) { delete info.selected; });
									ox.each(value, function(i, id) { me.tags[id].selected = true; });
								}
								
								
								//$.each(args.items ? args.items.split(',') : [], function(i, tag) { me.tags[tag] = {selected: false}; });
								//$.each(args.value ? args.value.split(',') : [], function(i, tag) { if(me.tags[tag] !== undefined) me.tags[tag] = {selected: true}; });
								
								this.render();
							},
							onSelectTag: function(tag) {
								this.tags[tag].selected = !this.tags[tag].selected;
								this.render();
								
								if(this.args.onSelect) this.args.onSelect(this.getTags());
								if(this.args.onChanged) this.args.onChanged({value: this.getTags()});
							},
							getTags: function(asObject) {
								return asObject || this.args.asObject ? this.tags : this.tagsToString();
							},
							tagsToString: function() {
								var r = [];
								ox.each(this.tags, function(id, info) { if(info.selected) r.push(id); });
								
								return r.join(',');
								//return Object.keys(this.tags).join(',');
							},

};omnia.ui.tags.html = {

							t: 'div', css: 'ox-tags inline h100'
							
};omnia.ui.ai.handler = {
							
							clsId: 'omnia.ui.ai.handler',
							
							args: null,
							elems: null,
							root: null,
							formatPrompt: {
								mindmap: ' - Structure the result in the form of a mind map and return it in JSON format, where in each node "v" contains the text content and "c" is an array of child nodes. Nodes without child nodes do not contain "c".',
								json: '- Give the response in a proper JSON format', //' - Give the result in JSON format',
							},
							
							messages: [],
							
							init: function(args) {
								this.args = args;
								this.render(args);
								if(args.onRegister) args.onRegister(this);
								
								this.messages = [];
								
								this.addPrompt({type: 'output', text: 'Please enter your prompt', isInactive: true, id: 'initial'});
								if(args.prompt) this.elems.input.setValue(args.prompt.substr(0, 4096)); //this.send(args.prompt);
								
								
								/*var text = 'Text:\n- abc\n- def\n\nmore\n1. abc\n\n2. def\n\n- ghi\n- jkl\n- mno\n\n1. pqr\n\ntest\n\n1. stu';
								log({text});
								var html = ox.str.replaceLists(text, 'html');
								log({html});
								var node = ox.str.replaceLists(text, 'node');
								//var node2 = '{"c": [' + node + ']}';
								log({node});
								//var html = this.getHtml(text);
								//log(ox.node({t: 'div', html}));*/
								
								//log({node: ox.str.replaceLists('Simple text', 'node')});
								
								//if(args.format) this.setFormat(args.format);
								if(args.isSend || args.isDirect) this.send();
							},
							
							// Static functions
							
							open: function(args) {
								log(this.clsId + '.open');
								if(!args) args = {};
							
								args.isPopup = true;
								ox.ov.show({
									delay: true,
									onClose: args && args.onClose ? function() { args.onClose(args); } : null,
									//onClose: args && args.onClose ? function() { if(args.isSave) args.onClose(true, args.data, true); else args.onClose(); } : null,
									onRendered: function(overlay) { args.overlay = overlay; },
									isModal: true,
									isScroll: true,
									frame: {
										oid: 'dialog',
										title: 'ChatGPT',
										/*caption: [
											{t: 'img', src: 'https://upload.wikimedia.org/wikipedia/commons/4/4d/OpenAI_Logo.svg', style: {'height': 17, 'margin-top': 10}},
										],*/
										css: 'ox-body-flex _ox-noactions',
										style: {'max-height': ox.pf.isPhone ? '85%' : null, 'height': 600, 'max-width': '100%', 'width': 800},
										cancel: args && args.onClose ? null : '#close',
										c: [
											{oid: 'ai', css: 'h100', args: args},
										],
									},
								});
								
							},

							// Protected functions - UI
							
							getRoot: function() {
								return this.root;
							},
							send: function(value, isTest) {
								log(this.clsId + '.send');
								
								try {
									var e = this.elems;
									var prompt = value || this.getPromptValue();
									if(!prompt && !isTest) return;
									if(prompt.length > 4096) prompt = prompt.substr(0, 4096);
									
									this.clearPrompt();
									this.focus(false, true);

									this.removePrompt('initial');
									this.addPrompt({type: 'input', text: prompt, format: this.args.format || 'text'});
									this.addPrompt({type: 'output', isLoading: true, id: 'loading'});
									
									if(!isTest) this.sendRequest({text: prompt, format: this.args.format || 'text'});
									else {
										var me = this;
										setTimeout(() => me.receive({
											messages: [{role: 'assistant', content: typeof isTest == 'string' ? isTest : ox.str.getRandomText()}], 
											data: {nodata: true},
										}), 100);
									}
									this.scrollToBottom();
								}
								catch(e) { ox.error({id: this.clsId + '.send', e}); }
							},
							receive: async function(data, prompt) {
								log(this.clsId + '.receive');
								
								// Build item
								var item = {};
								if(!data || data.error || !data.messages) {
									item.isError = true;
									item.data = data;
								} else {
									this.messages = data.messages;
									item.text = this.getLastMessage('assistant');
									item.response = data.response;
								}
								
								item.type = 'output';
								item.prompt = prompt;
								
								// Parse data
								await this.parseResponse(item);
								
								// Output
								var e = this.elems;
								this.removePrompt('loading');
								if(!this.args.isDirect) e['input-wrapper'].removeClass('ox-hidden');
								this.addPrompt(item);
								this.scrollToBottom();
								
								// Direct mode
								if(this.args.isDirect && item.node) { this.args.item = item; this.args.overlay.close(); }
							},
							onActivate: function() {
								//if(this.elems) this.elems.input.focus();
							},
							onDeactivate: function() {
								this.focus(false);
							},
							
							// Private functions - UI
							
							render: function(args) {
								var me = this;
								this.root = args.root;
								var e = this.elems = ox.el.getAll(args.root, true);
								
								// Appearance
								if(!args.isPopup) e.logo.removeClass('ox-hidden');
								if(!ox.pf.isPhone && !args.isPopup) {
									e['body-wrapper'].getRoot().removeClass('p15').addClass('pb15 pt15');
									e['input-wrapper'].removeClass('ox-border-thin-top ox-shadow-light-3-c').addClass('ox-border br4 ox-shadow-light-3').css('margin-bottom', 90);
									//e['button-send'].addClass('ox-inline');
								}
								
								// Keys
								var text1 = 'Text:\n- abc\n- def\n\nmore\n1. abc\n\n2. def\n\n- ghi\n- jkl\n- mno\n\n1. pqr\n\ntest\n\n1. stu';
								var text2 = 'Some\n```json\n' + JSON.stringify({text: 'Test'}) + '\n```\ntext';
								var text3 = '```svg\n<svg width="200px" height="200px" xmlns="http://www.w3.org/2000/svg" version="1.1">\n<rect width="100%" height="100%" fill="#f4f4f4" />\n<circle cx="50%" cy="50%" r="90" fill="#b3d9ff" />\n<rect x="50" y="50" width="100" height="100" fill="#809fff" />\n<line x1="50" y1="50" x2="150" y2="150" stroke="#404040" stroke-width="5" />\n<line x1="150" y1="50" x2="50" y2="150" stroke="#404040" stroke-width="5" />\n<path d="M 100,50 L 150,100 L 100,150 L 50,100 Z" fill="#ffcc99" stroke="#404040" stroke-width="3"/>\n</svg>\n```';
								
								e.input.reset({
									layout: ox.pf.isPhone ? 'cursor-input-mobile-extended' : (ox.pf.isTablet ? 'cursor-extended' : 'cursor-input'),
									options: [
										{oid: 'sep', css: 'ox-focus-only ox-inline'},
										{oid: 'toggle', oxid: 'options-format', css: 'ox-hidden', args: {
											items: [{label: '<i class="fa fa-align-left"></i>', value: 'json'}, {label: '<i class="fa fa-t"></i>', value: 'text'}],
											active: 1,
										}},
										{oid: 'dropdown', css: 'ox-id-options-global ox-inline ox-medium', args: {
											isMenu: true,
											items: (me.getPromptTemplates() || []).map(t => {
												try {
													var icon = t.prompt.includes('[...]') ? 'fa fa-font' : 'fa fa-paper-plane';
													var label = t.label; //ox.ui.text.markup.render(t.split('[...]').join('...'));
													var action = t.prompt.includes('[...]') ? () => { e.input.setValue(t.prompt.split('[...]').join('').split('#bold{').join('').split('}').join('')); e.input.focus(); } : () => me.send(t.prompt);

													return {oid: 'buttonicon', css: 'ox-id-close ox-left ox-weight-regular-i', icon: icon + ' ox-before', label, click: action};
												}
												catch(e) {
													
												};
											}).concat([
												{oid: 'sep'},
												//{oid: 'buttonicon', css: 'ox-id-close', icon: 'fa fa-paper-plane ox-before', label: 'Test How are you?', click: () => me.send("Wie geht's dir?")},
												//{oid: 'button', css: 'ox-id-close', label: 'Test List', click: () => me.send("Liste drei Nobelpreistraeger:innen")},
												{oid: 'button', css: 'ox-id-close', label: 'Test String Random', click: () => me.send(null, true)},
												{oid: 'button', css: 'ox-id-close', label: 'Test String List', click: () => me.send(null, text1)},
												{oid: 'button', css: 'ox-id-close', label: 'Test JSON', click: () => me.send(null, text2)}, 
												{oid: 'button', css: 'ox-id-close', label: 'Test SVG', click: () => me.send(null, text3)}, 
												{oid: 'sep'},
												{oid: 'button', css: 'ox-id-close col-red', label: 'Clear', click: () => me.clear()},
											]),
										}},
										{oid: 'buttonicon', css: 'ox-id-button-send ox-green ox-inline ml5', icon: 'fa fa-paper-plane', click: () => me.send()},
										//ox.pf.isPhone ? null : {oid: 'buttonicon', css: 'ox-id-button-send ox-green ox-inline ml5', icon: 'fa fa-paper-plane ox-before', label: '#send', click: () => me.send()},
									],
								});
								
								if(this.args.isDirect) e['input-wrapper'].addClass('ox-hidden');
								else if(ox.pf.isDesktop) this.focus(true);
								
								//ox.node({oid: 'pattern', css: 'abs-i w100 h100'}, this.root);
							},
							addPrompt: function(args) {
								var prompt = args.type == 'input' ? this.getInputPrompt(args) : this.getOutputPrompt(args);
								ox.node(prompt, this.elems.body);
								
								//$(document).scrollTop($(document).height());
								//this.elems['body-wrapper'].getRoot()[0].scrollTop = Number.MAX_SAFE_INTEGER;
								this.scrollToBottom();
							},
							removePrompt: function(id) {
								this.root.find('.ox-id-ai-prompt-' + id).remove();
							},
							clear: function() {
								this.messages = [];
								this.elems.input.setValue('');
								this.elems.body.html('');
								this.addPrompt({type: 'output', text: 'Please enter your prompt', isInactive: true, id: 'initial'});
							},
							scrollToBottom: async function() {
								var me = this;
								await ox.el.renderFrame();
								ox.el.onRefresh(() => me.elems['body-wrapper-3'].getRoot().scrollTop(me.elems['body-wrapper-2'].getRoot().height()));
							},
							getInputPrompt: function(args) {
								if(!args) args = {};
								if(!args.text) args.text = 'No request'; //omnia.text.loremShort;
								
								var text = args.text;
								if(args.format != 'text') text = text.replace(this.formatPrompt[args.format], '');
								text = ox.str.max(text, 1000);
								text = text.replace(/\n/, '<br>');

								return {t: 'div', css: '_ox-border-thin-between flex _ox-col-ui-dialog-1-back ox-dark-col-pitch-1-back', c: [
									{t: 'div', css: '_ox-col-ui-dialog-1-back p10 flex-fix flex-center w30px', c: [
										{t: 'i', css: 'fa fa-user col-medium-4'},
									]},
									{t: 'div', css: 'p15 flex-1 textselect col-medium-4 ox-dark-col-medium-1 font _font-code', html: text},
								]};
							},
							getOutputPrompt: function(args) {
								if(!args) args = {};
								
								// Options
								var e = this.elems;
								var me = this;
								var isPlaying = false;
								var hasData = () => args.data;
								var id = args.id || ox.id();
								
								var notification = (text) => {
									omnia.ui.board2.trigger({evt: {
										id: 'copy', 
										type: 'info', 
										css: '_col-green-back _col-white', 
										text: '<i class="fa fa-copy ox-before"></i>' + text,
									}});
								};
								var tts = () => { 
									$('.ox-id-ai-prompt-' + id).find('.ox-id-play-icon').toggleClass('fa-volume-low fa-pause'); 
									if(!isPlaying) ox.client.tts.speak2({text: args.text, locale: 'de-DE'}); 
									else ox.client.tts.stop();
									isPlaying = !isPlaying;
								};
								var clipboard = () => { e.input.blur(); ox.client.copyToClipboard(args.text, true); };
								var clipboardPrompt = () => { e.input.blur(); ox.client.copyToClipboard(me.getLastMessage('user'), true); };
								
								var copyNode = !this.args.app ? null : (format, tag, isAdd) => {
									args.text = args.text.split('\"').join('\\"');
									var isData = hasData();
									
									var clip = {
										meta: {type: 'omnia-mindmap'}, 
										data: {v: args.text.split('\n').join('<br>')},
									};
									
									if(isData) {
										clip.data = args.node;	
									} else if(format == 'text') {
										var text = args.text;
										if(text[0] == '"') text = text.substr(1);
										if(text[text.length - 1] == '"') text = text.substr(0, text.length - 1);
										clip.data = {v: args.text};
										notification('Copied as Single Node without Breaks');
									} else if(format == 'sub') {
										clip.data = {v: '', c: !args.text.includes('\n') ? [{v: args.text}] : args.text.split('\n').map(t => { return {v: t}; })};
										if(tag) clip.data.v = tag;
										notification('Copied as Subnodes');
									} else if(format == 'list') { 
										clip.data = ox.str.replaceLists(args.text, 'node');
										if(!clip.data.v) clip.data.v = '';
										notification('Copied as Sub Nodes');
									} else {
										clip.data = {v: args.text.split('\n').join('<br>')};
										notification('Copied as Single Node');
									}

									clip.data = {v: '#iconmicrochip', c: isData ? clip.data.c : [clip.data]};
									
									if(isAdd && me.args.onAdd) { if(me.args.overlay) me.args.overlay.close(); me.args.onAdd(clip); }
									else if(me.args.onCopy) me.args.onCopy(clip);
									else if(me.args.app && me.args.app.copy) me.args.app.copy(clip);
								};
								var details = () => { ox.ui.obj.show(args); };
								var resend = () => { me.send(me.getLastMessage('user')); };
								var reuse = () => { me.elems.input.setValue(me.getLastMessage('user')); }
								
								// Output
								var html = args.objs ? null : (args.html || args.text); //this.textToOutput(args); //null : (args.text ? ox.str.replaceLists(args.text) : '');
								var objs = args.objs ? args.objs : null; // this.dataToOutput(args) : null;
								
								var isData = hasData();
								var ref = {};
								
								return {t: 'div', css: 'flex ox-id-ai-prompt-' + id + (args.isInactive && 0 ? '' : ' _ox-border-thin-between'), onRendered: elem => ref.elem = elem, c: [
									{t: 'div', css: 'ox-col-ui-dialog-1-back ox-dark-col-pitch-1-back pr10 pl10 flex-fix flex-center w30px', c: [
										{t: 'i', css: 'fa fa-' + (args.isError ? 'exclamation-triangle col-red' : 'microchip col-medium-4') + ' ox-font-14'},
									]},
									{oid: 'frame2', css: 'br4 ' + (args.isInactive ? ' ' : ' _ox-border col-highlight-05-back ox-dark-col-pitch-3-back ox-dark-border-none'), c: [
										
										// Loader
										!args.isLoading ? null : {oid: 'loadcontent', onReady: (elem, load) => { ref.loader = load; load.progress(true); }},
										
										// Content
										args.isLoading || args.isError ? null : {
											t: 'div', 
											oxid: 'prompt-output', 
											css: 'ox-dark-col-light-1 font _font-code ' + (args.isInactive ? '' : ' _pt15 pl15 pr15 _pb5') + ' flex-1 textselect ' + (args.isInactive ? 'col-medium-4 _italic' : ''), 
											html, 
											c: objs,
										},
										
										// Error
										!args.isError ? null : {t: 'div', css: 'ox-red flex-1 pt15 pl15 pr15 pb5 col-red', text: '#error-occured'},
										
										// Options
										args.isLoading || args.isInactive ? null : {oid: 'bar2', css: 'ox-right ox-alone', c: [
											!ox.pf.isPhone || args.isError ? null : {oid: 'buttonicon', css: 'ox-id-play ox-inline ox-medium', icon: 'ox-id-play-icon fa fa-volume-low', click: tts},
											!ox.pf.isPhone || args.isError ? null : {oid: 'sep', css: 'ox-inline'},
											
											ox.pf.isPhone || args.isError ? null : {oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-copy', click: clipboard},
											!me.args.onAdd ? null : {oid: 'buttonicon', css: 'ox-inline ox-medium col-green-i', icon: 'fa fa-save', click: () => copyNode('list', null, true)},
											//ox.pf.isPhone || !copyNode || args.isError ? null : {oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-copy', click: copyNode},
											ox.pf.isPhone || !copyNode || args.isError ? null : {oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-code-fork fa-rotate-90', click: () => copyNode('list')},

											!args.isError ? null : {oid: 'button', css: 'ox-inline ox-medium', label: 'Resend', click: resend},

											{oid: 'dropdown', css: 'ox-inline', args: {
												isFixedLabel: ox.pf.isPhone,
												isMenu: !ox.pf.isPhone,
												label: '#copy',
												items: [
													{oid: 'button', css: 'ox-id-close', label: '#copy-to-clipboard', click: clipboard},
													isData || !copyNode ? null : {oid: 'sep'},
													!isData ? null : {oid: 'button', css: 'ox-id-close', label: 'Copy as Nodes', click: () => copyNode()},
													isData || !copyNode ? null : {oid: 'button', css: 'ox-id-close', label: 'Copy as Sub Nodes', click: () => copyNode('list')},
													isData || !copyNode ? null : {oid: 'button', css: 'ox-id-close', label: 'Copy as Single Node', click: () => copyNode('')},
													isData || !copyNode ? null : {oid: 'button', css: 'ox-id-close', label: 'Copy as Single Node without Breaks', click: () => copyNode('text')},
													isData || !copyNode ? null : {oid: 'button', css: 'ox-id-close', label: 'Copy as Mailtext', click: () => copyNode('sub', '#mailtext')},
													{oid: 'sep'},
													{oid: 'button', css: 'ox-id-close', label: 'Reuse last Prompt', click: reuse},
													{oid: 'button', css: 'ox-id-close', label: 'Clipboard last Prompt', click: clipboardPrompt},
													{oid: 'button', css: 'ox-id-close', label: 'Resend', click: resend},
													{oid: 'sep'},
													{oid: 'button', css: 'ox-id-close', label: '#info', click: details},
												],
											}},
											//{oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-ellipsis-h', click: details},
											//{oid: 'dropdown', css: 'ox-inline', label: '<i class="fa fa-copy"></i>'},
										]},
									]},
								]};
							},
							focus: function(isFocus, isScrollToBottom) {
								var e = this.elems;
								var me = this;
								ox.el.onRefresh(() => {
									if(isFocus) e.input.focus(); else e.input.blur();
									if(isScrollToBottom) me.scrollToBottom();
								});
							},
							clearPrompt: function() {
								this.elems.input.setValue('');
							},
							
							// Private functions - Data
							
							getPromptValue: function() {
								var v = this.elems.input.getValue();
								if(this.args.format) v = v + this.formatPrompt[this.args.format];
								//if(this.getFormat() == 'json') v = v + this.jsonPrompt;
								return v.split('<br>').join('\n');
							},
							setFormat: function(format) {
								return ox.el.get('options-format', this.root, true).setValue(format);
							},
							getFormat: function() {
								return ox.el.get('options-format', this.root, true).getValue().value;
							},
							sendRequest: function(args) {
								var me = this;
								
								this.messages.push({role: 'user', content: args.text});
								
								ox.net.get({
									server: 'https://haustein.info/server-dev/',
									param: {
										cmd: 'openai',
										task: 'chat',
										log: 'omnia',
										messages: JSON.stringify(this.messages),
									},
									timeout: 2 * 60 * 1000,
									method: 'POST',
									onResponse: function(args2) {
										//log({args2});
										me.receive(args2 && args2.data && args2.data.data ? args2.data.data : null, args);
									},
								});
							},
							getLastMessage: function(role, messages) {
								if(!messages) messages = this.messages;
								messages = messages.filter(m => m.role == role);
								if(!messages.length) return '';
								return messages[messages.length - 1].content;
							},
							getPromptTemplates: function() {
								try {
									var all = app && app.space ? app.space.getFilesDataAsMap() : [];
									if(!all) return [];
									
									var f = all.find('#attr-openai-config-prompts');
								
									var prompts = [];
									f.forEach(cfg => { 
										if(!cfg.c) return;
										
										cfg.c.forEach(n => {
											var data = ox.File.nodeToData(n, {isKeepText: true, isRender: false, isNoMarkup: true, isNoElements: true, isLocalization: false, isArgs: true});
											//log({data});
											prompts.push(!data.prompt && n.v ? {
												label: n.v,
												prompt: n.v,
											} : data);
											
											/*if(!n.c) return; 
											n.c.forEach(item => { 
												if(item.c) prompts.push(omnia.app.Mindmap.getText(item, {type: 'text', indent: '', bullet: '', startLevel: 1, br: ' ', useTags: 2}));
												else if(item.v) prompts.push(item.v); 
											});*/ 
										});
									});
									prompts.forEach(p => p.label = ox.ui.text.markup.render(p.label.split('[...]').join('...')));

									//log({prompts})
									return prompts;
									
								}
								catch(e) { ox.error(e); return []; }
								/*return [
									'Translate the following text to british English: [...]',
									'Wie gehts dir?',
									'Liste drei Nobelpreistraeger:innen',
								];*/
							},
							parseResponse: async function(item) {
								try {
									log(this.clsId + '.parseResponse');
	
									if(!item.text) return null;
									
									var text = item.text;
									var html = item.text;
									
									// JSON
									var toJSON = text => {
										var json = ox.str.toJSON(text);
										item.data = json;
										item.node = ox.File.dataToNode(item.data, null, '#t3 ');
										item.objs = [{oid: 'obj', css: 'mt10', args: {obj: json}}];
									}
									
									if(text[0] == '{' && text[text.length - 1] == '}') {
										toJSON(text);
										return;
									}
									
									var reJSON = /```json\n([\s\S^`]*?)\n```/g; //new RegExp('```json\n\{(?:[^{}]|(?R))*\}\n```');
									if(reJSON.test(text)) {
										var json = text.match(reJSON)[0];
										json = json.substr(json.indexOf('{'));
										json = json.substr(0, json.lastIndexOf('}') + 1);
										
										toJSON(json);
										return;
									}
									
									var reSVG = /```(svg|xml)\n([\s\S^`]*?)\n```/g; //new RegExp('```json\n\{(?:[^{}]|(?R))*\}\n```');
									if(reSVG.test(text)) {
										
										var svg = text.match(reSVG)[0];
										svg = svg.substr(svg.indexOf('<'));
										svg = svg.substr(0, svg.lastIndexOf('>') + 1);
										
										log({svg});
										
										item.svg = svg;
										item.html = svg;
										//html = html.replace(reSVG, svg);
										//item.objs = [{t: 'img', src: 'data:image/svg+xml,' + svg, css: 'w100 _wmax300px block'}];
										return;
									}
									
									//
									/*var reSVG = /<svg[^>]*>[\s\S]*<\/svg>/;
									if(0 && reSVG.test(text)) {
										var svg = text.match(reSVG)[0];
										//var html = '<img src="data:image/svg+xml,' + svg.toString('base64') + '" class="w100 ox-border mt15 mb15">';
										//text = text.replace(svg, html);
										html = html.replace('<svg', '<svg class="ox-border mt10 mb10 br4" width="100%"');
										item.svg = svg; 
									} else { */
										// Load Markdown lib
										await new Promise(resolve => ox.b.loadPacks({packs: ['https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js'], onPacksLoaded: () => resolve()}));
										log(this.clsId + '.parseResponse: Markdown loaded');
										
										var converter = new showdown.Converter();
										html = converter.makeHtml(html);

										/*var elem = ox.node({oid: 'div', css: 'ox-plain-content', html: html + ''});
										var svg = elem.find('code.svg');
										if(svg) {
											//svg.parent().html(svg.html());
											//log({html: elem[0].innerHTML});
											
											//var src = "data:image/svg+xml;base64," + btoa(svg[0].innerText); // 'data:image/svg+xml;charset=utf-8,' + svg[0].innerText;
											
											//item.objs = [{t: 'img', src}];
											//return;

											//item.objs = [$(image)];
											//return;
											
											//log({svg: svg[0].innerText});
											
											svg.parent().html(svg[0].innerText);
											html = elem.html();
										}*/
										
										//log({elem, svg, html: svg.html()});
										//html = elem.html();

										item.objs = {oid: 'div', css: 'ox-plain-content', html};
										return;
										
										//html = '<pre>' + html + '</pre>';
										//html = ox.str.replaceLists(html);
									//}
									
	
									item.html = html;
								}
								catch(e) {
									log({id: this.clsId + '.parseResponse', e});
								}
							},
							
};omnia.ui.ai.html = {
							
							oid: 'frame2', css: 'ox-ai ox-col-ui-dialog-1-back ox-dark-col-pitch-1-back ', style: {'display': 'flex', 'justify-content': 'flex-end', 'align-items': 'center'}, c: [
								//{oid: 'bar2', css: 'ox-end ox-border-thin-between', c: []},
								{oid: 'frame2', css: 'ox-id-body-wrapper-3 z1', style: {'max-width': 800}, c: [
									{oid: 'frame2', css: 'ox-id-body-wrapper-2 ox-col-ui-dialog-1-back ox-dark-col-pitch-1-back w100 no-crop _ox-d2', style: {'display': 'flex', 'justify-content': 'flex-end'}, c: [
										{t: 'img', css: 'ox-id-logo ox-hidden _ox-env-phone-hidden', src: 'https://upload.wikimedia.org/wikipedia/commons/4/4d/OpenAI_Logo.svg', style: {'height': 25, 'margin-top': 30}},
										{oid: 'frame2', css: 'ox-id-body-wrapper flex-none p15 _ox-d', style: {'max-height': '100%'}, c: [
											{t: 'div', css: 'ox-id-body font ox-border-thin-between ox-dark-col-medium-1', c: [
												/*{t: 'div', css: 'ox-border-thin-between flex', c: [
													{t: 'div', css: 'ox-col-ui-dialog-0-back p10 flex-fix flex-center w30px', c: [
														{t: 'i', css: 'fa fa-user col-medium-4'},
													]},
													{t: 'div', css: 'p15 flex-1 textselect col-medium-4', text: '#loremShort'},
												]},
												{t: 'div', css: 'ox-border-thin-between flex', c: [
													{t: 'div', css: 'ox-col-ui-dialog-0-back p10 flex-fix flex-center w30px', c: [
														{t: 'i', css: 'fa fa-microchip col-medium-4 ox-font-14'},
													]},
													{oid: 'frame2', c: [
														{t: 'div', css: 'pt15 pl15 pr15 pb5 flex-1 textselect', text: '#lorem'},
														{oid: 'bar2', css: 'ox-right ox-alone', c: [
															{oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-volume-low'},
															{oid: 'sep', css: 'ox-inline'},
															{oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-clipboard'},
															{oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-copy'},
															{oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-code-branch fa-rotate-90'},
															{oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-envelope-open'},
															//{oid: 'dropdown', css: 'ox-inline', label: '<i class="fa fa-copy"></i>'},
														]},
													]},
												]},*/
											]},
										]},
									]},
								]},
								{t: 'div', oxid: 'input-wrapper', css: 'flex-fix ox-col-ui-dialog-1-back ox-dark-col-pitch-1-back ox-p-bottom-safe ox-border-thin-top w100 no-crop ox-shadow-light-3-c _ox-dark-shadow-none z2', style: {'max-width': 800}, c: [
									{oid: 'textfield', oxid: 'input', css: 'ox-dark-col-pitch-1-back', args: {
										//cssKeyboard: 'pr5',
										isInbar: true,
										cssTextarea: 'font-code ox-font-11-i',
										layout: 'cursor-input',
										options: [
											{oid: 'sep', css: 'ox-focus-only ox-inline'},
											{oid: 'dropdown', oxid: 'options-global', css: 'ox-inline', args: {
												isMenu: true,
											}},
											//{oid: 'buttonicon', css: 'ox-id-button-test ox-inline ox-medium', icon: 'fa fa-ellipsis-h'},
											{oid: 'buttonicon', oxid: 'button-send', css: 'ox-green ox-inline', icon: 'fa fa-paper-plane ox-before', label: '#send'},
										],
									}},
								]},
							],
							
};omnia.ui.board.handler = {
							
							args: null,
							root: null,
							
							elements: null,
							activeElement: null,
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								
								var me = this;
								ox.b.loadPacks({
									packs: [
										'https://haustein.org/lib/js/subjx/subjx.js', 
										//{src: 'https://haustein.org/lib/js/subjx/subjx.css', type: 'css'},
									],
									onPacksLoaded: function() { me.render(); },
								});
							},
							render: function() {
								var me = this;
								this.elements = {};
								
								ox.el.get('button-add', this.root).on(ox.b.CLICK, function() { me.addElement(); });
								ox.el.get('base', this.root).on(ox.b.CLICK, function() { me.enableDrag(false); });
								//this.addElement();
							},
							addElement: function() {
								var me = this;
								
								var id = ox.id();
								var elem = ox.node({oid: 'placeholder', id: id, css: 'ox-id-board-element ox-id-board-element-' + id + ' abs hand', text: 'object', style: {'width': 200, 'height': 40, 'transform': 'translate(0px, 0px)'}}, this.root);
								//elem.on(ox.b.CLICK_DOWN, function() { me.enableDrag(id); });
								this.elements[id] = {elem: elem};
								
								this.setDrag(id);
							},
							enableDrag: function(id) {
			
								if(!this.activeElement) return;
								this.activeElement.xDraggables.forEach(function(xDraggable) { $(xDraggable.controls).css('opacity', 0); });
								$('.ox-id-board-active').removeClass('ox-id-board-active');	
			
								if(id && this.elements[id] && this.elements[id].xDraggable) {
									$(this.elements[id].xDraggable.controls).css('opacity', 1);
									this.elements[id].elem.addClass('ox-id-board-active');
								}
							},
							setDrag: function(id) {
								if(this.activeElement) {
									this.activeElement.xDraggables.forEach(function(xDraggable) { xDraggable.disable(); });
									this.activeElement = null;
								}
								
								var me = this;
								var args = {};
								
								var xElem = args.xElem = subjx('.ox-id-board-element');
								var xDraggables = args.xDraggables = xElem.drag({
									snap: {x: 1, y: 1},
									onInit: function(el) { $('.ox-id-board-active').removeClass('ox-id-board-active'); $(el).addClass('ox-id-board-active'); },
									onDrop: function() { me.snap(); },
									
									//onInit: function() { args.xDraggables.forEach(function(xDraggable) { xDraggable.enable({snap: {x: 1, y: 1}}); }); },
									//onDrop: function() { args.xDraggables.forEach(function(xDraggable) { xDraggable.drag({snap: {x: 1, y: 1}}); }); },
									//onResize: function() { me.snap(args); },
								});
								args.xDraggables.forEach(function(xDraggable) { 
									me.elements[xDraggable.el.id].xDraggable = xDraggable; 
									$(xDraggable.controls).on(ox.b.CLICK_DOWN, function() { me.enableDrag(xDraggable.el.id); });
								});
							
								//setTimeout(function() { $(args.xDraggables.controls).trigger(ox.b.CLICK_DOWN); }, 1);
								//args.xDraggables.forEach(xDraggable => { xDraggable.enable(); });
								this.activeElement = args;
								
								this.enableDrag(id);					
							},
							snap: function() {
								var snap = 20;
								var elem = $('.ox-id-board-active');
								
								var t = window.getComputedStyle(elem[0]).getPropertyValue("transform").match(/(-?[0-9\.]+)/g); // matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())
								var dx = t[4] - Math.round(t[4] / 20) * 20;
								var dy = t[5] - Math.round(t[5] / 20) * 20;
			log(dx + ' ' + dy);					
								this.elements[elem[0].id].xDraggable.exeDrag({dx: -dx, dy: -dy});
								
								//elem.css('transform', 'matrix(' + t.join(',') + ')');
								//$(this.elements[elem.id].xDraggable.controls).css('transform', 'matrix(' + t.join(',') + ')'); });
								
								//args.xDraggables.forEach(xDraggable => { $(xDraggable.controls).css('transform', 'matrix(' + t.join(',') + ')'); });
							},
							getRoot: function() {
								return this.root;
							},

};omnia.ui.board.html = {
								
							oid: 'frame2', css: 'ox-col-pattern-dotted', c: [
								{oid: 'bar2', css: 'ox-float', c: [
									{oid: 'buttonicon', css: 'ox-id-button-add ox-blue', icon: 'fa fa-plus'},
								]},
								{t: 'div', css: 'ox-id-base abs t00 w100 h100'},
							]
							
};omnia.ui.checklist.meta = {

							label: '#checklist',
							icon: 'fa fa-check-double',
							defaultData: {v: '#checklist List'},

};omnia.ui.checklist.handler = {

							args: null,
							root: null,
			
							open: function(args) {
								log('omnia.ui.checklist.handler.open');
								if(!args) args = {};
								
								if(args && args.onClose) ox.client.awake(true);
								ox.ov.show({
									delay: true,
									onClose: args && args.onClose ? function() { ox.client.awake(false); if(args.isSave) args.onClose(true, args.data, true); else args.onClose(); } : null,
									onRendered: function(overlay) { args.overlay = overlay; },
									isModal: false,
									isScroll: true,
									frame: {
										oid: 'dialog', //ox.pf.isPhone ? 'popup' : 'dialog',
										title: '#checklist',
										style: {'max-height': '90%', 'max-width': ox.pf.isPhone ? null : '800px'}, //'width': '100%'}*/ null : {'width': '800px'},
										css: 'ox-trans ox-body-flex ' + (ox.pf.isPhone ? 'ox-caption-flat' : 'ox-noactions'),
										c: [
											{oid: 'checklist', css: '', onReady: function(elem, checklist) { args.checklist = checklist; }, args: args},
										],
										cancel: '#close',
										/*actions: [
											{oid: 'button', css: 'ox-green ox-inline ox-alone', label: '#save-button', click: function() { if(args && args.checklist) args.checklist.onSave(args); }},
										],*/
									},
								});
							},
							init: function(args) {
								log('omnia.ui.editor.init');
			
								var me = this;
								this.args = args;
								this.root = args.root;
								this.items = this.getItems(args.data);
			
								this.render(args);
							},
							getItems: function(data, depth, group) {
								var me = this;
								var r = [];
								
								if(!depth) depth = 0;
			
								if(!data.c && depth) r.push({item: data, group});
								else if(data.c && depth < 10) {
									$.each(data.c, function(i, child) {
										r = r.concat(me.getItems(child, depth + 1, data.v));
									});
								}
			
								return r;
							},
							render: function(args) {
								var me = this;
								var elems = ox.el.getAll(this.root, true);
							
								var p = this.progress = elems.p; // ox.node({oid: 'loadcontent', css: 'ox-baronly flex-fix', args: {}}, this.root);
								//p.progress(5,10);
								this.setProgress();
								
								//log({items: this.items});
								var isLong = this.items.find(i => i.item.v.length > 100);
							
								ox.node({oid: 'listgroups', css: 'flex-1 ox-grid p5', args: {
									gridInfo: isLong ? {gap: 5} : {w: 100, gap: 5, ratio: 1.5/1},
									data: this.items,
									getGroupHeader: function(v) {
										var render = ox.ui.text.markup.render(v); 
										return {t: 'div', css: 'p10 font ' + render.css, html: render.html};
									},
									getItem: function(i, d) {
										var data = d.item;
										var s = me.getStyle(data.v, isLong);
										
										return {oid: 'button', lang: 'de-DE', css: 'ox-nofocus font p10 flex-center ox-autosize wrap-i hyphens ox-slim br4 ' + (data.inactive ? ' ox-inactive' : '') + (isLong ? ' ox-left p15-i ' : '') + ' ' + s.css, c: [
											{t: 'div', css: 'ox-id-title ' + (isLong ? 'ox-font-14 ox-weight-regular-i' : 'ox-font-12'), html: s.label},
										], click: data.inactive ? null : function(e, elem) { 
											me.onSelect(elem, data, isLong);
										}};
									},
								}}, elems.b.getRoot());		
							},
							getRoot: function() {
								return this.root;
							},
							getStyle: function(v, isLong) {
								var render = omnia.ui.text.markup.render(v);
								var tag = render.tags && render.tags.length ? render.tags[0] : false;
								var css = '';
								var idx = 0;
								var label = render.text;
								
								switch(tag) {
									case '#1':
										idx = 5;
										css = 'ox-red';
										break;
									case '#2':
										idx = 4;
										css = 'ox-col-yellow-25-stripe-solid-i';
										break;
									case '#p':
									case '#4':
										idx = 3;
										css = 'ox-blue';
										break;
									case '#5':
										idx = 2;
										css = 'ox-col-green-25-stripe-i col-green-i';
										break;
									case '#ok':
									case '+x':
										idx = 1;
										css = 'ox-green';
										label = (isLong ? '<i class="fa fa-check mr10"></i>' : '<i class="fa fa-check mr5 mb5"></i><br>') + render.text;
										break;
									default:
										css = 'ox-white';
										idx = 0;
										break;
								}
								return {text: render.text, css: css, idx: idx, label: label};
							},
							onSelect: function(elem, data, isLong) {
								this.args.isSave = true;
								
								var s = this.getStyle(data.v, isLong);
								elem.removeClass(s.css);
			
								var steps = ['', '#ok', '#5', '#4', '#2', '#1'];
								var tag = steps[(s.idx + 1) % 6];
								data.v = this.args.node && this.args.node.isLeft() ? s.text + ' ' + tag : tag + ' ' + s.text;
								var s = this.getStyle(data.v, isLong);
								elem.addClass(s.css);
								ox.el.get('title', elem).html(s.label);
								
								this.setProgress();
								elem[0].blur();
							},
							onSave: function(args) {
								if(!args) return;
								if(args.overlay) args.overlay.close(true);
			
								if(args.onClose) args.onClose(true, args.data, true);
							},
							getCompleted: function(items) {
								return (items || this.items).filter(function(item) {
									return (/(#ok|#2|#5)/).test(item.item.v);
									return item.item.v.indexOf('#ok') >= 0;
								}).length;
							},
							setProgress: function() {
								//log(this.getCompleted() / this.items.length);
							
								this.progress.progress(this.getCompleted(), this.items.length);
							},

};omnia.ui.checklist.html = {
							
							oid: 'frame2', css: 'ox-checklist _ox-bottom-safe ox-col-ui-dialog-0-back', c: [
								{oid: 'loadcontent', css: 'ox-id-p ox-baronly flex-fix abs-i z1000 t00'},
								{oid: 'frame2', css: 'ox-id-b flex-1 ox-content'},
							]
							
};omnia.ui.contacts.handler = {

							clsId: 'omnia.ui.contacts',
							args: null,
							root: null,
							elems: null,
							contactsOmnia: null,
							contactsDevice: null,
							load: null,
							contactOverlay: null,
							
							init: function(args) { 
								log(this.clsId + '.init');
								this.args = args;
								
								this.render(args);

								//log({omnia, navigator, window});
								//this.updateDevicesContacts();
							},
							
							// Private function - UI
							
							render: function(args) {
								var me = this;
								this.root = args.root;
								
								var e = this.elems = ox.el.getAll(args.root, true);
								var isNoFramework = (ox.pf.framework != 'cordova' || !navigator.contacts);
								
								ox.css(this.root.find('.ox-id-nav'), 'ox-hidden', isNoFramework);
								//ox.css(this.root.find('.ox-id-nav-float'), 'ox-hidden', !ox.pf.isPhone || isNoFramework);
								ox.css(this.root.find('.ox-id-nav-2'), 'ox-hidden', !isNoFramework);
								if(isNoFramework) e['button-reload-omnia'].on('click', () => { me.updateOmniaContacts(); });
								
								e['button-load-contacts-device'].on('click', () => { 
									e['button-load-contacts-device'].addClass('ox-hidden');
									me.updateDevicesContacts(); 
									e['contacts-device'].getRoot().removeClass('ox-hidden');
								});
								e['sync'].on('click', function() { me.syncDialog(); });
								e['sync-2'].on('click', function() { me.syncDialog(); });
								e['button-compare'].on('click', function() { me.compareContacts(true); });
								
								if(!ox.pf.isPhone) {
									var cols = Math.round(this.root.width() / 200);
									e['contacts-omnia'].body.css('column-count', cols);
									e['contacts-omnia'].getRoot().addClass('p15');
									e['contacts-device'].body.css('column-count', cols);
									e['contacts-device'].getRoot().addClass('p15');
									
									e['contacts-omnia-tab'].getRoot().removeClass('ox-top-space');
									e['contacts-device-tab'].getRoot().removeClass('ox-top-space');
									
									e['button-load-contacts-device'].addClass('ox-top-space');
							
									e['nav'].removeClass('ox-stretch').addClass('ox-float-top-right br4 cropped');
									e['sync-2'].removeClass('ox-hidden');
								}
								this.updateOmniaContacts();
							},
							updateOmniaContacts: function(contacts) {
								log(this.clsId + '.updateOmniaContacts');
								var me = this;
								
								if(!contacts) {
									var data = this.getOmniaContacts();
									contacts = data.contacts;
								}
								log(this.clsId + '.updateOmniaContacts: ' + (contacts && contacts.length ? contacts.length : 0) + ' contact(s) found');
								if(!contacts.length) return;
								
								this.elems['contacts-omnia'].publish({
									clear: true,
									title: '<div class="ox-h4 pt10 col-medium-4-i ox-dark-col-dark" style="padding-left:20px">' + contacts.length + ' contacts</div>',
									data: contacts, 
									getItem: (i, item) => { return me.getContact(i, item, contacts); },
									//lazy: true,
									//gridInfo: ox.pf.isPhone ? null : {w: 300, gap: 5},
								});
							},
							updateDevicesContacts: function(contacts, onDone) {
								var me = this;
								
								// Load contacts from device
								if(!contacts) {
									//this.load = ox.ui.loaddialog.open({caption: '#load-from-device', p: {t0: '#load-contacts'}});
									return this.getDeviceContacts({onDone: (contacts) => { me.updateDevicesContacts(contacts, onDone); }});
								}
								log(this.clsId + '.updateDevicesContacts: ' + (contacts && contacts.length ? contacts.length : 0) + ' contact(s) found');
								
								// Adjust UI
								this.elems['button-load-contacts-device'].addClass('ox-hidden');
								this.elems['contacts-device'].getRoot().removeClass('ox-hidden');
								this.elems['contacts-device'].publish({
									clear: true,
									title: '<div class="ox-h4 pt10 col-medium-4-i ox-dark-col-dark" style="padding-left:20px">' + contacts.length + ' contacts</div>',
									data: contacts, 
									getItem: (i, item) => { return me.getContact(i, item, contacts, null, true); },
									//lazy: true,
								});
								
								//this.load.overlay.close();
								//this.load = null;
								
								if(onDone) onDone();
							},
							getContact: function(i, contact, contacts, map, isDevice) {
								var me = this;
								//var phone = contact.items && contact.items.length ? contact.items.filter((c) => c.type && c.type == 'phone') : null;
								var company = contact.items && contact.items.length ? contact.items.filter((c) => c.type && c.type == 'company') : null;
								var isNewLetter = (!i || (contact.name && contacts[i - 1].name && contacts[i - 1].name[0].trim().toLowerCase() != contact.name[0].trim().toLowerCase()));
								
								return [
									!isNewLetter ? null : {t: 'div', css: 'ox-id-letter-' + contact.name[0].toLowerCase() + ' font col-medium-4 ox-dark-col-dark ox-border-bottom bold', style: '_border-bottom-width:4px; height:45px; line-height:45px; padding-left:20px;', text: contact.name[0].toUpperCase()},
									
									// Contact line
									{oid: 'button', css: 'rel ox-free ox-left ox-border-thin-between block w100-i ox-height-flex scrollable-x wrap-i', c: [
											{t: 'span', css: '', text: contact.name},
											company && company.length ? {t: 'span', css: 'col-medium-4 ml15', text: company[0].v} : null,
											!contact.sync ? null : {t: 'i', css: 'abs r0 t0 m15 ox-font-16-i w20px fa fa-' + (contact.sync.type == 'new' ? 'plus-circle col-blue' : (contact.sync.type == 'remove' ? 'times-circle col-red' : (contact.sync.type == 'synced' ? 'check col-green' : 'arrow-alt-circle-up col-yellow')))},
										], click: () => { me.conactDetails(contact, isDevice); },
									},
								];
							},
							conactDetails: function(contact, isDevice) {
								var me = this;
								var isNoUpdate = !contact.sync || contact.sync.type != 'update';
								var cssNote = 'font ml15 mr15 mt5 mb5 pl15 pr15 pt10 pb10 ';
								
								var cc = contact.contact;
								var c = ox.copy(contact);
								c.isStatic = true;
								if(cc) c.contact = cc;
log({contact})								
								if(this.contactOverlay) this.contactOverlay.close();
								ox.ov.open({
									delay: true,
									isScroll: true,
									onRendered: (overlay) => { me.contactOverlay = overlay; },
									frame: {
										oid: 'popup',
										style: {'width': ox.pf.isPhone ? '100%' : 350},
										c: [
											{oid: 'contact', css: 'ox-border-thin-between', args: c},
											
											{t: 'div', css: 'pt5 ox-col-ui-dialog-0-back ox-option-item ' + (contact.sync ? '' : 'ox-hidden')},
											
											// Sync
											//{oid: 'button', css: 'ox-free w100-i ox-border-thin-between ox-option-item ' + (!contact.sync ? 'ox-hidden' : ''), label: '#compare'},
											!contact.sync ? null : {t: 'div', css: 'ox-border-thin-between pt10', c: [
												!contact.sync || contact.sync.type != 'synced' ? null : {t: 'div', css: cssNote + 'mb15-i col-green-15-back col-green br8 bold', html: 'Synced'},
												!contact.sync || contact.sync.type != 'new' ? null : {t: 'div', css: cssNote + 'col-blue-15-back col-blue br8 bold', html: 'To be added'},
												!contact.sync || contact.sync.type != 'remove' ? null : {t: 'div', css: cssNote + 'col-red-15-back col-red br8 bold', html: 'To be removed'},
												isNoUpdate ? null : contact.sync.diff.omniaAdd.map((d) => { return {t: 'div', css: cssNote + 'col-blue-15-back col-blue br8', html: 'Add <b>' + d.type + '</b> \'' + d.v + '\''}; }),
												isNoUpdate ? null : contact.sync.diff.omniaUpdate.map((d) => { return {t: 'div', css: cssNote + 'col-yellow-15-back col-yellow-constrast br8', html: 'Update <b>' + d.omnia.type + '</b><br>\'' + d.device.v + '\' to<br>\'' + d.omnia.v + '\''}; }),
												isNoUpdate ? null : contact.sync.diff.deviceRemove.map((d) => { return {t: 'div', css: cssNote + 'col-red-15-back col-red br8', html: 'Remove <b>' + d.type + '</b> \'' + d.v}; }),
												
												!isDevice || !contact.contact ? null : {oid: 'button', css: 'mt10-i ox-free w100-i ox-border-thin-between col-red-i _ox-id-close', label: '#remove-from-device...', click: () => { me.saveDeviceContact(contact, 'remove'); }},
												isDevice || contact.sync.type == 'synced' ? null : {oid: 'button', css: 'mt10-i ox-free w100-i ox-border-thin-between ox-blue _ox-id-close', label: contact.sync.type == 'new' ? '#add-on-device...' : '#update-on-device...', click: () => { me.saveDeviceContact(contact); }},
											]},
											
											// More
											{oid: 'button', css: 'ox-free ox-id-close w100-i ox-border-thin-between ox-option-item ' + (contact.sync ? '' : 'ox-hidden'), c: [
												//{t: 'i', css: 'fa fa-copy mr10'},
												{t: 'span', text: '#copy-to-clipboard'},
											], click: () => { me.copy([contact]); }},
											
											{t: 'div', css: 'pt5 ox-col-ui-dialog-0-back ox-option-item ox-hidden'},
											!contact.nodes || !contact.nodes.length ? null : contact.nodes.map((it) => { 
												return {oid: 'nodelistitem', css: 'ox-border-thin-between p15 ox-hidden ox-option-item', args: {node: it.node, path: it.path}}; 
											}),
											{oid: 'obj', css: 'ox-border-thin-between ox-hidden ox-option-item', args: {obj: contact}},
											ox.pf.framework != 'cordova' || !navigator.contacts ? null : {oid: 'obj', css: 'ox-border-thin-between ox-hidden ox-option-item', args: {obj: me.contactToDeviceItem(contact)}},
											
											// Fold
											{oid: 'buttonicon', css: 'ox-free w100-i ox-border-thin-between _ox-font-11-i col-medium-4-i', icon: 'fa fa-angle-down', click: (e, elem) => {
												elem.parent().find('.ox-option-item.ox-hidden').removeClass('ox-hidden');
												elem.addClass('ox-hidden');
											}},
										],
										cancel: '#close',
									},
								});
							},
							syncDialog: function() {
								var me = this;
								var isLoaded = this.contactsDevice;
								
								ox.ov.open({
									content: {oid: 'bar2', css: 'ox-context ox-large', c: [
										{oid: 'button', css: 'ox-id-close', label: '#reload-from-omnia', click: () => { me.updateOmniaContacts(); }},
										{oid: 'button', css: 'ox-id-close', label: '#load-from-device', click: (e, elem) => { 
											ox.el.onRefresh(() => { 
												me.updateDevicesContacts(null, () => { 
													elem.parent().find('.ox-button').removeClass('ox-hidden');
													//elem.addClass('ox-hidden');
												}); 
											});
										}},
										{oid: 'button', css: 'ox-id-close', label: '#compare', click: () => { me.compareContacts(true); }},
										{oid: 'button', css: 'ox-id-close ' + (!isLoaded ? 'ox-hidden' : ''), c: [
											//{t: 'i', css: 'fa fa-copy mr10'},
											//{t: 'i', css: 'fa fa-arrow-left mr10'},
											//{t: 'i', css: 'fa fa-mobile-alt mr15'},
											{t: 'span', text: '#copy-all'},
										], click: () => { me.copy(me.contactsDevice); }},
										{oid: 'button', css: 'ox-id-close', label: '#test', click: () => { window.open('contact://', '_system'); }},
										/*{oid: 'button', css: 'ox-id-close ' + (!isLoaded ? 'ox-hidden' : ''), c: [
											{t: 'i', css: 'fa fa-arrow-right mr10'},
											{t: 'i', css: 'fa fa-mobile-alt mr15'},
											{t: 'span', text: '#create-on-device'},
										], click: () => { me.copy(me.contactsDevice); }},*/
										//{oid: 'button', label: 'test'},
									]},
								});
							},
							
							// Private function - Data
							
							sortContact: function(a, b) {
								if(!b.name) return -1;
								if(!a.name) return 1;
								return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : (a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 0);
							},
							getOmniaContacts: function() {
								
								var me = this;
								var t0 = ox.t0(this.clsId + '.getOmniaContacts');
								t0.bp('Start');
								
								/*var files = [];
								if(app && app.space) files = files.concat(app.space.getFiles());
								var maps = files.filter((file) => file.meta && file.meta.type && (file.meta.type == 'omnia-mindmap' || file.meta.type == 'omnia') && file.data && typeof file.data == 'object');
								maps = maps.map((map) => { return ox.copy(map.data); });
								var all = ox.File.create({data: {c: maps}});*/
								
								var all = app && app.space ? app.space.getFilesDataAsMap() : [];
								t0.bp('Maps parsed');
								
								// Parse for tags
								var contacts = all.find('#data-contact').concat(all.find('#contact')).map((tagNode) => { return me.tagToContact(tagNode, null, all); });
								
								// Remove archived ones
								contacts = contacts.filter((contact) => {
									return contact && !contact.nodes[0].path.filter((p) => p.v && p.v == '#f').length;
								});
								
								// Merge duplicates
								contacts = this.mergeContacts(contacts);
								this.mergeContactItems(contacts);
								contacts.sort(this.sortContact);
								
								t0.bp('Nodes parsed');
							
								//log({maps, all: all.toObject(), contacts});
								this.contactsOmnia = contacts;
								return {contacts: contacts, map: all};
							},
							getDeviceContacts: function(args) {
								if(ox.pf.framework != 'cordova' || !navigator.contacts) return ox.error(this.clsId + '.getDeviceContacts: Not in Cordova framework');
								log(this.clsId + '.getDeviceContacts');
								
								//log(navigator.contacts);
								
								var me = this;
								var onSuccess = function(contacts) {
									
									// Map data
									contacts = contacts.map((c) => { return me.deviceItemToContact(c); });
									/*contacts = contacts.map((c) => {
										var items = [];
										if(c.birthday) items.push({type: 'birthday', v: c.birthday, date: ox.d.toFormat(new Date(c.birthday), ox.d.format.fullDayDate)});
										if(c.phoneNumbers) items = items.concat(c.phoneNumbers.map((it) => { return {type: 'phone', v: it.value}; }));
										if(c.emails) items = items.concat(c.emails.map((it) => { return {type: 'email', v: it.value}; }));
										if(c.addresses) items = items.concat(c.addresses.map((it) => { return {type: 'address', v: it.streetAddress + ', ' + it.postalCode + ' ' + it.locality, street: it.streetAddress, city: it.postalCode + ' ' + it.locality}; }));
										
										//items.push({icon: 'fa fa-info', css: 'ox-height-flex', contact: [{oid: 'obj', args: {obj: {c}}}]});
										return {
											name: c.name.formatted || (c.emails && c.emails.length ? c.emails[0].value : ''), 
											items,
											contact: c,
											//contactDisplay: c.display(),
										};
									});*/
									contacts.sort(me.sortContact);
									
									//log({contacts});
									omnia.ui.board2.trigger({evt: {id: 'loaded', type: 'info', text: '<i class="fa fa-check ox-before"></i>Copied ' + contacts.length + ' contact(s) loaded from device'}});
									
									me.contactsDevice = contacts; //ox.copy(contacts);
									if(args.onDone) args.onDone(contacts);
								}
								var onError = function(contactError) { 
									ox.error(me.clsId + '.getDeviceContacts: Error: ' + contactError);
									if(args.onDone) args.onDone([]);
								}

								var options = new ContactFindOptions();
								options.filter = "";
								options.multiple = true;
								
								var filter = ["displayName", "addresses"];
								
								try {
									ox.el.onRefresh(() => {
										navigator.contacts.find(filter, onSuccess, onError, options);
									});
								}
								catch(e) {
									ox.error(this.clsId + '.getDeviceContacts: Error: ' + e);
									if(args.onDone) args.onDone([]);
								}
							},
							compareContacts: function(isForceReload) {
								var me = this;

								var t0 = ox.t0('_' + this.clsId + '.compareContacts');
								t0.bp('Start');
								if(isForceReload || !this.contactsDevice) return this.getDeviceContacts({onDone: (contacts) => { me.compareContacts(); }});
								
								var count = 0;
								this.contactsOmnia.forEach((contact, i) => {
									var wasFound = me.compareContact(contact, i);
									if(wasFound) count++;
								});
								t0.bp(count + ' of ' + this.contactsOmnia.length + ' contact(s) found on device');
								//log({contacts: ox.copy(this.contactsOmnia)});
								//log(this);
								
								this.updateOmniaContacts(this.contactsOmnia);
								this.updateDevicesContacts(this.contactsDevice);
								
								t0.bp('Done');
							},
							compareContact: function(contact, i) {
								if(!this.contactsDevice) return false;
								var device = this.contactsDevice;
								var fields = ['phone', 'phone2', 'mobile', 'mobile2', 'email', 'street', 'city', 'country', 'birthday'];
								
								var me = this;
								contact.sync = {};
								device.forEach((c) => { if(!c.sync) c.sync = {type: 'remove'}; });
								
								var dc = device.filter((c) => c.name.trim().toLowerCase() == contact.name.trim().toLowerCase());
								if(dc.length) {
									if(dc.length > 1) ox.error(this.clsId + '.compareContact: ' + contact.name + ' has multiple duplicates on device');
									var dc = dc[0];
									
									contact.sync.deviceContact = dc;
									contact.sync.type = dc.sync.type = 'update';
									
									var diff = dc.sync.diff = contact.sync.diff = {equal: [], omniaAdd: [], omniaUpdate: [], deviceRemove: []};
									contact.items.forEach((item) => {
										//if(item.type == 'role') {
										if(!fields.find((f) => f == item.type)) {
											diff.equal.push(item);
											return;
										}
										
										var equalFound = dc.items.find((it) => it.type == item.type && me.isEqualValue(it, item));
										if(equalFound) {
											diff.deviceRemove = diff.deviceRemove.filter((n) => !(n.type == item.type && me.isEqualValue(n, item)));
											diff.equal.push({omnia: item, device: equalFound});
										} else {
											var sameTypesFound = dc.items.filter((it) => it.type == item.type);
											if(!sameTypesFound.length) {
												diff.omniaAdd.push(item);
											} else {
												sameTypesFound.forEach((it) => {
													var found = diff.deviceRemove.find((n) => n === it);
													if(!found) found = diff.equal.find((n) => n.device === it);
													if(!found) diff.deviceRemove.push(it);
												});
												diff.omniaAdd.push(item);
											
												//diff.omniaUpdate.push({omnia: item, device: sameTypesFound[0], similarType: sameTypesFound.length});
											}
										}
									});
									diff.deviceRemove = diff.deviceRemove.concat(dc.items.filter((it) => {
										var found = diff.equal.find((n) => n.device === it);
										if(!found) found = diff.deviceRemove.find((n) => n === it);
										if(!found) found = diff.omniaUpdate.find((n) => n.device === it);
										return !found;
									}));
									
									if(contact.items.length == diff.equal.length && dc.items.length <= diff.equal.length) contact.sync.type = dc.sync.type = 'synced';
									//log(dc[0].name + ' found on device');
									return true;
								}
								contact.sync.type = 'new';
								
								return false;
								//log(contact);
							},
							isEqualValue: function(item0, item1) {
								if(item0.type == 'birthday') return item0.date == item1.date;
								if(item0.type == 'phone') return item0.v.replace(/[^0-9\+]/g, '') == item1.v.replace(/[^0-9\+]/g, '');
								return item0.v == item0.v;
							},
							saveDeviceContact: function(contact, type, isConfirm) {
								if(ox.pf.framework != 'cordova' || !navigator.contacts || !contact || !contact.sync) return ox.error(this.clsId + '.addDeviceContact: Not in Cordova framework or data missing');
								
								try {
									var me = this;
									if(!type) type = contact.sync.type;
									if(type == 'new') type = 'add';
									if(type == 'synced') return;
									
									var contactDevice = type == 'remove' ? contact.contact : this.contactToDeviceItem(contact, contact.sync.deviceContact ? contact.sync.deviceContact.contact : null);
									
									if(!isConfirm) {
										ox.ov.confirm({
											//content: '#' + type + '-confirm', 
											content: {t: 'div', c: [
												{t: 'div', css: 'font ox-border-thin-bottom p15', text: '#' + type + '-confirm'},
												{oid: 'obj', args: {obj: contactDevice}},
											]},
											labelButton: '#' + type, 
											cssButton: 'ox-inline ox-alone ' + (type == 'remove' ? 'ox-red' : (type == 'add' ? 'ox-blue' : 'ox-blue')), 
											action: () => {
												if(me.contactOverlay) me.contactOverlay.close();
												me.saveDeviceContact(contact, type, true);
											},
										});
										return;
									}
									
									if(!contactDevice) return ox.error(this.clsId + '.saveDeviceContact: Could not create deviceContact');
									
									if(type == 'remove') {
										contactDevice.remove(() => {
											omnia.ui.board2.trigger({evt: {id: 'create', type: 'info', css: 'col-green-back col-white', text: '<i class="fa fa-check ox-before"></i>Removed contact from device'}});
										}, (error) => {
											omnia.ui.board2.trigger({evt: {id: 'create', type: 'info', css: 'col-red-back col-white', text: '<i class="fa fa-check ox-before"></i>Could not remove contact from deivce (' + error +')'}});
										});
									} else {
										contactDevice.save((c) => {
											omnia.ui.board2.trigger({evt: {id: 'create', type: 'info', css: 'col-green-back col-white', text: '<i class="fa fa-check ox-before"></i>Save contact on device'}});
										}, (error) => {
											omnia.ui.board2.trigger({evt: {id: 'create', type: 'info', css: 'col-red-back col-white', text: '<i class="fa fa-check ox-before"></i>Could not save contact on deivce (' + error +')'}});
										});
									}
									//ox.ov.show('Ready to ' + contact.sync.type);
									/*contactDevice.save((contact) => {
										omnia.ui.board2.trigger({evt: {id: 'create', type: 'info', text: '<i class="fa fa-check ox-before col-green-back col-white"></i>Saved contact to device'}});
	 								
									}, (error) => {
										omnia.ui.board2.trigger({evt: {id: 'create', type: 'info', text: '<i class="fa fa-info ox-before col-red-back col-white"></i>Add contact to device failed'}});
	 								
									});*/
								}
								catch(e) {
									ox.error(this.clsId + '.saveDeviceContact: Error: ' + e);
									log(e);
								}
							},
							copy: function(contacts) {
								if(!this.args || !this.args.app) return;

								log(this.clsId + '.copy');
								contacts = ox.copy(contacts);
								contacts.sort(this.sortContacts);
								
								contacts.forEach((c) => {
									c.items.forEach((it) => {
										if(it.type == 'address') {
											if(it.street) c.items.push({type: 'street', v: it.street});
											if(it.city) c.items.push({type: 'city', v: it.city});
											if(it.country) c.items.push({type: 'country', v: it.country});
											
										}
									});
								});
									
								var node = {v: '#t3 Contacts #subcount', s: 1, c: contacts.map((contact) => {
									return {v: '#t3 ' + contact.name, s: 1, c: [{v: '#data-contact #card', s: 1, c: [
										{v: '#attr-name', c: [{v: contact.name}]},
									].concat(
										contact.items.filter((item) => item.type !== undefined).map((item, i, arr) => {
											if(item.type == 'address') {
												//arr.push({type: 'street', v: item.street});
												//arr.push({type: 'city', v: item.city});
											
												return {v: '#data-location', c: [
													{v: '#attr-street', c: [{v: item.street}]},
													{v: '#attr-city', c: [{v: item.city}]},
												]};
											}
											
											if(item.type == 'birthday') return {v: '#attr-birthday', c: [{v: '#d' + item.date}]};
											if(item.type == 'phone') return {v: '#attr-' + (item.v[1] == '4' && (item.v[3] == '1' || (item.v[3] == ' ' && item.v[4] == '1')) || item.v[2] == '1' ? 'mobile' : 'phone'), c: [{v: '#tel' + (item.v[0] != '+' ? '-' : '') + item.v.split(' ').join('-')}]};
											return {v: '#attr-' + item.type, c: [{v: item.v}]};
										})
									)}]};
								})};
								if(contacts.length == 1) node = node.c[0].c[0];
								
								//log({id: 'copy', contacts, node});
								this.args.app.clipboard = {meta: {type: 'omnia-mindmap'}, data: node};
								omnia.ui.board2.trigger({evt: {id: 'copy', type: 'info', text: '<i class="fa fa-copy ox-before"></i>Copied ' + contacts.length + ' contact(s) to clipboard'}});
 							},
							mergeContacts: function(contacts) {
								return contacts.filter((contact, i) => {
									var d = !i ? null : contacts.slice(0, i).find((it) => it !== contact && it.name.trim().toLowerCase() == contact.name.trim().toLowerCase());
									if(d) {
										d.items = d.items.concat(contact.items);
											if(contact.nodes) {
											if(!d.nodes) d.nodes = [];
											d.nodes = d.nodes.concat(contact.nodes);
										}
										return false;
									}
									return true;
								});
							},
							mergeContactItems: function(contacts) {
								contacts.forEach((contact, j) => {
									var items = contact.items;
									contact.items = items.filter((item, i) => {
										var d = !i ? null : items.slice(0, i).find((it) => it !== item && it.type == item.type && it.v.trim().toLowerCase() == item.v.trim().toLowerCase());
										return !d;
									});
									if(contact.items.filter((it) => it.type == 'department').length > 1)
										contact.items = contact.items.filter((it) => it.type != 'department');
								});
							},
							tagToContact: function(tagNode, data, file) {
								try {
									if(!data) data = ox.File.nodeToData(tagNode);
									var parent = file ? file.getParent(tagNode) : tagNode;
								
									var name = data.name || data.company || parent.v;
									var renderName = omnia.ui.text.markup.render(name);
									if(data.type) data.type = '#' + data.type;
								
									var items = [];
									ox.each(data, (id, v) => { 
										if(id == 'type' || id == 'name' || !v || id == 'c' || id == 'time' || id == 's') return;
										
										var item = {};
										
										switch(id) {
											case 'role':
											case 'company':
											case 'department':
												item.type = id;
												item.v = v;
												break;
											case 'birthday':
												item.type = id;
												item.v = data.birthday.split('#d').join('');
												item.date = ox.d.toFormat(new Date(data.birthday.split('#d').join('')), ox.d.format.fullDayDate);
												break;
											case 'phone':
											case 'phone2':
											case 'mobile':
											case 'mobile2':
												item.type = 'phone';
												item.v = v.split('#tel-').join('').split('#tel').join('').split('-').join(' ');
												item.subline = data.department || data.type || null;
												item.type2 = id == 'phone' || id == 'phone2' ? (data.type ? data.type.substr(1) : null) : 'mobile';
												break;
											case 'email':
											case 'email2':
												item.type = 'email';
												item.v = v;
												item.subline = data.department || data.type || null;
												item.type2 = data.type ? data.type.substr(1) : null;
												break;
											case 'coordinates':
												item.type = 'coordinates';
												item.v = v.split('(').join('').split(')').join('');
												item.subline = data.department || data.type || null;
												break;	
											case 'link':
											case 'mapslink':
												item.type = 'link';
												item.v = v,
												item.subline = data.department || data.type || null;
												break;
											case 'desc':
												item.type = 'desc';
												item.v = v;
												break
											case 'img':
											case 'image':
												item.type = 'image';
												item.v = v;
												break;
										}
										
										if(item.type) items.push(item);
										//log({id, v, item});
									});
									if(data.street || data.city || data.country) {
										var item = {};
										item.type = 'address';
										item.v = data.street + ', ' + data.city;
										item.street = data.street;
										item.city = data.city;
										item.country = data.country;
										item.subline = data.department || data.type || null;
										item.type2 = data.type ? data.type.substr(1) : null;
											
										items.push(item);
									}
								
									return {
										name: renderName.text, 
										data,
										items, 
										nodes: [
											{
												node: tagNode, 
												parent: file ? parent : null, 
												path: file ? file.getPath(tagNode.id) : null,
											},
										],
									};
									
								}
								catch(e) {
									ox.error(this.clsId + '.tagToContact: Error: ' + e);
									log(e);
								}
							},
							deviceItemToContact: function(c) {
								var items = [];
								if(c.birthday) items.push({type: 'birthday', v: c.birthday, date: ox.d.toFormat(new Date(c.birthday), ox.d.format.fullDayDate)});
								if(c.phoneNumbers) items = items.concat(c.phoneNumbers.map((it) => { return {type: 'phone', v: it.value}; }));
								if(c.emails) items = items.concat(c.emails.map((it) => { return {type: 'email', v: it.value}; }));
								if(c.addresses) items = items.concat(c.addresses.map((it) => { return {type: 'address', v: it.streetAddress + ', ' + it.postalCode + ' ' + it.locality, street: it.streetAddress, city: it.postalCode + ' ' + it.locality}; }));
							
								if(c.organizations) items = items.concat(c.organizations.map((it) => { return {type: 'company', v: it.name}; }));
								if(c.organizations) items = items.concat(c.organizations.map((it) => { return {type: 'department', v: it.department}; }));
								if(c.organizations) items = items.concat(c.organizations.map((it) => { return {type: 'role', v: it.title}; }));
								
								items = items.filter((it) => it.v);
								
								return {
									name: c.name.formatted || (c.emails && c.emails.length ? c.emails[0].value : ''), 
									items,
									contact: c,
								};
							},
							contactToDeviceItem: function(contact, ref) {
								if(ox.pf.framework != 'cordova' || !navigator.contacts) return ox.error(this.clsId + '.contactToDeviceItem: Not in Cordova framework');
								
								try {
									var dc = navigator.contacts.create();
									if(ref) dc.id = ref.id;
									if(ref) dc.rawId = ref.rawId;
									
									// Name
									var company = contact.items.find((it) => {it.type == 'company'});
									var isCompany = company && company.v == contact.name;
									
									if(!isCompany) {
										var names = contact.name.split(' ');
										dc.name = {};
										dc.name.familyName = names[names.length - 1];
										dc.name.givenName = names.length > 1 ? names[0] : null;
										if(names.length > 2) dc.name.middleName = names.slice(1, names.length - 1).join(' ');
										dc.name.formatted = contact.name;
									}
									
									// Items
									var org = {};
									contact.items.forEach((item) => {
										var detail = {value: item.v, type: item.type2};
										
										switch(item.type) {
											case 'birthday':
												dc.birthday = item.v;
												break
											case 'phone':
												if(!dc.phoneNumbers) dc.phoneNumbers = [];
												dc.phoneNumbers.push(detail);
												break;
											case 'email':
												if(!dc.emails) dc.emails = [];
												dc.emails.push(detail);
												break;
											case 'address':
												if(!dc.addresses) dc.addresses = [];
												var city = item.city ? item.city.split(' ') : null;
												var zip = city && city.length == 2 && city[0] == parseInt(city[0]) ? city[0] : null;
												var town = item.city && zip ? item.city.split(zip).join('').trim() : item.city;
												detail = {
													streetAddress: item.street,
													country: item.country,
													postalCode: zip,
													locality: town || city,
													type: item.type2,
												};
												dc.addresses.push(detail);
												break;
											case 'company':
												if(!dc.organizations) dc.organizations = [];
												detail = org = {
													name: item.v,
												};
												dc.organizations.push(detail);
												break;
											case 'department':
												if(org && !org.department) org.department = item.v;
												break;
											case 'role':
												if(org && !org.title) org.tile = item.v;
												break;
										}
										
									});
									
									return dc;
								}
								catch(e) {
									ox.error(this.clsId + '.contactToDeviceItem: Error: ' + e);
									log(e);
								};
							},
							
};omnia.ui.contacts.html = {
							
							oid: 'frame2', css: 'ox-contacts', c: [
								{oid: 'bar2', css: 'ox-id-nav-2 ox-float-top-right ox-line ox-overlay br4 ox-col-ui-dialog-1-back cropped ox-hidden', c: [
									{oid: 'button', css: 'ox-id-button-reload-omnia', label: '#reload-button'},
								]},
								{oid: 'bar2', css: 'ox-id-nav ox-overlay ox-line ox-col-ui-dialog-1-back ox-split ox-dark-col-black-back', c: [
									{t: 'div', c: [
										{oid: 'tabstatic', css: 'ox-id-tab-contacts-omnia ox-active', label: 'Omnia'},
										{oid: 'tabstatic', css: 'ox-id-tab-contacts-device', label: '#device'},
									]},
									{t: 'div', c: [
										{oid: 'buttonicon', css: 'ox-id-button-compare flex-fix ox-medium', label: '#compare', icon: 'fa fa-sync ox-before'},
										{oid: 'buttonicon', css: 'ox-id-sync-2 flex-fix', icon: 'fa fa-ellipsis-v'},
									]},
								]},
								{oid: 'bar2', css: 'ox-id-nav-float ox-float ox-hidden', c: [
									{oid: 'buttonicon', css: 'ox-id-sync', icon: 'fa fa-ellipsis-v'},
								]},
								{oid: 'frame2', css: 'ox-id-contacts-omnia-tab ox-id-tab-contacts-omnia ox-col-ui-dialog-1-back ox-bottom-safe ox-top-space ox-dark-col-black-back', c: [
									{oid: 'list', css: 'ox-id-contacts-omnia _ox-grid mb60', args: {_gridInfo: {w: 300, _gap: 2}}},
								]},
								{oid: 'frame2', css: 'ox-id-contacts-device-tab ox-id-tab-contacts-device ox-col-ui-dialog-1-back ox-bottom-safe ox-top-space ox-dark-col-black-back', c: [
									{oid: 'button', css: 'ox-id-button-load-contacts-device ox-free', label: '#load-from-device'},
									{oid: 'list', css: 'ox-id-contacts-device _ox-grid ox-hidden mb60', args: {_gridInfo: {w: 300, _gap: 2}}},
								]},
							],
							
};omnia.ui.editor.handler = {
							
							args: null,
							elems: null,
							root: null,
							comp: null,
							data: null,
							form: null,
							
							open: function(args) {
								log('omnia.ui.editor.handler.open: ' + args.oid); //log(argscopy: {ox.copy(args)});
								
								if(!args) args = {};
								var comp = args.oid && omnia.ui[args.oid] ? omnia.ui[args.oid] : null;
			
								ox.ov.show({
									delay: true,
									isScroll: true,
									onClose: args && args.onClose ? function() { args.onClose(); } : null,
									onRendered: function(overlay) { args.overlay = overlay; },
									isModal: false,
									frame: {
										oid: 'popup',
										title: comp && comp.meta && comp.meta.label ? comp.meta.label : '#edit',
										style: ox.pf.isPhone ? {'max-height': '80%', 'width': '100%'} : {'min-width': '400px', 'max-width': '100%', '_height': (45 * 7 + 2) + 'px'},
										css: '',
										c: [
											{oid: 'editor', onReady: function(elem, editor) { args.editor = editor; }, args: args/*{data: args.data, onClose: args.onClose, oid: args.oid}*/},
										],
										cancel: '#close',
										actions: [
											{oid: 'button', css: 'ox-hidden ox-id-button-edit ox-inline ox-alone-right', label: '#edit-button'},
											{oid: 'button', css: 'ox-hidden ox-id-button-save ox-green ox-inline ox-alone-right', label: '#save-button', click: function() { if(args && args.editor) args.editor.onSave(args); }},
										],
									},
								});
							},
							
							init: function(args) {
								log('omnia.ui.editor.handler.init: ' + args.oid, {args});
								
								var me = this;
								this.args = args;
								this.root = args.root;
								this.elems = ox.el.getAll(args.root);
								var comp = this.comp = args.oid && omnia.ui[args.oid] ? omnia.ui[args.oid] : null;

								if(!comp || !comp.editor) {
									ox.node({t: 'span', css: 'font p10 col-medium-4 italic', text: 'Error: Component or form not found.'}, this.root);
									return;
								}
								
								// Get data
								this.setData();
								/*var data = {};
								if(comp.data && comp.data.nodeToData) {
									data = comp.data.nodeToData(args.data.v, {
										node: args.node,
										map: args.node.map,
									});
								}
								else if(comp.toData) {
									data = comp.toData(args.data);
								}
								else {
									data = omnia.tools.File.nodeToData(args.data);
								}
								this.data = data;*/

								// Render
								/*var form;
								if(comp.editor) {
									if(comp.editor.dataToForm) {
										form = this.form = comp.editor.dataToForm(data);
										ox.node(form, this.root);
									} else if(comp.editor.form) {
										this.form = comp.editor.form;
										ox.node(comp.editor.form, ox.el.get('form', this.root));
										
										ox.el.onRefresh(function() {
											$.each(data, function(id, value) {
												var field = ox.el.get('data-' + id, me.root, true);
												if(field && field.setValue) field.setValue(value);
											});
										});
									}
								}*/
								
								
								//this.render();
								ox.el.onRefresh(function() { me.render(); });
								
								//ox.node({oid: 'obj', css: 'ox-border-top', args: {obj: {args, data, form}}}, this.root);
								
								//ox.el.set(data, ox.el.get('form', this.root));
							},
							getRoot: function() {
								return this.root;
							},
							render: function() {
								var args = this.args;
								var comp = this.comp;
								if(!comp.editor) return;
								
								var me = this;
								
								// editor.getView / view
								var view = null;
								if(comp.editor.view || comp.editor.getView) {
									view = comp.editor.getView ? comp.editor.getView({
										data: args.data,
										editorData: me.data,
										node: args.node,
										map: args.node.map,
									}) : comp.editor.view;
									if(view) {
										ox.node(view, this.elems.view);
										
										//this.elems['bar-edit'].removeClass('ox-hidden');
										this.elems.view.removeClass('ox-hidden');

										var buttonSave = this.args.overlay.getRoot().find('.ox-id-button-save');
										var buttonEdit = this.args.overlay.getRoot().find('.ox-id-button-edit');
										buttonEdit.removeClass('ox-hidden');
										buttonEdit.on(ox.b.CLICK, function() {
											buttonEdit.addClass('ox-hidden');
											me.elems.view.addClass('ox-hidden');
											me.elems.form.removeClass('ox-hidden');
											buttonSave.removeClass('ox-hidden');
											me.args.overlay.isModal = true;
										});
										
									}
								}
								if(!view) {
									var buttonSave = this.args.overlay.getRoot().find('.ox-id-button-save');
									buttonSave.removeClass('ox-hidden');
									this.elems.form.removeClass('ox-hidden');
									this.args.overlay.isModal = true;
								}
								
								// editor.dataToForm
								if(comp.editor.dataToForm) {
									form = comp.editor.dataToForm(this.data);
									this.form = ox.node(form, this.elems.form);
									return;
								} 
								
								// editor.form
								if(!comp.editor.form) {
									ox.node({t: 'span', css: 'font p10 col-medium-4 italic', text: 'Error: Form items not found.'}, this.root);
									return;
								}

								this.form = ox.node({oid: 'form', css: 'ox-inbar', args: {
									items: comp.editor.form,
									value: this.data,
								}}, this.elems.form);
							},
							
							onSave: function(args) {
								if(!args) return;
								
								//var t0 = ox.t0('_omnia.ui.editor.handler.onSave');
								
								if(args.overlay) args.overlay.close(true);
			
								// Set data
								var data = this.getData(args);
							
								//t0.bp(1);
								
								/*var data;
								if(this.comp && this.comp.editor.formToData && this.comp.data && this.comp.data.dataToNode) {
									data = this.comp.data.dataToNode(this.comp.editor.formToData({root: this.root, data: this.data}));
								} else if(this.comp && this.comp.toTag) {
									data = ox.el.getData(this.root, false, null, true);
									data = this.comp.toTag(data);
								} else {
									data = ox.el.getData(this.root, true, true);
									data.v = this.comp && this.comp.meta && this.comp.meta.defaultData && this.comp.meta.defaultData.v ? this.comp.meta.defaultData.v : args.data.v;
									data.c = data.c.filter(function(item) { return item.v && item.v != ''; });
									data.s = 1;
								}*/
			
								if(args.onClose) args.onClose(true, data, true);
							//if(args.onClose) args.onClose(false);
								
								//ox.el.onRefresh(function() { t0.bp('Closed'); });
							},
							
							// Private functions - Data
							
							setData: function() {
								var args = this.args;
								var comp = this.comp;
								var data = {};
								
								if(comp.data && comp.data.nodeToData) {
									data = comp.data.nodeToData(args.data.v, {
										node: args.node,
										map: args.node.map,
									});
								}
								else if(comp.toData) {
									data = comp.toData(args.data);
								}
								else {
									data = omnia.tools.File.nodeToData(args.data, {isNoMarkup: true});
								}
								this.data = data;							
							},
							getData: function(args) {
								//log('_omnia.ui.editor.handler.getData');
								var data = null;
								
								if(this.comp && this.comp.editor.formToData && this.comp.data && this.comp.data.dataToNode) {
									data = this.comp.data.dataToNode(this.comp.editor.formToData({root: this.root, data: this.data})); 
								} else if(this.comp && this.comp.data && this.comp.data.dataToNode) {
									var form = this.form.getValue();
									data = this.comp.data.dataToNode(form);
								} else if(this.comp && this.comp.toTag) {
									data = ox.el.getData(this.root, false, null, true);
									data = this.comp.toTag(data);
								} else {
									var form = {};
							
									if(this.comp && this.comp.editor.formToData) {
										form = this.comp.editor.formToData({root: this.root, data: this.data});
									} else {
										form = this.form.getValue();
										//log({id: 'omnia.ui.editor.handler.getData', form: Object.keys(form)});
									}
									
									
									data = args.data;
									data.v = args.data.v ? args.data.v : (this.comp && this.comp.meta && this.comp.meta.defaultData && this.comp.meta.defaultData.v ? this.comp.meta.defaultData.v : null);
									if(!data.v) delete data.v;
									data.s = args.data.s || 1;
									//data.c = [];
									
									var dataC = [];
									ox.each(data.c, function(idx, c) {
										ox.each(form, function(id, value) {
											if(c.v && (new RegExp('([\\*#]attr-' + id + ')(\\s|$)', 'gi')).test(c.v)) {
												c = typeof value == 'string' || typeof value == 'number' ? {v: '#attr-' + id + ' ' + value} : value;
												delete form[id];
											}
										});
										
										dataC.push(c);
									});
									
									ox.each(form, function(id, value) { dataC.push(typeof value == 'string' || typeof value == 'number' ? {v: '#attr-' + id, c: [{v: value}]} : value); });
									
									log({id: 'omnia.ui.editor.handler.getData', form: Object.keys(form), data: args.data, dataC});

									data.c = dataC;
									
									
									//log({form});
									
									/*data = ox.el.getData(this.root, true, true);
									data.v = this.comp && this.comp.meta && this.comp.meta.defaultData && this.comp.meta.defaultData.v ? this.comp.meta.defaultData.v : args.data.v;
									data.c = data.c.filter(function(item) { return item.v && item.v != ''; });
									data.s = 1; */
								}
								
								return data;
							},
							
};omnia.ui.editor.html = {
	
							oid: 'frame2', css: 'ox-editor', isLog: true, c: [
								/*{oid: 'bar2', css: 'ox-hidden ox-id-bar-edit ox-alone ox-line', c: [
									{oid: 'button', css: 'ox-inline ox-blue', label: '#edit-button'},
								]},*/
								{oid: 'frame2', css: 'ox-id-view ox-hidden'},
								{oid: 'frame2', css: 'ox-id-form m0 ox-hidden'},
							]
							
};omnia.ui.iconeditor.handler = {

							clsId: 'omnia.ui.iconeditor.handler',
							args: null,
							elems: null,
							root: null,
							value: '',
							icons: null,
							
							init: function(args) {
								this.args = args;
								
								this.render(args);
								this.reset(args);
								
								log(this.clsId + '.init: value = ' + this.value);
							},
							
							// Private functions - UI
							
							render: function(args) {
								this.root = args.root;
								var me = this;
								var e = this.elems = ox.el.getAll(args.root, true);
							
								// Set icons
								var iconStyles = this.icons = this.getIconStyles();
								ox.node(iconStyles.map(function(style) {
									style.id = ox.id();
									return {
										oid: 'button', 
										css: 'ox-id-icon ox-id-icon-' + style.id + ' ox-inline ox-slim ox-autosize ' + (ox.pf.isDesktop ? '' : ' ox-nohighlight ox-font-12'), 
										style: 'font-size:12px !important; _margin:1px !important; width:35px !important;', 
										label: style.html, 
										click: function(e, elem) {
											me.onIconSelect(style, elem);
										},
									};
								}), e.icons);
								
							},
							getRoot: function() {
								return this.root;
							},
							onIconSelect: function(style, elem) {
								this.setIcon(style, null, elem);
								var v = this.value = this.iconsToValue();
								
								if(this.args.onChanged) this.args.onChanged({value: v});
								log(this.clsId + '.onIconSelect: value = ' + v);
							}, 
							setAll: function(value) { 
								var me = this;
								var codes = this.valueToIcons(value);

								this.icons.forEach(function(style) { me.setIcon(style.id, false); });
								codes.forEach(function(code) { 
									var style = me.icons.find(function(style) { return style.code == code; });
									me.setIcon(style, true); 
								});
							},
							setIcon: function(style, isOn, elem) {
								if(!elem) elem = this.root.find('.ox-id-icon-' + style.id);
								var selected = 'col-blue-15-back ox-dark-col-night-back ox-dark-col-white ox-id-selected';
							
								if(typeof isOn != 'boolean') elem.toggleClass(selected);
								else ox.css(elem, selected, isOn);
								
								style.isOn = elem.hasClass('ox-id-selected');
							},
							
							// Public functions - Data
							
							reset: function(args) {
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.value) this.setValue(args.value);
								if(args.data && args.data.v) this.setValue(args.data.v);
							},
							getValue: function() {
								return this.value;
							},
							setValue: function(value) {
								this.value = value;
								this.setAll(value);
							},
							
							// Private functions - Data

							getIconStyles: function() {
								var styles = ox.ui.text.markup.styles;
								return ox.copy(styles.filter(function(style) { return style.group == 'icon'; }));
							},
							valueToIcons: function(value) {
								var render = omnia.ui.text.markup.render(value, {isDetails: true});
								return render.elements.map(function(item) { return item.style.code; });
							},
							iconsToValue: function() {
								return this.icons.filter(function(style) { return style.isOn; }).map(function(style) { return style.code; }).join(' ').trim();
							},
							
};omnia.ui.iconeditor.html = {

							t: 'div', css: 'ox-iconeditor', c: [
								{oid: 'bar2', css: 'ox-alone ox-height-flex ox-selected-back', c: [
									{t: 'div', css: 'w100 ox-id-icons wrap'},
								]},
							],

};omnia.ui.imageeditor.handler = {
							
							// Data
							
							id: null,
							args: null,
							argsImg: null,
			
							root: null,
							overlay: null,
							popup: null,
							flow: null,
							flowFrame: null,
							imageselect: null, // Imagesearch comp.
							img: null, // Preview image
							barPrefs: null,
							actionsFinal: null,
							size: null, // Download size
							isImageFit: false,
			
							open: function(args) {
								if(!args) args = {};
								/*var args2 = {
									data: args.data, 
									isInline: true, 
									onClose: args.onClose,
								};*/
								args.isInline = true;
								
								omnia.ui.overlay.show({
									delay: true,
									onClose: args.onClose ? function() { args.onClose(); } : null,
									isModal: true,
									isScroll: true,
									onRendered: function(overlay) { args.overlay = overlay; },
									frame: {
										oid: 'dialog',
										css: 'ox-id-overlay-popup ox-noactions ox-body-flex ox-nocaption',
										style: ox.pf.isPhone ? {'height': '80%', 'width': '100%'} : {'width': '90%', 'height': '90%'},
										c: [
											{oid: 'imageeditor', onReady: function(elem, imageeditor) { args.imageeditor = imageeditor; }, args: args},
										],
									},
								});	
							},
							init: function(args) {
								// args: root, content, data
								log('omnia.ui.imageeditor.init');
								
								this.args = args;
								this.id = omnia.tools.getUniqueId();
								this.root = args.root;
							
								// Get image data
								if(!args.data) args.data = {};
								var data = {};
								if(args.data.url) data = args.data;
								else if(args.data.v) {
									var dataStr = args.data.v.substr(7).trim();
									data = ox.str.saveStringToObject(dataStr); //omnia.ui.image.handler.stringToData(dataStr); //dataStr.length ? JSON.parse(dataStr) : {}; //omnia.tools.string.urlStringToObject(dataStr);	
								}
								if(data.fit) this.isImageFit = true;
								var isUrl = data.url && data.url.substr(0, 4) != 'data';
			
								// Render
								if(data.url) this.argsImg = {
									url: data.url, 
									isUrl: isUrl,
									isReopen: true, 
									platform: args.platform, 
									linked: isUrl,
									isForceEmbed: !isUrl,
									quality: data.quality,
								};
								if(!data.url && data.meta) this.argsImg = {
									meta: data.meta,
									isUrl: true,
									isUrlTemp: true,
									isReopen: true,
									platform: args.platform,
									linked: true,
									isForceEmbed: false,
									quality: data.quality,
								}
								this.render(args);
							},
							close: function(isSave) {
								log('omnia.ui.imageeditor.close');
			
								// Close overlay
								if(this.overlay) this.overlay.close(true);
								if(this.args.overlay) this.args.overlay.close(true);
								
								// Do not save
								if(!isSave) {
									if(this.args && this.args.onClose) this.args.onClose();
									return;
								}
								
								// Save
								var args = this.argsImg;
								var src = !args.img && args.url ? args.url : args.img.toBase64(args);
			
								if(args.isSave && src) {
									
									// Build image info
									var data = {};
									
									if(args.linked && !args.isUrlTemp) data.url = args.url;
									if(!args.linked && args.img) data.url = args.img.toBase64(args);
									if(args.meta) data.meta = args.meta;
									if(args.quality) data.quality = args.quality;
									if(this.isImageFit) data.fit = 1;
									if(args.img) {
										data.w = args.img.width();
										data.h = args.img.height();
									}
			
									var dataStr = ox.str.objectToSaveString(data); //omnia.ui.image.handler.dataToString(data); //JSON.stringify(data); //omnia.tools.string.objectToUrlString(data);
									
									this.args.data.v = '#image-' + dataStr;
								}
								
								if(this.args && this.args.onClose) this.args.onClose(args.isSave);
							},
							
							// UI
							
							loadProgress: function(loaded, total) {
								if(!this.popup) return;
								
								var load = $(this.popup.find('.ox-id-loading'));
								if(!load) return;
								
								var h = load.data('ox-handler');
								if(h) h.progress(loaded, total);
							},
							render: function(args) {
								var me = this;
								var platform = args.platform ? args.platform : omnia.tools.browser.platform;
								//var isInline = args.isInline;
								var isPhone = platform.device == 'phone';
								
								var frame = {oid: 'frame2', css: 'ox-id-editor rel', onReady: function(elem, frame) { 
									me.popup = elem; 
									me.actionsFinal = $(elem.find('.ox-id-action-next'));
									
									me.onRendered();
								}, c: [
									
									{oid: 'frame2', css: 'ox-id-flow', onReady: function(elem, frame) { me.flow = elem; me.flowFrame = frame; }, c: [
										
										// Bread crumb flow
										{oid: 'bar2', css: 'ox-id-bar-core ox-flat ox-col-ui-dialog-1-back col-highlight ox-notabborder ox-noflex scrollable ox-line ox-hidden', c: [
											{oid: 'tabstatic', css: 'ox-id-tab-select ox-breadcrumb', label: '<i class="fa fa-arrow-left"></i>'},
										]},
										
										// Select tab
										{oid: 'frame2', css: 'ox-id-tab-select ox-child', style: platform.device != 'desktop' ? {'width': '100%', 'min-height': '90px'} : {'_min-width': '800px', 'max-width': '100%', 'max-height': '100%'}, c: [
											{oid: 'imagesearch', css: '', onReady: function(elem, imagesearch) { me.imageselect = imagesearch; }, args: {
												platform: platform,
												id: me.id,
												isSimple: true,
												onSelect: function(args2) { me.onImageSelected(args2); },
												onLoadProgress: function(loaded, total) { me.loadProgress(loaded, total); },
												url: me.argsImg && me.argsImg.linked && me.argsImg.url ? me.argsImg.url : null,
											}},
										]},
									]},
			
									// Action bars
									
									// Mobile
									!isPhone || this.args.isNoBar ? null : {oid: 'bar2', css: 'ox-end ox-line ox-stretch ox-col-ui-dialog-1-back ox-actions flex-fix', style: {'min-height': '55px'}, c: [
										{oid: 'button', css: 'ox-inline', label: '#cancel', click: function() { me.close(); }},
										{oid: 'button', css: 'ox-inline ox-green ox-id-action-next ox-hidden', label: '#save-button', click: function() { me.close(true); }},
									]}, 
									!isPhone ? null : {t: 'div', css: 'ox-id-download-size _ox-id-action-next ox-hidden ox-tag abs _b0 col-blue-75-back col-white', style: 'top:calc(100% - 210px); right:10px; z-index:1; font-size:13px !important; font-weight:400; background:rgba(0, 0, 0, .3) !important;', onRendered: function(elem) { me.size = elem; }},
									
									// Desktop
									isPhone || this.args.isNoBar ? null : {oid: 'bar2', css: 'ox-col-ui-dialog-1-back ox-alone ox-end ox-split ox-line _ox-bottom-safe flex-fix ', c: [
										{oid: 'button', css: 'ox-inline', label: '#cancel', click: function() { me.close(); }},
										{t: 'div', css: 'ox-id-action-next ox-hidden', c: [
											{oid: 'label', css: 'ox-id-download-size pr10 col-medium-0 font ox-hidden', style: {'font-weight': '400', 'font-size': '12px'}, onRendered: function(elem) { me.size = elem; }},
											!app || !app.debug ? null : {oid: 'buttonicon', css: 'ox-inline ox-slim ox-alone', icon: 'fa fa-link', click: function() { me.onProductLink(); }},
											!app || !app.debug ? null : {oid: 'buttonicon', css: 'ox-inline ox-slim ox-alone', icon: 'fa fa-info-circle', click: function() { me.onInfo(); }},
											{oid: 'button', css: 'ox-inline ox-green', label: '#save-button', click: function() { me.close(true); }},
										]},
									]}, 
									
									// Overlay Desktop
								]};
								
								ox.node(frame, args.root);
							},
							renderPrefs: function(args) {
								log('_omnia.ui.image.editor.renderPrefs' + (args.isReopen ? ': Reopen' : ''));
			
								var me = this;
								this.argsImg = args;
								var platform = this.args.platform || omnia.tools.browser.platform;
			
								// Data
								args.w = me.args.forceSize || 'initial';
								args.quality = me.args.forceQuality || this.argsImg.quality || .8;
								if(me.args.forceCrop) me.isImageFit = me.args.forceCrop;
								args.sourceFormat = this.argsImg.url ? ox.str.mimeTypes[this.argsImg.url.substr(this.argsImg.url.lastIndexOf('.') + 1).toLowerCase()] : null;
								if(args.sourceFormat == 'image/png') args.isNoQuality = true;
								
								// Direct Mode
								if(this.args.isDirect) {
									this.updateImage(args);
									this.close(true);
									return;
								}
			
			
								// Render
								var barLink = [
									{oid: 'toggle', args: {
										items: [
											{label: '<i class="fa fa-link ox-before"></i>' + ox.tx('linked')},
											{label: '<i class="fa fa-download ox-before"></i>' + ox.tx('embed')},
										],
										active: args.linked ? 0 : 1,
										onActivate: function(item, idx) { me.toggleLink(idx == 0, args); },
									}},
								]; 
								var barCrop = [
									platform.device == 'phone' ? null : {oid: 'label', css: 'pr5 col-medium-4 pl10 pr10 ox-line-left', text: '#crop', style: {'min-width': '0'}},
									{oid: 'toggle', args: {
										cssItems: 'ox-slim ox-inline',
										items: [
											{label: '#scale'},
											{label: '#show-full'},
										], 
										active: this.isImageFit ? 1 : 0, 
										onActivate: function(item, idx) { me.isImageFit = idx == 1; },
									}},
								];
								var barSize = [
									platform.device == 'phone' ? null : {oid: 'label', css: 'pr5 col-medium-4 pl10 pr10', text: '#size', style: {'min-width': '0'}},
									{oid: 'toggle', css: 'ox-id-size-toggle', args: {
										cssItems: 'ox-slim ox-inline',
										items: [/*
											{label: 'S', w: 300},
											{label: 'M', w: 800},
											{label: 'L', w: 1920},
											{label: 'HD 16:9', w: 1920, h: 1080},
											{label: '4:3', w: 1440, h: 1080},*/
											{label: '#full', w: 'full', v: 'full', command: 'size'},
										], 
										//active: 0, 
										onActivate: function(item, idx) { me.updateImage(args, item); },
									}},
								];
								var barQuality = [
									platform.device == 'phone' ? null : {oid: 'label', css: 'pr5 col-medium-4 pl10 pr10 ox-line-left', text: '#quality', style: {'min-width': '0'}},
									{oid: 'toggle', onReady: function(elem, toggle) { if(me.argsImg.quality) toggle.setValue(parseFloat(me.argsImg.quality), false); }, args: {
										cssItems: 'ox-slim ox-inline',
										items: [
											{label: '20%', quality: .2, v: .2, command: 'quality'},
											{label: '50%', quality: .5, v: .5, command: 'quality'},
											{label: '80%', quality: .8, v: .8, command: 'quality'},
											{label: '100%', quality: 1, v: 1, command: 'quality'},
										], 
										active: 2, 
										onActivate: function(item, idx) { me.updateImage(args, item); },
									}},
								];
								
								var imgBody = [
									{oid: 'loadcontent', css: 'ox-id-loading ox-col-ui-dialog-1-back ox-hidden'},
									{oid: 'frame2', css: 'ox-col-ui-dialog-1-back ox-id-stage _ox-content hcenter flex-1 flex-center h100', c: [
										{t: 'img', css: 'ox-id-imageprefs ox-hidden w100 _mt10 _mb10', style: {'height': ox.pf.isPhone ? null : '100%', 'object-fit': 'scale-down'}, onRendered: function(elem) { me.img = elem; }},
									]},
								];
								var body = platform.device == 'phone' ? imgBody.concat([
									{oid: 'frame2', css: 'ox-id-prefs-bar ox-hidden flex-fix ox-col-ui-dialog-1-back ox-alone', onRendered: function(elem) { me.barPrefs = elem; }, c: [
										me.args.forceCrop ? null : {oid: 'bar2', css: 'ox-id-tab-pref-crop ox-hidden ox-end ox-center pl15 pr15 ox-line _ox-id-prefs-embed', c: barCrop},
										me.args.forceSize ? null : {oid: 'bar2', css: 'ox-id-tab-pref-size ox-hidden ox-end ox-center pl15 pr15 ox-line ox-id-prefs-embed', c: barSize},
										me.args.forceQuality || args.isNoQuality ? null : {oid: 'bar2', css: 'ox-id-tab-pref-quality ox-hidden ox-end ox-center pl15 pr15 ox-line ox-id-prefs-embed', c: barQuality},
								
										{oid: 'bar2', css: 'ox-end ox-line ox-split ox-alone ox-flat-top', c: [
											args.isForceEmbed ? null : barLink,
											{t: 'div', css: '_ox-id-prefs-embed', c: [
												me.args.forceSize ? null : {oid: 'tabstatic', css: 'ox-id-tab-pref-size _ox-active ox-tab-medium ox-id-prefs-embed', label: '#size'},
												me.args.forceQuality || args.isNoQuality ? null : {oid: 'tabstatic', css: 'ox-id-tab-pref-quality ox-tab-medium ox-id-prefs-embed', label: '#quality'},
												me.args.forceCrop ? null : {oid: 'tabstatic', css: 'ox-id-tab-pref-crop ox-active ox-tab-medium', label: '#crop'},
											]},
										]},
									]},
								]) : [
									{oid: 'bar2', css: 'ox-id-prefs-bar ox-hidden _cropped ox-col-ui-dialog-1-back ox-alone ox-line ox-noflex nowrap', onRendered: function(elem) { me.barPrefs = elem; }, c: [].concat(
										me.args.forceCrop ? null : barCrop,
										me.args.forceCrop ? null : {oid: 'sep'},
										args.isForceEmbed ? null : barLink,
										{t: 'div', css: 'inline vtop ox-id-prefs-embed ml5', c: [
											args.isForceEmbed || (me.args.forceSize && me.args.forceQuality) ? null : {oid: 'sep'},
											me.args.forceSize ? null : barSize,
											me.args.forceSize && me.args.forceQuality ? null : {oid: 'sep'},
											me.args.forceQuality || args.isNoQuality ? null : barQuality,
										]},
									)},
								].concat(imgBody);
								
								var frame = this.flow.data('ox-handler');
								frame.addTab({
									label: '#preferences',
									isStatic: true,
									id: 'prefs',
									cssTab: 'ox-breadcrumb ox-breadcrumb-line',
									frame: {oid: 'frame2', css: 'ox-id-body rel', c: body, onRendered: function(elem) {
										setTimeout(function() { 
											me.toggleLink(args.linked, args);
											me.updateImage(args); 
										}, 1);
									}}, 
									isActive: true,
									onClose: function() {
										me.onPrefsClose();
									},
								});
								ox.el.get('bar-core', me.root).removeClass('ox-hidden');
								
							}, 
							toggleImageLoad: function(isLoad) {
								if(!isLoad) this.loadProgress(false); else this.loadProgress();
								if(this.img) ox.css(this.img, 'ox-hidden', isLoad);
								if(this.barPrefs) ox.css(this.barPrefs, 'ox-hidden', isLoad);
								if(this.actionsFinal) ox.css(this.actionsFinal, 'ox-hidden', isLoad);
							},
							toggleLink: function(isLinked, args) {
								log('omnia.ui.imageeditor.toggleLink: isLinked = ' + (isLinked ? 'true' : 'false'));
								
								var bar = $(this.popup.find('.ox-id-prefs-embed'));
								bar.css('display', isLinked ? 'none' : '');
								//ox.css(bar, 'ox-hidden', isLinked);
			
								this.updateImage(args, {linked: isLinked});
							},
							updateImage: function(args, item, isLoaded) {
								log('omnia.ui.imageeditor.updateImage: ' + (args.isReopen ? 'Reopen ' : '') + (isLoaded ? 'Loaded' : 'Not loaded')); 
								var me = this;
								var isInitial = args && args.w == 'initial';
								
								// Set parameters
								if(item && item.linked !== undefined) args.linked = item.linked;
							
								// Status
								if(args.url && args.isUrl && args.linked) {
									log('omnia.ui.imageeditor.updateImage: Linked URL');
			
									args.isSave = true;
									if(this.img) this.img.attr('src', args.url);
									this.setInfo(args);

									/*if(this.size) {
										this.size.html('');
										this.size.addClass('ox-hidden');
									}*/
									this.toggleImageLoad(false);
									return;
								}
			
								// Create & load image
								this.toggleImageLoad(true);
			
								// Loading
								if(!isLoaded && !args.img) {
									log('omnia.ui.imageeditor.updateImage: Loading', args);
									
									args.onLoadProgress = function(loaded, total) { me.loadProgress(loaded, total); },
									args.onLoaded = function(args2, img) { 
										log('omnia.ui.imageeditor.updateImage: Loaded');
											
										args.img = img; 
										//me.loadProgress(omnia.tools.t('process-image'));
										//if(img.name) frame.renameTab(img.name, 'prefs');
										setTimeout(function() { me.updateImage(args, item, true); }, 1);
									};
									args.img = omnia.tools.create(omnia.tools.Image, args);
									return;
								}
								if(!args.img) return;
								
								// Set parameters
								log('omnia.ui.imageeditor.updateImage: Embedded image');
			
								var dim = args.img.getDim();
								var dimMax = args.dimMax = {w: args.meta && args.meta.imageWidth ? args.meta.imageWidth : dim.w, h: args.meta && args.meta.imageHeight ? args.meta.imageHeight : dim.h };
			
								if(item && item.w == 'full') item.w = args.w = dimMax.w;
								if(args && args.w == 'initial') args.w = !dim || !dim.w ? null : (dim.w > 1920 ? 1920 : dim.w);
								
								if(item && item.w && item.w > dimMax.w) item.w = dim.w;
								if(item && item.h && item.h > dimMax.h) item.h = dim.h;
								
								args.format = args.format || args.sourceFormat || 'image/jpeg'; //omnia.ui.image.format;
								args.quality = args.linked ? 1 : (item && item.quality ? item.quality : (args.quality ? args.quality : omnia.ui.image.quality));
								args.pos = 'fill';
								args.w = args.linked ? 1920 : (item && (item.w || item.h) ? (item.w ? item.w : item.h / dim.h * dim.w) : (args.w ? args.w : dim.w));
								args.h = args.linked ? 1920 / dim.w * dim.h : (item && (item.w || item.h) ? (item.h ? item.h : item.w / dim.w * dim.h) : (args.h ? args.h : (args.w ? args.w / dim.w * dim.h : dim.h)));
			
								if(args.w == 0 || args.h == 0) return;
								
								// Set toggle
								var sizeItems = [
									{label: 'S', w: 300, v: 's', command: 'size'},
									{label: 'M', w: 800, v: 'm', command: 'size'},
									{label: 'L', w: 1920, v: 'l', command: 'size'},
									//{label: 'HD 16:9', w: 1920, h: 1080, v: 'hd', command: 'size'},
									//{label: '4:3', w: 1440, h: 1080, v: '4:3', command: 'size'},
									//{label: '#full', w: 'full', v: 'full', command: 'size'}, // To enable full size (it disabled because pixabay url is set to HD)
								];
								var sizeItemsShown = [];
			
								$.each(sizeItems, function(i, it) {
									if(it && (!it.w || typeof it.w == 'string' || (dimMax.w && it.w < dimMax.w)) && (!it.h || (dimMax.h && it.h < dimMax.h))) sizeItemsShown.push(it);
								});
			
								var sizeToggle = ox.el.get('size-toggle', this.root, true);
								
								if(sizeToggle && !(item && item.command == 'quality')) {
									sizeToggle.reset({
										items: sizeItemsShown,
										value: item && item.v && item.command == 'size' ? item.v : (dim.w >= 1920 || 1 ? 'l' : 'full'), // To enable full size (it disabled because pixabay url is set to HD)
									});
								}
							
								// Get image data & set UI
								if(!this.args.isDirect) {
									var src = args.img.toBase64(args);
									var bytes = args.bytes = args.linked ? args.url.length : src.length; //args.img.getUrl().length : (args.isReopen ? args.url.length : src.length);
									this.img.attr('src', src);

									//this.size.html(this.argsImg.format + '<span class="pl15 pr15 bold">' + omnia.tools.string.toSize(bytes) + '</span>' + Math.floor(args.w) + ' x ' + Math.floor(args.h) + ' px');
									//this.size.removeClass('ox-hidden');
								}
								
								// Set info
								this.setInfo(args);
								
								this.toggleImageLoad(false);
								
								if(item) {
									args.isReopen = false;
									args.isSave = true;
								}
							},
							setInfo: function(args) {
								//log('#omnia.ui.imageeditor.handler.setInfo');
								
								try {
									var w = args.w && typeof args.w == 'number' && !args.linked ? args.w : (args.meta && args.meta.imageWidth ? args.meta.imageWidth : null);
									var h = args.h && typeof args.h == 'number' && !args.linked ? args.h : (args.meta && args.meta.imageHeight ? args.meta.imageHeight : null);
									var f = this.argsImg.format || this.argsImg.sourceFormat;
									f = f && typeof f == 'string' ? f.substr(f.indexOf('/') + 1).toUpperCase() : '';
									
									var inf = f + (args.bytes && !args.linked ? '<span class="pl15 bold">' + omnia.tools.string.toSize(args.bytes) + '</span>' : '') + (w && h ? '<span class="pl15">' + Math.floor(w) + ' x ' + Math.floor(h) + ' px</span>' : ''); 
	
									this.size.html(inf);
									this.size.removeClass('ox-hidden');
								}
								catch(e) {}
							},
							
							// Private events
							
							onRendered: function() {
								log('onRendered', this.argsImg);
								
								var me = this;
								if(!this.argsImg) return;
								
								if(this.argsImg.url) this.renderPrefs(this.argsImg);
								else if(this.argsImg.meta) {
									this.toggleImageLoad(true);
									this.loadProgress();
									
									ox.ui.image.handler.load({
										data: this.argsImg,
										onLoaded: function() {
											me.renderPrefs(me.argsImg);
										},
										next: function() {
											me.toggleImageLoad(false);
										},
									});
								}
							},
							onImageSelected: function(args) {
								log('omnia.ui.imageeditor.onImageSelected');
			
								if(args.url && args.isUrl) args.linked = true;
								if(args.files) args.isForceEmbed = true;
								
								this.renderPrefs(args);
							},
							onPrefsClose: function() {
								ox.el.get('bar-core', this.root).addClass('ox-hidden');
								this.size.addClass('ox-hidden');
			
								this.img = null;
								this.barPrefs = null;
								
								if(this.imageselect) this.imageselect.onActivate();
								if(this.actionsFinal) this.actionsFinal.addClass('ox-hidden');
							},
							onInfo: function() {
								ox.ov.show({content: {oid: 'obj', args: {obj: this.argsImg}}});
							},
							onProductLink: function() {
								if(!this.argsImg.meta || !this.argsImg.meta.photoId) return false;
								
								//ox.b.openBrowser({url: 'https://photos.google.com/u/2/photo/' + this.argsImg.meta.photoId});
								//return;
								
								omnia.tools.net.google.getPhoto({
									photoId: this.argsImg.meta.photoId,
									isForceReload: true,
									onLoaded: function(result) {
										if(result.productUrl) ox.b.openBrowser({url: result.productUrl});
										//ox.ov.show({content: {oid: 'obj', args: {obj: result}}});
									},
								});
								
								//if(this.argsImg.meta && this.argsImg.meta.productUrl) ox.b.openBrowser({url: this.argsImg.meta.productUrl});
							},

};omnia.ui.imageeditor.html = {
							
							oid: 'frame2'
							
};omnia.ui.imagesearch.handler = {
							
							// data
							id: null,
							args: null,
							img: null,
							
							// UI
							root: null,
							tabCache: null,
							listSearchResults: null,
							
							init: function(args) {
								log('omnia.ui.imagesearch.init');
			
								var me = this;
								this.id = ox.id();
								this.args = args;
								this.root = args.root;
								
								this.render(args);
							},
			
							// Public functions - UI
							
							render: function(args) {
								var me = this;
								var root = this.root;
								var platform = args.platform ? args.platform : omnia.tools.browser.platform;
								
								// Search field
								var searchFields = ox.el.get('search-query', this.root, true);
								$.each(searchFields, function(i, search) {
									search.reset({
										onOk: function(url) { me.onSelect(url, 'url'); },
										onSearch: function(query) { me.onSearch(query); },
									});
								});
								ox.el.get('tab-search', this.root).on(ox.b.CLICK, function(e) { 
									//me.onActivate();
									
									//ox.el.get('.ox-id-search-query input', me.root).focus(); 
									//omnia.ui.imagesearch.handler.tabCache = 'search';
								});
								
								ox.el.onRefresh(function() { 
									me.onActivate();
									//ox.el.get('.ox-id-search-query input', me.root).focus(); 
									//me.requestPixabay();
								});
								
								var listSearchResults = this.listSearchResults = ox.el.get('search-result', this.root, true);
								listSearchResults.reset({
									getItem: function(idx, image) { return me.getSearchResultItem(image); },
									//gridInfo: ox.pf.isPhone ? {w: 140} : null,
								});
								
								// URL
								var urlField = $(root.find('.ox-id-url'));
								var urlHandler = urlField.data('ox-handler');
								if(args.noUrl) urlField.addClass('ox-hidden');
								else urlHandler.reset({
									value: args.url ? args.url : null,
									//focus: args.url ? true : false,
									onOk: function(url) { me.onSelect(url, 'url'); },
									//onSearch: function(query) { me.onSearch(query); },
								});
								ox.el.get('tab-upload', this.root).on(ox.b.CLICK, function(e) { ox.el.get('url', me.root, true).focus(); });
								
								// Toogle tab
								var googlePhotosFrame = ox.el.get('frame-google-photos', this.root, true);
								googlePhotosFrame.onActivate = function() {
									omnia.ui.imagesearch.handler.tabCache = 'google-photos';
									
									googlePhotosFrame.getRoot().html('');
									ox.node({oid: 'googlephotosselect', args: {
										onSelectPhoto: function(data) { 
											me.onSelect(data, 'google-photos');
											/*data.provider = 'google-photos';
											args.onSelect({
												url: data.photo.baseUrl + "=w1920", 
												isUrl: true, 
												meta: data,
											}); */
										},
									}}, googlePhotosFrame.getRoot());
									googlePhotosFrame.onActivate = null;
								};
			
								// Upload
								var upload = this.root.find('.ox-imagesearch-upload');
								upload.attr('id', 'ox-imagesearch-upload-' + this.id);
								
								var uploadLabel = this.root.find('.ox-id-imagesearch-uploadlabel');
								uploadLabel.attr('for', 'ox-imagesearch-upload-' + this.id);
								if(platform.device == 'phone') uploadLabel.find('.ox-button').html('<i class="fa fa-upload" style="line-height:35px;"></i>');
			
								if(args.onChange) upload.on('change', args.onChange);
								else upload.on('change', function() { me.onSelect(this.files, 'files'); });
								
								// Test items
								var all = ox.el.get('frame-test', this.root);
								var imgs = ['beach', 'cafe', 'cloud', 'mountain', 'notebook'];
								$.each(imgs, function(i, img) {
									ox.node([
										{
											oid: 'image', 
											css: 'br2 hand ox-tile ox-interactive mr10 mb10 inline', 
											url: 'https://slide.style/images/samples/' + img + '.jpg', 
											style: {'width': 250, 'height': 150}, 
											click: function() { me.onSelect('https://slide.style/images/samples/' + img + '.jpg', 'url'); },
										},
									], all);
								});
								
								if(!app || !app.debug) {
									ox.el.get('tab-google-photos').addClass('ox-hidden');
									ox.el.get('tab-test').addClass('ox-hidden');
								}
								
								// Reset tabs
								if(omnia.ui.imagesearch.handler.tabCache) setTimeout(function() { 
									var frame = me.root.data('ox-handler-frame');
									if(frame && frame.activate) frame.activate(omnia.ui.imagesearch.handler.tabCache); 
								}, 1);
								
							},
							reset: function() {
								log('omnia.ui.imagesearch.reset');
								
								var upload = this.root.find('.ox-imagesearch-upload');
								upload[0].value = '';
								
								ox.el.get('.ox-id-search-query input', this.root).focus(); 
								omnia.ui.imagesearch.handler.tabCache = 'search';
								this.requestPixabay();
							},
							
							// Public events
			
							onActivate: function() {
								this.reset();
							},
							
							// Private events
							
							onSelect: function(data, type) {
								if(!this.args || !this.args.onSelect) return false;
								var r = null;
								
								switch(type) {
									case 'url':
										r = {url: data, isUrl: true};
										break;
									case 'files':
										r = {files: data};
										break;
									case 'pixabay':
										data.meta.provider = 'pixabay';
										r = {
											url: data.url,
											meta: data.meta,
											isUrl: true,
											isUrlTemp: true,
										};
										break;
									case 'google-photos':
										r = {
											url: data.photo.baseUrl + "=w1920", 
											isUrl: true, 
											isUrlTemp: true,
											//meta: data,
											meta: {
												provider: 'google-photos',
												photoId: data.photo.id,
												productUrl: data.photo.productUrl,
												mimeType: data.photo.mimeType,
												creationTime: data.photo.mediaMetadata.creationTime,
												width: data.photo.mediaMetadata.width,
												height: data.photo.mediaMetadata.height,
												filename: data.photo.filename,
												
												albumId: data.album.id,
												albumTitle: data.album.title,
											},
										};
										break;
								}
							
								this.args.onSelect(r);
							}, // on select an item
							onSearch: function(query) {
								this.listSearchResults.clear();
								this.listSearchResults.loading({title: '#load-images'});
								
								this.requestPixabay({query: query, page: 1});
							},
							
							// Private functions - use cases
							
							requestPixabay: function(args) {
								if(!args) args = {};
								log('_omnia.ui.imagesearch.requestPixabay', args);
			
								var me = this;
								var param;
								
								if(args.id) {
									
									// Image by ID
									args.param = {
										id: args.id,
									}
									args.next = function(args) { me.listSearchResults.loading({stop: true}); if(args.images && args.images.length) me.onSelect({url: args.images[0].url, meta: args.images[0].meta}, 'pixabay'); };
									args.action = function() {};
									
								} else {
									
									// Query
									if(!args.page) {
										args.page = 1;
										me.listSearchResults.clear();
									}
									args.param = args.query ? {
										q: args.query,
										page: args.page,
										per_page: 20,
									} : {
										editors_choice: true,
									}
									if(!args.onDone && args.query) args.onDone = function() { args.page++; me.requestPixabay(args); };
									args.next = function(args) { me.publishSearchResults(args.images && args.images.length ? args : {isEmpty: true}); };
									args.action = function(image) { me.requestPixabay({id: image.meta.id}); };
									
								} 
								
								delete args.images;
								//args.param = param;
								if(!args.onProgress) args.onProgress = function(bytes, total) { me.listSearchResults.loading({t0: ox.str.toSize(bytes), t1: ox.str.toSize(total)}); };
							
								omnia.tools.net.pixabay.get(args);
								
								//return;
								/*omnia.tools.net.get({
									cache: true,
									timeout: 30000,
									param: {
										'cmd': 'proxy',
										'api': 'pixabay',
										'url': omnia.tools.string.objectToUrlString(args.param),
									}, 
									onProgress: function(bytes, total) { me.listSearchResults.loading({t0: ox.str.toSize(bytes), t1: ox.str.toSize(total)}); },
									onResponse: function(args2) { 
										log('omnia.ui.imagesearch.requestPixabay: received');
										
										if(args2 && args2.data && args2.data.hits) {
											var images = [];
											$.each(args2.data.hits, function(i, item) {
												images.push({
													provider: 'pixabay',
													preview: {
														url: item.webformatURL, //item.previewURL,
														w: item.webformatWidth, //item.previewWidth, 
														h: item.webformatHeight, //item.previewHeight,
													},
													url: item.fullHDURL || item.largeImageURL,
													w: item.fullHDURL ? item.imageWidth : 1280,
													h: item.fullHDURL ? item.imageHeight : 1280 / item.imageWidth * item.imageHeight,
													meta: item,
													action: args.action,
												});
											});
											
											args.images = images;
											//me.publishSearchResults(args);
										} else {
											//me.publishSearchResults({isEmpty: true});
										}
										args.next(args);
									}
								});					
								*/
							}, 
							
							publishSearchResults: function(args) {
								log('omnia.ui.imagesearch.publishSearchResults' + (args.images ? ': Publish ' + args.images.length + ' images' : ''));
								
								var me = this;
								var list = this.listSearchResults;
								
								if(args.isClear) list.clear();
								
								if(args.isEmpty) {
									list.loading({stop: true});
									return;
								}
								
								if(args.images && args.images.length) {
									/*var images = ox.copy(args.images);
									var sorted = [];
									var w = Math.floor(me.listSearchResults.getRoot().width()) - 30;
									var ih = ox.pf.isPhone ? 100 : 200;
									var row = 0;
									var i = 0;
									
									while(i <= images.length - 1) {
										var iw = Math.ceil(ih / images[i].h * images[i].w + 5);
			log('#i ' + i + '/' + images.length + ' ' + row + '>' + w + ' ' + iw);									
			
										if(row + iw > w) {
											var j = i + 1;
											while(j <= images.length - 1) {
												var jw = Math.ceil(ih / images[j].h * images[j].w + 5);
			log('#j   ' + j + '/' + images.length + ' ' + row + '>' + w + ' ' + jw);									
												if(row + jw < w) {
			log('#j - ' + j + ' ' + row + ' ' + jw);									
													sorted.push(images[j]);
													images.splice(j, 1);
													row += jw;
												}
												j++;
											}
											row = 0;
										} //else {
											row += iw;
										//}
			
			log('#i - ' + i + ' ' + row + ' ' + iw);
										sorted.push(images[i]);
										i++;
									};*/
			//log(sorted);						
									list.publish({
										data: args.images,
										lazy: true,
										onDone: args.onDone,
									});
								}
							},
							getSearchResultItem: function(image) {
								var me = this;
								var platform = this.args.platform ? this.args.platform : omnia.tools.browser.platform;
								var h = platform.device == 'phone' ? 100 : 200;
			
								return {
									oid: 'image', 
									css: 'hand mr5 mb5 inline br2', 
									url: image.preview.url, 
									style: {'width': h / image.preview.h * image.preview.w, 'height': h}, 
									click: function() { image.action(image); }, //function() { me.onSelect(image.url, 'url'); },
								};
							},

};omnia.ui.imagesearch.html = {
							
							oid: 'frame2', css: 'ox-imagesearch ox-col-ui-dialog-1-back', c: [
								
								// Tabs
								{oid: 'bar2', css: 'ox-line ox-flat ox-center flex-fix ox-noflex', c: [
									{oid: 'tabstatic', css: 'ox-id-tab-search ox-active ox-tab-medium', label: '#search'},
									{oid: 'tabstatic', css: 'ox-id-tab-upload ox-tab-medium', label: '#upload'},
									{oid: 'tabstatic', css: 'ox-id-tab-google-photos ox-tab-medium', label: '<i class="fab fa-google mr10"></i>Photos'},
									{oid: 'tabstatic', css: 'ox-id-tab-test ox-tab-medium', label: '#test'},
								]},
								
								// Frames
								{oid: 'frame2', css: 'ox-id-tab-search _flex-1 ox-id-frame-search', c: [
									{oid: 'bar2', css: 'ox-stretch ox-line ox-overlay ox-col-ui-dialog-1-back ox-env-phone-only', c: [
										{oid: 'searchfield', css: 'ox-id-search-query', placeholder: '#search'},
									]},
									{oid: 'bar2', css: 'ox-stretch _ox-line ox-overlay ox-float-top-center br4 ox-col-ui-dialog-1-back ox-env-phone-hidden ox-stretch', style: {'width': 'calc(100% - 250px)'}, c: [
										{oid: 'searchfield', css: 'ox-id-search-query', placeholder: '#search'},
									]},
									{oid: 'frame2', css: 'ox-content _col-light-4-back ox-dark-col-black-back', c: [
										{t: 'div', css: 'ox-id-search-banner ox-env-phone-hidden', style: {'height': 110}, c: [
											{oid: 'image', url: 'http://slide.style/images/samples/thunder.jpg', css: 'abs t00', style: {'width': '100%', 'height': 110}},
											{oid: 'image', url: 'https://pixabay.com/static/img/logo_square.svg', css: 'abs t00 hand', style: {'width': 110, 'height': 110}, click: function() { ox.b.openBrowser({url: 'https://pixabay.com/'}); }},
											{t: 'div', css: 'abs flex-vmiddle', style: {'top': 60, 'left': 140}, c: [
												{oid: 'headline', css: 'ox-h4 inline col-white semibold mr10 hand', text: '#free-images', click: function() { ox.b.openBrowser({url: 'https://pixabay.com/'}); }},
												{oid: 'buttonicon', css: 'ox-inline ox-medium col-white', icon: 'fa fa-info', click: function() { ox.b.openBrowser({url: 'https://pixabay.com/service/license/'}); }},
											]},
										]},
										{t: 'div', css: 'ox-id-search-banner ox-env-phone-only flex-center flex-column pt60', style: {'height': 140}, c: [
											{t: 'img', src: 'https://pixabay.com/static/img/logo.svg', style: {'height': 40}, click: function() { ox.b.openBrowser({url: 'https://pixabay.com/'}); }},
											{oid: 'headline', css: 'ox-h5 inline semibold hand mt10', text: '#free-images', click: function() { ox.b.openBrowser({url: 'https://pixabay.com/service/license/'}); }},
											//{oid: 'image', url: 'https://pixabay.com/static/img/logo.svg col-none-back', css: 'hand', style: {'width': 208, 'height': 40}, click: function() { ox.b.openBrowser({url: 'https://pixabay.com/'}); }},
										]},
										{oid: 'list', css: 'ox-id-search-result pt15 pl15 pb10 pr10 flex-1 _ox-scrollable-y-i', style: {'line-height': '0px'}},
									]},
								]},
								{oid: 'frame2', css: 'ox-id-tab-upload flex-1 ox-id-frame-upload', c: [
									{oid: 'bar2', css: 'ox-stretch flex-fix ox-line', c: [
										{t: 'div', css: 'flex-fix pl5 pr5 ox-col-ui-dialog-1-back', c: [
											{t: 'form', css: 'abs', style: {'opacity': 0, 'top': -30}, method: 'POST', enctype: 'multipart/form-data', c: [
												{t: 'input', css: 'ox-imagesearch-upload', id: 'ox-imagesearch-upload', name: 'ox-imagesearch-upload', type: 'file'},
											]},
											{t: 'label', css: 'ox-id-imagesearch-uploadlabel', "for": 'ox-imagesearch-upload', c: [
												{oid: 'label', css: 'ox-button ox-blue ox-inline', style: {'line-height': '35px'}, text: '#upload-image-button'},
											]},
										]},
										{
											oid: 'searchfield', 
											css: 'ox-id-focus ox-id-url ox-col-ui-dialog-1-back',// + (ox.pf.isDesktop ? 'ox-tile ox-radius ml15' : 'w100'), 
											placeholder: '#url',
										},
									]},
									{oid: 'frame2', css: 'col-light-4-back ox-dark-col-black-back'},
								]},
								{oid: 'frame2', css: 'ox-id-tab-google-photos flex-1 ox-id-frame-google-photos'},
								{oid: 'frame2', css: 'ox-id-tab-test pt15 pl15 pr5 ox-bottom-space-safe ox-content ox-id-frame-test'},
							]
							
};omnia.ui.linkeditor.handler = {

							clsId: 'omnia.ui.linkeditor.handler',
							args: null,
							data: null,
							url: null,
							linkSearchId: null,
							isPreview: true,
							isAutoLoad: false,
							
							root: null,
							elems: null,
							content: null,
							preview: null,
							loading: null,
							link: null,
							
							// Static functions
							
							open: function(args) {
								if(!args) args = {};
								
								ox.ov.show({
									delay: true,
									onClose: args && args.onClose ? function() { args.onClose(); } : null,
									onRendered: function(overlay) { args.overlay = overlay; },
									isModal: false,
									isScroll: true,
									frame: {
										oid: 'dialog',
										title: '#link',
										style: ox.pf.isPhone ? {'max-height': '90%', 'width': '100%'} : {'width': '80%', '_height': '300px'},
										css: 'ox-actions-line',
										c: [
											{oid: 'linkeditor', onReady: function(elem, linkeditor) { args.linkeditor = linkeditor; }, args: {data: args.data, onClose: args.onClose, argsDialog: args}},
										],
										actions: [
											{t: 'div', css: 'hright', c: [
												{oid: 'buttonicon', css: 'ox-inline', icon: 'fa fa-eraser', click: function() { if(args && args.linkeditor) args.linkeditor.clearDetails(args); }}, 
												{oid: 'buttonicon', css: 'ox-inline', icon: 'fa fa-address-card', click: function() { if(args && args.linkeditor) args.linkeditor.saveAsContact(args); }}, 
												{oid: 'button', css: 'ox-green ox-inline ox-alone', label: '#save-button', click: function() { if(args && args.linkeditor) args.linkeditor.onSave(args); }},
											]},
										],
									},
								});
							},
							
							// Public functions
							
							init: function(args) {
								this.args = args;
			
								this.render(args);
								var data = this.parseData(args);
								if(data && data.url && Object.keys(data).length == 1) {
									this.isAutoLoad = true;
									this.loadPreview();
								}

								//this.loadPreview('http://www.imdb.com/');
							},
							getRoot: function() { return this.root; },
							
							// Public events
							
							onSave: function(args) {
								if(!args) return;
								var data = {};
								
								var t0 = ox.t0('_omnia.ui.linkeditor.handler.onSave', true);
							
								var keys = Object.keys(this.data).length;
								if(this.data.url && keys == 1) {
									t0.bp('Single Link');
									log({data});
									
									data.v = '#link-' + this.data.url;
									if(this.args.data) { 
										this.args.data.v = data.v; 
										delete this.args.data.c;
										delete this.args.data.s;
										data = this.args.data;
									}
								} else if(this.data.url && this.data.title && keys == 2) {
									t0.bp('Title Link');

									data.v = '#link-' + this.data.title.split(' ').join('_') + '-' + this.data.url;
									//if(this.args.data) { this.args.data.v = data.v; data = this.args.data; }
								} else {
									t0.bp('Full details');
									
									if(this.data.view == 'preview') delete this.data.view; 
									data = ox.File.dataToNode(this.data, true);
									data.v = '#link';
									data.s = 1;
								}
		
								log(this.clsId + '.onSave: data = ', {data: this.data, node: data, cnode: ox.copy(data)});
			
								if(args.overlay) args.overlay.close(true);
								if(args.onClose) args.onClose(true, data, true);
					
							},
							
							// Private events - UI
							
							onEnter: function() {
								log(this.clsId + '.onEnter');
								this.loadPreview();
							},
						
							// Private functions - UI 
							
							render: function(args) {
								var me = this;
								var root = this.root = args.root;
								var e = this.elems = ox.el.getAll(root, true);
								
								e.url.reset({
									onEnter: function() { me.onEnter(); },
									onChanged: function(args) {
										me.setData({url: args.value}, true, true);
									},
								});
								e.data.reset({
									onChanged: function(args) {
										me.setData(args.value, true);
									},
								});
								
								ox.el.onRefresh(function() { e.url.focus(); });
							},
							setPreview: function(isOn, data) { 
								log(this.clsId + '.setPreview: ' + isOn); 
								var e = this.elems;
								
								e.loading.progress(!isOn);
								//ox.css(e.loading.getRoot(), 'ox-hidden', isOn);
								ox.css(e.details, 'ox-hidden', !isOn);
								
								if(!isOn || !data) return;
								
								e.preview.html('');
								if(!data.url && !data.title) return; 
							
								var lp = ox.ui.linkpreview.data.nodeToRender('#link', {node: {data}});
								if(lp.pcss) lp.css += ' ox-col-ui-dialog-1-back br3 ox-border';
								lp.style = {'max-height': '100%', 'max-width': '270px'};
								ox.node(lp, e.preview);
								
							//	if(this.isAutoLoad && Object.keys(data).length > 1) this.onSave(this.args.argsDialog);
								
								return;
								
								/*ox.node({
									oid: 'linkpreview',
									css: 'ox-col-ui-dialog-1-back br3 ox-border',
									style: {'max-height': '100%', 'max-width': '270px'},
									image: !data.img ? {css: 'ox-hidden'} : {style: {'background-image': 'url(' + data.img + ')'}},
									title: data.title || '',
									desc: data.desc,
									icon: data.icon ? {src: data.icon} : null,
									url: data.url,
								}, e.preview);*/
							},
							clearDetails: function() {
								//log('#clear')
								
								//this.elems.data.setValue(data);
								this.setData({url: this.data.url});
							},
							
							// Private functions - Data
							
							parseData: function(args) { 
								try {
									//log(this.clsId + '.parseData: data = ', args.data);
								
									this.data = {};
									if(!args.data) return false;
									
									var data = ox.ui.linkpreview.data.nodeToData(args.data.v, args);
									this.setData(data);
									
									return data;
								}
								catch(e) { ox.error({id: this.clsId + '.parseData', e}); }
							},
							setData: function(data, isExtend, isClear) {
								if(!data) return;
								log(this.clsId + '.setData: data = ' + JSON.stringify(data));
							
								data = this.data = ox.arr.setObjectExclusive(this.data, data, {url: 1, title: 1, desc: 1, img: 1, icon: 1, view: 1}, isExtend);
							
								if(!data.view) data.view = 'preview';
								if(data.url) this.elems.url.setValue(decodeURIComponent(data.url));
								if(isClear) this.elems.data.clear();
								this.elems.data.setValue(data, true);
								this.setPreview(true, data);
							},
							loadPreview: function() {
								
								// Get url
								var isLink = false;
								var url = this.elems.url.getValue();
								var re = new RegExp('((https?|webcal):\\/\\/([^/?\\s]+)([\\S]*))', 'i');
								if(isLink = re.test(url)) url = url.match(re)[1];
								
								if(!url || !isLink) return;
								
								// Set UI
								this.setPreview(false);
								this.elems.loading.progress(true);//ox.tx('#loading...'));
								
								// Load
								var me = this;
								var args = {};
								args.id = this.linkSearchId = omnia.tools.getUniqueId();
		
								setTimeout(function() {
									if(args.id == me.linkSearchId) {
										log(me.clsId + '.loadPreview: url = ' + url);
			
										omnia.tools.net.get({
											//cache: true,
											server: 'https://haustein.info/server-dev/',
											param: {
												//'cmd': 'metatags',
												'cmd': 'proxy',
												'task': 'meta',
												//'antibot': 1,
												//'agent': 'facebook',
												'url': url, //encodeURIComponent(url),
											}, 
											timeout: 10000,
											onResponse: function(args2) {
												log(me.clsId + '.loadPreview: loaded', {args2});
												
												me.setPreview(true);
												me.parseLoadedData(args2, args.id);
											},
										});					
									}
								}, 200);
							},
							parseLoadedData: function(args2, id) {
								try {
									if(id && id != this.linkSearchId) return;
									log(this.clsId + '.parseLoadedData');
									
									var success = args2.response && args2.response.success;
									if(args2.type == 'text') args2.data = JSON.parse(args2.response.dataStr);
									if(!args2.data || !args2.data.meta || args2.data.status == 'fail') success = false;
									var data = success ? args2.data.data : null;
									data.url = decodeURIComponent(data.url);
									
									this.setData(data);
								}
								catch(e) {
									ox.error(this.clsId + '.parseLoadedData: Error: ' + e);
									log(e);
								}
							},
							saveAsContact: function(args) {
								
								// Convert
								var t = this.data.title.split(/[\s]+\S[\s]+/);
								if(t.length > 1) t[1] = t[1].split(/,/); else t[1] = [t[1]];
								var d = this.data.desc.split(/[\s]+\S[\s]+/);
								
								var info = {
									name: ('' + t[0]).trim(), 
									street: ('' + t[1][0]).trim(), 
									city: ('' + t[1][1]).trim(), 
									image: this.data.img, 
									link: this.data.url,
								};
								if(t[1].length > 2) info.country = ('' + t[1][2]).trim();
								if(d.length > 1) info.desc = d[1];
								
								//ox.ui.obj.show({data: this.data, info, t, d});
								//return;
								
								// Save
								var data = {};
								data = ox.File.dataToNode(info, true);
								data.v = '#contact';
								data.s = 1;
								
								if(args.overlay) args.overlay.close(true);
								if(args.onClose) args.onClose(true, data, true);

							},
							
};omnia.ui.linkeditor.html = {
						
							oid: 'frame2', css: 'ox-linkeditor ox-col-ui-dialog-1-back', c: [
								{oid: 'form', css: 'ox-inbar', args: {
									items: [
										{oid: 'searchtextfield', css: 'ox-form-id-url ox-focus ox-id-url', formlabel: '#link', placeholder: 'URL'},
									],
								}},
								
								{oid: 'loadcontent', css: 'ox-id-loading ox-hidden ox-border-thin-top ox-hidden'},
								{t: 'div', css: 'ox-id-details', c: [
									{t: 'div', css: 'pt5 ox-col-ui-dialog-0-back _ox-dark-col-pitch-2-back'},
									{t: 'div', css: 'ox-id-preview p15 col-light-4-back ox-dark-col-pitch-2-back', style: 'height:140px'}, 
									{oid: 'form', css: 'ox-id-data ox-border-thin-top ox-inbar', args: {
										items: [
											{oid: 'toggle', css: 'ox-form-id-view', formlabel: '#view', args: {
												items: [
													{label: '#preview', v: 'preview'},
													{label: '#icon', v: 'icon'},
													{label: '#title', v: 'title'},
													{label: '#link', v: 'link'},
												],
												//selected: 0,
											}},
											{oid: 'textfield', css: 'ox-form-id-title', formlabel: '#title', args: {layout: 'cursor-input-mobile-extended'}},
											{oid: 'textfield', css: 'ox-form-id-desc', formlabel: '#description', args: {layout: 'cursor-input-mobile-extended'}},
											{oid: 'textfield', css: 'ox-form-id-img', formlabel: '#image', placeholder: 'URL', args: {layout: 'cursor-input-mobile-extended'}},
											{oid: 'textfield', css: 'ox-form-id-icon', formlabel: '#icon', placeholder: 'URL', args: {layout: 'cursor-input-mobile-extended'}},
										],
									}},
								]},
							]
							
};omnia.ui.keyboard.handler = {
							
							layouts: {
								/*'dev-desktop-v1': {keys: [
									[  '!', '"', '$', '%', '&', '/', '\\', '|', '(', ')',  '{', '}', '[', ']', '@'],
									[  
										'^', '1', '2', '3', '4', '5', '6', '7', '8', '9',  '0', '=', '?',
										{key: 'backspace', w: 10.5},
									],
									[
										{key: 'tab', w: 8}, 
										'q', 'w', 'e', 'r', 't',  'z', 'u', 'i', 'o',  'p', '+', '*', 
										{key: 'hash', w: 6.5},
									],
									[
										{key: 'shift', w: 10},  
										'a', 's', 'd', 'f', 'g', 'h',  'j', 'k', 'l', '\'', '_', 
										{key: 'enter', w: 14},
									],
									[  
										'<', '>', 'y', 'x', 'c', 'v',  'b', 'n', 'm', ',',  ';', '.', ':', '-',
										{key: 'function() {}', css: 'ox-font-11-i', label: 'Fkt'}, 
									],
									[
										{key: 'save', w: 8},
										'copy', 'paste',
										'sel-left', 
										//'sel-up', 
										//'sel-down', 
										'sel-right', 
										//'sel-right-word-left', 'sel-right-word',
										{key: ' ', css: 'ox-font-11-i', label: 'Space', w: 19}, 
										'start', 'left', 'up', 'down', 'right', 'end',
										//{label: 'Fold', css: 'ox-font-11-i', key: 'Alt-L', w: 7},
										'keyboard',
									],
								]},*/
								'dev-desktop': {keys: [
									[  '!', '"', '$', '%', '&', '/', '\\', '|', '(', ')',  '{', '}', '[', ']', '=' ],
									[  
										{key: '^', shift: {key: '\u00B0'}}, '1', '2', '3', '4', '5', '6', '7', '8', '9',  '0', '@', {key: '?'}, 
										{key: 'backspace', w: 13.3},
									],
									[
										{key: 'tab', w: 8.5}, 
										'q', 'w', 'e', 'r', 't',  'z', 'u', 'i', 'o',  'p', {key: 'hash'}, '*', 
										{key: 'Enter', w: 11.5},
										//{key: 'hash'},
									],
									[
										{key: 'shift', w: 11},  
										'a', 's', 'd', 'f', 'g', 'h',  'j', 'k', 'l', '+', '_',
										{key: 'function() {}', css: 'ox-font-11-i', label: 'Fkt'}, 
										{key: '\'', w: 9},
									],
									[  
										//{key: 'hash'},
										'<', '>', 'y', 'x', 'c', 'v',  'b', 'n', 'm', ',', '.', ':', '-', ';', {key: 'sel-down'},
										//{key: '\'', w: 11},
									],
									[
										'save', 'undo', 'redo', 'copy', 'paste',
										{key: 'space', w: 13.35}, 
										'start', 'left', 'up', 'select', 'down', 'right', 'end', 'keyboard',
									],
								]},
								'text-desktop': {keys: [
									[  '!', '"', '$', '%', '&', '/', '\\', '|', '(', ')',  '{', '}', '[', ']', '@' ],
									[  
										{key: '^', shift: {key: '\u00B0'}}, '1', '2', '3', '4', '5', '6', '7', '8', '9',  '0', '=', {key: '?', shift: {key: '\u00DF'}}, 
										{key: 'backspace', w: 13.3},
									],
									[
										{key: 'hash', w: 8.5}, 'q', 'w', 'e', 'r', 't',  'z', 'u', 'i', 'o',  'p', {key: '\u00FC', shift: {key: '\u00DC'}}, '*', {key: 'enter', w: 11.5}, 
										//{key: 'hash'},
									],
									[
										{key: 'shift', w: 11},  
										'a', 's', 'd', 'f', 'g', 'h',  'j', 'k', 'l', {key: '\u00F6', shift: {key: '\u00D6'}}, {key: '\u00E4', shift: {key: '\u00C4'}}, '+', {key: '\'', w: 9},
										//{key: 'enter', w: 9},
									],
									[  '<', '>', 'y', 'x', 'c', 'v',  'b', 'n', 'm', ',',  ';', '.', ':', '-', '_' ],
									[
										'undo', 'redo', 'copy', 'paste',
										{key: 'space', w: 20}, 
										'start', 'left', 'up', 'select', 'down', 'right', 'end', 'keyboard',
									],
								]},
								/*'dev-mobile': {w: 7.7, keys: [
									[ '"', '$', '%', '&', '/', '\\', '|', '(', ')',  '{', '}', '[', ']'],
									[ '^', '1', '2', '3', '4', '5',  '6', '7', '8', '9',  '0', '=', '!'],
									[ '+', '*', {key: 'hash'}, '@', '_', '<', '>', ',',  ';', '.', ':', '-', '?'],
									[
										//{key: 'save', w: 12},
										{key: 'tab', w: 15.4}, 
										{key: 'undo', w: 10}, 
										{key: 'redo', w: 10}, 
										{key: 'copy', w: 10}, 
										{key: 'paste', w: 10},
										{key: 'function() {}', css: 'ox-font-11-i', label: 'Fkt', w: 10}, 
										{key: 'sel-down', w: 11.6},
										{key: '\'', w: 12},
										{key: 'keyboard', w: 11.1},
									],
									[
										{key: 'save', w: 15.4},
										{key: 'start', w: 12},
										{key: 'left', w: 12}, 
										{key: 'up', w: 12}, 
										{key: 'select', w: 12},
										{key: 'down', w: 12}, 
										{key: 'right', w: 12},
										{key: 'end', w: 12.7}, 
										//'keyboard',
									],
								]},*/
								'dev-mobile': {w: 7.7, keys: [
									[ '"', '$', '%', '&', '/', '\\', '|', '(', ')',  '{', '}', '[', ']'],
									[ '^', '1', '2', '3', '4', '5',  '6', '7', '8', '9',  '0', '=', '!'],
									[ '+', '*', {key: 'hash'}, '@', '_', '<', '>', ',',  ';', '.', ':', '-', '?'],
									[
										//{key: 'save', w: 12},
										{key: 'save', w: 15.4},
										{key: 'tab'}, 
										{key: 'undo'}, 
										{key: 'redo'}, 
										{key: 'copy'}, 
										{key: 'paste'},
										{key: 'function() {}', css: 'ox-font-11-i', label: 'Fkt'}, 
										{key: 'sel-down'},
										{key: '\''},
										{key: 'keyboard'},
										{key: 'file', w: 15.4},
									],
									[
										{key: 'start', w: 12},
										{key: 'left', w: 12}, 
										{key: 'up', w: 12}, 
										{key: 'select', w: 12},
										{key: 'down', w: 12}, 
										{key: 'right', w: 12},
										{key: 'end', w: 12.7}, 
										{key: 'minimize', w: 15.4},
										//'keyboard',
									],
								]},
								'text-mobile': {w: 100/13, keys: [
									[ '"', '$', '%', '&', '/', '\\', '|', '(', ')',  '{', '}', '[', ']'],
									[ '^', '1', '2', '3', '4', '5',  '6', '7', '8', '9',  '0', '=', '!'],
									[ '+', '*', {key: 'hash'}, '@', '_', '<', '>', ',',  ';', '.', ':', '-', '?'],
									[
										{key: 'copy'}, 
										{key: 'paste'},
										{key: '\''},
										{key: 'start'},
										{key: 'left', w: 100/13 * 2}, 
										{key: 'select', w: 100/13 * 2},
										{key: 'right', w: 100/13 * 2},
										{key: 'end', w: 100/13 * 2}, 
										{key: 'keyboard'},
									],
								]},
								'features-desktop': {isFrameless: true, keys: [
									['translate', 'keyboard'],
								]},
								'phoneno': {w: 9.999, keys: [
									[ '0', '1', '2', '3', '4', '5',  '6', '7', '8', '9'],
									[ {key: 'hash'}, '+', '-', 'start', 'left', 'select', 'right', 'end', 'backspace', 'keyboard' ],
									/*[ 
										{key: 'start', w: 7.7 * 2},
										{key: 'left', w: 7.7 * 2}, 
										{key: 'select', w: 7.7 * 2},
										{key: 'right', w: 7.7 * 2},
										{key: 'end', w: 7.7 * 2}, 
										{key: 'keyboard', w: 7.7 * 2},
									],*/
								]},
								'phonepad': {w: 100/3, keys: [
									[ '7', '8', '9'],
									[ '4', '5', '6'],
									[ '1', '2', '3'],
									[ '+', '0', '-'],
									[ {key: 'hash'}, 'select', 'keyboard'],
								]},
								'numberpad': {w: 100/3, keys: [
									[ '7', '8', '9'],
									[ '4', '5', '6'],
									[ '1', '2', '3'],
									[ '+', '0', '-'],
									[ 'select', 'backspace', 'keyboard'],
								]},
								'remote': {w: 100/7, keys: [
									//['up'],
									['back', 'left', 'up', 'enter', 'down', 'right', 'keyboard'],
									//['down', 'keyboard'],
								]},
								'markup': {isFrameless: false, w: 100/11, keys: [
									[ {key: 'hash'}, '-', '_', '[', ']', 'start', 'left', 'select', 'right', 'end', 'keyboard' ],
								]},
								'cursor-input': {isFrameless: true, keys: [
									[ 'clear', 'keyboard' ],
								]},
								'cursor-input-mobile': {isFrameless: true, keys: [
									[ 'clear', 'left', 'right', 'keyboard' ],
								]},
								'cursor-input-mobile-extended': {isFrameless: true, keys: [
									[ 'clear', 'start', 'left', 'select', 'right', 'end', 'keyboard' ],
								]},
								'cursor-extended': {isFrameless: true, keys: [
									[ 'copy', 'paste', 'start', 'left', 'select', 'right', 'end', 'translate', 'keyboard' ],
								]},
								'cursor-extended-2': {isFrameless: true, keys: [
									[ 'left', 'select', 'right', 'paste', 'keyboard' ],
								]},
								'cursor-extended-3': {isFrameless: true, keys: [
									[ 'start', 'left', 'select', 'right', 'end', 'more', 'keyboard' ],
								]},
								'cursor': {isFrameless: true, keys: [
									[ 'start', 'left', 'select', 'right', 'end', 'keyboard' ],
								]},
								'cursor-keys': {w: 100/7, keys: [
									[ 'start', 'left', 'select', 'right', 'end', 'more', 'keyboard' ],
								]},
								'cursor-paste': {isFrameless: true, w: 100/7, keys: [
									[ 'paste', 'left', 'select', 'right', 'more', 'keyboard' ],
								]},
								'cursor-extended-keys': {w: 100/9, keys: [
									[ 'copy', 'paste', 'start', 'left', 'select', 'right', 'end', 'translate', 'keyboard' ],
								]},
							},
							
							clsId: 'omnia.ui.keyboard.handler',
							clipboard: null,
							
							args: null,
							root: null,
							elems: null,
							ref: null,
							refField: null,
							isKeyPressed: false,
							isShift: false,
							history: [],
							historyCursor: 0,
							initialFocus: true,
							currentLayout: null,
							
							keys: {
								'backspace': {key: 'backspace', label: '<i class="fa fa-backspace"></i>'},
								'copy': {label: '<i class="fa fa-copy ox-font-12-i"></i>', key: 'copy', title: '#copy'},
								'down': {key: 'down', label: '<i class="fa fa-arrow-down ox-font-12-i"></i>'}, 
								'end': {label: '<i class="fa fa-angle-double-right ox-font-13-i"></i>', key: 'end'},
								'enter': {key: '\n', code: 'return', label: 'Enter', css: 'ox-font-11-i'},
								'file': {key: 'file', label: '<i class="fa fa-file"></i>'},
								'hash': {key: '#', label: '&#35;'},
								'keyboard': {oid: 'dropdown', label: '<i class="fa fa-keyboard"></i>', key: 'keyboard', args: {
									isFixedLabel: true,
									isNoArrow: true,
								}},
								'left': {key: 'left', label: '<i class="fa fa-arrow-left ox-font-12-i"></i>'}, 
								'maximize': {key: 'maximize', label: '<i class="fa fa-angle-up pl10 pr10"></i>'},
								'minimize': {key: 'minimize', label: '<i class="fa fa-angle-down"></i>'},
								'paste': {label: '<i class="fa fa-paste ox-font-12-i"></i>', key: 'paste', title: '#paste'},
								'shift': {key: 'shift', label: 'Shift', css: 'ox-font-11-i'},
								'tab': {key: 'tab', label: 'Tab', css: 'ox-font-11-i', shift: {key: 'Shift-Tab', label: 'Shift<br>Tab'}},
								'save': {key: 'save', css: 'ox-green', label: '<i class="fa fa-save ox-font-13-i"></i>'},
								'sel-down': {label: '<i class="fas fa-caret-down"></i>', key: 'sel-down'},
								'sel-left': {label: '<i class="fas fa-caret-left"></i>', key: 'sel-left'},
								'sel-right': {label: '<i class="fas fa-caret-right"></i>', key: 'sel-right'},
								'sel-right-word-left': {label: '<i class="fas fa-long-arrow-alt-left"></i>', key: 'sel-right-word-left'},
								'sel-right-word': {label: '<i class="fas fa-long-arrow-alt-right"></i>', key: 'sel-right-word'},
								'sel-up': {label: '<i class="fas fa-caret-up"></i>', key: 'sel-up'},
								'select': {label: '<i class="fas fa-i-cursor ox-font-12-i"></i>', key: 'select'},
								'space': {key: ' ', css: 'ox-font-11-i', label: ' '}, 
								'start': {label: '<i class="fa fa-angle-double-left ox-font-13-i"></i>', key: 'start'},
								'up': {key: 'up', label: '<i class="fa fa-arrow-up ox-font-12-i"></i>'}, 
								'redo': {label: '<i class="fa fa-redo ox-font-11-i"></i>', key: 'redo'},
								'right': {key: 'right', label: '<i class="fa fa-arrow-right ox-font-12-i"></i>'},
								'undo': {label: '<i class="fa fa-undo ox-font-11-i"></i>', key: 'undo'},
								'clear': {label: '<i class="fa fa-times"></i>', key: 'clear'},
								'back': {label: '<i class="fa fa-left-long"></i>', key: 'esc'},
								'more': {oid: 'dropdown', label: '<i class="fa fa-ellipsis-h"></i>', key: 'more', args: {
									isFixedLabel: true,
									//asToggle: true,
									isNoArrow: true,
								}}, //{key: 'more', label: '<i class="fa fa-ellipsis-h"></i>'},
								'translate': {label: '<i class="ma ma-16 vmiddle" style="line-height:25px">translate</i>', key: 'translate', title: '#translate'},
							},
							
							init: function(args) {
								var me = this;
								this.args = args;
								this.root = args.root;
								this.elems = ox.el.getAll(args.root, true);
								
								var node = this.args.ref ? (this.args.ref instanceof jQuery ? this.args.ref : $('.ox-id-' + this.args.ref)) : this.root.parent();
								if(!node) return false;

								this.ref = node[0].nodeName.toLowerCase() == 'textarea' ? node[0] : node.find('.ox-textarea, textarea')[0]; 
								//(this.ref).on('focus', function() { me.onFocus(); });
								if(this.ref) $(this.ref).on('blur', function() { me.onBlur(); });
								//this.refField = node.data('ox-handler');

								this.setLayout(); 
							},
							getRoot: function() {
								return this.root;
							},
							setOptions: function(options, isStatic, isNoRender) {
								this.args.options = options;
								this.args.isStatic = isStatic;
								if(!isNoRender) this.setLayout(this.args.layout);
							},
							setLayout: function(layout, isReset) {
								var t0 = ox.t0('omnia.ui.keyboard.handler.setLayout', true);
								var me = this;
							
								var isInitial = layout === undefined;
								var bar = this.elems.keyboard.find('.ox-id-childs');
								bar.html('');

								if(!this.args.isStatic && ox.pf.method != 'touch') {
									ox.css(this.elems.keyboard, 'ox-hidden', !this.args.options);
								
									if(this.args.options) {
										ox.node(this.args.options, $(bar));
										bar.find('.ox-focus-only').addClass('ox-hidden');
										this.elems.keyboard.removeClass('ox-height-flex ox-noflex').addClass('ox-right p5');
									} 
									return;
								}
								
								layout = layout || this.args.layout || 'cursor';
								this.args.layout = layout;
								
								var layoutInfo = typeof layout == 'object' ? layout : ox.ui.keyboard.handler.layouts[layout];
								if(!layoutInfo) return false;
								if(!layoutInfo.isMinimize) this.currentLayout = layoutInfo;
								
								var rows = layoutInfo.keys;
								var isInBar = this.root.hasClass('ox-inbar');
								var isFrameless = layoutInfo.isFrameless == true; // layout.indexOf('cursor') >= 0;
								ox.css(this.elems.keyboard, 'col-light-2-back ox-dark-col-pitch-2-back ox-mono-col-light-2-back', !isFrameless);
								ox.css(this.elems.keyboard, 'ox-right', isFrameless);
								ox.css(this.elems.keyboard, 'ox-small', isFrameless && !this.root.hasClass('ox-inbar'));
								ox.css(this.elems.keyboard, 'ox-height-flex', !(isFrameless && !isInBar));
								this.elems.keyboard.css('padding', isFrameless ? 0 : (ox.pf.isPhone ? 2 : 5));
								
								var wDefault = layoutInfo.w ? layoutInfo.w : (ox.pf.os == 'ios' && ox.pf.isPhone ? 6.66 : 6.66);
								var idx = 0;
							
								var kb = [];
								rows.forEach(function(row) {
									var l = {
										t: 'div', 
										css: 'ox-id-key-row flex-fix ' + (isFrameless ? 'hright' : '') + (isInBar ? ' pr5' : ''), 
										style: {'max-width': '100%', 'width': isFrameless ? null : (me.args.width || 800)}, 
										c: [],
									};
									ox.each(row, function(k, key) {
										var isStr = typeof key == 'string';
										
										if(!isStr && !key.key) {
											l.c.push({t: 'div', css: 'inline', style: 'width:' + key.w + '%'});
											return;
										}
										
										if(isStr && me.keys[key.toLowerCase()]) {
											isStr = false;
											key = ox.copy(me.keys[key.toLowerCase()]);
										}
										if(!isStr && !key.label && key.key && me.keys[key.key.toLowerCase()]) {
											var ww = key.w;
											var kcss = key.css;
											key = ox.copy(me.keys[key.key.toLowerCase()]);
											key.w = ww;
											if(kcss) key.css = kcss;
										}
										
										if(isStr) key = {key: key, css: '', w: wDefault, label: key};
										key = ox.copy(key);
										if(!key.w) key.w = wDefault;
										if(!key.label) key.label = key.key;
										
										let code = key.key.length > 1 ? null : key.key.charCodeAt(0);
										let isShift = code && code >= 97 && code <= 122;
										if(isShift && !key.shift) key.shift = {key: key.key.toUpperCase()};
										
										let fktUp = key.oid ? null : (key.click || function() { me.onKey(key); });

										if(key.key && key.key == 'keyboard') {
											key.args = ox.copy(key.args);
											key.args.onClose = function() { ox.el.onRefresh(function() { me.focus();}); };
											key.args.items = Object.keys(me.layouts);
											key.args.onSelect = function(v) { me.setLayout(v.v); };
										} else if(key.key && key.key == 'more') {
											key.args = ox.copy(key.args);
											key.args.onClose = function() { ox.el.onRefresh(function() { me.focus();}); };
											key.args.items = me.getMoreOptions();
										}
								
										l.c.push({
											t: 'div', 
											css: 'ox-id-key inline ' + (me.args.isAlwaysOn ? '' : 'ox-focus-only'), 
											style: isFrameless ? null : 'width:' + key.w + '% !important; padding:' + (ox.pf.isPhone ? '.5' : '1') + 'px;', 
											c: [
												{
													oid: key.oid || 'button', 
													css: 'no-crop flex-fix ' + (isFrameless ? (isInBar ? 'ox-slim ' : 'ox-medium ') : 'ox-extraslim ox-white-invert ox-has-tooltip ') + (ox.pf.isPhone || isFrameless ? ' br2 ' : ' br4 ') + (isShift ? ' ox-id-noshift ' : '') + (key.css || '') + (isInBar ? ' h35px ox-inline' : ''), 
													label: !key.shift ? key.label : null, 
													style: isFrameless ? null : 'width:' + 100 + '% !important; height: ' + (ox.pf.isPhone ? '35' : '30') + 'px;', 
													clickup: fktUp,
													clickdown: function(e, elem) { me.onKeyDown(key, elem); },
													c: isFrameless || !key.shift ? null : [
														!key.shift ? null : {t: 'span', css: 'ox-id-key-label-shift ox-hidden', html: key.shift.label || key.shift.key},
														!key.shift ? null : {t: 'span', css: 'ox-id-key-label inline', html: key.label},
														/*1 ? null : {
															oid: 'tooltip', 
															css: 'ox-dark ox-black ox-top ox-font-18-i p15 br4 bold', 
															style: 'padding:10px 20px !important; top:calc(-100% - 25px) !important;', 
															content: key.label,
														}*/
													],
													args: key.args,
												},
											],
										});
									}); 
									kb.push(l);
									idx++; 
								});
								
								if(isFrameless && this.args.options) kb[0].c.push(this.args.options);
								t0.bp('Cfg set');

								if(this.args.options) {
									ox.node({t: 'div', css: isFrameless ? 'flex-column flex-hright' : 'flex-vcenter flex-column', c: kb}, {root: bar});
									return;
								}
							
								let myLayout = layout;

								ox.el.onRefresh(() => {
									if(me.args.layout != myLayout) return;
									
									t0.bp('Before render'); 
									var l = {tags: 0, log: false};
									ox.node({t: 'div', css: isFrameless ? 'flex-column flex-hright' : 'flex-vcenter flex-column', c: kb}, {root: bar, log: l});
									t0.bp('%cDone (tags = ' + l.tags + ')', 'color:green');
									
									if(!isInitial && me.args.onLayoutChanged) me.args.onLayoutChanged(layout);
								});
							},
							focus: function() { 
								if(this.ref) this.ref.focus();
							},
							blur: function() { 
								if(this.ref) this.ref.blur();
							},
							onBlur: function() { 
								var me = this;
								
								try {
									if(me.isKeyPressed) me.focus();
									ox.el.onRefresh(function() { 
										if(me.isKeyPressed) me.focus();
										me.isKeyPressed = false; 
										me.root.removeClass('ox-keep-focus');
									});
								}
								catch(e) {}
							},
							onKeyDown: function(key, elem) {
								if(!this.currentLayout.isFrameless && !elem.find('.ox-id-tip').length) {
									ox.node({
										oid: 'tooltip', 
										css: 'ox-id-tip ox-dark ox-black ox-top ox-font-18-i p15 br4 bold', 
										style: 'padding:10px 20px !important; top:calc(-100% - 25px) !important;', 
										content: key.label,
									}, elem);
								}
								
								this.isKeyPressed = true;
								this.root.addClass('ox-keep-focus');
								this.focus();
							},
							onKey: function(key) {
								//log('#' + key);
								
								/*if(this.args.onKey) {
									this.args.onKey(key);
									return;
								}
								if(!this.ref) return;*/
								
								var me = this;
								ox.el.onRefresh(function() { 
									me.simulateKey(key);
									me.focus(); 
									//if(me.refField) me.refField.onInput();

									if(me.isShift && key.key != 'shift') me.toggleShift();
									if(me.args.onKeyPressed) me.args.onKeyPressed(key);
								});
							}, 
							addHistory: function() { return;
								var sel = omnia.tools.selection.getSelection();
								this.history.push({
									v: this.ref.value,
									s: sel.start,
									e: sel.end,
								});
								
								if(this.history.length > 100) this.history.shift();
							},
							toggleShift: function() { 
								this.isShift = !this.isShift;
								ox.css(this.root.find('.ox-id-key-label-shift'), 'ox-hidden', !this.isShift);
								ox.css(this.root.find('.ox-id-key-label-shift + .ox-id-key-label'), 'ox-hidden', this.isShift);
							},
							getMoreOptions: function() {
								var keys = ['copy', 'paste', 'translate'];
								
								var me = this;
								return keys.map(keyID => {
									var key = me.keys[keyID];
									return {oid: 'button', css: 'ox-id-close', label: key.label + (key.title ? '<span class="ml15 vmiddle">' + ox.tx(key.title) + '</span>' : ''), click: () => me.simulateKey(key)};
								});
							},
							simulateKey: function(key) {
								if(!key) return;
								
								if(this.isShift && key.shift) key = key.shift;
								var me = this;
								
								if(this.args.onKey && key.key != 'shift' && key.key != 'minimize' && key.key != 'maximize' && key.key != 'setlayout') {
									this.args.onKey(key, this);
									return;
								}
								
								switch(key.key) {
									case 'setlayout':
										this.setLayout(key.layout);
										break;
									case 'minimize':
										this.setLayout(
											{
												isMinimize: true,
												isFrameless: true, 
												keys: [[{key: 'maximize', }]],
											}
										);
										break;
									case 'maximize':
										this.setLayout(this.currentLayout);
										break;
									case 'select':
									case 'sel-left':
									case 'sel-right':
									case 'sel-right-word':
									case 'sel-right-word-left':
									case 'start':
									case 'end':
									case 'left':
									case 'right':
										if(this.args.ref) omnia.tools.selection.setPosition(this.ref, key.key);
										else this.nativeKey(key);
										break;
										
									case 'backspace':
										if(this.args.ref) omnia.tools.selection.backspace(this.ref);
										else this.nativeKey(key);
										break;
										
									case 'copy':
										if(!this.args.ref) break;
										
										var v = this.ref.value;
										if(!v.length) break;
										var sel = omnia.tools.selection.getSelection(this.ref);
										if(sel.text && sel.text.length) v = sel.text;
										
										ox.client.copyToClipboard(v, null, function() {
											omnia.ui.keyboard.handler.clipboard = v;
											me.focus();
										}, this.ref);
										break;
									
									case 'paste':
										if(!this.args.ref) break;
										
										if(0 && omnia.ui.keyboard.handler.clipboard) {
											omnia.tools.selection.addText(this.ref, omnia.ui.keyboard.handler.clipboard);
										} else {
											ox.client.pasteFromClipboard(this.ref);
										}
										ox.el.onRefresh(() => {
											me.focus();
											if(me.args.onKeyPressed) me.args.onKeyPressed(); //me.ref.dispatchEvent(new window.Event('change', { bubbles: true })); //me.nativeKey({key: 'left'}); //this.ref.dispatchEvent(new CustomEvent('change'));
										});
										break;
										
									case 'shift':
										this.toggleShift();
										break;
										
									case 'clear':
										if(!this.args.ref) break;
										
										this.ref.value = '';
										break;
										
									case 'translate':
										try {
											omnia.ui.translate.handler.open({
												data: {v: this.ref.value},
												onClose: function(isSave, data) {
													if(isSave) me.ref.value = data.v;
													me.focus();
													if(me.args.onKeyPressed) me.args.onKeyPressed(); 
												},
											});
										}
										catch(e) { ox.error(this.clsId + '.simulateKey: Error to call translate'); }
										break;
										
									default:
										//log('#default ', this.args.ref)
										if(this.args.ref) omnia.tools.selection.addText(this.ref, key.key);
										else this.nativeKey(key);
										break;
								}
							},
							nativeKey: function(key) {
								if(!key.key) return;
								var code = omnia.tools.keys[(key.code || key.key).toUpperCase()];
								
								log(this.clsId + '.nativeKey: ' + (key.code || key.key) + ': ' + code);
								//$.event.trigger({type: 'keydown.keycursor', which: code});
								$('body')[0].dispatchEvent(new KeyboardEvent('keydown', {keyCode: code}));
							},
							
							// Native cursor
							
							globalCursor: null,
							isGlobalCursor: false,
							initGlobalCursor: function() { 
								if(omnia.ui.keyboard.handler.isGlobalCursor) return;
								log(this.clsId + '.initGlobalCursor');
								
								$('body').on('keydown.keycursor', (e) => { omnia.ui.keyboard.handler.onNativeKey(e); });
								omnia.ui.keyboard.handler.isGlobalCursor = true;
							},
							removeGlobalCursor: function() {
								log(this.clsId + '.removeGlobalCursor');
								
								$('body').off('keydown.keycursor');
								this.unsetGlobalCursor();
								omnia.ui.keyboard.handler.globalCursor = null;
								omnia.ui.keyboard.handler.isGlobalCursor = false;
							},
							onNativeKey: function(e) {
								var keys = omnia.tools.keys;
								//log(e.keyCode);
								if(e.keyCode != keys.LEFT && e.keyCode != keys.RIGHT && e.keyCode != keys.UP && e.keyCode != keys.DOWN && e.keyCode != keys.RETURN) return;
								
								if(e.keyCode == keys.RETURN) {
									if(this.globalCursor) {
										this.unsetGlobalCursor();
										this.globalCursor.elem.trigger(ox.b.CLICK);
										$('.ox-id-keyboard-global-cursor').html(this.globalCursor.elem.html());
									}
									return;
								}
								
								var buttons = $('.ox-cursor-item:not(.ox-hidden), .ox-button:not(.ox-hidden)').get();
								//var buttons = $('.ox-cursor-item:not(.ox-hidden)').get();
								buttons = buttons.map((elem) => { 
									try {
										elem = $(elem); 
										return {
											elem, 
											pos: elem.offset(), 
											w: elem.outerWidth(), 
											h: elem.outerHeight(),
										}; 
									} catch(e) {
										return null;
									}
								}).filter((b) => b && b.w && b.h && (b.elem[0] == document.elementFromPoint(b.pos.left + 1, b.pos.top + b.h / 2) || b.elem[0].contains(document.elementFromPoint(b.pos.left + 1, b.pos.top + b.h / 2))));
					
								var closest = null;
								if(!this.globalCursor) closest = this.getClosest({pos: {left: 0, top: 0}, w: 0, h: 0}, buttons, 'down');
								else closest = this.getClosest(this.globalCursor, buttons, e.keyCode);
								
								//buttons.forEach((b) => b.elem.addClass('ox-d-i'));
								if(closest) this.setGlobalCursor(closest); 
								
								log({buttons: buttons, closest, cursorItems: $('.ox-cursor-item').get()});
							},
							getClosest: function(ref, buttons, dir) {
								var closest = null;
								
								buttons.forEach((item) => {
									var rl = ref.pos.left;// + ref.w / 2;
									var rt = ref.pos.top;// + ref.h / 2;
									var il = item.pos.left;// + item.w / 2;
									var it = item.pos.top;// + item.h / 2;
									var dx = Math.abs(rl - il);
									var dy = Math.abs(rt - it);
									var d = Math.sqrt(dx * dx + dy * dy);
									var dh = Math.sqrt(dx * dx + dy * dy * dy);
									var dv = Math.sqrt(dx * dx * dx + dy * dy);
													
									item.dh = dh;
									item.dv = dv;
							
									switch(dir) {
										case 'ArrowLeft':
										case 'left':
										case omnia.tools.keys.LEFT:
											if((rl > il) && (!closest || item.dh < closest.dh)) closest = item;
											break;
										case 'ArrowRight':
										case 'right':
										case omnia.tools.keys.RIGHT:
											if((rl < il) && (!closest || item.dh < closest.dh)) closest = item;
											break;
										case 'ArrowUp':
										case 'up':
										case omnia.tools.keys.UP:
												if((rt > it) && (!closest || item.dv < closest.dv)) closest = item;
											break;
										case 'ArrowDown':
										case 'down':
										case omnia.tools.keys.DOWN:
											if((rt < it) && (!closest || item.dv < closest.dv)) closest = item;
											break;
									}
								});
								return closest;
							},
							setGlobalCursor: function(cursor) {
								this.unsetGlobalCursor();
							
								//cursor.elem.addClass(this.globalCursorCss);
								var sc = ((cursor.h + 8) / cursor.h);
								if(sc > 1.4) sc = 1.4;
								/*cursor.elem.css('-webkit-transform', 'scale(' + sc + ')');
								cursor.elem.focus();
								cursor.elem.find('.ox-button').focus();*/
								
								ox.node({t: 'div', css: this.globalCursorCss, html: cursor.elem.html(), style: {
									left: cursor.elem.offset().left, 
									top: cursor.elem.offset().top,
									width: cursor.w,
									height: cursor.h,
									/*color: cursor.elem.css('color'),
									background: cursor.elem.css('background'),
									'background-color': cursor.elem.css('background-color'),*/
									'background-image': cursor.elem.css('background-image'),
									'-webkit-transform': 'scale(' + sc + ')',
									'z-index': 2000000,
								}}, $('body'));
								
								//log({cursor})
							
								this.globalCursor = cursor;
							},
							unsetGlobalCursor: function() { 
								//$('.ox-id-keyboard-global-cursor').css({'-webkit-transform': ''}).removeClass(this.globalCursorCss).blur();
								$('.ox-id-keyboard-global-cursor').remove();
							},
							globalCursorCss: 'ox-id-keyboard-global-cursor ani-01 br4 col-dark-back col-white ox-shadow-4 abs flex-center ox-dark-shadow-none',
								
};omnia.ui.keyboard.html = {
							
							oid: 'frame2', css: 'ox-keyboard no-crop', c: [
								{oid: 'bar2', css: 'ox-id-keyboard ox-notouchmove ox-noflex no-crop ox-height-flex',},
							],
								
};omnia.ui.markupeditor.handler = {
							
							// Static variables
							
							editors: {
								text: {meta: {label: '#text', icon: 'fa fa-font'}, html: {oid: 'textfield', placeholder: '#text', args: {isKeyboardOn: false, layout: 'cursor-keys', cssTextarea: 'font-code'}}},
								tag: {meta: {label: '#tag', icon: 'fa fa-tag'}, html: {oid: 'tageditor'}},
								//icon: {isUnique: true, meta: {label: '#icon', icon: 'fa fa-check'}, html: {oid: 'iconeditor'}},
								style: {isUnique: true, html: {oid: 'styleeditor', css: 'ox-border-top-i'}, type: 'style'},
								datepicker: {meta: {label: '#date', icon: 'fa fa-calendar-day'}, html: {oid: 'datepicker', css: 'ox-medium'}},
								//attr: {meta: {label: '#attribute', icon: 'fa fa-code'}, html: {t: 'div', text: 'attr', css: 'ox-d'}},
								//more: {meta: {label: '#more', icon: 'fa fa-ellipsis-h'}, isMore: true},
							},
							
							// Private variables
							
							clsId: 'omnia.ui.markupeditor.handler',
							args: null,
							elems: null,
							root: null,
							mode: 'markup',
							value: null,
							styles: null,
							isEditMode: false,
							isEditorsBuild: false,
							id: null,
							focusElem: null,
							
							// Static functions
							
							open: function(args) {
								if(!args) args = {};
								args.mode = 'elements';
						
								ox.ov.show({
									isScroll: true,
									delay: true,
									onClose: args && args.onClose ? function() { args.onClose(); } : null,
									onRendered: function(overlay) { args.overlay = overlay; },
									isModal: true,
									frame: {
										oid: 'dialog',
										css: 'ox-id-overlay-popup ox-noani ox-noactions ox-noclose ox-body-flex ox-nocaption',
										style: ox.pf.isPhone ? {'max-height': '80%', 'width': '100%'} : {'width': 450}, //{'width': '90%', 'height': '90%'},
										c: [
											//{t: 'div', css: 'pt5 ox-border-thin-bottom'},
											{oid: 'markupeditor', args},
										],		
									},
								});
							},
							
							// Public functions - UI
							
							init: function(args) {
								this.args = args;
								this.id = ox.id();
								this.addStylesFromComps();
								
								this.render(args);
								this.reset(args);
								this.focus();
							},
							getRoot: function() {
								return this.root;
							},
							addDialog: function() {
								this.toggleEditMode(false);
								
								var me = this;
								/*var elements = [
									{meta: {label: '#text', icon: 'fa fa-font'}, html: {oid: 'textfield', placeholder: '#text'}},
									{meta: {label: '#tag', icon: 'fa fa-tag'}, html: {oid: 'tageditor'}},
									//{meta: {label: '#icon', icon: 'fa fa-check'}, html: {t: 'div', text: 'icons', css: 'ox-d'}},
									{meta: {label: '#date', icon: 'fa fa-calendar-day'}, html: {oid: 'datepicker', css: 'ox-medium'}},
									{meta: {label: '#attribute', icon: 'fa fa-code'}, html: {t: 'div', text: 'attr', css: 'ox-d'}},
									//{meta: {label: '#more', icon: 'fa fa-ellipsis-h'}, isMore: true},
								];*/
								//var elements = this.getEditors();
								var elements = Object.values(ox.ui.markupeditor.handler.editors);
								elements = elements.filter(e => e.meta);
								
								var ref = {};
								this.keyboardFocus(true, true);
								ox.ov.show({
									isScroll: true,
									onClose: function() { me.keyboardFocus(false); },
									onRendered: overlay => ref.overlay = overlay,
									frame: {
										oid: 'dialog',
										css: 'ox-trans ' + (!ox.pf.isPhone ? 'ox-noactions' : ''),
										style: {'max-height': '80%'},
										caption: [{oid: 'label', text: '#add-content'}],
										c: {oid: 'list', css: 'ox-grid', args: {
											gridInfo: {w: 100, gap: 1, ratio: 1},
											data: elements,
											getItem: function(i, data) { 
												return {oid: 'button', css: 'font p10 flex-center ox-autosize ox-white ox-id-close', c: [
													{t: 'i', css: data.meta.icon + ' ox-font-28 mb10'},
													{t: 'div', css: 'ox-font-12', text: data.meta.label},
												], click: function(e, elem) { 
													me.addElement(data);
													if(ref.overlay) ref.overlay.close();
												}};
											},
										}},
									},
								});
							},
							toggleMode: function(isMarkup) {
								var mode = this.mode = isMarkup === undefined ? (this.mode != 'markup' ? 'markup' : 'elements') : (isMarkup ? 'markup' : 'elements');
								var isMarkup = mode == 'markup';
								
								log(this.clsId + '.toggleMode: ' + mode + ', value = ' + this.value);
							
								var e = this.elems;
								ox.css(this.root.find('.ox-mode-markup'), 'ox-hidden', !isMarkup);
								ox.css(this.root.find('.ox-mode-formats'), 'ox-hidden', isMarkup);
								if(isMarkup) this.toggleEditMode(false);
								
								if(isMarkup) {
									this.updateMarkup();
									//this.focus(); //ox.el.onRefresh(() => e.textmarkup.focus(true));
									//e.styles.getRoot().addClass('ox-hidden');
								} else {
									this.updateElements();
									if(!this.elems.list.getDataArray().length) this.addElement(ox.ui.markupeditor.handler.editors.text);
									//e.stylestoggle.find('.fa').removeClass('fa-angle-down').addClass('fa-angle-up');
									//e.styles.getRoot().removeClass('ox-hidden');
								}
								this.focus();
							},
							toggleEditMode: function(isEditMode) {
								if(isEditMode === undefined) isEditMode = !this.isEditMode;
								ox.css(this.root.find('.ox-id-editoptions'), 'ox-hidden', !isEditMode);
								this.isEditMode = isEditMode;
							},
							focus: function() {
								//log('_' + this.clsId + '.focus: mode = ' + this.mode);
								
								var me = this;
								var isMarkup = this.mode == 'markup';
								
								if(isMarkup) {
									ox.el.onRefresh(() => { 
										me.elems.textmarkup.focus(); 
										me.elems.textmarkup.setPosition('last');
									});
								} else {
									if(!ox.pf.isTablet) {
										me.keyboardFocus(true, false, true);
										return;
									}
									
									var elements = ox.el.getAll(this.elems.list.getRoot(), true);
									elements = Object.keys(elements).filter(id => elements[id].getRoot && elements[id].getRoot().hasClass('ox-id-editor-element')).map(id => elements[id]);
									elements = elements.filter(e => e.focus);
									
									if(elements.length) {
										ox.el.onRefresh(() => { 
											var e = elements[elements.length - 1];
											e.focus(true);
											if(e.setPosition) e.setPosition('last');
										});
									}
								}
							},
							
							// Public functions - Data
							
							reset: function(args) { 
								try {
									//log(this.clsId + '.reset', {args});
									if(args.mode) this.toggleMode(args.mode == 'markup');
									if(args.value || args.data) this.setValue(args.data && args.data.v ? args.data.v : args.value);
									if(args.onInput) this.args.onInput = args.onInput; 
								} catch(e) { 
									log({id: this.clsId + '.reset', e}); 
								}
							},
							getValue: function() {
								return this.value;
							},
							setValue: function(value, isNotMarkup, isNotFormats) {
								var v = this.value;
								this.value = value ? value.trim() : '';
								
								if(!isNotMarkup) this.updateMarkup();
								if(!isNotFormats) this.updateElements();
								
								//log({value: this.value, styles: this.styles});

								if(v != this.value && this.args.onChanged) this.args.onChanged({value: this.getValue()});
							},
							onSave: function() { 
								if(this.args.data) this.args.data.v = this.value;
								if(this.args.overlay) this.args.overlay.close(true);
								if(this.args.onClose) this.args.onClose(true);
							
							},
							
							// Private functions - UI
							
							render: function(args) {
								var me = this;
								this.root = args.root;
								var e = this.elems = ox.el.getAll(this.root, true);
								
								ox.ui.markupeditor.handler.editors.text.html.args.layout = ox.pf.method == 'touch' ? (ox.pf.isPhone ? 'cursor-extended-3' : 'cursor-extended') : 'features-desktop';
								ox.ui.markupeditor.handler.editors.text.html.args.isKeyboardOn = ox.pf.method == 'mouse';
								
								// Actions
								e.elements.reset({
									onAdd: function(list, elem) { me.onAdd(); },
									getItem: function(idx, item) { return me.getElementItem(idx, item); },
									onMoved: function() { me.onInputFormats(); },
								});
								
								e.toggleformats.on(ox.b.CLICK, function() { me.toggleMode(); });
								e.togglemarkup.on(ox.b.CLICK, function() { me.toggleMode(); });
								
								e.save.on(ox.b.CLICK, () => { me.onSave(); });

								/*e.addelement.on(ox.b.CLICK, function() { 
									me.addDialog(); 
									//me.keyboardFocus(true, true, true);
								});
								e.editelements.on(ox.b.CLICK, function() { 
									me.toggleEditMode(); 
									me.keyboardFocus(true, false, true);
								});*/
								/*e.stylestoggle.on(ox.b.CLICK, function() {
									e.styles.getRoot().toggleClass('ox-hidden');
									me.keyboardFocus(true, false, true);
									e.stylestoggle.blur();
									e.stylestoggle.find('.fa').toggleClass('fa-angle-up fa-angle-down');
									
									ox.el.onRefresh(function() {
										if(!e.styles.getRoot().hasClass('ox-hidden')) e.elementcontainer.getRoot()[0].scrollTop = e.elementcontainer.getRoot()[0].scrollHeight;
									});
								});*/
								e.actions.addClass(ox.pf.isPhone ? 'ox-stretch' : 'ox-split ox-alone');
								
								// Input
								e.textmarkup.reset({
									onInput: function(v) { me.onInputMarkup(v); },
									layout: ox.pf.isDesktop ? null : 'markup',
									//layout: ox.pf.isTablet ? 'text-desktop' : (ox.pf.isPhone ? 'text-mobile' : null),
								});
								
								// Styles
								/*e.iconeditor.reset({
									onChanged: function() {
										
									},
								});*/
							},
							elementOptions: function(element) {
								ox.ui.obj.show(element);
							},
							getElementItem: function(idx, item) {
								if(!item || item.isMore) return;
								var me = this;
								
								var options = {
									oid: 'buttonicon', 
									css: 'ox-id-elementoptions w45px ox-medium', 
									icon: 'ox-font-12-i fa fa-times _fa-ellipsis-v', 
									click: function() { me.elementOptions(item); },
								};
								//if(!item.args) item.args = {};
								//item.args.options = [options];
								
								if(typeof item == 'object') {
									if(!item.css) item.css = '';
									item.css += ' ox-id-editor-element ox-id-editor-element-' + (item.id || ox.id());
								}
								
								return {t: 'div', css: 'flex _br4 _ox-shadow-light-1 ox-dark-shadow-none ox-border-thin-between ox-id-dragelement scrollable-y ox-col-ui-dialog-1-back hand', style: {'min-height': 45}, c: [
									{t: 'div', css: 'flex-1', c: [item], style: 'max-width:calc(100% - 0px)'},
									//{t: 'div', css: 'ox-d2 ox-id-editoptions ox-hidden abs t00 w100 h100'},
									{t: 'div', css: 'ox-id-editoptions ox-hidden flex-fix _ox-border-thin-left _ox-id-draghandle _col-light-4-back _ox-dark-col-pitch-1-back', c: [
										{oid: 'bar2', c: [
											{
												t: 'div', 
												css: 'inline _flex-fix w45px hcenter ox-id-element-draghandle _flex-vmiddle hand _ox-hidden', 
												style: {'height': 'auto'}, 
												html: '<i class="ma ma-16 col-medium-4">drag_handle</i>', 
											},
											options,
										]},
									]},
								]};
							},
							onInputMarkup: function(value) {
								this.setValue(value, true);
								
								if(this.args.onInput) this.args.onInput(this.getValue());
							},
							onInputFormats: function() {
								if(this.isEditorsBuild) return;
								
								var info = this.editorsToValue();
								this.setValue(info.styles + ' ' + info.value, null, true);

								if(this.args.onInput) this.args.onInput(this.getValue());
							},
							updateElements: function() {
								if(this.mode == 'markup') return;
								log(this.clsId + '.updateElements');

								// Build editors from value
								var info = this.valueToEditors();
								
								// Editors
								this.setElements(info.editors);
								
								// Set styles
								/*var styles = this.styles = info.styles;
								
								var iconValue = styles.filter(function(item) { return item && item.style && item.style.group == 'icon' }).map(function(item) { return item.style.code; }).join(' ').trim();
								this.elems.iconeditor.reset({value: iconValue});*/
							},
							updateMarkup: function() {
								if(this.value == null || this.mode != 'markup') return;
								this.elems.textmarkup.setValue(this.value);
							},
							valueToEditors: function() {
								try {
									var me = this;
									var v = this.value ? this.value.split('<br>').join('\n') : '';
									var render = {};
									try { render = ox.ui.text.markup.render(v, {isDetails: true}); } catch(e) {}
									var items = render.elements || [];
									
									var editors = [];
									var styles = [];
									
									items.forEach(item => {
										
										// Get type
										var editor = {
											type: 'text', 
											value: item.item ? item.item : item,
											meta: null, 
											html: null, 
										};
										
										if(item.style && (item.style.style || item.style.group == 'icon' || item.style.group == 'comp')) {
											
											// Styles
											editor.type = 'style';
											editor.value = item.item;
												
										} else if(item.style && item.style.group && ox.ui.markupeditor.handler.editors[item.style.group]) {
											
											// By group
											editor.type = item.style.group;
											editor.value = item.item;

										} else if(item.style && item.style.oid) {
											
											// By oid
											var comp = ox.ui[item.style.oid];
											
											if(comp && comp.editor) {
												if(comp.editor.indexOf('.') >= 0) {
													/// TODO: Handle objects
												} else {
													editor.type = comp.editor;
													editor.html = {oid: comp.editor};
													editor.value = item.item; 
												}
											} else if(item.style.oid == 'datetag') {
												editor.type = 'datepicker';
												editor.value = item.item; 
											} 
										} 
										
										var defaultEditor = ox.ui.markupeditor.handler.editors[editor.type];
										//if(!editor.type || !defaultEditor) { editor.type = 'text'; editor.value = item.item; }
										
										// Replace with defaults
										if(defaultEditor) {
											var v = editor.value;
											var type = editor.type;
											editor = ox.copy(defaultEditor);
											editor.value = v;
											editor.type = type;
										}
										
										editors.push(editor);
									});
									
									editors.forEach(editor => {
										if(editor.isUnique && !editor.isRedundant) {
											editor.value = editors.filter(e => e.type == editor.type).map(e => e.value).join(' ');
											editor.isLead = true;
											editors.forEach(e => { if(e.type == editor.type && e !== editor && !e.isLead) e.isRedundant = true; });
										}
									});
									editors = editors.filter(e => !e.isRedundant);
									
									//if(!editors.find(e => e.type == 'icon')) editors.unshift(ox.copy(ox.ui.markupeditor.handler.editors.icon));
									if(!editors.find(e => e.type == 'text')) editors.push(ox.copy(ox.ui.markupeditor.handler.editors.text));
									if(!editors.find(e => e.type == 'style')) editors.push(ox.copy(ox.ui.markupeditor.handler.editors.style));
									
									editors = editors.filter(e => e.type != 'style').concat(editors.filter(e => e.type == 'style'));
									
									editors.forEach(editor => { me.enrichEditorConfig(editor); });
									
									var styleEditor = editors.find(e => e.type == 'style');
									if(styleEditor) styleEditor.html.args.options = [
										{oid: 'buttonicon', css: 'ox-id-addelement ox-medium', icon: 'fa fa-plus', click: () => me.addDialog()},
										{oid: 'buttonicon', css: 'ox-id-editelements ox-medium', icon: 'fa fa-pen', click: () => {
											me.toggleEditMode(); 
											me.keyboardFocus(true, false, true);
										}},
										{oid: 'sep'},
									];
									
									//log({id: this.clsId + '.valueToEditors', items, editors});
									
									// Get styles
									//var styles = items.filter(function (item) { return 0 && item && item.style && (item.style.style || item.style.group == 'icon'); });	
									
									//log({editors: ox.copy(editors)});
									return {editors, styles};
									
								}
								catch(e) {
									ox.error(this.clsId + '.valueToEditors: Error', {e});
								}
							},
							enrichEditorConfig: function(editor) {
								if(!editor || !editor.html) return;
								var me = this;
								
								if(!editor.html.args) editor.html.args = {};
								editor.html.value = editor.value;
								editor.html.args.value = editor.value;
								editor.html.args.onChanged = function(args) { me.onInputFormats(); };
								//editor.html.args.onFocus = function(args) { me.focus(); };
								editor.html.onReady = function(elem, comp) { editor.comp = comp; };
								if(!editor.css) editor.css = '';
								editor.css += ' ox-list-item-data';
							},
							editorsToValue: function() {
								var editors = this.getElements(); //elems.list.getDataArray();
								//log({editors});
								editors = editors.filter(e => e.type == 'style').concat(editors.filter(e => e.type != 'style'));
								
								//ox.arr.sortByKey(i => editors.type);
								
								var value = editors ? editors.map(item => { return item.comp ? item.comp.getValue() : null; }).join(' ').trim() : '';
								var styles = this.styles ? this.styles.map(function(item) { return item.item; }).join(' ').trim() : '';
								
								return {styles, value};
							},
							setElements: function(editors) {
								this.isEditorsBuild = true;
								log(this.clsId + '.setElements: Add ' + editors.length + ' editor(s)');
								
								this.elems.list.clear();
								this.elems.list.publish({data: editors});
								
								var me = this;
								ox.el.onRefresh(function() { me.isEditorsBuild = false; });
							},
							addElement: function(comp) {
								var editor = ox.copy(comp);
								this.enrichEditorConfig(editor);
								this.elems.list.publish({data: [editor]});
								this.onInputFormats();
								
								ox.el.onRefresh(function() { 
									if(editor.comp && editor.comp.focus) editor.comp.focus();
								});
							},
							keyboardFocus: function(isOn, isHidden, isOnce) {
								if(!ox.pf.isPhone) return;
								if(isOn === undefined) isOn = true;
								var me = this;
								
								if(!isOn) {
									if(this.focusElem) {
										this.focusElem.off('blur.kf-' + this.id);
										this.focusElem = null;
									}
									//return;
								}
								
								// Get element
								var e = null;
								var editors = (this.getElements() || []); //.filter(function(item) { return item && item.comp && icon.comp.focus; });
								if(isHidden) editors.forEach(function(item) { if(item && item.comp && item.comp.blur) item.comp.blur(); });
								editors = editors.filter(function(item) { return item && item.comp && item.comp.focus; });
								if(!isHidden && editors.length) e = editors[0].comp;
						
								if(!e) e = this.elems.textmarkup;
							
								var focus = function() {
									if(isHidden) e.getRoot().removeClass('ox-hidden');
									e.focus();
									if(isHidden) e.getRoot().addClass('ox-hidden');
								};
								
								// Keep focus
								if(isOn) {
									var ta = $(e.getRoot().find('textarea'));
									this.focusElem = ta;
									ta.on('blur.kf-' + this.id, function() {
										focus();
									});
								}
								focus();
								
								if(isOnce) {
									ox.el.onRefresh(function() { me.keyboardFocus(false); });
								}
							},
							
							// Private functions - Data
							
							getElements: function() {
								return this.elems.list.getDataArray();
							},
							getEditors: function() { 
								var me = this;
								var defaults = [
									//{comp: omnia.ui.text, meta: {icon: 'fa fa-align-left', label: '#text'}},
								];
								$.each(omnia.ui.text.markup.styles, function(i, style) { 
									if(style.isAdd) {
										var comp = omnia.ui[style.oid];
										
										if(comp.editor && comp.editor.getAppend) {
											if(me.args.map) {
												var a = comp.editor.getAppend({node: me.args.node, map: me.args.map});
												defaults = defaults.concat(a);
											}
										} else {
											var meta = comp.meta ? comp.meta : {icon: style.icon || '', label: '#' + style.oid};
											defaults.push({comp: comp, meta: meta});
										}
									}
								});
								
								//log({defaults})
								
								defaults.sort(function(a, b) {
									var ga = a.meta.group ? ox.tx(a.meta.group) : null;
									var gb = b.meta.group ? ox.tx(b.meta.group) : null;
									var la = ox.tx(a.meta.label);
									var lb = ox.tx(b.meta.label);
									
									if(ga && gb && ga != gb) {
										if(ga < gb) return -1
										if(ga > gb) return 1;
										return 0
									} else if(ga && !gb) return -1;
									else if(gb && !ga) return 1;
									else {
										if(la < lb) return -1;
										if(la > lb) return 1;
										return 0;
									}
								});
								
								return defaults;
							},
							addStylesFromComps: function() {
								try {
									
								var me = this;
								ox.ui.text.markup.styles = ox.ui.text.markup.styles.filter(s => !s.isComp);
								
								var comps = Object.keys(omnia.ui).map(id => { return {id, comp: omnia.ui[id]}; });
								comps = comps.filter(c => c.comp.html && c.comp.html.css && typeof c.comp.html.css == 'string' && c.comp.html.css.includes('ox-id-icon'));
								
								var styles = comps.map(c => { 
									try {
										return {
											s: '[#](c-' + c.id + ')(\\s|$)',
											render: () => {
												try {
													return {oid: c.id, css: '', pcss: c.comp.html.pcss, pstyle: c.comp.html.pstyle};
												}
												catch(e) {
													ox.error({id: me.clsId + '.addStylesFromComps: Render comp \'' + c.id + '\'', e});
													return {t: 'span', css: 'col-red', text: c.id + ' (Error)'};
												}
											},
											html: '<span class="ox-weight-regular-i ' + c.comp.html.pcss + '">' + ox.node({oid: c.id})[0].outerHTML + (c.comp.html.comptitle ? ' ' + c.comp.html.comptitle : '') + '</span>', 
											code: '#c-' + c.id,
											//css: c.comp.html.css,
											//pcss: c.comp.html.pcss,
											//pstyle: c.comp.html.pstyle,
											group: 'comp',
											isComp: true,
										}; 
									}
									catch(e) {
										ox.error({id: me.clsId + '.addStylesFromComps: Add comp \'' + c.id + '\'', e});
										return [];
									}
								});
								ox.ui.text.markup.styles = styles.concat(ox.ui.text.markup.styles);
					
								}
								catch(e) {
									ox.error({id: this.clsId + '.addStylesFromComps', e});
								}
							},
							
};omnia.ui.markupeditor.html = {
							
							oid: 'frame2', css: 'ox-trans', style: 'max-width:450px', c: [
								{oid: 'frame2', css: 'ox-id-elementcontainer flex-1 ox-col-ui-dialog-0-back flex-1 ox-content', c: [
									
									// Markup
									{oid: 'textfield', css: 'ox-mode-markup ox-id-textmarkup ox-border-thin-between ox-col-ui-dialog-1-back-i', placeholder: '#markup', args: {cssTextarea: 'font-code'}},
										
									// Elements
									{oid: 'list', css: 'ox-mode-formats ox-hidden ox-inrow ox-id-list ox-id-elements ox-drag ox-grid _br4 _ml10 _mr10 _mt10 _ox-shadow-1 ox-dark-shadow-none _ox-border-thin ox-col-ui-dialog-0-back', style: '_overflow:hidden !important;', args: {
										dragHandle: '.ox-id-element-draghandle',
										gridInfo: {gap: 0},
									}},
								]},
								
								// Actions
								{oid: 'bar2', css: 'ox-actions ox-id-actions ox-border-thin-top-i flex-fix _ox-stretch-basis-3 _ox-stretch ox-split', c: [
									{oid: 'button', css: 'ox-id-close ox-inline', label: '#cancel'},
									{oid: 'buttonicon', css: 'ox-mode-markup ox-id-togglemode ox-id-toggleformats ox-inline', icon: 'fa fa-pen'},
									{oid: 'buttonicon', css: 'ox-mode-formats ox-id-togglemode ox-hidden ox-id-togglemarkup ox-inline', icon: 'fa fa-i-cursor'},
									{oid: 'button', css: 'ox-id-save _ox-id-close ox-green _flex-1 ox-inline', label: '#save-button'},
								]},
							],
							
};omnia.ui.styleeditor.handler = {
							
							clsId: 'omnia.ui.styleeditor.handler',
							args: null,
							elems: null,
							root: null,
							value: '',
							dropdowns: null,
							markup: null,
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								this.markup = ox.ui.text.markup.styles;
							
								if(!args.value) this.render(args);
								this.reset(args);
								
								log(this.clsId + '.init: value = ' + this.value);
							},
							
							// Private functions - UI
							
							render: function() {
								var me = this;
								var e = this.elems = ox.el.getAll(this.root, true);
								
								var labels = {
									textcolor: '<i class="fa fa-font vmiddle"></i>',
									textstyle: '<i class="fa fa-font vmiddle"></i>',
									textsize: '<i class="fa fa-text-height vmiddle"></i>',
									backcolor: '<i class="fa fa-fill vmiddle"></i>',
									framestyle: '<i class="fa fa-border-top-left vmiddle"></i>',
									width: '<i class="fas fa-arrows-alt-h"></i>',
									substyle: '<i class="fa fa-expand"></i>',
									alignment: '<i class="fa fa-arrow-right"></i>',
									icon: '<i class="fa fa-image"></i>',
									comp: '<i class="fa fa-layer-group"></i>',
								};
								
								e.groups.html('');
								this.dropdowns = [];
								
								if(this.args.options) ox.node(this.args.options, e.groups);
								
								var groupsIDs = this.getStyleGroups();
								ox.node(groupsIDs.map(groupID => {
									//var styles = me.markup.filter(s => s.group == groupID && s.code);
									var styles = me.getStyles({group: groupID});
									var isToggle = true; //styles.length && styles[0].groupunique;
									
									if(isToggle) {
										var selected = styles.findIndex(style => {
											var styleRegEx = new RegExp(style.s, "g"); 
											return styleRegEx.test(me.value);
										});
										
										//if(groupID == 'icon') log({selected, styles, value: me.value})
										
										return {oid: 'dropdown', css: 'ox-medium' + (ox.pf.isPhone ? '' : ' ox-inline'), onReady: (elem, dropdown) => me.dropdowns.push(dropdown), args: {
											items: [{label: '<div class="opa08 br4 inline vmiddle ox-border" style="width:25px; height:25px; line-height:22px; padding-left:1px;"><i class="fa fa-slash opa03"></i></div>', v: ''}].concat(styles.map(s => { return {label: s.html, value: s.code}; })),
											cssItems: 'ox-slim',
											label: labels[groupID] || '#' + groupID,
											asToggle: true,
											selected: selected >= 0 ? selected + 1 : 0,
											onSelect: () => me.onChanged(),
											isNoArrow: true,
											isShowNotFirst: true,
										}};
									}
									
									return styles.map(s => {
										return {oid: 'button', css: 'ox-inline ox-medium', label: s.html};
									});
									
								}), e.groups);
							},
							getRoot: function() {
								return this.root;
							},
							
							// Public functions - Data
							
							reset: function(args) {
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.value) this.setValue(args.value);
								if(args.data && args.data.v) this.setValue(args.data.v);
							},
							getValue: function() {
								return this.dropdowns.map(d => d.getValue().value).join(' ').replace(/[ ]+/g, ' ').trim();
							},
							setValue: function(value) {
								this.value = value;
								this.render();
							},
							onChanged: function() {
								var v = this.getValue();
								if(this.args.onChanged) this.args.onChanged({value: v});
							},
							
							// Private functions - Data
							
							getStyleGroups: function() {
								return ox.arr.unique(this.markup.filter(s => (s.style || s.group == 'icon' || s.group == 'comp') && s.code).map(s => s.group));
							},
							getStyles: function(filter) {
								if(!filter) filter = {};
								var styles = this.markup.filter(s => s.group == filter.group && s.code);
							
								/*if(filter.group == 'icon') {
									var comps = Object.keys(omnia.ui).map(id => { return {id, comp: omnia.ui[id]}; });
									comps = comps.filter(c => c.comp.html && c.comp.html.css && c.comp.html.css.includes('ox-id-icon'));
									styles = styles.concat(comps.map(c => { return {
										s: '#c-' + c.id,
										html: c.comp.html, 
										code: '#c-' + c.id,
									}; }));
								}*/
								return styles;
							},
							
};omnia.ui.styleeditor.html = {

							t: 'div', css: 'ox-styleeditor', c: [
								{oid: 'bar2', css: 'ox-noflex _ox-alone _ox-col-ui-dialog-0-back _ox-dark-col-pitch-1-back pr5', c: [
									{t: 'div', css: 'h100 ox-id-groups'},
								]},
							],

};omnia.ui.tableeditor.handler = {

							args: null,
							elems: null,
							root: null,
							data: null,
							clipboard: null,
							
							editor: null,
							table: null,
							
							open: function(args) {
								if(!args) args = {};
								
								ox.ov.show({
									delay: true,
									onClose: args && args.onClose ? function() { args.onClose(); } : null,
									onRendered: function(overlay) { args.overlay = overlay; },
									isModal: true,
									isScroll: true,
									frame: {
										oid: 'dialog',
										title: '#edit-table',
										style: ox.pf.isPhone ? {'max-height': '90%', 'width': '100%'} : {'min-width': '400px', 'width': '80%', 'min-height': '50%'},
										css: 'ox-body-flex',
										c: [
											{oid: 'tableeditor', onReady: function(elem, editor) { args.editor = editor; }, args: args},
										],
										actions: [
											{oid: 'button', css: 'ox-green ox-inline ox-alone', label: '#save-button', click: function() { if(args && args.editor) args.editor.onSave(args); }},
										],
									},
								});
							},
							
							init: function(args) {
								log('omnia.ui.tableeditor.init');
								
								this.args = args;
								this.elems = ox.el.getAll(args.root);
								this.root = args.root;
								
								// Data
								if(args.table && !args.data) args.data = args.table;
								if(args.data && args.data instanceof Array) args.wasDataArray = true;
								if(args.data && !(args.data instanceof Array) && args.data.c) args.data = args.data.c;
								this.data = ox.copy(omnia.ui.table2.data.nodeToTable(args.data || omnia.ui.table2.data.defaultNode.c).table);

								// Add columns
								this.addColumn(true);
								this.addRow(true);

								this.render();
								//if(!ox.pf.isPhone && 0) this.edit(null, 0, 0);
							},
							render: function() {
								var me = this;
								var data = this.data;
								
								if(this.editor) this.closeEditor();
								
								this.root.html('');
								//ox.node({oid: 'obj', css: 'ox-line-normal', args: {obj: this.args.data}}, this.root);
								this.table = ox.node({
									oid: 'table2', 
									css: 'ox-d inline ox-line-normal',
									args: {
										table: data, 
										isPadding: true, 
										isMarkup: false, 
										isCalc: false,
										isEditMode: true,
										isLastNew: true,
										cssTable: 'ox-col-ui-dialog-1-back',
										cellClick: function(e, elem, row, col, table) { me.edit(elem, row, col, table); },
										getHeaderMenu: function(col, row, isLast) { return me.getMenu(col, row, isLast); },
										//clickColHeader: function(e, elem, col) { me.menu(col, null); },
										//clickRowHeader: function(e, elem, row) { me.menu(null, row); },
									},
								}, this.root);								
							},
							getRoot: function() {
								return this.root;
							},
							edit: function(elem, row, col) {
								var me = this;
								var e = this.elems;
								var cell = this.data[row][col];
								//elem.addClass('nowrap-i');
								
								if(!elem) elem = this.table.getCellElem(row, col);
								
								var isInline = true; ///*this.args.isInline && */ox.pf.device != 'phone';
								//var elem = this.root;// ox.node({t: 'div', css: 'abs t00'}, elem);

								/*this.editor = ox.ui.text.editor.create({
									root: elem,
									content: elem,
									//actions: this.args.actions,
									data: {v: cell}, //this.args.data,
			
									//onInput: function(data) { if(me.args.onInput) me.args.onInput(data, me.root); },
									//onClose: function(isSave, data) { me.onClose(isSave, data); },
			
									isNoFormat: this.args.isNoFormat,
									isModal: this.args.isModal,
									//isAttached: this.args.isAttached,
									isInline: isInline,
									isMultiline: true, //this.args.isMultiline,
									isUnique: true, //this.args.isUnique,
									widthDyn: true,
									//heightFix: true,
									//cssEdit: this.args.cssEdit,
									//isRight: this.args.isRight,
									//isIconsRight: this.args.isIconsRight,
									//isTextarea: this.args.isTextarea,
								});
*/
								if(this.editor) {
									if(this.editor.row == row && this.editor.col == col) {
										this.editor.editor.focus();
										return;
									}
									
									this.closeEditor();
								}
								
								// Inline editor
								
								// Check new col or row
								if(row == this.data.length - 1) {
									this.addRow(); //false, null, col, row + 1);
									elem = this.table.getCellElem(row, col);
									//return;
								}
								
								if(col == this.data[0].length - 1) {
									this.addColumn(); //false, null, col + 1, row);
									elem = this.table.getCellElem(row, col);
									//return;
								}

								if(!isInline) {
									var data = {v: cell};
									this.editor = {
										isPopup: true,
										row: row,
										col: col,
										data: data,
										editor: ox.ui.text.editor.create({
											root: ox.node({t: 'div', text: cell}), //elem,
											content: ox.node({t: 'div', text: cell}), // elem,
											data: data,
					
											//onInput: function(data) { if(me.args.onInput) me.args.onInput(data, me.root); },
											onClose: function(isSave, data) { 
												if(isSave) me.data[me.editor.row][me.editor.col] = data; 
												//me.editor.editor.destroy();
												delete me.editor.editor;
												delete me.editor;
											},
					
											isNoFormat: this.args.isNoFormat,
											isModal: false,
											//isAttached: this.args.isAttached,
											isInline: false,
											isMultiline: true, //this.args.isMultiline,
											isUnique: true, //this.args.isUnique,
											//heightFix: true,
											//cssEdit: this.args.cssEdit,
											//isRight: this.args.isRight,
											//isIconsRight: this.args.isIconsRight,
											//isTextarea: this.args.isTextarea,
										}),
									};
									return;
								};

								// New Editor
								this.editor = {
									row: row,
									col: col,
									data: {v: cell},
									elem: elem,
								};
								elem.html('');
								elem.addClass('p0-i');
								var w = elem.width();
								this.editor.editor = ox.node({oid: 'textfield', css: 'abs t00 ox-selected-border-outside no-crop', text: {css: '_col-highlight-10-back-i', style: 'padding:8px 12px; height:35px;'}, args: {
									//data: this.editor.data,
									value: cell ? (typeof cell == 'string' ? cell : (cell.v || cell.text)) : '',
									widthDyn: true, //true,
									isMultiline: false,
									isUnique: true,
									isFocus: true,
									minWidth: w < 100 ? 100 : w,
									maxWidth: w > 150 ? w : 300, //screen.width - 90,
									minHeight: elem.height(),
									isKeepFocus: true,
									//paddingV: 1,
									onBlur: function() {
										//me.closeEditor();
									},
								}}, elem);
								
								//log({editor});
							},
							closeEditor: function() {
								if(!this.editor) return;
								
								// Destroy textfield
								var v = this.editor.editor.getValue();
								this.editor.editor.destroy();
								delete this.editor.editor;
								
								this.editor.elem.removeClass('p0-i');
								this.editor.elem.html(v);
								
								this.data[this.editor.row][this.editor.col] = {v: v};
								
								delete this.editor;
							},
							getMenu: function(col, row, isAdd) {
								if(ox.pf.isPhone) this.closeEditor();
								
								var me = this;
								var isCol = col >= 0;
								var isRow = row >= 0;
								var isRoot = col == -1 && row == -1;
								var ha = omnia.ui.tableeditor.handler;
								
								if(isAdd) {
									return [
										{oid: 'button', css: 'ox-id-close', label: '#add', click: function() {
											log('#add');
											if(isCol) { 
												me.addColumn(false, null, col, 0); 
											} else {
												me.addRow(false, null, 0, row);
											}
										}},
									];
								}
								var isLastCol = isCol && col == me.data[0].length - 2;
								var isLastRow = isRow && row == me.data.length - 2;
								var isMin = (isLastCol && me.data[0].length <= 2) || (isLastRow && me.data.length <= 2);
								var isNoClipboard = !ha.clipboard || (isCol && ha.clipboard.type != 'col') || (isRow && ha.clipboard.type != 'row');

								var copy = function() {
									//me.closeEditor();
									
									if(ha.clipboard) {
										delete ha.clipboard.item;
										delete ha.clipboard;
									}	
									ha.clipboard = isCol ? {type: 'col', item: ox.arr.getColumn(me.data, col)} : {type: 'row', item: me.data[row]};
									//log('#copy', ha.clipboard);
								};
								var remove = function() {
									if(isCol) me.addColumn(false, col, isLastCol ? col - 1 : col, 0, true);
									else me.addRow(false, row, 0, isLastRow ? row - 1 : row, true);
								};
								return [
									//{t: 'div', css: 'font', text: col + '/' + (me.data[0].length - 1) + ' ' + row + '/' + (me.data.length - 1)},
									{oid: 'button', css: 'ox-id-close', label: '#cut', click: function() {
										copy();
										remove();
									}},
									{oid: 'button', css: 'ox-id-close', label: '#copy', click: function() {
										copy();
										//me.edit(null, row, col);
									}},
									isNoClipboard ? null : {oid: 'button', css: 'ox-id-close', label: isRow ? '#paste-above' : '#paste-before', click: function() {
										//log('#paste', ha.clipboard);
										if(isCol) me.addColumn(false, col, col, 0, false, ha.clipboard.item);
										else me.addRow(false, row, 0, row, false, ha.clipboard.item);
									}},
									isNoClipboard ? null : {oid: 'button', css: 'ox-id-close', label: isRow ? '#paste-below' : '#paste-after', click: function() {
										if(isCol) me.addColumn(false, col + 1, col + 1, 0, false, ha.clipboard.item);
										else me.addRow(false, row + 1, 0, row + 1, false, ha.clipboard.item);
									}},
									{oid: 'sep'},
									{oid: 'button', css: 'ox-id-close', label: isRow ? '#insert-above' : '#insert-before', click: function() {
										if(isCol) me.addColumn(false, col, col, 0);
										else me.addRow(false, row, 0, row);
									}},
									{oid: 'button', css: 'ox-id-close', label: isRow ? '#insert-below' : '#insert-after', click: function() {
										if(isCol) me.addColumn(false, col + 1, col + 1, 0);
										else me.addRow(false, row + 1, 0, row + 1);
									}},
									isRow ? null : {oid: 'sep'},
									isRow ? null : {oid: 'button', css: 'ox-id-close', label: '#sort-ascending', click: function() { me.sortBy(col); }},
									isRow ? null : {oid: 'button', css: 'ox-id-close', label: '#sort-descending', click: function() { me.sortBy(col, true); }},
									isMin ? null : {oid: 'sep'},
									isMin ? null : {oid: 'button', css: 'col-red ox-id-close', label: '#remove', click: function() {
										ox.ov.confirm({
											content: '#confirm-delete',
											labelButton: '#delete-button',
											action: function() {
												remove();
											},
										});
									}},
								];
							},
							onSave: function(args) {
								if(!args) return;
								log('omnia.ui.tableeditor.onSave');
								
								this.closeEditor();
								if(args.overlay) args.overlay.close(true);
						
								var table = ox.arr.trim(this.data, true);
								if(!table || !table.length) table = ['', ''];
								var data = omnia.ui.table2.data.tableToNode(table);

//log({table: this.data, node: data});
								if(!this.args.wasDataArray) data = {v: '#table', s: 1, c: data};
//ox.ui.obj.show(data);								
								if(args.onClose) args.onClose(true, data, true);
							},
							
							// Functions Data
							
							addColumn: function(isNoRedraw, idx, editCol, editRow, isRemove, col) { 
								this.closeEditor();

								var x = col || {v: ''}; //'c' + Math.round(100 * Math.random());
								/*ox.each(this.data, function(rowIdx, row) {
									if(idx !== null && idx >= 0) {
										if(!isRemove) ox.arr.insertAt(row, idx, x);
										else ox.arr.removeAt(row, idx);
									} else {
										//log(row);
										row.push(x);
										//log(row);
									}
								});*/
								this.data = ox.arr.addColumn(this.data, idx, x, isRemove);
								
								if(!isNoRedraw) this.render();
								if(editCol != undefined && editRow != undefined) this.edit(null, editRow, editCol);
							},
							addRow: function(isNoRedraw, idx, editCol, editRow, isRemove, row) {
								this.closeEditor();
//log({id: 'addRow', row});
								var x = row || {v: ''}; //'r' + Math.round(100 * Math.random());
								/*var row = new Array(this.data[0].length).fill(x);

								if(idx !== null && idx >= 0) {
									if(!isRemove) ox.arr.insertAt(this.data, idx, row);
									else ox.arr.removeAt(this.data, idx);
								} else this.data.push(row);*/
								this.data = ox.arr.addRow(this.data, idx, x, isRemove);

								if(!isNoRedraw) this.render();
								if(editCol != undefined && editRow != undefined) this.edit(null, editRow, editCol);
							},
							sortBy: function(col, isDescending) {
								log(ox.copy(this.data));
								if(this.data.length < 3) return;
								
								var dFirst = this.data[0];
								var dLast = this.data[this.data.length - 1];
								var d = ox.copy(this.data);
								d.shift();
								d.pop();
								d.sort(function(a, b) { 
									v0 = typeof a[col] == 'string' ? a[col] : a[col].v;
									v1 = typeof b[col] == 'string' ? b[col] : b[col].v;
									
									//log({v0, v1, a, b, d: ox.copy(d)});
									return v0 < v1 ? (isDescending ? 1 : -1) : (v0 > v1 ? (isDescending ? -1 : 1) : 0);
								});
								//log('#after', ox.copy(d));
								d.unshift(dFirst);
								d.push(dLast);
								
								this.data = d;
								
								//log('#data', this.data);
								
								this.render();
								this.edit(null, 0, col);
							},

};omnia.ui.tableeditor.html = {
							
							oid: 'frame2', css: 'ox-tableeditor ox-col-ui-dialog-1-back ox-content ox-id-canvas ox-line-0', c: [
								/*{t: 'div', css: 'inline pb15', c: [
									{t: 'div', css: 'flex _ox-d', c: [
										{t: 'div', css: 'ox-id-canvas inline vtop p0 ox-line-0'},
										{t: 'div', css: 'inline vtop', c: [
											{oid: 'button', css: 'ox-slim font _ox-white-50 _col-light-4-back rel', style: {'width': '45px', 'min-height': '41px'}, c: [
												{t: 'div', css: 'abs t00 w100 hcenter col-light-4-back ox-border-right-i ox-border-bottom-i ox-border-top', style: {'height': '41px', 'line-height': '41px'}, text: '+'},
											]},
										]},
									]},
									{t: 'div', css: '_ox-d2', c: [
										{oid: 'button', css: 'ox-slim font _ox-white-50 _col-light-4-back rel', style: {'height': '40px', 'width': 'calc(100% - 45px)'}, c: [
											{t: 'div', css: 'abs t00 w100 hcenter col-light-4-back ox-border-right-i ox-border-bottom-i ox-border-left', style: {'width': '52px', 'line-height': '39px'}, text: '+'},
										]},
									]},
								]},*/
							],
							
};omnia.ui.tageditor.handler = {
							
							clsId: 'omnia.ui.tageditor.handler',
							args: null,
							elems: null,
							root: null,
							value: '',
							text: null,
							code: '[text]',
							isDropdownClicked: false,
							styles: null,
							
							init: function(args) {
								this.args = args;
								this.getTagStyles();
								
								this.render(args);
								this.setMode(false);
								//this.view();
								this.reset(args);
							},
							
							// Functions UI
							
							render: function(args) {
								var me = this;
								var root = this.root = args.root;
								var e = this.elems = ox.el.getAll(args.root, true);

								// onEnter behaviour
								e.taginput.reset({
									onEnter: function() { me.onEnter(); },
									onBlur: function() { me.onBlur(); },
									onInput: function(value) { me.setText(value); },
								});
								/*e.tagstyle.reset({
									onClose: function() { 
										me.isDropdownClicked = false;
										
										ox.el.onRefresh(function() {
										//if(e.taginput.getValue()) me.onBlur();
										//else 
											e.taginput.focus(); 
										});
									},
								});
								e.tagstyle.getRoot().on(ox.b.CLICK_DOWN, function() { 
									me.isDropdownClicked = true;
									e.taginput.blur();
								});*/
								this.root.on(ox.b.CLICK_DOWN, function() {
									me.isDropdownClicked = true;
								});
								e.tagview.on(ox.b.CLICK, function() { me.onEnter(); });
								
								// Styles
								/*e.tagstyle.reset({
									onSelect: function(value) {
										me.setCode(value.value)
									},
								});*/
								e.tagstyletoggle.reset({
									onSelect: function(value) {
										me.setCode(value.value);
										//me.focus();
										//ox.el.onRefresh(function() { me.isDropdownClicked = false; });
									},
								});
								this.setStyleDropdown();
							},
							getRoot: function() {
								return this.root;
							},
							onEnter: function() {
								//this.isDropdownClicked = false;
								this.setMode(true);
								/*ox.css(this.elems.tagview, 'ox-hidden', true);
								ox.css(this.elems.tagstyle.getRoot(), 'ox-hidden', false);
								ox.css(this.elems.tagstyletoggle.getRoot(), 'ox-hidden', false);
								ox.css(this.elems.taginput.getRoot(), 'ox-hidden', false);
								
								this.elems.taginput.focus();*/
							},
							blur: function() {
								this.elems.taginput.blur();
								this.setMode(false);
							},
							onBlur: function() {
								if(this.isDropdownClicked) {
									this.focus(true);
									return;
								}
								var me = this;
								ox.el.onRefresh(function() {
									me.setMode(false);
								});
								
								/*ox.css(this.elems.tagview, 'ox-hidden', false);
								ox.css(this.elems.tagstyle.getRoot(), 'ox-hidden', true);
								ox.css(this.elems.tagstyletoggle.getRoot(), 'ox-hidden', true);
								ox.css(this.elems.taginput.getRoot(), 'ox-hidden', true);
								
								this.view();*/
							},
							setMode: function(isEdit) {
								ox.css(this.elems.tagview, 'ox-hidden', isEdit);
								//ox.css(this.elems.tagstyle.getRoot(), 'ox-hidden', !isEdit);
								ox.css(this.elems.tagstyletoggle.getRoot(), 'ox-hidden', !isEdit);
								ox.css(this.elems.taginput.getRoot(), 'ox-hidden', !isEdit);
								
								if(isEdit) this.focus();
								else this.view();
							},
							focus: function(isOff) {
								if(this.elems.taginput.getRoot().hasClass('ox-hidden')) {
									this.setMode(true);
									return;
								}
								
								var me = this;
								this.elems.taginput.focus();
								ox.el.onRefresh(function() {
									me.elems.taginput.focus();
									if(isOff) me.isDropdownClicked = false;
								});
							},
							view: function() {
								this.elems.tagview.html('');
								if(!this.text) {
									ox.node({t: 'div', css: 'font col-medium-2 pl5', text: '#tag'}, this.elems.tagview);
									return;
								}

								var render = ox.ui.text.markup.render(this.value);
								ox.node({t: 'span', html: render.html, click: function() { me.onEnter(); }}, this.elems.tagview);
							},
							setStyleDropdown: function() {
								var me = this;
								var items = this.styles.map(function(style) { return {
									label: style.codeCompiled.split('text').join(this.text || '...'), 
									value: style.code,
									clickdown: function() {
										//log('#down');
										me.isDropdownClicked = true;
										me.focus();
									},
								
								}; });
								
								/*this.elems.tagstyle.reset({items});
								if(this.code) this.elems.tagstyle.setValue(this.code);
								else this.elems.tagstyle.set(0);*/
						
								this.elems.tagstyletoggle.reset({items});
								if(this.code) this.elems.tagstyletoggle.setValue(this.code);
								//else this.elems.tagstyletoggle.select(0);
							},
							
							// Functions Data
							
							reset: function(args) {
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.value) this.setValue(args.value);
							},
							getValue: function() {
								return this.value;
							},
							setValue: function(value) {
								var v = this.value;
								this.value = value;
								this.text = this.tagToText(this.value);
								this.code = this.tagToCode(this.value);
								//log({value, text: this.text, code: this.code});
								
								this.elems.taginput.setValue(this.text);
								this.view();
								this.setStyleDropdown();
								
								if(v != value && this.args.onChanged) this.args.onChanged({value: this.getValue()}); 
							},
							setText: function(text) { 
								this.text = text;
								var v = this.value;
								this.value = this.code.split('text').join(text);

								if(v != this.value && this.args.onChanged) this.args.onChanged({value: this.getValue()}); 
							},
							setCode: function(code) { 
								if(!code) return;
								
								this.code = code;
								var v = this.value;
								this.value = !this.text ? '' : this.code.split('text').join(this.text);

								if(v != this.value && this.args.onChanged) this.args.onChanged({value: this.getValue()}); 
							},
							getTagStyles: function() {
								var styles = ox.ui.text.markup.styles;
								this.styles = ox.copy(styles.filter(function(style) { return style.group == 'tag'; })).map(function(item) {
									var render = ox.ui.text.markup.render(item.code);
									item.codeCompiled = '<div class="inline" style="line-height:normal;">' + render.html + '</div>';
									
									return item;
								});
							},
							tagToText: function(tag) {
								var render = ox.ui.text.markup.render(tag);
								var div = $('<div />');
								div.html(render.html);
								return div.text();
							},
							tagToCode: function(tag) {
								var r = null;
								this.styles.forEach(function(style) {
									var re = new RegExp(style.s);
									if(!r && re.test(tag)) r = style;
								});
								
								return r ? r.code : null;
							},

};omnia.ui.tageditor.html = {
							
							t: 'div', css: 'ox-tageditor', c: [
								{oid: 'bar2', css: 'ox-height-flex _wrap-i _ox-small', c: [
									{oid: 'dropdown', css: 'ox-mode-edit ox-id-tagstyletoggle pl5 pr5 _ox-border-thin-top h45px-i ox-slim', args: {asToggle: true, cssItems: 'ox-slim'}},
									{oid: 'inputfield', css: 'ox-id-taginput flex-1', placeholder: '#tag'},
								]},
								{t: 'div', css: 'ox-mode-view pl10 pr10 flex-vcenter ox-id-tagview ox-cursor-hand w100', style: {'height': '45px'}},	
							],
							
};omnia.ui.textrich.handler = {

							root: null,
							content: null,
							contentText: null,
							popup: null,
							tagsByUI: {},
							args: null,
							linkSearchId: null,
							tagMeta: null,
							isTextarea: false,
							isSub: false,
							
							// Static functions
							
							setTouchMove: function(elem) {
								var xs, x;
								elem.bind('touchstart', function(e) {
									xs = x = e.originalEvent.touches[0].clientX;
								});
								elem.bind('touchmove', function(e) {
									var xn = e.originalEvent.changedTouches[0].clientX;
									var pos = ox.t.selection.getSelection(elem);
									
									if(xn != xs) {
										if(xn - x > 1) ox.t.selection.setPosition(elem, pos.end + 1); //me.triggerKey('{rightarrow}'); //text.trigger({type: 'keydown', key: '{rightarrow}', isInput: true});
										if(xn - x < -1) ox.t.selection.setPosition(elem, pos.end - 1); //me.triggerKey('{leftarrow}'); //text.trigger({type: 'keydown', key: '{leftarrow}', isInput: true});
									    
									    //text.focus();
								     	//e.preventDefault(); 
							    	}
							    
								   x = xn;
								   e.preventDefault();
								});	
							},
							
							// Public functions
							
							init: function(args) {
								var me = this;
		
								this.args = args;
								this.root = args.root;
								this.popup = args.root;
			
								// UI
								this.prepareUI(args);
			
								if(args.isNoFormat) {
									//this.onViewClick();
									this.root.find('.ox-id-view-toggle').addClass('ox-hidden');
								}
								
								ox.el.get('translate', args.root).on(ox.b.CLICK, function() {
									me.isSub = true;
									var render = omnia.ui.text.markup.render(me.content[0].value);
									
									//if(!args.onChangeEditor) return;
									//args.onChangeEditor(function(args2) {
										//ox.ui.obj.show(args2)
										omnia.ui.translate.handler.open({
											data: {v: render.text},
											//data: {v: me.content[0].value},
											onClose: function(isSave, data) {
												if(isSave) me.setValue(data.v);
												me.isSub = false;
												//ox.el.onRefresh(function() {
													me.content.focus();
												//});
											},
										});
									//});
								});
								
								setTimeout(function() { 
									me.onToggle(args.isNoFormat ? true : false, true);
									me.onViewClick();
				
									//if(ox.pf.device != 'phone') omnia.tools.selection.selectAll(me.contentText);
									if(ox.pf.device != 'phone') omnia.tools.selection.selectAll(me.content);
									//else omnia.tools.selection.setPosition(me.contentText, 'end');
									
									if(args.onInit) args.onInit(me, me.content);
								}, 1);
							},
							
							// Private UI functions
							
							prepareUI: function(args) {
								var me = this;
								var root = this.root;
								var isTextarea = this.isTextarea = true; //args.isTextarea || ox.pf.device == 'phone';
								
								if(!args.inputHtml) args.inputHtml = omnia.ui.text.editor.inputToValue(args.textInitial || args.data.text || args.data.v);
								
								if(isTextarea) args.inputHtml = args.inputHtml.split('<br>').join('\n');
								var html = args.inputHtml; //args.data.text || args.data.v; //omnia.tools.selection.textToHtml(args.data.text || args.data.v);
								var platform = omnia.tools.browser.platform;
								
								var markupFrame = $(root.find('.ox-id-tab-markup.ox-child')).data('ox-handler');
								markupFrame.onActivate = function() { me.onToggle(true); }
								
								var simpleFrame = $(root.find('.ox-id-tab-simple.ox-child')).data('ox-handler');
								simpleFrame.onActivate = function() { me.onToggle(false); }
								
								var content = me.content = $(root.find('.ox-id-tab-markup > .ox-id-content' + (isTextarea ? '-textarea' : '')));
								content.removeClass('ox-hidden');
								this.setValue(html);
								//content.html(html);
								if(platform.method == 'touch') ox.ui.textrich.handler.setTouchMove(content);
			
								var contentText = me.contentText = !args.isAttached ? $(root.find('.ox-id-tab-simple.ox-child > .ox-id-content-text' + (isTextarea ? '-textarea' : ''))) : args.content;
								contentText.removeClass('ox-hidden');
								contentText.on('input', function(e) {
									if(args.onInputEditor) args.onInputEditor(e, contentText);
									me.setHeight();
									
									me.copyUIToTags(); 
									me.parseRichTags(); 
								});
								if(platform.method == 'touch') ox.ui.textrich.handler.setTouchMove(contentText);
			
								content.on('input', function(e) {
									if(args.onInputEditor && !isTextarea) args.onInputEditor(e, content);
									me.setHeight();
								});
								//content.on('keypress', function(e) { return me.preventEnter(e); });
								//contentText.on('keypress', function(e) { return me.preventEnter(e); });
								
								var viewButtons = $(root.find('.ox-id-view-toggle'));
								viewButtons.on(omnia.tools.browser.CLICK, function() { me.onViewClick(); });
							
								$(root.find('.ox-id-content-selectall')).on(ox.b.CLICK, function() { omnia.tools.selection.setPosition(me.content, 'all'); });
								$(root.find('.ox-id-content-go-start')).on(ox.b.CLICK, function() { omnia.tools.selection.setPosition(me.content, 'start'); });
								$(root.find('.ox-id-content-go-end')).on(ox.b.CLICK, function() { omnia.tools.selection.setPosition(me.content, 'end'); });
								$(root.find('.ox-id-content-go-left')).on(ox.b.CLICK, function() { omnia.tools.selection.setPosition(me.content, 'left'); });
								$(root.find('.ox-id-content-go-right')).on(ox.b.CLICK, function() { omnia.tools.selection.setPosition(me.content, 'right'); });
								
								$(root.find('.ox-id-content-text-selectall')).on(ox.b.CLICK, function() { omnia.tools.selection.setPosition(me.contentText, 'all'); });
								$(root.find('.ox-id-content-text-go-start')).on(ox.b.CLICK, function() { omnia.tools.selection.setPosition(me.contentText, 'start'); });
								$(root.find('.ox-id-content-text-go-end')).on(ox.b.CLICK, function(e, elem) { omnia.tools.selection.setPosition(me.contentText, 'end'); /*if(elem) elem.blur();*/ });
								$(root.find('.ox-id-content-text-go-left')).on(ox.b.CLICK, function() { omnia.tools.selection.setPosition(me.contentText, 'left'); });
								$(root.find('.ox-id-content-text-go-right')).on(ox.b.CLICK, function() { omnia.tools.selection.setPosition(me.contentText, 'right'); });
			
								if(args.content && args.isAttached) {
									var ch = args.content.outerWidth();
									var h = platform.method == 'touch' ? 45 : 30;
									
									var simple = simpleFrame.getRoot();
									simple.removeClass('mt5');
									simple.addClass('no-crop');
									simple.parent().addClass('no-crop');
									simple.css({'height': '95px', 'width': '420px'});
									simple.find('.ox-id-formats-tabs').removeClass('ml10 mr10');
									simple.find('.ox-id-formats').removeClass('ml10 mr10 mb10');
									simple.find('.ox-id-formats').css({'border-width': 0, 'height': '50px'});
									simple.find('.ox-id-view-toggle').addClass('ox-hidden');
									simple.find('.ox-id-okcancel').removeClass('ox-hidden');
			
									if(args.editor) {
										simple.find('.ox-id-save').on(omnia.tools.browser.CLICK, function(e) { 
											args.editor.close(true); 
											args.editor.popup.close(true); 
										});
										simple.find('.ox-id-cancel').on(omnia.tools.browser.CLICK, function(e) { 
											args.editor.close(false); 
											args.editor.popup.close(true); 
										});
									}
									
									$(root.find('.ox-id-tab-simple.ox-child > .ox-id-content-text')).addClass('ox-hidden');
									//contentText.css('z-index', 10001);
									
									/*contentText.removeClass('col-light-35-back w100 h100 scrollable-y wrap pl15 pr15 pt10 pb10');
									contentText.addClass('abs nowrap ox-border col-white-back ox-shadow-1');
									contentText.css({
										'width': 'auto', 
										'min-width': platform.method != 'touch' ? ch : (ch > 50 ? ch : 50), 
										'top': 'calc(50% - ' + (h / 2) + 'px)', 'height': h + 'px', 
										'left': args.isIconsRight || args.isRight ? null : 'calc(100% + 15px)', 
										'right': args.isIconsRight || args.isRight ? 'calc(100% + 15px)' : null, 
										'padding': (h == 30 ? 5 : 10) + 'px ' + (h == 30 ? 8 : 10) + 'px', 
										'font-size': (h == 30 ? null : '16px'),
									});
									*/
									contentText.on('keydown.' + args.editor.id, function(e) { args.editor.onKey(e); });
									
									//contentText.css({'width': args.content.outerWidth(), 'height': args.content.outerHeight()});
								}
								
								this.setHeight();
								window.requestAnimationFrame(function() { me.setHeight(); });
							},
							onViewClick: function() {
								$(this.args.root.find('.ox-id-tab-simple')).toggleClass('ox-hidden');
								$(this.args.root.find('.ox-id-tab-markup')).toggleClass('ox-hidden');
								
								this.onToggle($(this.args.root.find('.ox-id-tab-simple')).hasClass('ox-hidden'));
							},
			
							getValue: function() {
								if(this.tagMeta) return '#link-' + omnia.tools.string.objectToUrlString(this.tagMeta);
								return this.isTextarea ? this.content[0].value.split('\n').join('<br>') : this.content.html().trim();
							},
							setValue: function(value) {
								if(this.isTextarea) this.content[0].value = value;
								else this.content.html(value);
							},
							getRoot: function() {
								return this.root;
							},
							select: function(elem, pos) {
								switch(pos) {
									case 'all':
										omnia.tools.selection.selectAll(elem);
										break;
									case 'start':
										omnia.tools.selection.setPosition(elem, 0);
										break;
									case 'end':
										omnia.tools.selection.setPosition(elem, 'end');
										break;
									case 'left':
										omnia.tools.selection.setPosition(elem, 'left');							
										break;
									case 'right':
										omnia.tools.selection.setPosition(elem, 'right');							
										break;
								}
							},
							setHeight: function() {
								if(this.isTextarea) {
									this.content[0].scrollTop = 0;
									this.content[0].style.height = '30px';
									this.content[0].style.height = (this.content[0].scrollHeight) + 'px';
								
									this.contentText[0].scrollTop = 0;
									this.contentText[0].style.height = '30px';
									this.contentText[0].style.height = (this.contentText[0].scrollHeight) + 'px';
									
									//log('#' + this.content[0] + ' ' + this.content[0].scrollHeight);
							
								}
							},
							
							onToggle: function(isMarkup, isInitial) {
								if(!this.popup || !this.content || !this.contentText) return;
								log('omnia.ui.textrich.handler.onToggle: isMarkup = ' + isMarkup);
								
								if(isMarkup) {
									this.keepMeFocused(this.contentText, false);
									this.keepMeFocused(this.content, true);
								} else {
									var v = this.isTextarea ? this.content[0].value : this.content.html().trim();
									v = v.split('\n').join('---break---');
									
									var render = omnia.ui.text.markup.render(v);
									this.tagsByUI = {};
			
									render.tags = this.initUITags(render.tags, $(this.popup.find('.ox-id-back > .ox-childs')), 'backstyle');
									render.tags = this.initUITags(render.tags, $(this.popup.find('.ox-id-text > .ox-childs > .ox-id-textcolor')), 'textcolor');
									render.tags = this.initUITags(render.tags, $(this.popup.find('.ox-id-text > .ox-childs > .ox-id-textstyle')), 'textstyle');
									render.tags = this.initUITags(render.tags, $(this.popup.find('.ox-id-icons > .ox-childs')), 'icon');
									
									var t = render.tags.join(' ') + (render.tags.length ? ' ' : '') + render.text;
									t = t.split('---break---').join('\n').trim();
			
									if(this.isTextarea) this.contentText[0].value = t; else this.contentText.html(t);
									//this.setValue(t);
			
									if(!isInitial) this.copyUIToTags();
			
									this.keepMeFocused(this.content, false);
									this.keepMeFocused(this.contentText, true);
			
								}
								
								this.setHeight();
							},
							onUITag: function(bar, elem, code, stylesOfGroup, isNoCopy) {
								var me = this;
								
								if(!stylesOfGroup) {
									if(me.tagsByUI[code]) {
										delete me.tagsByUI[code];
										elem.removeClass('ox-selected');
									} else { 
										me.tagsByUI[code] = true;
										elem.addClass('ox-selected');
									} 
								} else {
									//log(code);
									$.each(stylesOfGroup, function(i, style) {
										var el = bar.find('.ox-id-button-tag-' + style.code.substr(1));
										if(el) {
											if(code == style.code) {
												me.tagsByUI[code] = true;
												$(el).addClass('ox-selected');
											} else {
												delete me.tagsByUI[style.code];
												$(el).removeClass('ox-selected');
											}
										}
									});
								}
								
								if(!isNoCopy) me.copyUIToTags();
								if(elem) elem.blur();
							},
							keepMeFocused: function(elem, isFocused) {
								//log('#keepMeFocused isFocused = ' + isFocused + ' ' + elem.attr('class'));
								var me = this;
								if(isFocused === false) {
									elem.off('blur');
									return;
								}
								
								//omnia.tools.selection.setPosition(elem, 'end');
								elem.on('blur', function() { if(!me.isSub) elem.focus() });
								
								//log('#focus')
								elem.focus();
							},
							initUITags: function(tags, bar, filter) {
								log('omnia.ui.textrich.handler.initUITags');
								bar.html('');
							
								var me = this;
								var platform = omnia.tools.browser.platform;
								var cfg = [];
								
								var tagsNotused = omnia.tools.jsonCopy(tags);
								var tagsUsed = [];
								
								var stylesOfGroup = omnia.tools.jsonCopy(omnia.ui.text.markup.styles);
								stylesOfGroup = stylesOfGroup.filter(function(s) { return s.code && s.group == filter });
								
								if(filter == 'icon' && 0) {
									var symbols = 'fas-heart far-heart fas-angle-double-down fas-angle-double-left fas-angle-double-right fas-angle-double-up fas-angle-down fas-angle-left fas-angle-right fas-angle-up fas-arrow-alt-circle-left fas-arrow-alt-circle-right fas-arrow-left fas-arrow-right fas-caret-left fas-caret-right far-thumbs-up fas-thumbs-down far-hand-point-left far-hand-point-right fas-asterisk fas-ban fas-bell fas-bolt fas-bomb fas-bookmark fas-flag fas-thumbtack fas-question fas-bug fas-lock fas-bullhorn fas-burn fas-crown fas-shield-alt fas-cube fas-eye fas-gem fas-hourglass-half fas-magic fas-map-marker-alt fas-music';
									var office = 'fas-pen fas-highlighter fas-paint-brush fas-paper-plane fas-id-card-alt fas-phone fas-briefcase fas-envelope fas-calendar fas-trash fas-dollar-sign fas-clipboard fas-cut fas-paint-brush fas-gavel fas-clock fas-globe-americas fas-cloud fas-cog fas-database fas-desktop fas-laptop fas-mobile-alt';
									var objects = 'fas-car fas-truck fas-dolly fas-bus fas-bicycle fas-plane fas-fighter-jet fas-helicopter fas-rocket fas-bed fas-utensils fas-coffee fas-beer fas-cocktail fas-birthday-cake fas-bong fas-book fas-book-open fas-camera fas-couch fas-graduation-cap fas-key fas-shopping-basket';
									var fun = 'far-grin far-grin-tears far-grin-wink far-angry fas-poo';
									
									var icons = (symbols + ' ' + office + ' ' + objects + ' ' + fun).split(' ');
									$.each(icons, function(idx, icon) {
										var infos = icon.split('-');
										var isFa = icon.substr(0, 2) == 'fa';
										
										stylesOfGroup.push({s: '(#icon' + icon + ')', html: '<i class="ox-icon ' + infos[0] + ' ' + (isFa ? 'fa-' + infos.splice(1).join('-') : '') + ' col-medium-1 ' + (isFa ? 'ox-font-13' : 'ma-13 vbottom') + '">' + (isFa ? '' : infos.splice(1).join('-')) + '</i>', group: 'icon', code: '#icon' + icon});
									});
								}
								
								$.each(stylesOfGroup, function(i, style) {
			
									var styleRegEx = new RegExp(style.s, "g");
									var tagUse = null;
									$.each(tagsNotused, function(j, t) { if(styleRegEx.test(t)) tagUse = t; });
									if(tagUse) {
										tagsNotused = tagsNotused.filter(function(t) { return t != tagUse; });
										tagsUsed.push(tagUse);
										me.tagsByUI[style.code] = true;
									}
									
									cfg.push({
										oid: 'button', 
										css: 'ox-inline ox-slim ox-autosize ox-id-scale ox-id-button-tag-' + style.code.substr(1) + (tagUse ? ' ox-selected' : '') + (platform.device == 'desktop' ? '' : ' ox-nohighlight ox-font-12'), 
										style: 'font-size:12px !important;' + (i == 0 && 0 ? ' margin:3px !important' : ' margin:1px !important;'), 
										label: style.html, 
										click: function(e, elem) {
											me.onUITag(bar, elem, style.code, style.groupunique ? stylesOfGroup : null);
										},
									});
								});
								
								// Add tags to bar
								if(cfg.length) {
									var elem = omnia.tools.html.node(cfg, bar);
									if(elem) elem.find('.ox-id-scale > *').css('-webkit-transform', 'scale(1.2)');
								}
								
								// Set if none
								if(!tagsUsed.length && stylesOfGroup[0].style) me.onUITag(bar, null, 'none', stylesOfGroup, true);
			
								return tagsNotused
							},
							copyUIToTags: function() {
								// contentText (formatted) onInput -> content (Tag mode)
								
								log('omnia.ui.textrich.handler.copyUIToTags');
								
								if(!this.popup || !this.content) return;
								
								var v = this.isTextarea ? this.contentText[0].value : this.contentText.html().trim();
								var tags = '';
								$.each(this.tagsByUI, function(tag, value) { if(tag != 'none') tags += tag + ' '; });
								tags = tags.trim();
								
								var value = this.args.isIconsRight ? v + (tags != '' ? ' ' : '') + tags : tags + (tags != '' ? ' ' : '') + v;
								//this.content.html(value);
								this.setValue(value);
							},
							preventEnter: function(e) {
								return e.which != 13;					
							},
							
							parseRichTags: function() {
								log('omnia.ui.textrich.handler.parseRichTags');
								
								var me = this;
								var v = this.isTextarea ? this.contentText[0].value : this.contentText.text().trim();
								var tags = $(this.popup.find('.ox-id-richtags'));
			
								if(v.substr(0, 4) != 'http') {
									this.onRichTagClose();
									return;
								}
								
								// Set loading
								tags.removeClass('ox-hidden');
								tags.html('');
								
								omnia.tools.html.node({t: 'div', css: 'col-white-back br3 ox-border p15', style: 'width:270px; height:95px;', c: [
									{oid: 'text', css: '', c: [
										{t: 'i', css: 'fa fa-spinner fa-pulse fa-3x fa-fw', style: {'font-size': '16px', 'margin-right': '5px'}},
										{t: 'span', text: function() { return omnia.tools.t('loading') + '...'; }},
									]},
								]}, tags);
								
								// Load
								var args = {};
								args.id = this.linkSearchId = omnia.tools.getUniqueId();
			
								setTimeout(function() {
									if(args.id == me.linkSearchId) {
										log('omnia.ui.textrich.handler.parseRichTags: search url = ' + v);
			
										omnia.tools.net.get({
											//cache: true,
											param: {
												'cmd': 'metatags',
												'url': encodeURIComponent(v),
											}, 
											timeout: 10000,
											onResponse: function(args2) {
												var success = args2.response && args2.response.success;
												if(args2.type == 'text') args2.data = JSON.parse(args2.response.dataStr);
												if(!args2.data.meta) success = false;
					
												me.onRichTagLoaded(success, args2);
											},
										});					
									}
								}, 200);
							},
							onRichTagClose: function() {
								this.tagMeta = null;
								var tags = $(this.popup.find('.ox-id-richtags'));
								tags.html('');
								tags.addClass('ox-hidden');
							},
							onRichTagLoaded: function(success, args) {
								var me = this;
								var img, title, desc, icon;
			
								if(success) {
									try {
										img = args.data.meta['og:image'] ? args.data.meta['og:image'].content : null;
										title = args.data.meta['og:title'] ? args.data.meta['og:title'].content : null;
										desc = args.data.meta['og:description'] ? args.data.meta['og:description'].content : null;
										icon = args.data.link['apple-touch-icon'] ? args.data.link['apple-touch-icon'].href : (args.data.link['shortcut icon'] ? args.data.link['shortcut icon'].href : (args.data.link['icon'] ? args.data.link['icon'].href : null));
										
										var url = args.data.meta['og:url'] ? args.data.meta['og:url'].content : args.param.url; 
										if(icon && icon.substr(0, 4) != 'http') icon = url.split('/').length > 2 ? url.split('/')[0] + '/' + url.split('/')[1] + '/' + url.split('/')[2] + '/' + icon : icon;
									}
									catch(e) { success = false; }
								}
			
								// Show content
								var tags = $(this.popup.find('.ox-id-richtags'));
								tags.html('');
								
								if(!success || (!img && !title && !desc)) {
									this.onRichTagClose();
									return;
								}
								
								this.tagMeta = {title: title, desc: desc, img: decodeURIComponent(img), icon: decodeURIComponent(icon), url: decodeURIComponent(args.param.url)};
			
								omnia.tools.html.node([
									{oid: 'bar2', css: 'ox-overlay ox-flex ox-right', c: [
										{oid: 'button', css: 'ox-medium', label: '<i class="ma ma-18">close</i>', click: function() { me.onRichTagClose(); }},
									]},
									{
										oid: 'linkpreview',
										css: 'col-white-back br3 ox-border',
										style: {'max-height': '100%', 'width': '270px'},
										image: !img ? {css: 'ox-hidden'} : {style: {'background-image': 'url(' + img + ')'}},
										title: title ? title : '',
										desc: desc,
										icon: icon ? {src: icon} : null,
									}
								], tags);
							},
							
};omnia.ui.textrich.html = {
							
							oid: 'frame2', css: 'ox-textrich no-crop ox-col-ui-dialog-0-back', style: {'_width': '400px', 'max-width': '100%', 'max-height': '90%', 'min-height': '45px'}, c: [
								
								// Tab simple / formatted
								{oid: 'frame2', css: 'ox-id-tab-simple ox-trans ox-child mt5', c: [
				
									// Content
									{t: 'div', css: 'ox-id-content-text font w100 col-edit scrollable-y ox-id-content allselect wrap ox-col-ui-dialog-1-back p10 ox-hidden', contenteditable: true, style: {'min-height': '30px'}},
									{oid: 'textarea', css: 'w100 col-edit scrollable-y ox-id-content-text-textarea allselect wrap _font-code _ox-font-11-i p10-i ox-hidden', style: 'resize:none; overflow:hidden; min-height:30px; max-height:70%;'},
				
									// Menu
									{oid: 'bar2', css: 'ox-id-formats-tabs ox-flat ox-split ox-alone', style: 'height:35px !important;', c: [
										{t: 'div', css: 'ml5', c: [
											{oid: 'tabstatic', css: 'ox-id-tab-icons ox-active', label: '<i class="fas fa-check-double" style="font-size:12px"></i>'},
											{oid: 'tabstatic', css: 'ox-id-tab-text', label: '<i class="fas fa-font" style="font-size:12px"></i>'},
											{oid: 'tabstatic', css: 'ox-id-tab-back', label: '<i class="fas fa-fill-drip" style="font-size:12px"></i>'},
											{oid: 'tabstatic', css: 'ox-id-tab-cursor', label: '<i class="fas fa-mouse-pointer" style="font-size:12px"></i>'},
										]},
										{t: 'div', css: 'mr5', c: [
											{oid: 'buttonicon', css: 'ox-id-view-toggle ox-inline ox-medium', icon: 'fa fa-hashtag _mr10', _label: '#tagmode-setting-label'},
										]},
										{t: 'div', css: 'ox-id-okcancel ox-hidden', c: [
											{oid: 'button', css: 'ox-id-cancel', label: '<i class="fa fa-ban"></i>'},
											{oid: 'button', css: 'ox-id-save', label: '<i class="fa fa-check"></i>'},
										]},
									]},
									{oid: 'bar2', css: 'ox-id-tab-text ox-id-formats ox-id-text ox-noflex ox-scrollable wrap ml5 mr5 ox-border-thin-top-i', style: {'height': '90px', 'white-space': 'normal', 'padding': '7px 0px'}, c: [
										{t: 'div', css: 'ox-id-textcolor ox-selected-transparent inline'},
										{t: 'div', css: 'ox-id-textstyle ox-selected-back inline'},
									]},
									{oid: 'bar2', css: 'ox-id-tab-back ox-id-formats ox-id-back ox-noflex ox-scrollable ox-selected-back wrap ml5 mr5 ox-border-thin-top-i', style: {'height': '90px', 'white-space': 'normal', 'padding': '7px 0px'}},
									{oid: 'bar2', css: 'ox-id-tab-icons ox-id-formats ox-id-icons ox-noflex ox-scrollable ox-selected-back wrap ml5 mr5 ox-border-thin-top-i', style: {'height': '90px', 'white-space': 'normal', 'padding': '7px 0px'}},
									{oid: 'bar2', css: 'ox-id-tab-cursor ox-id-formats ox-noflex ox-scrollable wrap ml5 mr5 ox-border-thin-top-i', style: {'height': '90px', 'white-space': 'normal', '_padding': '7px 0px'}, c: [
										{oid: 'buttonicon', css: 'ox-id-content-text-go-start ox-inline ox-medium', icon: 'fa fa-angle-double-left'},
										{oid: 'buttonicon', css: 'ox-id-content-text-go-left ox-inline ox-medium', icon: 'fa fa-arrow-left'},
										{oid: 'buttonicon', css: 'ox-id-content-text-selectall ox-inline ox-medium', icon: 'fa fa-i-cursor _mr10', _label: '#all'},
										{oid: 'buttonicon', css: 'ox-id-content-text-go-right ox-inline ox-medium', icon: 'fa fa-arrow-right'},
										{oid: 'buttonicon', css: 'ox-id-content-text-go-end ox-inline ox-medium', icon: 'fa fa-angle-double-right'},
									]},
					
								]},
								
								// Tab markup
								{oid: 'frame2', css: 'ox-id-tab-markup ox-id-body ox-child ox-hidden mt5 _ox-border-top _col-white-back', c: [
									
									// Content
									{t: 'div', css: 'w100 col-edit scrollable-y ox-id-content allselect wrap _font-code ox-col-ui-dialog-1-back p10 ox-hidden ox-font-12-i', contenteditable: true, style: {'min-height': '30px'}},
									{oid: 'textarea', css: 'w100 col-edit scrollable-y ox-id-content-textarea allselect wrap font-code p10-i ox-hidden ox-font-11-i', style: 'resize:none; overflow:hidden; min-height:30px; max-height:70%;'},
				
									// Menu
									{oid: 'bar2', css: 'ox-split ox-alone _ox-overlay _ox-flex _ox-right ox-end _ox-line _ox-border-thin-bottom-i _ox-border-thin-top _col-light-35-back', c: [
										{t: 'div', css: 'ml5', c: [
											{oid: 'buttonicon', css: 'ox-id-content-go-start ox-inline ox-medium', icon: 'fa fa-angle-double-left'},
											{oid: 'buttonicon', css: 'ox-id-content-go-left ox-inline ox-medium', icon: 'fa fa-arrow-left'},
											{oid: 'buttonicon', css: 'ox-id-content-selectall ox-inline ox-medium', icon: 'fa fa-i-cursor _mr10', _label: '#all'},
											{oid: 'buttonicon', css: 'ox-id-content-go-right ox-inline ox-medium', icon: 'fa fa-arrow-right'},
											{oid: 'buttonicon', css: 'ox-id-content-go-end ox-inline ox-medium', icon: 'fa fa-angle-double-right'},
										]},
										{t: 'div', c: [
											{oid: 'buttonicon', css: 'ox-id-translate fa fa-language ox-font-20-i ox-medium ox-inline'},
											{oid: 'sep', css: 'ox-inline'},
											{oid: 'buttonicon', css: 'ox-id-view-toggle ox-inline ox-medium', icon: 'fa fa-paint-brush _fa-caret-right _mr10', _label: '#formats'},
										]},
									]},
								]},
								
								// Rich content preview
								{oid: 'frame2', css: 'ox-id-richtags ox-content _ox-border-top ox-hidden _col-light-35-back p10', style: {'position': 'absolute', 'top': 'calc(100% - 135px)', 'height': '135px', 'width': '100%'}},
							]
							
};omnia.ui.translate.handler = {
								
							root: null,
							elems: null,
							args: null,
							id: null,
							
							source: 'DE',
							dest: 'EN',
							vtemp: '',
							
							open: function(args) {
								log('omnia.ui.translate.handler.open');
								if(!args) args = {};
			
								ox.ov.show({
									delay: true,
									onClose: args && args.onClose ? function() { args.onClose(); } : null,
									//onClose: args && args.onClose ? function() { if(args.isSave) args.onClose(true, args.data, true); else args.onClose(); } : null,
									onRendered: function(overlay) { args.overlay = overlay; },
									isModal: true,
									isScroll: true,
									frame: {
										oid: 'popup',
										css: 'ox-body-flex',
										style: {'max-height': ox.pf.isPhone ? '85%' : null, 'height': 600, 'max-width': '100%', 'width': 800},
										cancel: args && args.onClose ? null : '#close',
										c: [
											{oid: 'translate', args: args},
										],
									},
								});
								
							},
							
							init: function(args) {
								var me = this;
								this.args = args;
								var root = this.root = args.root;
								var e = this.elems = ox.el.getAll(args.root, true);
								this.id = ox.id();
								
								var isAppMode = (root.width() > 600 && root.height() > 600) && (args.app && !ox.pf.isPhone);
								this.render(args);
								
								ox.el.onRefresh(function() {
									if(isAppMode) me.setDesktopMode();
									e.textsource.focus();
									if(args.data && args.data.v) me.requestText({value: args.data.v, isDirect: true});
									
									//me.loadListWords({word: 'home'});
									//me.requestWord({word: 'Home', lang: 'en'});
								});
							},
							
							// UI
							
							render: function(args) {
								var me = this;
								var e = this.elems;
								var root = this.root;

								this.setLabels();
								e.textsource.reset({
									onInput: function(value) { me.requestText({value}); },
									value: args.data && args.data.v ? args.data.v : null,
								});
								e.langflip.on(ox.b.CLICK, function() { me.onFlipText(); });
								e['langflip-2'].on(ox.b.CLICK, function() { me.onFlipText(true); });
								e.copysource.on(ox.b.CLICK, function() { me.onCopy(e.textsource.getValue()); });
								e.copydest.on(ox.b.CLICK, function() { me.onCopy(e.textdest.getValue()); });
								e['copydest-2'].on(ox.b.CLICK, function() { me.onCopy(e['textdest-2'].getValue()); });
								//e.board.getRoot().addClass('ox-id-board-' + this.id);
								e['list-words'].reset({
									getItem: function(idx, item) {
										return me.getListWordsItem(idx, item);
									},
								});
								e['word'].reset({
									getItem: function(idx, item) {
										return me.getWordItem(idx, item);
									},									
								});
								e['word-back'].on(ox.b.CLICK, function() { me.setListWords(true); });

								// Editor Mode
								if(args.onClose) {
									e.savesource.removeClass('ox-hidden');
									e.savesource.on(ox.b.CLICK, function() { me.onSave(e.textsource.getValue()) });
									
									e.savedest.removeClass('ox-hidden');
									e.savedest.on(ox.b.CLICK, function() { me.onSave(e.textdest.getValue()); });
							
									e['savedest-2'].removeClass('ox-hidden');
									e['savedest-2'].on(ox.b.CLICK, function() { me.onSave(e['textdest-2'].getValue()); });
									
									e.copysource.addClass('ox-hidden');
									e.copydest.addClass('ox-hidden');
								}
							}, 
							getRoot: function() {
								return this.root;
							},
							setDesktopMode: function() {
								var e = this.elems;
								e.textsource.getRoot().removeClass('mb5').addClass('ox-border ox-shadow-light-2 ox-dark-shadow-none br4 ml15 mb15 mr15 mt60').css({
									//'height': '200px',
								}).find('.ox-id-editfield').addClass('ox-font-18-i');
								e.textdest.getRoot().addClass('br4 ox-border-light _ox-shadow-1 ox-dark-shadow-none ml15 mr15').css({
									//'height': '200px', 
									'margin-bottom': '0px !important',
									//'border-top-left-radius': '4px',
									//'border-top-right-radius': '4px',
									//'border-bottom': '0px',
								}).find('.ox-id-editfield').addClass('ox-font-18-i');
								e['textdest-2'].getRoot().removeClass('mt5').addClass('br4 ox-border-light _ox-shadow-1 ox-dark-shadow-none ml15 mr15 mb15 mt15 ox-border-dashed-top-i').css({
									//'height': '200px', 
									//'margin-top': '15px !important',
									//'border-bottom-left-radius': '4px',
									//'border-bottom-right-radius': '4px',
								}).find('.ox-id-editfield').addClass('ox-font-18-i');

								e.main.getRoot().css('width', 830);
								e.provider.removeClass('ox-col-ui-dialog-1-back ox-line mt60').addClass('_ox-flat-top ox-center');
								e['tab-dict-dest'].getRoot().addClass('pl15 pr15');
								this.root.removeClass('ox-col-ui-dialog-0-back').addClass('ox-col-ui-dialog-1-back flex-vmiddle');
							}, 
							setLabels: function() {
								//this.elems.langsource.text(this.source).removeClass('col-blue col-green').addClass(this.source == 'EN' ? 'col-blue' : 'col-green');
								//this.elems.langdest.text(this.dest).removeClass('col-blue col-green').addClass(this.dest == 'EN' ? 'col-blue' : 'col-green');

								this.elems.langsource.html('');
								ox.node(this.getLangTag(this.source), this.elems.langsource);

								this.elems.langdest.html('');
								ox.node(this.getLangTag(this.dest), this.elems.langdest);
								
								ox.css(this.elems['textdest-2'].getRoot(), 'ox-hidden', this.source != 'EN' || !this.elems.textsource.getValue());
							},
							setListWords: function(isList) {
								ox.css(this.elems['list-words-detail'].getRoot(), 'ox-hidden', !isList);
								ox.css(this.elems['word-detail'].getRoot(), 'ox-hidden', isList);								
							},
							getListWordsItem: function(idx, item) {
								//if(!item || !item.word) return {t: 'span'};
								
								var me = this;
								return {oid: 'bar2', css: 'ox-border-thin-between ox-stretch ox-col-ui-dialog-1-back', c: [
									{oid: 'button', css: 'ox-left flex', style: {'display': 'flex', 'justify-content': 'space-between', 'align-items': 'center'}, c: [
										{t: 'span', c: [
											this.getLangTag(item.lang),
											{t: 'span', css: 'ml10', text: item.word},
										]},
										{t: 'i', css: 'ox-font-12-i fa fa-chevron-right'},
									], click: function() { me.onSelectFromList(item); }, onRendered: 'omnia.ui.button.events.init'},
								]};
							},
							getWordItem: function(idx, item) {
								//if(!item || !item.left.html() || !item.right.html()) return null;
								
								item.left.find('kbd').addClass('col-medium-0-i font thin');
								item.right.find('kbd').addClass('col-medium-0-i font thin');
								item.left.find('var').addClass('col-medium-4-i font');
								item.right.find('var').addClass('col-medium-4-i font');
								
								return {oid: 'bar2', css: 'ox-border-thin-between ox-stretch ox-stretch-basis-2 ox-col-ui-dialog-1-back', style: {'height': 'auto', 'min-height': '35px'}, c: [
									{oid: 'button', css: 'ox-left wrap-i', style: {'padding-top': '8px', 'padding-bottom': '8px'}, label: item.left.html(), click: function() { log(item.left); }},
									{oid: 'button', css: 'ox-left wrap-i', style: {'padding-top': '8px', 'padding-bottom': '8px'}, label: item.right.html(), click: function() { log(item.right); }},
								]};

								return {t: 'div', c: [
									{t: 'span', html: item.left.html()},
									{t: 'span', html: item.right.html()},
								]};
							},
							getLangTag: function(lang) {
								return {t: 'span', css: 'ox-font-12-i font bold ' + (lang.toLowerCase() == 'en' ? 'col-blue' : 'col-green'), text: lang.toUpperCase()};
							},
							
							// Data
							
							requestText: function(args) {
								var me = this;
								this.vtemp = args.value;
								
								if(!args.value) {
									this.clear();
									return;
								}
								if(args.value.length == 1) return;
					
								setTimeout(function() { 
									var isWord = false; //args.value.trim().split(' ').length <= 2;
									me.elems.main.activate(isWord ? 'dict-dest' : 'deepl-dest');
									
									if(isWord) me.loadListWords(args); 
									else me.loadText(args); 
								}, args.isFlipped || args.isDirect || args.isRecheck ? 1 : 800);
							},
							clear: function() {
								this.elems.textdest.setValue('');
								this.setLabels();
								this.elems.main.activate('deepl-dest');
								this.elems['list-words'].clear();
								this.elems['list-words'].getRoot().removeClass('ox-hidden');
								this.elems['word'].clear();
								this.elems['word-detail'].getRoot().addClass('ox-hidden');
							},
							loadText: function(args) {
								if(args.value != this.vtemp || !args.value) return;
							
								if(args.isRecheck) this.elems['textdest-2'].loading(true);
								else this.elems.textdest.loading(true);
									
								var t = args.target || this.dest;
								log('omnia.ui.translate.handler.loadText: value = ' + args.value + ', lang = ' + t);
								
								var me = this;
								ox.net.get({
									server: 'https://haustein.org/omnia/app/server.php',
									param: {
										cmd: 'proxy',
										api: 'deepl',
										'target_lang': t, //args.target || me.dest,
										text: encodeURIComponent(args.value),
									},
									onResponse: function(args2) {
										log('omnia.ui.translate.handler.loadText: onResponse', args2);
									
										if(!args2 || !args2.data || !args2.data.translations || !args2.data.translations.length) return;
										args.trans = {
											sourceLang: args2.data.translations[0].detected_source_language,
											text: args2.data.translations[0].text,
										};
										
										me.onTranslatedText(args);
									},
								})
							}, // DeepL API
							loadListWords: function(args) {
								log('omnia.ui.translate.handler.loadWord: word = ' + args.word);
								
								var me = this;
								ox.net.get({
									server: 'https://www10.dict.cc/inc/ajax_autosuggest.php',
									param: {
										s: args.value,
										//jsonp: 1,
										infl: 1,
										check_typo: 1,
										lp_id: 1,
										use_mt: 1,
										nr: 15,
									},
									type: 'text',
									onResponse: function(args2) {
										log('omnia.ui.translate.handler.loadWord: onResponse');
										if(!args2 || !args2.data) return;
										args.words = args2.data.split('\n').map(function(item) { 
											return {
												word: item.substr(0, item.length - 2).trim(), 
												lang: item[item.length - 1] == '1' ? 'de' : 'en'
											}; 
										});
										args.words = args.words.filter(function(item) { return item.word && item.lang; });	
										
										me.onListWords(args);
									}
								});
							}, // dict.cc - Autosuggest
							requestWord: function(args) {
								var me = this;
								var url = 'https://m.dict.cc/' + (args.lang == 'en' ? 'englisch-deutsch' : 'deutsch-englisch') + '/' + args.word + '.html';
								log({url});
								
								ox.net.get({
									server: 'https://haustein.info/server-dev/',
									param: {
										cmd: 'proxy',
										task: 'web',
										url: url,
									},
									onResponse: function(args2) {
										if(!args2 || !args2.data || !args2.data.data) return;
										
										args.trans = [];
										var html = args2.data.data;
										var body = ox.str.htmlToObject(html);

										var list = body.find('#searchres_table > tbody > tr');
										for(var i = 0; i < list.length; i++) {
											var tr = list[i];
											
											var c2 = $(tr).find('td.srtd2 > a');
											var c3 = $(tr).find('td.srtd3 > a');
											
											if($(c2).html() && $(c3).html()) args.trans.push({left: $(c2), right: $(c3)});
											me.onTranslatedWord(args);
										}
									}
								});
							}, // dict.cc - Parse
							onTranslatedText: function(args) {
								log('omnia.ui.translate.handler.onTranslatedText: sourceLang = ' + args.trans.sourceLang + ', trans = ' + args.trans.text);
								
								if(!args.isRecheck && !args.isFlipped && args.trans.sourceLang == this.dest) {
									log('omnia.ui.translate.handler.onTranslated: Flip');
									
									this.source = args.trans.sourceLang;
									if(this.source == 'EN') this.dest = 'DE'; else this.dest = 'EN';
									this.setLabels();
									
									this.requestText({value: this.elems.textsource.getValue(), isFlipped: true});
									return;
								};
								
								if(args.isRecheck) {
									log('omnia.ui.translate.handler.onTranslated: Set dest 2');
									this.elems['textdest-2'].reset({value: args.trans.text});
									return;
								}
						
								log('omnia.ui.translate.handler.onTranslated: Set dest');
								this.source = args.trans.sourceLang;
								this.setLabels();
								this.elems.textdest.reset({value: args.trans.text});
								
								if(this.source == 'EN') {
									log('omnia.ui.translate.handler.onTranslated: Load recheck');
									this.requestText({value: args.trans.text, isRecheck: true, target: 'EN'});
								}
							},
							onListWords: function(args) {
								var list = this.elems['list-words'];
								list.clear();
								list.publish({data: args.words, lazy: true});

								this.setListWords(true);

								if(args.words.length == 1) {
									this.onSelectFromList({word: args.words[0].word, lang: args.words[0].lang}, true);
									return;
								}
							},
							onTranslatedWord: function(args) {
								var list = this.elems['word'];
								list.clear();
								list.publish({data: args.trans, lazy: true});
							
								this.setListWords(false);
							},
							onSelectFromList: function(item, isNotSetSource) {
								if(!item || !item.word) return;
								
								if(!isNotSetSource) this.elems.textsource.setValue(item.word);
								this.requestWord({word: item.word, lang: item.lang});
							},
							onFlipText: function(isRecheck) {
								log('omnia.ui.translate.handler.onFlipText');
						
								if(isRecheck) {
									this.elems.textsource.setValue(this.elems['textdest-2'].getValue());
								} else {
									this.source = this.dest;
									this.elems.textsource.setValue(this.elems.textdest.getValue());
									this.elems.textdest.setValue('');
									if(this.source == 'EN') this.dest = 'DE'; else this.dest = 'EN';
									this.setLabels();
								}
								
								this.elems.textsource.focus(true);
								this.requestText({value: this.elems.textsource.getValue(), isFlipped: true});
							},
							onCopy: function(text) {
								if(!text) return;
								log('omnia.ui.translate.handler.onCopy');
								
								if(this.args.app) this.args.app.clipboard = {meta: {type: 'omnia-mindmap'}, data: {
									v: text,
								}};
								
								text = text.split('<br>').join('\n');
								var isSuccess = ox.client.copyToClipboard(text, true);
							},
							onSave: function(text) {
								var args = this.args;
								if(!args.data) args.data = {v: ''};
								args.data.v = text;
								
								if(args.overlay) args.overlay.close(true);
								if(args.onClose) args.onClose(true, args.data);
							},

};omnia.ui.translate.html = {
					
							oid: 'frame2',
							css: 'ox-translate ox-col-ui-dialog-0-back ox-dark-col-pitch-2-back',
							c: [
								//{oid: 'board2', css: 'ox-id-board ox-right'},
								/*{oid: 'bar2', css: 'ox-id-provider w100 ox-line ox-col-ui-dialog-1-back', style: {'max-width': 800}, c: [
									{oid: 'tabstatic', css: 'ox-id-tab-deepl ox-active', label: 'DeepL'},
									{oid: 'tabstatic', css: 'ox-id-tab-dict', label: 'Dictionary'},
									//{oid: 'tabstatic', css: 'ox-id-tab-linguee', label: 'Phrases'},
									//{oid: 'tabstatic', css: 'ox-id-tab-duden', label: 'Duden'},
								]},*/
								{oid: 'frame2', css: 'ox-id-main _ox-id-tab-deepl _ox-content', c: [
									{
										oid: 'textfield', 
										placeholder: '#text-placeholder...', 
										css: 'flex-fix ox-id-textsource ox-col-ui-dialog-1-back-i _ox-dark-col-pitch-2-back mb5 _ox-border-between ox-focus _ox-options-large _ox-fix', 
										style: {'_height': 150, 'max-width': 800},
										options: [
											{oid: 'sep', css: 'ox-focus-only _ox-inline'},
											{oid: 'buttonicon', css: 'ox-id-copysource ox-medium', icon: 'fa fa-copy'},
											{oid: 'buttonicon', css: 'ox-id-savesource ox-hidden ox-medium col-green-i', icon: 'fa fa-save'},
											{oid: 'label', css: 'ox-id-langsource col-medium-4 ox-medium w45px', text: 'DE', style: 'line-height:35px;'},
										],
									},
									{oid: 'bar2', css: 'ox-hidden ox-id-provider w100 _ox-line _ox-col-ui-dialog-1-back', _style: {'max-width': 800}, c: [
										{oid: 'tabstatic', css: 'ox-id-tab-deepl-dest ox-active', label: 'DeepL'},
										{oid: 'tabstatic', css: 'ox-id-tab-dict-dest', label: 'Dictionary'},
										//{oid: 'tabstatic', css: 'ox-id-tab-linguee', label: 'Phrases'},
										//{oid: 'tabstatic', css: 'ox-id-tab-duden', label: 'Duden'},
									]},
									{oid: 'frame2', css: 'ox-id-tab-deepl-dest ox-content flex-1', c: [
										{
											oid: 'textfield', 
											css: 'flex-fix ox-id-textdest _ox-options-large ox-col-ui-dialog-1-back-i ox-dark-col-pitch-1-back _ox-border-between _ox-fix', 
											style: {'_height': 150, 'max-width': 800},
											options: [
												{oid: 'sep', css: 'ox-focus-only _ox-inline'},
												{oid: 'buttonicon', css: 'ox-id-langflip ox-medium', icon: 'fa fa-long-arrow-alt-up _fa-arrows-alt-v _fa-exchange-alt _fa-rotate-90'},
												{oid: 'buttonicon', css: 'ox-id-copydest ox-medium', icon: 'fa fa-copy'},
												{oid: 'buttonicon', css: 'ox-id-savedest ox-hidden ox-medium col-green-i', icon: 'fa fa-save'},
												{oid: 'label', css: 'ox-id-langdest col-medium-4 ox-medium w45px', text: 'EN', style: 'line-height:35px;'},
											],
										},
										{
											oid: 'textfield', 
											css: 'ox-hidden flex-fix ox-id-textdest-2 _ox-options-large mt5 ox-col-ui-dialog-1-back-i ox-dark-col-pitch-1-back _ox-border-between _ox-fix', 
											style: {'_height': 150, 'max-width': 800},
											options: [
												{oid: 'sep', css: 'ox-focus-only _ox-inline'},
												{oid: 'buttonicon', css: 'ox-id-langflip-2 ox-medium', icon: 'fa fa-long-arrow-alt-up _fa-exchange-alt _fa-rotate-90'},
												{oid: 'buttonicon', css: 'ox-id-copydest-2 ox-medium', icon: 'fa fa-copy'},
												{oid: 'buttonicon', css: 'ox-id-savedest-2 ox-hidden ox-medium col-green-i', icon: 'fa fa-save'},
												{oid: 'label', css: 'ox-id-langdest-2 col-medium-4 ox-medium w45px col-blue', text: 'EN', style: 'line-height:35px;'},
											],
										},
									]},
									{oid: 'frame2', css: 'ox-id-tab-dict-dest h100', c: [
										//{oid: 'frame2', css: 'ox-id-list-words-detail', c: [
											{oid: 'list', css: 'ox-id-list-words-detail ox-id-list-words _ox-border-top', args: {cssEmpty: 'pl15 pt15'}},
										//]},
										{oid: 'frame2', css: 'ox-id-word-detail ox-hidden', c: [
											{oid: 'bar2', css: 'ox-col-ui-dialog-1-back _ox-border-top-i', c: [
												{oid: 'button', css: 'ox-id-word-back ox-inline ox-alone', label: '#back-button'},
											]},
											{oid: 'frame2', css: 'ox-border-top flex-1 ox-content', c: [
												{oid: 'list', css: 'ox-id-word h100', args: {cssEmpty: 'pl15 pt15'}},
											]},
										]},
									]},
								]},
							],
					
};omnia.ui.photoviewer.handler = {
							
							clsId: 'omnia.ui.photoviewer.handler',
							
							args: null,
							elems: null,
							root: null,
							data: null,
							
							open: function(args) {
								log('omnia.ui.photoviewer.handler.open');
								if(!args) args = {};
								
								ox.ov.show({
									delay: true,
									onClose: args && args.onClose ? function() { if(args.isSave) args.onClose(true, args.data, true); else args.onClose(); } : null,
									onRendered: function(overlay) { args.overlay = overlay; },
									isModal: false,
									isScroll: true,
									frame: {
										oid: 'dialog', //ox.pf.isPhone ? 'popup' : 'dialog',
										title: '#photos',
										style: {'max-height': '90%', 'max-width': ox.pf.isPhone ? null : '800px'}, //'width': '100%'}*/ null : {'width': '800px'},
										css: 'ox-trans ox-body-flex ' + (ox.pf.isPhone ? 'ox-caption-flat' : 'ox-noactions'),
										c: [
											{oid: 'photoviewer', args},
										],
										cancel: '#close',
										/*actions: [
											{oid: 'button', css: 'ox-green ox-inline ox-alone', label: '#save-button', click: function() {  }},
										],*/
									},
								});
							},
							init: function(args) {
								this.args = args;
								this.getData(args);
								this.render(args);
							},
							
							// Protected functions - UI
							
							getRoot: function() {
								return this.root;
							},
							render: function(args) {
								var me = this;
								this.root = args.root;
								var e = this.elems = ox.el.getAll(args.root, true);
								
								ox.node({oid: 'obj', args: {obj: this.data}}, e.log);
								ox.el.click(e.load, () => { me.load(); });
								ox.el.click(e.download, () => { 
									var content = '#!/bin/sh\n\n' + me.data.images.map(img => img.downloadUrl).join('\n');
									omnia.tools.file.download(content, 'download.sh', 'html');
									//ox.client.copyToClipboard(, true); 
									
								});
								ox.el.click(e.copy, () => { 
									var content = me.data.images.map(img => img.storyName).join('\n');
									//var content = '#!/bin/sh\n\n' + me.data.images.map(img => img.downloadUrl).join('\n');
									ox.client.copyToClipboard(content, true); 
								});
							},
							progress: function(args) {
								ox.css(this.elems.loader.getRoot(), 'ox-hidden', args.t0 == false || args.stop);
								this.elems.loader.p(args);
							},
							getStatus: function() {
								var d = this.data;

								if(!d.ref || !d.images.length) return 'error';
								else if(d.images.filter(img => img.photo).length) return 'loaded';
							},
							save: function() {
								try {
									var node = {v: '#attr-images', c: [
										{v: '#attr-array #subcount', s: 1, c: this.data.images.map(img => { return {v: '', s: 1, c: [{v: '#attr-id ' + img.photo.id}, {v: '#attr-baseurl', c: [{v: '' + img.photo.baseUrl}]}]}; })},
									]};
									this.args.data.c = [{v: '#attr-id', c: [{v: '' + this.data.config.id}]}, {v: '#attr-ref', c: [{v: '' + this.data.config.ref}]}, node];
									this.args.isSave = true;
								}
								catch(e) {
									ox.error({id: this.clsId + '.save', e});
								}
							},
							load: function() {
								log(this.clsId + '.load');
								
								var me = this;
								var loaded = 0;
								var progress = () => { 
									log(me.clsId + '.load: Image ' + loaded + '/' + me.data.images.length + ' data loaded');
									me.progress({t0: loaded, t1: me.data.images.length, text: 'Load photos from Google'}); 
									
									if(loaded >= me.data.images.length) {
										me.progress({stop: true});
										//me.save();
										//ox.ui.obj.show(me.data);
									}
								}
								progress();
								
								ox.el.onRefresh(() => {
									ox.net.google.init({
										isRequestSignIn: false,
										onSignedIn: function() {
											
											me.data.images.forEach(image => {
												
												omnia.tools.net.google.getPhoto({
													photoId: image.meta.photoId,
													onLoaded: function(photo) {
														image.photo = photo;
														image.downloadUrl = 'curl -o ' + image.storyName + ' ' + image.photo.baseUrl + '=w' + image.meta.width;
														
														loaded++;
														progress();
													},
													onError: e => ox.error(me.clsId + '.load: ' + (e && e.result && e.result.error && e.result.error.message ? e.result.error.message : 'Photo could not be loaded')),
												});
	
											});
										},
										onSignedOut: () => ox.error(me.clsId + '.load: Failed, is not signed in'),
										onError: () => ox.error(me.clsId + '.load: Failed, unknown error'),
									});
								});
							},
							getData: function(args) {
								var config = ox.File.nodeToData(args.data);
								var node = args.node;
								var map = node.map;
								
								var refData = ox.copy(node.map.file.find('#attr-' + config.ref));
								var refFile = ox.File.create({data: refData[0]});
								//refFile.register(refFile.data, null, null, true);
								var mores = refFile.find('#more', null, null, null, null, null, null, true).concat(refFile.find('#iconimages', null, null, null, null, null, null, true));
								var morePathes = mores.map(node => refFile.getPath(node.id).map(n => { 
									var r = ox.ui.text.markup.render(n.v + ''); 
									return r.text;
								}).filter(t => t).reverse());
								
								/*var moreFile = ox.File.create({data: {c: mores}});
								var images = moreFile.find('#image').filter(d => d && d.v).map(d => {
									var d = JSON.parse(decodeURIComponent(d.v.substr(7))); 
									//d.path = morePathes[];
									return d;
								});*/
								
								var images = [];
								var imagesCount = 0;
								mores.forEach((more, i) => {
									var file = ox.File.create({data: more});
									file.register();
									var imgs = file.find('#image', null, null, null, null, null, null, true).filter(d => d && d.v).map(d => {
										var d = JSON.parse(decodeURIComponent(d.v.substr(7))); 
										d.path = morePathes[i];
										
										d.storyName = ("0000" + (++imagesCount)).slice(-4) + '_' + ox.str.toNormalize(d.path.join('-')).replace(/[ ]+/gi, '-') + '_' + d.meta.filename;
										//d.downloadUrl = 'curl -o ' + d.storyName;
										return d;
									});
									
									images = images.concat(imgs);
									//images2.push({is, file: file.data});
								});
								
								this.data = {config, images, args, mores, morePathes, refFile}; 
								return this.data;
							},
							
};omnia.ui.photoviewer.html = {
							
							oid: 'frame2', css: 'ox-photoviewer ox-col-ui-dialog-1-back', c: [
								{oid: 'loadcontent', oxid: 'loader', css: 'ox-hidden ox-flat'},
								{oid: 'frame2', oxid: 'log', css: 'ox-border-thin-bottom'},
								{oid: 'bar2', css: '_ox-line ox-end ox-split', c: [
									{t: 'div', css: 'ml5', c: [
										{oid: 'googlesignin'},
										{oid: 'buttonicon', oxid: 'load', css: '', icon: 'fab fa-google ox-before', label: 'Load'},
										{oid: 'buttonicon', oxid: 'download', css: '', icon: 'fa fa-download ox-before', label: 'Download'},
										{oid: 'buttonicon', oxid: 'copy', css: '', icon: 'fa fa-copy'},
										//{oid: 'buttonicon', oxid: 'trash', css: '', icon: 'fa fa-trash'},
									]},
									{oid: 'button', oxid: 'show', css: 'ox-blue ox-inline ox-alone', label: 'Show'},
								]},
							],
							
};omnia.ui.webviewer.handler = {
							
							clsId: 'omnia.ui.webviewer.handler',
							
							args: null,
							elems: null,
							root: null,
							content: null,
							view: null,
							
							open: function(args) {
								if(!args) args = {};
								
								ox.ov.show({
									delay: true,
									onClose: args && args.onClose ? function() { args.onClose(); } : null,
									onRendered: function(overlay) { args.overlay = overlay; },
									isModal: false,
									isScroll: true,
									frame: {
										oid: 'dialog',
										style: ox.pf.isPhone ? {'height': '90%', 'width': '100%'} : {'width': '60%', 'height': '90%'},
										css: 'ox-noclose ox-nocaption ox-body-flex' + (ox.pf.isPhone ? '' : ' ox-noactions'),
										c: [
											{oid: 'webviewer', css: 'h100' + (ox.pf.isPhone ? ' mt5' : ''), onReady: function(elem, webviewer) { args.webviewer = webviewer; }, args: {
												url: args.url, 
												data: args.data, 
												onClose: args.onClose, 
												argsDialog: args,
											}},
										],
										cancel: '#close', 
									},
								});
							},
							
							init: function(args) { 
								if(!args.url && args.file && args.file.data && args.file.data.v) args.url = args.file.data.v;
								this.args = args; 
								if(args.data) this.content = {data: typeof args.data == 'function' ? args.data() : args.data};
								log({content: this.content});
								
								this.render(args);
							},
							
							// Protected functions - UI
							
							getRoot: function() {
								return this.root;
							},
							render: async function(args) {
								var me = this;
								this.root = args.root; 
								var e = this.elems = ox.el.getAll(args.root, true); 
								
								var isBarFloat = !ox.pf.isPhone;
								var isFullWidth = ox.pf.isPhone;
								var isTextOnly = true;//ox.pf.os == 'ios' || this.args.isTextOnly;
								var isAppMode = this.args.app != null;
								if(isBarFloat) {
									e['bar-view'].removeClass('ox-end').addClass('ox-vert ox-float-top-right br4 ox-height-auto');
									e['tts'].removeClass('ox-end').addClass('ox-float-bottom-right br4');
								} else {
									e['tts'].css('margin-bottom', isAppMode ? '80px' : '45px');
								}
								if(isFullWidth) {
									e['bar-view'].removeClass('ox-noflex').addClass('ox-shadow-light-3-c ox-dark-shadow-none ox-stretch ox-stretch-basis-4' + (isAppMode ? ' ox-bottom-safe' : ''));
									e['tts'].removeClass('ox-noflex').addClass('ox-stretch ox-stretch-basis-4');
								}
								
								ox.css(this.root.find('.ox-id-app-options'), 'ox-hidden', !isAppMode);
								ox.css(this.root.find('.ox-id-dialog-options'), 'ox-hidden', isAppMode); 
								
								var isApp = ox.pf.framework == 'cordova';
								var url = this.args.url;
								
								e.more.reset({
									items: [
										{oid: 'button', oxid: 'close', label: 'Readable View', click: () => me.setView('html')},
										//{oid: 'button', oxid: 'close', label: 'Text View', click: () => me.setView('text')},
										ox.pf.os == 'ios' ? null : {oid: 'button', oxid: 'close', label: 'iFrame View', click: () => me.setView('iframe')},
										{oid: 'sep'},
										
										{oid: 'button', oxid: 'close', label: 'Web Data', click: () => me.setView('web')},
										{oid: 'button', oxid: 'close', label: 'Readable Data', click: () => me.setView('data')},
										{oid: 'button', oxid: 'close', label: 'Debug Readable HTML', click: async () => { 
											await me.setView('html'); 
											me.debug(); 
										}},
										{oid: 'button', oxid: 'close', label: 'Download Web Data as JSON', click: async () => { 
											await me.setView('web'); 
											if(!me.content || !me.content.file) return; 
											omnia.tools.file.download(me.content.file, 'web.json', 'json'); 
										}},
										isAppMode ? null : {oid: 'sep'},
										
										isAppMode ? null : {oid: 'button', oxid: 'close', label: 'Open as Tab', click: () => me.openAsTab()},
										!url || !isApp ? null : {oid: 'button', css: 'ox-id-close bold', label: '#open-text', click: () => ox.client.browser({url, isReaderMode: true})},
										!url ? null : {oid: 'button', css: 'ox-id-close bold', label: '#open', click: () => ox.client.browser({url, isReaderMode: false})},
										!url || !isApp ? null : {oid: 'button', css: 'ox-id-close', label: '#open-in-browser-text', click: () => ox.client.browser({url, isReaderMode: true, isSystem: true})},
										!url || !isApp ? null : {oid: 'button', css: 'ox-id-close', label: '#open-in-browser', click: () => ox.client.browser({url, isSystem: true})},
										{oid: 'sep'},
										
										{oid: 'button', oxid: 'close', label: '#clipboard', click: () => ox.client.copyToClipboard(url, !ox.pf.isDesktop)},
										{oid: 'sep'},
									].concat(
										me.dataFunctions.map(info => { return {oid: 'button', oxid: 'close', label: info.label, click: () => info.task(me.content)}; }),
									),
								});
								e.screenreader.reset({
									content: e['view-content'].getRoot(),
									controls: e['tts'],
								});
								ox.el.click(e['bar-collapse'], () => me.toggleBar(false));
								ox.el.click(e['bar-expand'], () => me.toggleBar(true));
								ox.el.click(e['astab'], () => me.openAsTab());
								ox.el.click(e['enter'], () => me.setUrl(e.url.getValue()))
								
								if(this.args.url) e.url.setValue(this.args.url);
								else this.toggleBar(true);

								await this.setView(!isTextOnly ? 'iframe' : 'html');
								if(this.args.data && !this.content.data.content && this.args.url) await this.setView(!isTextOnly ? 'iframe' : 'html', true);
							},
							openAsTab: function() {
								if(!this.args.argsDialog.app) return;
								this.args.argsDialog.overlay.close();
								this.args.argsDialog.app.open({meta: {type: 'omnia-webbrowser', id: 'ox-webbrowser'}, data: {v: this.args.url}});
							},
							setUrl: function(url) {
								try {
									log(this.clsId + '.setUrl');
									
									this.content = null;
									
									if(url.substr(0,4) != 'http') {
										this.content = {data: {textContent: url, content: '<span>' + url.replace(/[\n]/g, '<br>') + '</span>', lang: 'de'}};
									} else {
										this.args.url = url;
									}
									
									this.setView('html');
									this.toggleBar(false);
								}
								catch(e) { ox.error({id: this.clsId + '.setUrl', e}); }
							},
							toggleBar: function(isOn) {
								var e = this.elems;
								
								var isBarFloat = !ox.pf.isPhone;
								var isFullWidth = ox.pf.isPhone;
								var isAppMode = this.args.app;
								//if(1 || ox.pf.isDesktop) e['bar-view'].css('width', isOn ? 'calc(100% - 20px)' : '');
								ox.css(this.root.find('.ox-id-enter-options'), 'ox-hidden', !isOn);
								ox.css(e['bar-expand'], 'ox-hidden', isOn);
								ox.css(e['bar-view'], 'ox-shadow-light-3-c ox-dark-shadow-none', isOn || isFullWidth);
								ox.css(e['bar-view'], 'ox-float-top-right', isBarFloat && !isOn);
								ox.css(e['bar-view'], 'ox-height-auto', isOn);
								ox.css(e['bar-view'], 'ox-vert', isBarFloat && !isOn);
								ox.css(e['bar-view'], 'ox-noflex', isOn);
							},
							setView: async function(view, isForceLoad) {
								try {
									log(this.clsId + '.setView: view = ' + view + (isForceLoad ? ', isForceLoad = true' : ''));
									
									this.view = view;
									if(!view) view = this.view;
									var url = this.args.url;
									var e = this.elems;
									
									ox.css(this.root.find('.ox-id-text-options'), 'ox-hidden', view == 'iframe'/* || ox.pf.framework != 'cordova'*/);
									//if(isCoreView) e.lang.setValue('text', true);
									
									e['view-load'].getRoot().removeClass('ox-hidden');
									e['view-load'].progress(true);
									if(!isForceLoad) e['view-content'].getRoot().addClass('ox-hidden');
									
									var urlInfo = url ? url.match(/((https?|webcal):\/\/([^/?\s]+)([\S]*))/) : null;
									if(urlInfo && urlInfo.length > 3) this.setTabLabel(urlInfo[3]);
									
									var isContent = url || this.content;
									if(isContent && view == 'iframe') this.renderIFrame(url);
									else if(isContent && view == 'web') await this.renderWeb(url);
									else if(isContent && view == 'text') await this.renderText(url);
									else if(isContent && view == 'html') await this.renderText(url, 'rich', isForceLoad);
									else if(isContent && view == 'data') await this.renderText(url, 'data');
									//else if(url && view == 'translate-de') await this.renderText(url, 'translate-de');
									
									e['view-load'].getRoot().addClass('ox-hidden');
									e['view-load'].progress(false);
									e['view-content'].getRoot().removeClass('ox-hidden');
									
									e.screenreader.reset({
										content: e['view-content'].getRoot(),
									});
									//log({content: e['view-content'].getRoot()});
									//ox.el.getNodes(e['view-content'].getRoot());
								}
								catch(e) {
									log({id: this.clsId + '.setView', e});
								}
							},
							setTabLabel: function(label) {
								//log(this.clsId + '.setTabLabel: label = ' + ox.str.max(label, 20));
								if(this.args.app) $('.ox-id-tab-' + this.args.file.meta.id + ' > .ox-id-label').html(ox.str.max(label, 16));	
							},
							renderWeb: async function(url) {
								try {
									var res = await this.loadWeb({url}, 'web'); 
									//var body = res.body.replace(/\n/g, '<br>');
									
									var content = this.elems['view-content'].getRoot();
									content.html('');
									content.removeClass('h100');
										
									this.content = {file: res.data};
									
									//ox.node({oid: 'obj', args: {obj: res.data}, content);
									//return;
									//ox.node(res.data, content);
									
									var html = ox.str.htmlToObject(res.data, true);
									var body = html.find('> body');
									ox.node({oid: 'obj', args: {obj: {data: typeof res.data == 'object' ? res.data : JSON.parse(res.data), html}}}, content);
								}
								catch(e) {
									ox.error({id: this.clsId + '.renderWeb', e});
								}
							},
							renderIFrame: function(url) {
								var content = this.elems['view-content'].getRoot();
								content.html('');
								content.addClass('h100');
								
								ox.node({t: 'iframe', src: url, css: 'h100 w100 ox-col-ui-dialog-1-back', frameBorder: 0}, content);
							},
							renderText: async function(url, format, isForceLoad) {
								try {
									var t0 = ox.t0(this.clsId + '.renderText');
									var isAppMode = this.args.app != null;
									
									var res = !isForceLoad && this.content ? this.content : await this.loadWeb({url}, 'readable-moz'); 
									t0.bp('Text info received');
									
									var title = res.data.title;
									var body = res.data.textContent;
									if(format == 'rich') body = res.data.content;
									else if(format == 'data') {
										var texts = ox.el.getNodes($(res.data.content)[0], {type: 'text'});
										body = [
											{oid: 'obj', args: {obj: {
												url,
												content: $(res.data.content), 
												texts,
												res,
												statistics: ox.str.getStatistics(texts.map(t => t.text).join(' ')),
											}}},
											//$(texts.map(t => t.node)),
										];
									}
									else body = body.trim().replace(/[\s]+[\n]+/g, '<br><br>');
									var lang = res.data.lang ? (res.data.lang == 'en' ? 'en-GB': 'de-DE') : 'de-DE';
									
									if(isForceLoad && (!body || !body.length) && this.args.data) {
										ox.error(this.clsId + '.renderText: Reload was not successful');
										return;
									}
									
									this.content = ox.copy(res); //{text: title + '\n' + res.data.textContent, lang, data: ox.copy(res.data), title, body};
									t0.bp('Data processed');
									
									var isNoContent = !title && (!body || !body.length);
									this.elems.screenreader.reset({lang});
									var content = this.elems['view-content'].getRoot();
									content.html('');
									content.removeClass('h100');
									
									if(isNoContent) ox.node({oid: 'headline', css: 'ox-h2 p30 w100 hcenter', text: 'No content'}, content);
									else if(format == 'data') ox.node(body, content);	
									else ox.node({oid: 'readable', css: 'mb60', args: {
										title, 
										body: body,
										lang, 
										image: res.data.image ? res.data.image : (res.data.meta ? res.data.meta.img : null), 
										desc: res.data.lead,
										isNarrow: isAppMode,
									}}, content);
									
									this.setTabLabel(res.data.title);
									
									t0.bp('Done');
								}
								catch(e) { log({id: this.clsId + '.renderText', e}); }  
							},
							debug: function() {
								var elem = this.elems['view-content'].getRoot().find('.ox-id-body');
								ox.el.showElements(elem);
								
								var texts = ox.el.getNodes(elem, {type: 'text'});
								//log({ns});
								texts.forEach(item => { $(item.node).addClass('ox-d2 _tts'); $(item.node).attr('text1', item.text); $(item.node).attr('text2', item.text); });
								
								//ox.node({oid: 'obj', css: 'mt30', args: {obj: {elem, texts}}}, elem);
								
								log({tts: texts});
							},
							
							// Protected functions - Data
							
							loadWeb: async function(args, type) {
								log(this.clsId + '.loadWeb');
								
								var res = await ox.net.get({server: 'https://haustein.info/server-dev/', param: {cmd: 'proxy', task: type, url: args.url}});
								log({id: this.clsId + '.loadWeb', res});

								return res && res.data && res.data.data ? {data: res.data.data} : {data: ''};
								//return res && res.data && res.data.data ? res.data.data : {body: ''};
							},
							
							dataFunctions: [
								{
									label: 'Pocket to Node',
									task: data => {
										try {
											var file = JSON.parse(data.file);
											var articlesPocket = Object.values(file.list);
											var articles = articlesPocket.map(a => {
												try {
													var d = {
														'url': a.resolved_url || a.given_url,
														'title': a.resolved_title || a.given_title,
														'time-added': '#d' + ox.T.create(parseInt(a.time_added) * 1000).t0.toISOString(), 
														'desc': a.excerpt,
														'words': parseInt(a.word_count),
														'lang': a.lang,
														'duration-read': a.time_to_read,
														'duration-listen': a.listen_duration_estimate,
														'img': a.top_image_url,
														'tags': a.tags ? Object.keys(a.tags).join(',') : '',
														'icon': a['domain_metadata'] ? a['domain_metadata'].logo : '',
														'site': a['domain_metadata'] ? a['domain_metadata'].name : '',
														'view': 'article',
													};
													Object.keys(d).forEach(id => { if(!d[id]) delete d[id]; });
													return d;
												}
												catch(e) {
													return {};
												}
											});
											var node = {v: '#t3 Articles from Pocket', s: 1, c: articles.map(a => ox.File.dataToNode(a, true)).map(node => { return {v: '#link', s: 1, c: node.c} })};
											
											//ox.ui.obj.show({file, articlesPocket, articles, node});
											ox.ov.show({
												isScroll: true,
												frame: {oid: 'popup', c: [
													{oid: 'obj', args: {obj: {file, articlesPocket, articles, node}}},
												], actions: [
													{oid: 'button', css: 'ox-id-close ox-inline ox-alone', label: 'Copy Node', click: () => app.app.copy(ox.File.create({meta: {type: 'omnia-mindmap'}, data: node}))},
												]},
											});
										}
										catch(e) {
											ox.error(e);
										};
									},
								},
								{
									label: 'Show Content',
									task: data => {
										ox.ui.obj.show({data});
									},
								},
							],
						
};omnia.ui.webviewer.html = {
							
							oid: 'frame2', css: 'ox-webviewer ox-col-ui-dialog-0-back', c: [
								{oid: 'frame2', oxid: 'view', css: 'ox-content _pb60', c: [
									{oid: 'frame2', oxid: 'view-content'}, //, css: 'ox-content pl30 pr30 pt30 h100 hcenter'},
									{oid: 'loadcontent', oxid: 'view-load', css: 'ox-hidden'},
								]},
								{oid: 'bar2', oxid: 'tts', css: 'ox-overlay ox-end _ox-float-bottom-right ox-line ox-hidden ox-col-ui-dialog-1-back'},
								{oid: 'bar2', oxid: 'bar-view', css: 'ox-overlay ox-end ox-col-ui-dialog-1-back ox-line ox-noflex', c: [
									{oid: 'textfield', oxid: 'url enter-options', css: 'ox-hidden ox-border-thin-bottom', args: {placeholder: 'URL or Text', layout: 'cursor-paste'}, style: {'max-height': 45 * 3}},
									{oid: 'buttonicon', oxid: 'enter enter-options', css: 'ox-inline ox-hidden ox-alone-left ox-green', icon: 'fa fa-paper-plane'},
									{oid: 'buttonicon', oxid: 'bar-collapse enter-options', css: '_ox-inline ox-medium ox-hidden ox-alone-left', icon: 'fa fa-down-left-and-up-right-to-center _ox-font-12'},
									{oid: 'buttonicon', oxid: 'bar-expand', css: '_ox-inline _ox-medium _ox-alone-left', icon: 'fa fa-up-right-and-down-left-from-center _ox-font-12'},
									{oid: 'buttonicon', oxid: 'astab dialog-options', css: '', icon: 'fa fa-diagram-next'},
									//{oid: 'sep', oxid: 'app-options', css: 'ox-inline'},
									//{oid: 'toggle', oxid: 'format', css: 'mr5'},
									//{oid: 'sep', oxid: 'text-options', css: 'ox-inline'},
									{oid: 'screenreader', oxid: 'screenreader text-options'},
									{oid: 'dropdown', oxid: 'more', args: {isMenu: true}},
								]},
							],
							
};omnia.ui.screenreader.handler = {
							
							clsId: 'omnia.ui.screenreader.handler',
							
							args: null,
							elems: null,
							root: null,
							
							items: null,
							last: null,
							cursor: null,
							controls: null,
							isPlaying: false,
							settings: null,
							voiceData: null,
							
							init: async function(args) {
								this.settings = {
									lang: false,
									voice: false, //'male',
									translation: false,
								};
								this.args = args;
								await this.getVoiceData();
								
								this.render(args);
								this.reset(args);
							},
							reset: function(args) {
								try {
									if(args.text) { this.args.text = args.text; this.initContent(); }
									if(args.lang && this.voiceData) this.setProfile(this.voiceData.profiles.filter(p => p.lang.substr(0, 2) == args.lang.substr(0, 2))[0].v);
									if(args.content) { this.args.content = args.content; this.initContent(); }
									if(args.controls) { this.args.controls = args.controls; this.setControls(); }
								}
								catch(e) { ox.error({id: this.clsId + '.reset', e}); }
							},
							
							// Protected functions - UI
							
							getRoot: function() {
								return this.root;
							},
							render: function(args) {
								var me = this;
								this.root = args.root;
								var e = this.elems = ox.el.getAll(args.root, true);
								ox.el.click(e['button-open'], () => me.toggleControls());
							},
							toggleControls: function() {
								var isInline = this.args.controls == 'inline';
								if(!isInline && this.args.controls) this.args.controls.toggleClass('ox-hidden');	
							},
							setControls: function() {
								if(!this.args.controls) return;
								
								var me = this;
								var isInline = this.args.controls == 'inline';
								var isSettingsOnly = this.args.isSettingsOnly;
								var controls = this.controls = isInline ? this.root : this.args.controls.find('.ox-childs');
								
								controls.html('');
								ox.node([
									isSettingsOnly || !isInline ? null : {oid: 'label', css: 'pl15 pr10 col-highlight-50', text: '<i class="fa fa-headset"></i>'},
									isSettingsOnly ? null : {oid: 'buttonicon', css: '_ox-inline _ox-medium', icon: 'fa fa-backward-step', click: () => me.goto(-1, true)},
									isSettingsOnly ? null : {oid: 'buttonicon', oxid: 'play', css: 'ox-inline ox-blue ox-alone', icon: 'fa fa-play', click: () => me.start()},
									{oid: 'buttonicon', oxid: 'stop', css: 'ox-inline ox-alone' + (isSettingsOnly ? ' ox-soft' : ' ox-red ox-hidden'), icon: isSettingsOnly ? 'fa fa-square' : 'fa fa-pause', click: () => me.stop()},
									isSettingsOnly ? null : {oid: 'buttonicon', css: '', icon: 'fa fa-forward-step', click: () => me.goto(1, true)},
									{oid: 'buttonicon', oxid: 'settings', css: '_ox-inline _ox-medium', icon: 'fa fa-sliders', click: () => me.settingsDialog()},
								], controls);
								
							},
							profileSettingsDialog: function(args) {
								var me = this;
								var data = this.voiceData;
								var profiles = ox.copy(data.profiles);
								if(!args) args = {};
								
								var save = () => {
									profiles.forEach(p => {
										me.voiceData.profilesRef[p.v].lang = p.lang;
										me.voiceData.profilesRef[p.v].voice = p.voice;
									});
									if(args && args.onSave) args.onSave();
									me.saveProfiles();
									
									log(me.clsId + '.profileSettingsDialog: Save profiles', {data});
								};
								
								ox.ov.show({
									isDelay: true,
									isScroll: true,
									frame: {
										oid: 'dialog',
										title: '#settings',
										c: profiles.map(p => {
											var f = me.getVoiceSettingForm({settings: p, isDirect: true, onChanged: profileNew => {
												p.lang = profileNew.lang;
												p.voice = profileNew.voice;
												
												log(me.clsId + '.profileSettingsDialog: Set profile', {p, profiles, data});
											}});
											f.form.css += ' ox-border-thin-bottom';
											return [
												{oid: 'bar2', css: '_ox-border-thin-bottom ox-split mt15', c: [
													{oid: 'label', css: 'ox-font-headline ox-h5 bold pl15 col-highlight', text: p.label},
													{oid: 'buttonicon', css: 'ox-inline ox-medium ox-alone', icon: 'fa fa-volume-low', click: f.speakSample},
												]},
												f.form, 
												//{oid: 'obj', args: {obj: p}},
											];
										}),
										actions: [
											{oid: 'button', css: 'ox-green ox-inline ox-id-close ox-alone-right', label: '#save-button', click: save},
										],
									},
									//onClose: () => me.onPageChanged(),
								});
							},
							settingsDialog: function(args) {
								var me = this;
								
								if(this.args.isSettingsOnly) return this.profileSettingsDialog();
								
								if(!args) args = {};
								if(!args.onSave) args.onSave = settings => { 
									me.settings = settings;
									me.settings.voice = me.voiceData.voicesRef[settings.voice];
									me.settings.translation = settings.translation ? 'de'/*langsRef[settings.lang] ? langsRef[settings.lang].base*/ : false;
									
									log(me.clsId + '.settingsDialog: Save settings', me.settings);
									//if(args.onSave) args.onSave();
								};
								var f = this.getVoiceSettingForm(args);
								
								ox.ov.show({
									isDelay: true,
									isScroll: true,
									frame: {
										oid: 'dialog',
										title: '#settings',
										c: [f.form],
										actions: f.actions,
									},
									//onClose: () => me.onPageChanged(),
								});
							},
							getVoiceSettingForm: function(args) {
								try {
									var me = this;
									var ref = {};
									var samples = {'en': 'The salt breeze came across from the sea.', 'de': 'Das ist ein in deutsch gesprochener Satz.'};
									var data = this.voiceData;
									
									// Settings
									var settings = args.settings; 
									if(!settings) settings = this.settings;
									settings = ox.copy(settings);
									if(!settings.voice) settings.voice = data.langsRef[settings.lang].voices[0].id;
									if(typeof settings.voice == 'object') settings.voice = settings.voice.id;
									var lang = settings.lang;
									
									// Presets
									if(!settings.profile) settings.profile = args.isDirect ? 'custom' : settings.lang.substr(0, 2) + '-male';
									var profile = settings.profile;
									
									// Handlers
									var onChanged = info => {
										settings = ox.copy(info.value);
										log({settings, data});
										
										// Set from profile
										if(profile != settings.profile) {
											
											// Set lang by profile
											if(settings.profile != 'custom') {
												settings.lang = data.profilesRef[settings.profile].lang;
												ref.langs.setValue(settings.lang, true); 
											} 
											ox.css(ref.langsBar, 'ox-hidden', settings.profile != 'custom');
											ox.css(ref.voicesBar, 'ox-hidden', settings.profile != 'custom');
										}
									
										// Set voices by lang
										if(ref.voices && lang != settings.lang) {
											var voicesLang = data.langsRef[settings.lang].voices;
											ref.voices.setItems(voicesLang);
											ref.voices.setValue(voicesLang[0].v, true); 
											settings.voice = voicesLang[0].v;
										}
										lang = settings.lang;
										
										if(profile != settings.profile) {
											
											// Set from profile
											//log('#set voice by profile: profile = ' + settings.profile + ', voice ', data.profilesRef[settings.profile]);
											if(settings.profile != 'custom') {
												settings.voice = data.profilesRef[settings.profile].voice;
												ref.voices.setValue(data.voicesRef[data.profilesRef[settings.profile].voice].id, true); 
											}
											profile = settings.profile;
											
										} 
										
										if(args.onChanged) args.onChanged(settings);
									};
									var save = () => { args.onSave(settings); };
									var speakSample = () => {
										var args = {
											lang: settings.lang,
											text: samples[data.langsRef[settings.lang] ? data.langsRef[settings.lang].base : 'en'],
											voice: data.voicesRef[settings.voice],
										};
										
										//log(args);
										setTimeout(() => ox.client.tts.speak3(args), 10);
									};
									var profileSettings = () => me.profileSettingsDialog({settings, onSave: () => {
										profile = '';
										onChanged({value: settings});
									}});
									
									return {
										form: {oid: 'form', css: 'ox-inbar', onReady: (elem, form) => { 
											ref.form = form; 
											ref.profiles = ox.el.get('profiles', ref.form.getRoot(), true); 
											ref.langs = ox.el.get('langs', ref.form.getRoot(), true); 
											ref.voices = ox.el.get('voices', ref.form.getRoot(), true); 
											ref.langsBar = ox.el.get('.ox-id-langs-bar', ref.form.getRoot()); 
											ref.voicesBar = ox.el.get('.ox-id-voices-bar', ref.form.getRoot()); 
										}, args: {
											items: [
												{oid: 'dropdown', oxid: 'profiles', css: 'ox-form-id-profile', cssBar: (args.isDirect ? 'ox-hidden' : ''), formlabel: '#profile', args: {items: data.profiles.concat({label: 'Custom', v: 'custom'})}},
												{oid: 'dropdown', oxid: 'langs', css: 'ox-form-id-lang', cssBar: 'ox-id-langs-bar' + (args.isDirect ? '' : ' ox-hidden'), formlabel: '#language', args: {items: data.langs}},
												{oid: 'dropdown', oxid: 'voices', css: 'ox-form-id-voice', cssBar: 'ox-id-voices-bar' + (args.isDirect ? '' : ' ox-hidden'), formlabel: '#voice', args: {items: data.langsRef[settings.lang].voices}},
												{oid: 'toggle', css: 'ox-id-option-translate hcenter ox-form-id-translation', cssBar: (args.isDirect ? 'ox-hidden' : ''), formlabel: '#translation', args: {
													items: [{label: '#no', value: false}, {label: '#translate', value: 'de'}],
												}},
												//{oid: 'obj', args: {obj: settings}},
											],
											onChanged,
											value: settings,
										}},
										actions: [
											{t: 'div', css: 'hcenter', c: [
												{oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-volume-low', click: speakSample},
												{oid: 'buttonicon', css: 'ox-inline ox-medium', icon: 'fa fa-gears', click: profileSettings},
											]},
											{oid: 'button', css: 'ox-green ox-inline ox-id-close ox-alone-right', label: '#save-button', click: save},
										],
										ref,
										save,
										speakSample,
									};
								}
								catch(e) { ox.error({id: this.clsId + '.getVoiceSettingForm', e}); }
							},
							setCursorHighlight: function(idx, isNoClear) {
								try {

									// Clear last one
									if(!isNoClear && this.last || this.last == 0) {
										var s = this.items[this.last];
										if(s && s.node) $(s.node).html(s.html);
										//log(this.clsId + '.setSentence: clear idx = ' + this.last);
									}
									
									// Check if within items
									if(idx === false || idx < 0 || idx > this.items.length - 1) return;
									
									// Highlight
									this.last = idx;
									var c = this.items[idx];
									
									var isTransDE = this.settings.translation == 'de';
									if(c.node) {
										$(c.node).html(c.text.split(c.sentence).join('<span class="col-highlight-25-back ox-dark-col-white-25-back">' + (isTransDE && c.sentenceDE ? c.sentenceDE : c.sentence) + '</span>'));
										log(this.clsId + '.setCursorHighlight: idx = ' + idx);
									}
									
									// Event
									if(this.args.onJump) this.args.onJump(c);
									else {
										if(c.node) c.node.scrollIntoView();
									}
								}
								catch(e) {
									ox.error({id: this.clsId + '.setCursorHighlight', e});
								}
							},
							
							// Protected functions - Voice control
							
							initContent: function() {
								this.items = [];
								
								if(this.args.content) this.items = this.getItemsFromNode(this.args.content);
								else if(this.args.text) this.items = this.getItemsFromText(this.args.text);

								if(!this.cursor) this.cursor = -1;
								log(this.clsId + '.initContent: ' + this.items.length + ' sentence(s) found');
							},
							start: function() {
								this.controls.find('.ox-id-play').addClass('ox-hidden');
								this.controls.find('.ox-id-stop').removeClass('ox-hidden');
								ox.client.awake(true);
								
								if(this.cursor == -1) this.goto(1);
								this.isPlaying = ox.id();
								this.playSentence();
							},
							stop: function() {
								if(!this.args.isSettingsOnly) this.controls.find('.ox-id-play').removeClass('ox-hidden');
								if(!this.args.isSettingsOnly) this.controls.find('.ox-id-stop').addClass('ox-hidden');
								ox.client.awake(false);
								
								this.isPlaying = false;
								
								// Stop
								this.tts(false);
							},
							goto: function(rel, isStop) {
								if(isStop) this.stop();
								
								var last = this.cursor;
								this.cursor += rel;
								if(this.cursor < 0) this.cursor = 0;
								if(this.cursor > this.items.length - 1) this.cursor = this.items.length - 1;
								
								if(this.isPlaying) this.tts(false);
								this.playSentence();
							},
							playSentence: async function(idx) {
								var me = this;
								if(!idx) idx = this.cursor;
								
								this.setCursorHighlight(idx);
								var c = this.items[idx];
								var sentence = c.sentence;
								
								// Translate
								var isTransDE = this.settings.translation == 'de';
								if(isTransDE) {
									/*if(!c.sentenceDE) {
										var trans = await ox.net.deepl.translateText(c.sentence, 'de');
										c.sentenceDE = trans.text;
									}*/
									await this.translate(idx);
									this.translate(idx + 1);
									
									sentence = c.sentenceDE;
									this.setCursorHighlight(idx, true);
								}
								
								// Loop
								if(!this.isPlaying) return;
								
								// Play
								log(this.clsId + '.playSentence: text = "' + sentence + '", lang = ' + this.settings.lang);
								var next = isOk => {
									log(me.clsId + '.playSentence: Go next ' + (!me.isPlaying || ox.client.tts.id != me.isPlaying || !isOk || me.cursor == me.items.length - 1));
	
									if(!isOk && me.cursor <= me.items.length - 1) ox.error(me.clsId + '.playSentence: Audio cancelled');
									if(!me.isPlaying || ox.client.tts.id != me.isPlaying || !isOk || me.cursor == me.items.length - 1) return me.stop();
									setTimeout(() => me.goto(1), 50);
								};
								this.tts(sentence, next);
								
								if(this.args.isSim) setTimeout(() => me.goto(1), 1000);
							},
							translate: async function(idx) {
								try {
									var c = this.items[idx];
									if(c && !c.sentenceDE) {
										var trans = await ox.net.deepl.translateText(c.sentence, 'de');
										if(trans && trans.text) c.sentenceDE = trans.text;
									}
								}
								catch(e) {}
							},
							
							// Protected functions - Data
							
							getItemsFromText: function(text) { 
								return ox.str.splitToSentences(text).map(s => { return {sentence: s}; }); 
							},
							getItemsFromNode: function(node) {
								try {
									var elems = ox.el.getNodes(node, {type: 'text'});
									var sentences = [];
									elems.forEach(i => { i.sentences.forEach(s => sentences.push({
										node: i.node, 
										html: i.node.innerHTML, 
										text: i.text, 
										sentence: s,
									})); });
										
									return sentences;
								}
								catch(e) {
									ox.error({id: this.clsId + '.getItemsFromNode', e});
								}
							},
							loadProfiles: function() {
								if(!app || !app.space) return;
								return app.space.getSetting('screenreader', 'profiles');
							},
							saveProfiles: function() {
								if(!app || !app.space || !this.voiceData || !this.voiceData.profiles) return;
								app.space.setSetting('screenreader', 'profiles', this.voiceData.profiles);
								app.space.save();
							},
							setProfile: function(profileId, isNotOverwrite) {
								if(!isNotOverwrite || !this.settings.profile) this.settings.profile = profileId;
								if(!isNotOverwrite || !this.settings.lang) this.settings.lang = this.voiceData.profilesRef[this.settings.profile].lang;
								if(!isNotOverwrite || !this.settings.voice) this.settings.voice = this.voiceData.voicesRef[this.voiceData.profilesRef[this.settings.profile].voice];
							},

							// Protected functions - TTS
							
							getVoiceData: async function() {
								try {
									var langNames = new Intl.DisplayNames(['en'], {type: 'language'});
										
									// Voices 
									var voices = await ox.client.tts.getVoices();
									var voicesRef = {}; 
									voices.forEach(voice => {
										if(voice.language) voice.lang = voice.language;
										voice.lang = voice.lang.replace('_', '-');
										voice.langName = langNames.of(voice.lang);
										voice.label = (voice.name.includes('(') && 0 ? voice.name.substr(0, voice.name.indexOf('(')) : voice.name) + '<span class="ml10 opa05">' + (voice.type || 'unknown') + '</span>';
										if(voice.voiceURI) voice.identifier = voice.voiceURI;
										if(!voice.id) voice.id = voice.identifier; 
										voice.v = voice.id; 
										
										voicesRef[voice.v] = voice;
									});
									voices = ox.arr.sortByKey(voices, 'label');
									
									// Languages
									var langsRef = {};
									var langs = ox.arr.unique(voices.map(v => v.language || v.lang)).map(l => { 
										l = l.replace('_', '-');
										var base = l.substr(0, 2);
										var info = {
											v: l, 
											label: langNames.of(base) + ' (' + langNames.of(l).replace(langNames.of(base), '').replace(/[\(\)]*/g, '').trim() + ')', 
											base,
										}; 
										langsRef[l] = info;
										return info;
									});
									langs = ox.arr.sortByKey(langs, 'label');
									langs = langs.filter(l => l.base == 'de' || l.base == 'en' || l.base == 'fr' || l.base == 'es');
									langs.forEach(l => l.voices = voices.filter(v => v.lang == l.v));
									
									// Profiles
									var profiles = this.loadProfiles();
									var profilesRef = {};
									if(!profiles) profiles = [
										{v: 'en-male', label: 'English Male', lang: 'en-GB', voice: langsRef['en-GB'].voices[0].id},
										{v: 'en-female', label: 'English Female', lang: 'en-GB', voice: langsRef['en-GB'].voices[0].id},
										{v: 'de-male', label: 'German Male', lang: 'de-DE', voice: langsRef['de-DE'].voices[0].id},
										{v: 'de-female', label: 'German Female', lang: 'de-DE', voice: langsRef['de-DE'].voices[0].id},
									];
									profiles.forEach(p => profilesRef[p.v] = p);
									
									// Data
									this.voiceData = {voices, voicesRef, langs, langsRef, langNames, profiles, profilesRef};		
									this.setProfile(profiles[0].v, true);
									//log(this.clsId + '.getVoiceData', this.voiceData);
								}
								catch(e) { ox.error({id: this.clsId + '.getVoiceData', e}); }
							},
							/*_getVoices: async function() {
								var isWebTTS = false;
								var isNativeTTS = false;
								
								try { isWebTTS = window.speechSynthesis; } catch(e) {}
								try { isNativeTTS = ox.pf.framework == 'cordova' && TTS; } catch(e) {}
								
								try {
									if(this.voices) return this.voices;
									
									var voicesLocal = isWebTTS ? speechSynthesis.getVoices() : [];
									if(isWebTTS && (!voicesLocal || !voicesLocal.length)) await new Promise(resolve => { speechSynthesis.onvoiceschanged = () => { resolve(); } });
									voicesLocal = speechSynthesis.getVoices();
									voicesLocal.forEach(v => v.type == 'web');

									var voicesNative = isNativeTTS ? await ox.client.tts.getVoices() : [];
									voicesNative.forEach(v => v.type == 'native');
									
									return this.voices = voicesLocal.concat(voicesNative);
								}
								catch(e) { log({id: 'omnia.tools.client.tts.getVoices', e}); }
							},*/
							tts: function(text, onDone) {
								if(text === false) return ox.client.tts.stop();
								ox.client.tts.speak3({
									text, 
									lang: this.settings.lang, 
									voice: this.settings.voice, 
									onDone,
									id: this.isPlaying,
								});
							},
							
};omnia.ui.screenreader.html = {
							
							//oid: 'buttonicon', oxid: 'button-open', css: 'ox-screenreader', icon: 'fa fa-headset ox-font-16',
							t: 'div', css: 'inline ox-screenreader h45px-i hcenter', c: [
								{oid: 'buttonicon', oxid: 'button-open', css: 'h45px-i w100', icon: 'fa fa-headset ox-font-16'},
							],
							
};omnia.ui.imageedit.handler = {

							editor: null,
							
							args: null,
							root: null,
							data: null,
							actions: null,
							content: null,
			
							isEdit: false,
							isInCard: false,
			
							init: function(args) {
								var me = this;
								this.args = args;
			
								// Data
								if(!args.data) args.data = ox.copy(omnia.ui.image.data.defaultData);
								this.data = args.data; //args.isEncode && args.data && args.data.v ? omnia.ui.image.data.nodeToData(args.data.v) : args.data;
								
			//log('#omnia.ui.imageedit.handler.init: data = ', this.data);
			
								// Prepare UI
								var root = this.root = args.root;
								var isInCard = this.isInCard = root.hasClass('ox-incard');
								var content = this.content = ox.el.get('content', root);
								var edit = this.barEdit = ox.el.get('bar-edit', root);
								var actions = this.actions = ox.el.get('actions', root);
								if(isInCard || root.hasClass('ox-bottom')) actions.addClass('ox-end');
								if(args.actions) ox.node(args.actions, actions.find('> .ox-childs'));					
			
								// Handler
								ox.el.get('save', root).on(ox.b.CLICK, function(e) { if(me.editor) me.editor.close(true); });
								ox.el.get('cancel', root).on(ox.b.CLICK, function(e) { if(me.editor) me.editor.close(); });
								
								content.on(ox.b.CLICK, function() { me.onEdit() });
								ox.el.get('editbutton', root).on(ox.b.CLICK, function() { me.onEdit(); });
								ox.el.get('clearbutton', root).on(ox.b.CLICK, function() { me.onClear(); });
			
								this.renderContent();
							},
							
							// Public functions
							
							reset: function(args) {
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.onClose) this.args.onClose = args.onClose;
								if(args.value) this.setValue(args.value);
							},				
							clear: function() {
								this.data = ox.copy(omnia.ui.image.data.defaultNode);
								this.renderContent();
								//if(this.args.onSelect) this.args.onSelect(this.data, this.root);
								this.close(true, this.data);
							},
							edit: function() {
								//if(this.isEdit) return;
								
								var me = this;
								if(this.args.onEdit) this.args.onEdit();
						
								var args = this.args.args || {};
								args.data = this.data;
								args.onClose = function(isSave) {
									me.close(isSave);
								};
								
								
								omnia.ui.imageeditor.handler.open(args/*{
									data: this.data,
									onClose: function(isSave) {
										me.close(isSave);
									},
								}*/);
							},
							close: function(isSave, data) {
								//if(!this.isEdit) return;
								//this.isEdit = false;
								
								//log('#omnia.ui.imageedit.handler.close: isSave = ' + isSave + ', isEncode = ' + this.args.isEncode + ', this.data = ', this.data);
			
								this.renderContent();
								if(this.args.onClose) this.args.onClose(isSave, /*this.args.isEncode ? omnia.ui.image.data.dataToNode(data) : */this.data, this.root);
								if(isSave && this.args.onSelect) this.args.onSelect(this.data, this.root);
							},
							setValue: function(data) {
			//log('#setValue', data);					
								this.data = {v: data};
								this.renderContent();
							},
							getValue: function() {
								return this.data.v;
							},
							getRoot: function() {
								return this.root;
							},
							
							// Private events
							
							onEdit: function() {
								this.edit();
							},
							onClear: function() {
								this.clear();
							},
							onClose: function(isSave, data) {
								this.close(isSave, data)
							},
							
							// Private functions
							
							renderContent: function() {
								this.content.html('');
								ox.node(omnia.ui.image.data.nodeToRender(this.data.v, {isOnParsed: true}), this.content);
							},

};omnia.ui.imageedit.html = {
							
							oid: 'frame2', css: 'ox-imageedit ox-bar-hover ox-trans hand rel', c: [
								{t: 'div', css: 'ox-image-dummy ox-id-content h100'},
								{oid: 'bar2', css: 'ox-overlay ox-col-ui-dialog-1-back ox-id-actions _ox-alone ox-split', c: [
									{oid: 'button', css: 'ox-id-editbutton ox-inline ox-blue ox-alone', label: '#edit-button'},
									{oid: 'buttonicon', css: 'ox-id-editbutton ox-id-short ox-inline ox-medium ox-blue', icon: 'fa fa-pencil-alt'},
									{oid: 'buttonicon', css: 'ox-id-clearbutton ox-id-short ox-inline ox-medium', icon: 'fa fa-eraser'},
								]},
							]
							
};omnia.ui.tableedit.html = {
							
							oid: 'frame2', css: 'ox-tableedit ox-bar-hover ox-trans hand', c: [
								{t: 'div', css: 'ox-id-canvas cropped ox-id-content ox-format-text'},
								{oid: 'bar2', css: 'ox-id-bar-edit ox-end ox-col-ui-dialog-0-back ox-alone ox-hidden ox-split', c: [
									{t: 'div', css: '', c: [
										{oid: 'button', css: 'ox-id-save ox-green ox-inline', label: '#ok-save-button'},
										{oid: 'button', css: 'ox-id-cancel ox-inline', label: '#cancel'},
									]},
									{t: 'div', css: 'hright ox-id-actions-sub'},
								]},
								{oid: 'bar2', css: 'ox-overlay ox-col-ui-dialog-1-back ox-id-actions ox-split', c: [
									{oid: 'button', css: 'ox-id-editbutton ox-inline ox-blue ox-alone', label: '#edit-button'},
									{oid: 'buttonicon', css: 'ox-id-editbutton ox-id-short ox-inline ox-medium ox-blue', icon: 'fa fa-pencil-alt'},
								]},
							],
							
};omnia.ui.textedit.handler = {
							
							// Static
							
							isAnyOpen: false,
							activeFields: {},
			
							// 
							
							editor: null,
							
							id: null,
							args: null,
							root: null,
							data: null,
							text: null,
							edit: null,
							actions: null,
							
							isEdit: false,
							isInCard: false,
							
							init: function(args) {
								var me = this;
								this.args = args;
			
								// Prepare UI
								var root = this.root = args.root;
								var text = this.text = ox.el.get('text', root); //$(root.find('> .ox-id-text'));
								var edit = this.barEdit = ox.el.get('bar-edit', root); //$(root.find('> .ox-id-bar-edit'));
								var actions = this.actions = ox.el.get('actions', root); //$(root.find('> .ox-id-actions'));
								
								var isInline = args.isInline;
								var isInCard = this.isInCard = root.hasClass('ox-incard');
								if(isInCard) text.css('padding', args.padding || '10px'); 
								if(isInCard || root.hasClass('ox-bottom')) actions.addClass('ox-end');
								if(args.actions) ox.node(args.actions, actions.find('> .ox-childs'));
								//if(ox.pf.method == 'touch') actions.addClass('col-none-back ox-right');
								
								// Data
								if(!args.data) args.data = {text: args.value || text.text()};
								this.data = args.data;
							
								// Handler
								ox.el.get('save', root).on(ox.b.CLICK, function(e) { me.editor.close(true); });
								ox.el.get('cancel', root).on(ox.b.CLICK, function(e) { me.editor.close(); });
								
								text.on(ox.b.CLICK, function() { me.onEdit() });
								ox.el.get('editbutton', root).on(ox.b.CLICK, function() { me.onEdit() });
								
								//this.reset(args);
								this.renderContent();
							},
							destroy: function() {
								delete omnia.ui.textedit.handler.activeFields[this.id];
								omnia.ui.textedit.handler.isAnyOpen = Object.keys(omnia.ui.textedit.handler.activeFields).length > 0;
							},
						
							// Public functions
							
							reset: function(args) {
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.onClose) this.args.onClose = args.onClose;
								if(args.value) this.setValue(args.value);
							},				
							edit: function() {
								if(this.isEdit) return;
								
								var me = this;
								this.id = ox.id();
								if(this.args.onEdit) this.args.onEdit(this.data);
								
								this.isEdit = true;
								var isInline = this.args.isInline && ox.pf.device != 'phone';
								
								omnia.ui.textedit.handler.activeFields[this.id] = true;
								omnia.ui.textedit.handler.isAnyOpen = Object.keys(omnia.ui.textedit.handler.activeFields).length > 0;
								
								if(isInline || this.args.isAttached) {
									this.root.removeClass('ox-bar-hover hand');//.addClass('col-light-3-back');
									this.actions.addClass('ox-hidden');
									if(!this.args.isAttached) {
										this.barEdit.removeClass('ox-hidden');
									}
									if(!this.isInCard) {
										this.root.addClass('ox-shadow-light-1 br2 ox-border');
										this.text.addClass('p10');
									}
									this.text.removeClass('ox-placeholder');//.addClass('col-white-back');
									//if(args.actions) ox.node(args.actions, actionsSub);
								}	
								
								this.editor = ox.ui.text.editor.create({
									root: this.text,
									content: this.text,
									//actions: this.args.actions,
									data: this.data, //this.args.data,
			
									onInput: function(data) { if(me.args.onInput) me.args.onInput(data, me.root); },
									onClose: function(isSave, data) { me.onClose(isSave, data); },
			
									isNoFormat: this.args.isNoFormat,
									isModal: this.args.isModal,
									isAttached: this.args.isAttached,
									isInline: isInline,
									isMultiline: this.args.isMultiline,
									isUnique: this.args.isUnique,
									cssEdit: this.args.cssEdit,
									//isRight: this.args.isRight,
									//isIconsRight: this.args.isIconsRight,
									//isTextarea: this.args.isTextarea,
								}); 
							},
							close: function(isSave, data) {
								if(!this.isEdit) return;
								
								this.isEdit = false;
								var isInline = this.args.isInline && ox.pf.device != 'phone';
								
								if(isInline || this.args.isAttached) {
									//this.root.removeClass('col-light-3-back').addClass('ox-bar-hover hand');
									this.root.addClass('ox-bar-hover hand');
									this.actions.removeClass('ox-hidden');
									this.barEdit.addClass('ox-hidden');
									//this.text.removeClass('col-white-back');
									if(!this.isInCard) {
										this.root.removeClass('ox-shadow-light-1 br2 ox-border');
										this.text.removeClass('p10');
									}
								}
								this.renderContent();
			
								if(this.args.onClose) this.args.onClose(isSave, data.text, this.root);
								if(isSave && this.args.onSelect) this.args.onSelect(data.text, this.root);
			
								delete omnia.ui.textedit.handler.activeFields[this.id];
								omnia.ui.textedit.handler.isAnyOpen = Object.keys(omnia.ui.textedit.handler.activeFields).length > 0;
							},
							setValue: function(data) {
								this.data = data;
								this.renderContent();
							},
							getValue: function() {
								return this.data;
							},
							getRoot: function() {
								return this.root;
							},
							
							// Private events
							
							onEdit: function() {
								this.edit();
							},
							onClose: function(isSave, data) {
								this.close(isSave, data)
							},
							
							// Private functions
							
							renderContent: function() {
								var render = ox.ui.text.markup.render(this.data.text || this.data.v);
								render.html = ox.str.textToBullets(render.html);

								this.text.html(render.html);

								if(this.args.isAttached && !this.args.isInline) {
									this.text.attr('class', 'ox-id-text ox-id-content font');
									this.text.addClass((render.css ? render.css : '') + ' ' + (render.pcss ? render.pcss : ''));
								}
								
								if(this.text.text() == '') {
									this.text.text(this.args.labelPlaceholder ? this.args.labelPlaceholder : ox.tx('text-placeholder') + '...');
									this.text.addClass('ox-placeholder');
								} else {
									this.text.removeClass('ox-placeholder');
								}
							}, 

};omnia.ui.textedit.html = {
							
							oid: 'frame2', css: 'ox-textedit ox-bar-hover ox-trans hand', c: [
								{oid: 'text', css: 'ox-id-text ox-id-content ox-format-text'},
								{oid: 'bar2', css: 'ox-id-bar-edit ox-end ox-col-ui-dialog-0-back ox-alone ox-hidden ox-split', c: [
									{t: 'div', css: '_ml5', c: [
										{oid: 'button', css: 'ox-id-save ox-green ox-inline', label: '#ok-save-button'},
										{oid: 'button', css: 'ox-id-cancel ox-inline', label: '#cancel'},
									]},
									{t: 'div', css: 'hright ox-id-actions-sub'},
								]},
								{oid: 'bar2', css: 'ox-overlay ox-col-ui-dialog-1-back ox-id-actions _ox-alone ox-split', c: [
									{oid: 'button', css: 'ox-id-editbutton ox-inline ox-blue ox-alone', label: '#edit-button'},
									{oid: 'buttonicon', css: 'ox-id-editbutton ox-id-short ox-inline ox-medium ox-blue', icon: 'fa fa-pencil-alt'},
								]},
							]
							
};omnia.ui.uitester.html = {
							
							t: 'frame', css: 'ox-uitester', c: [
								{oid: 'bar3', c: [
									{oid: 'button', oxid: 'button1', tabindex: 1, label: 'Button 1'},
									{oid: 'button', oxid: 'button2', tabindex: 2, label: 'Button 2'},
								]},
							],
							
};omnia.ui.template.handler = {
							
							clsId: 'omnia.ui.template.handler',
							
							args: null,
							elems: null,
							root: null,
							
							init: function(args) {
								this.args = args;
								this.render(args);
							},
							
							// Protected functions - UI
							
							getRoot: function() {
								return this.root;
							},
							render: function(args) {
								this.root = args.root;
								var e = this.elems = ox.el.getAll(args.root, true);
							},
							
};omnia.ui.template.html = {
							
							t: 'div', css: 'ox-template', c: [],
							
};