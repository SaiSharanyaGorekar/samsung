
var omnia = {
	
	version: '1.0.0-dev', 
	text: {
		loremExtraShort: 'Lorem ipsum dolor sit amet',
		loremExtraShort2: 'Stet clita kasd gubergren no sea takimata',
		loremShort: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore',
		loremMedium: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet',
		lorem: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',

		en: {
			'accesscode': 'Access Code',
			'accounts': 'Accounts',
			'activate': 'Activate',
			'add': 'Add',
			'add-above': 'Add Above',
			'add-below': 'Add Below',
			'add-content': 'Add Content',
			'add-content-button': '<i class="fa fa-plus ox-before"></i>Add Content',
			'add-confirm': 'Are you sure to add the item?',
			'add-document': 'Add Document',
			'add-here': 'Add here',
			'add-item': 'Add Item',
			'add-item-button': '<i class="fa fa-plus ox-before"></i>Add item',
			'add-location': 'Add Location',
			'add-location-button': '<i class="fa fa-plus ox-before"></i>Add Location',
			'add-page': 'Add Page',
			'add-page-below': 'Add Page Below',
			'add-page-button': '<i class="fa fa-plus ox-before"></i>Add Page',
			'add-slide': 'Add Slide',
			'add-slide-button': '<i class="fa fa-plus ox-before"></i>Add Slide',
			'add-on-device': 'Add on Device',
			'address': 'Address',
			'album': 'Album',
			'albums': 'Albums',
			'all': 'All',
			'allday': 'All day',
			'app': 'Application',
			'append': 'Append',
			'append-above': 'Append Above',
			'append-below': 'Append After',
			'append-child': 'Append Child',
			'append-end': 'Append at the End',
			'author': 'Author',
			'authors': 'Authors',
			'auto': 'Auto',
			'back': 'Back',
			'back-icon': '<i class="fa fa-chevron-left ox-font-12-i"></i>',
			'back-button': '<i class="fa fa-chevron-left ox-before ox-font-12-i"></i>Back',
			'back-per-block': 'Background per Block', 
			'backcolor': 'Back Color',
			'background': 'Background',
			'bar-mode': 'Bar Mode',
			'bleed': 'Bleed',
			'bleed-on': 'Show bleed',
			'bleed-off': 'Hide bleed',
			'block': 'Block',
			'book-language': 'Book Language',
			'booking-code': 'Booking Code',
			'bottom-left': 'Bottom left',
			'bottom-center': 'Bottom center',
			'bottom-right': 'Bottom right',
			'bullets': 'Bullets',
			'business': 'Business',
			'cancel': 'Cancel',
			'cancel-button': '<i class="fa fa-ban ox-before"></i>Cancel',
			'change': 'Change',
			'chapters': 'Chapters',
			'chart': 'Chart',
			'checklist': 'Checklist',
			'city': 'City',
			'clear-cache': 'Clear cache',
			'clipboard': 'Clipboard',
			'clipboard-ascsv': 'Clipboard as CSV',
			'clipboard-asparagraph': 'Clipboard as Paragraph',
			'clipboard-asrow': 'Clipboard as Row',
			'clipboard-asbullets': 'Clipboard as Bullet List',
			'clipboard-nodeonly': 'Clipboard Element',
			'clipboard-paste': 'Paste from Clipboard',
			'close': 'Close',
			'close-icon': '<i class="ma ma-18">close</i>',
			'close-button': '<i class="ma ma-18 mr10 vmiddle mb5">close</i>Close',
			'cloud': 'Cloud Service',
			'comment': 'Comment',
			'comment-placeholder': 'Enter comment',
			'commingsoon': 'Comming Soon',
			'color-palette': 'Color Palette',
			'cols': 'Columns',
			'color': 'Color',
			'color-highlight': 'Color highlight',
			'color-invert': 'Color on dark background',
			'colors': 'Colors',
			'company': 'Company',
			'compare': 'Compare',
			'confirm-clipboard': 'Please confirm to copy the text to the clipboard',
			'confirm-delete': 'Are you sure to delete the item?',
			'confirm-delete-item': 'Are you sure to delete %s?',
			'contact': 'Contact',
			'contains-pagetitle': 'With page title',
			'content': 'Content',
			'copy': 'Copy',
			'copy-all': 'Copy All',
			'copy-ashtml': 'Copy as HTML',
			'copy-asnode': 'Copy as Node',
			'copy-astext': 'Copy as Text',
			'copy-assubnodes': 'Copy as Sub Nodes',
			'copy-astext': 'Copy as Text',
			'copy-asrow': 'Copy as Row',
			'copy-ascsv': 'Copy as CSV',
			'copy-asparagraph': 'Copy as Paragraph',
			'copy-button': '<i class="fa fa-copy ox-before"></i>Copy',
			'copy-from-device': 'Copy from Device',
			'copy-to-clipboard': 'Copy to Clipboard',
			'copy-nodeonly': 'Copy Element',
			'copyright': '&copy; All rights reserved. Made with<i class="fa fa-heart ml10 mr10"></i>and<i class="fa fa-coffee ml10 mr10"></i>in Munich, Germany',
			'country': 'Country',
			'create-document': 'Create Document',
			'crop': 'Crop',
			'customize': 'Customize',
			'customize-panel-button': 'Customize<i class="fa fa-chevron-up ox-font-10-i ml10"></i>',
			'cut': 'Cut',
			'cut-button': '<i class="fa fa-cut ox-before"></i>Cut',
			'day': 'day',
			'days': 'days',
			'dark': 'Dark',
			'default-document-name': 'New Document',
			'delete': 'Delete',
			'delete-button': '<i class="fa fa-trash-alt ox-before"></i>Delete',
			'delete-icon': '<i class="fa fa-trash-alt"></i>',
			'delete-fromappspace': 'Delete from AppSpace',
			'delete-fromdevice': ' Delete from Device',
			'density': 'Density',
			'description': 'Description',
			'device': 'Device',
			'device-storage': 'Device Storage',
			'display': 'Display',
			'display-mode': 'Display Mode',
			'draganddrophere': 'Drag and drop here or',
			'document': 'Document',
			'document-styles': 'Document Styles',
			'document-styles-copied': '<i class="fa fa-check ox-before"></i>Document Styles have been copied',
			'done': 'Done',
			'double-page': 'Double Page',
			'double-page-page0': 'Double Page incl. Cover Page',
			'download': 'Download',
			'download-button': '<i class="fa fa-download ox-before"></i>Download',
			'downloadandclose': 'Download and Close',
			'downloadandclose-button': '<i class="fa fa-download ox-before"></i>Download and Close',
			'duplicate': 'Duplicate',
			'edit': 'Edit',
			'edit-address': 'Edit Address',
			'edit-asmarkup': 'Edit as Markup',
			'edit-astext': 'Edit as Text',
			'edit-button': '<i class="fa fa-pencil-alt ox-before"></i>Edit',
			'edit-checklist': 'Edit Checklist',
			'edit-clocks-tip': 'Edit your timezones',
			'edit-datarender': 'Edit Data',
			'edit-doc': 'Edit Document',
			'edit-editor': 'Edit Data',
			'edit-flight': 'Edit Flight',
			'edit-headline': 'Edit Headline',
			'edit-image': 'Edit Image',
			'edit-linkpreview': 'Edit Link',
			'edit-phonenumber': 'Edit Phone Number',
			'edit-popup': 'Edit in Popup',
			'edit-table': 'Edit Table',
			'edit-table2': 'Edit Table',
			'edit-text': 'Edit Text',
			'editor': 'Editor',
			'editor-magic-button': '<i class="fa fa-magic ox-before"></i>Editor',
			'enter-file-name': 'Please enter the file name',
			'enter-file-details': 'Please enter file details',
			'email': 'E-Mail',
			'embed': 'Embed',
			'error-occured': 'An error occured',
			'error-sign-in': 'The sign-in failed',
			'enter-token': 'Please enter the token',
			'english': 'English',
			'export': 'Export',
			'export-presentation': 'Export Presentation',
			'export-button': '<i class="fa fa-sign-out-alt ox-before"></i>Export',
			'export-pdf': 'Export as PDF',
			'export-pdf-button': '<i class="fa fa-file-pdf ox-before"></i>Export as PDF',
			'export-page-pdf': 'Export Page as PDF',
			'fade-colors': 'Fade Colors',
			'faq': 'Frequently Asked Questions',
			'favourite-on': 'Set as Favourite',
			'favourite-off': 'Unset as Favourite',
			'features': 'Features',
			'female': 'Female',
			'filename': 'File Name',
			'file': 'File',
			'file-save-error': 'The file could not be saved.',
			'file-new-error': 'The file could not be created.',
			'files': 'Files',
			'file-new-tip': 'Welcome! Just add a new file',
			'filter': 'Filter',
			'flight': 'Flight',
			'flight-number': 'Flight Number',
			'folder': 'Folder',
			'folders': 'Folders',
			'fold': 'Fold',
			'fold-advanced-setting-label': 'Use advanced folding',
			'fold-locked': 'Fold fixed',
			'font': 'Font',
			'fonts': 'Fonts',
			'font-headlines': 'Font Headlines',
			'format': 'Format',
			'formats': 'Formats',
			'free-images': 'Stunning images, free for commercial use',
			'from': 'From',
			'from-server': 'From Server',
			'front': 'Front',
			'frontcolor': 'Front Color',
			'full': 'Full',
			'fullscreen': 'Fullscreen',
			'gallery': 'Gallery',
			'german': 'German',
			'gridview': 'Grid View',
			'grid-icon': '<i class="fa fa-grip"></i>',
			'google-drive': 'Google Drive',
			'google-docs': 'Google Docs',
			'google-photos': 'Google Photos',
			'google-slides': 'Google Slides',
			'google-slides-document': 'Google Slides',
			'goto': 'Go To',
			'groups': 'Groups',
			'headline': 'Headline',
			'headlines': 'Headlines',
			'headline-placeholder': 'Enter headline',
			'hide': 'Hide',
			'hide-button': 'Hide<i class="vmiddle ma ma-16 ml5">keyboard_arrow_up</i>',
			'high': 'High',
			'home': 'Home',
			'home-button': '<i class="fa fa-home ox-before"></i>Home',
			'horizontal-order': 'Horizontal Order',
			'hour': 'Hour',
			'hours': 'hours',
			'icon': 'Icon',
			'info': 'Info',
			'image': 'Image',
			'images': 'Images',
			'image-url': 'Image URL',
			'image-select': 'Select Image',
			'images-none': 'No images',
			'images-1': '1 Image',
			'images-2': '2 Images',
			'images-3': '3 Images',
			'images-4': '4 Images',
			'images-9': '9 Images',
			'import': 'Import',
			'import-image': 'Import Image',
			'import-image-button': '<i class="fa fa-upload ox-before"></i>Import Image',
			'import-text': 'Import Text',
			'insert-above': 'Insert Above',
			'insert-after': 'Insert After',
			'insert-before': 'Insert Before',
			'insert-below': 'Insert Below',
			'job': 'Job',
			'highlight': 'Highlight',
			'highlight-invert': 'Highlight inverse',
			'highlight-primary': 'Highlight Primary',
			'highlight-secondary': 'Highlight Secondary',
			'keepdocument': 'Would you like to keep the file?',
			'keep-offline': 'Keep Offline',
			'language': 'Language',
			'layout': 'Layout',
			'layout-change': 'Change Layout',
			'legal': 'Imprint / Impressum',
			'letter': 'Letter',
			'letters': 'Letters',
			'letters-cv': 'CV',
			'link': 'Link',
			'link-file': 'Link File',
			'link-only': 'Link Only',
			'linked': 'Linked',
			'linked-file': 'Linked File',
			'light': 'Light',
			'list-icon': '<i class="fa fa-list"></i>',
			'load-articles': 'Load Articles',
			'load-book': 'Load Book',
			'load-colors': 'Load Colors',
			'load-contacts': 'Load Contacts',
			'load-file': 'Load File',
			'load-fromurl': 'Load from URL',
			'load-from-device': 'Load from Device',
			'load-image': 'Load Image',
			'load-images': 'Load Images',
			'load-more': 'Load more',
			'load-newsarticles': 'Load News Articles',
			'load-newssources': 'Load News Sources',
			'load-slides': 'Load slides',
			'loading': 'Loading',
			'loading-image': 'Loading image',
			'location': 'Location',
			'localstorage': 'Local Storage',
			'logo': 'Logo',
			'lorem': 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.',
			'low': 'Low',
			'male': 'Male',
			'markup': 'Markup',
			'menu': 'Menu',
			'minute': 'Minute',
			'minutes': 'Minutes',
			'minutes-short': 'min',
			'monochrome': 'Monochrome',
			'month': 'Month',
			'more': 'More',
			'move': 'Move',
			'move-up': 'Move Up',
			'move-down': 'Move Down',
			'name': 'Name',
			'name-or-company': 'Name or Company',
			'next': 'Next',
			'new-file': 'New File',
			'new-document': 'New Document',
			'new-document-button': '<i class="fa fa-plus ox-before"></i>New Document',
			'new-item': 'New Item',
			'news': 'News',
			'no': 'No',
			'none': 'None',
			'noitems': 'No Items',
			'nocancel': 'No, Cancel',
			'node-add-tip': 'Awesome. Add your first node',
			'node-edit-tip': 'Great. Now edit your node',
			'node-menu-tip': 'Have fun with even more options',
			'not-signed-in': 'You are not signed in.',
			'ok': 'Ok',
			'ok-button': '<i class="fa fa-check ox-before"></i>Ok',
			'ok-save-button': '<i class="fa fa-check ox-before"></i>Save',
			'on': 'On',
			'off': 'Off',
			'offline': 'Offline',
			'omnia-ai': 'ChatGPT',
			'omnia-artwork': 'Artwork',
			'omnia-boox': 'Boox',
			'omnia-calendar': 'Calendar',
			'omnia-clock': 'Clock',
			'omnia-cloud': 'Omnia Cloud',
			'omnia-contacts': 'Contacts',
			'omnia-crypt': 'Key Maker',
			'omnia-document': 'Omnia Document',
			'omnia-ebook': 'eBooks',
			'omnia-jobs': 'Jobs',
			'omnia-jobs2': 'Jobs 2',
			'omnia-mediathek': 'Mediathek',
			'omnia-mindmap': 'Omnia Mindmap',
			'omnia-news': 'News',
			'omnia-pattern': 'PatternPad',
			'omnia-stand': 'Stand',
			'omnia-storage': 'App Storage',
			'omnia-system': 'System',
			'omnia-timer': 'Timer',
			'omnia-translate': 'Translate', 
			'omnia-webbrowser': 'Browser',
			'open': 'Open',
			'open-text': 'Open Readable',
			'open-file': 'Open File',
			'open-in-browser-text': 'Browser Readable', 
			'open-in-browser': 'Browser',
			'openai-add': 'Get from OpenAI',
			'openai-send': 'Send to OpenAI',
			'openai-send-asparagraph': 'Send to OpenAI as Paragraph',
			'openai-send-asbullets': 'Send to OpenAI as Bullet List',
			'openfileerror': 'File could not be opened',
			'overview': 'Overview',
			'overwrite': '<i class="Overview',
			'overwrite-button': '<i class="fa fa-trash ox-before"></i>Overview',
			'overwrite-not': 'Do not Overwrite',
			'overwrite-local-confirm': 'There is a newer version from the cloud, do you want to overwrite your changes?',
			'page': 'Page',
			'page-templates': 'Page Templates',
			'pages': 'Pages',
			'paste': 'Paste',
			'paste-above': 'Paste Above',
			'paste-after': 'Paste After',
			'paste-before': 'Paste Before',
			'paste-below': 'Paste Below',
			'paste-button': '<i class="fa fa-paste ox-before"></i>Paste',
			'paste-sublink': 'Paste Sub-Map link',
			'percent': 'Percent',
			'pdf-document': 'PDF',
			'phonenumber': 'Phone number',
			'play': 'Play',
			'preferences': 'Preferences',
			'presentation': 'Presentation',
			'presentation-button': '<i class="fa fa-desktop ox-before"></i>Presentation', // desktop
			'presets': 'Presets',
			'preview': 'Preview',
			'preview-no': 'No Preview',
			'preview-button': '<i class="fa fa-eye ox-before"></i>Preview',
			'placeholder-text': 'Enter Text',
			'placeholder-headline': 'Enter Headline',
			'place-image': 'Place Image',
			'plain': 'Plain',
			'pocket': 'Pocket',
			'position': 'Position',
			'ppt-document': 'PowerPoint Presentation',
			'print': 'Print',
			'print-button': '<i class="fa fa-print ox-before"></i>Print',
			'process-image': 'Process Image',
			'profile': 'Profile',
			'quality': 'Quality',
			'query': 'Query',
			'read': 'Read',
			'redo': 'Redo',
			'redo-button': '<i class="fas fa-redo-alt ox-before"></i>Redo',
			'refresh': 'Refresh',
			'refresh-button': '<i class="fas fa-redo-alt ox-before"></i>Refresh',
			'reload': 'Reload',
			'reload-button': '<i class="fas fa-redo-alt ox-before"></i>Reload',
			'reload-from-omnia': 'Reload from Omnia',
			'remove': 'Remove', 
			'remove-confirm': 'Are you sure to remove the item?',
			'remove-from-device': 'Remove from Device',
			'remove-slide': 'Remove Slide',
			'remove-slide-button': '<i class="fa fa-trash-alt ox-before"></i><span>Remove Slide',
			'reset': 'Reset',
			'results': 'results',
			'round': 'Round',
			'rounds': 'Rounds',
			'rows': 'Rows',
			'save': 'Save',
			'saveauto': 'Auto Save',
			'saveandclose': 'Save and Close',
			'save-presentation': 'Save Presentation',
			'save-pdf': 'Save PDF',
			'save-button': '<i class="fas fa-save ox-before"></i> Save',
			'save-file': 'Save File',
			'save-confirm': 'Do you want to save the file?',
			'save-document': 'Save Document',
			'save-image': 'Save Image',
			'save-map-as-image': 'Save Mindmap as image',
			'save-map-as-image-button': '<i class="fa fa-download ox-before"></i>Save Mindmap as Image',
			'save-url': 'Save URL',
			'savenot': 'Do not Save',
			'savenot-button': '<i class="fa fa-ban ox-before"></i>Do not Save',
			'search': 'Search',
			'search-keywords': 'Search',
			'search-keywords-url': 'Search or URL',
			'search-location': 'Search Location',
			'search-mindmap': 'Search Mindmap',
			'seconds': 'Seconds',
			'seconds-short': 'sec',
			'select-all': 'Select All',
			'select-date': 'Select Date',
			'select-font': 'Select Font',
			'select-location': 'Save Document to',
			'select-please': 'Please select',
			'select-preset': 'Choose a Theme',
			'send': 'Send',
			'sending': 'Sending',
			'settings': 'Settings',
			'settings-button': '<i class="fa fa-cogs ox-before"></i>Settings',
			'settings-document': 'Document Settings',
			'settings-icon': '<i class="fa fa-cogs"></i>',
			'settings-slide': 'Slide Settings',
			'settodefault': 'Set to Default',
			'service-not-available': 'The function is not available on your device',
			'shapes': 'Shapes',
			'show': 'Show',
			'show-button': 'Show<i class="vmiddle ma ma-16 ml5">keyboard_arrow_down</i>',
			'signin': 'Sign In',
			'signin-button-google': '<i class="fab fa-google mr10"></i>Sign In',
			'signout': 'Sign Out',
			'signout-button': '<i class="fa fa-sign-out-alt mr5"></i>Sign Out',
			'signout-button-google': '<i class="fab fa-google mr10"></i>Sign Out',
			'signout-confirm': 'Are you sure to sign out?',
			'single-page': 'Single Page',
			'size': 'Size',
			'sizefull': 'Full Size',
			'sizescreen': 'Screen Size',
			'slide': 'Slide',
			'slides': 'Slides',
			'slides-fti': 'Slides FTI Group',
			'sort-ascending': 'Sort Ascending',
			'sort-descending': 'Sort Descending',
			'sort-by-name': 'Name',
			'sort-by-time': 'Time',
			'sort-by-type': 'Type',
			'space': 'Space',
			'split': 'Split',
			'standard': 'Standard',
			'start': 'Start',
			'sticky': 'Sticky',
			'storage': 'Storage',
			'street': 'Street',
			'stride': 'Stride',
			'style': 'Style',
			'style-cover': 'Cover Style',
			'style-header': 'Header Style',
			'styles': 'Styles',
			'styles-button': '<i class="fas fa-paint-brush ox-before"></i>Styles',
			'sync-method': 'Sync Method',
			'submap-set': 'Set Map-in-Map',
			'submap-unset': 'Unset Map-in-Map',
			'summary': 'Summary',
			'sync': 'Sync',
			'table': 'Table',
			'tag': 'Tag',
			'tagmode-setting-label': 'Tag Mode',
			'test': 'Test',
			'text': 'Text',
			'text-import': 'Text Import',
			'text-invert': 'Text inverse',
			'text-left': 'Text left',
			'text-right': 'Text right',
			'text-placeholder': 'Enter text',
			'time': 'Time',
			'title': 'Title',
			'to': 'To',
			'token': 'Token',
			'tool': 'Tool',
			'tools': 'Tools',
			'top-center': 'Top center',
			'top-left': 'Top left',
			'top-right': 'Top right',
			'titleandheadlines': 'Title &amp; Headlines',
			'translate': 'Translate',
			'translation': 'Translation',
			'type-chapter': 'Chapter',
			'type-content': 'Content',
			'undo': 'Undo',
			'undo-button': '<i class="fas fa-undo-alt ox-before"></i>Undo',
			'unfold': 'Unfold',
			'unfold-locked': 'Unfold fixed',
			'unlock': 'Unlock',
			'unlock-button': '<i class="fa fa-unlock ox-before"></i>Unlock',
			'unselect': 'Unselect',
			'update': 'Update',
			'update-confirm': 'Are you sure to update the item?',
			'update-on-device': 'Update on Device',
			'upload': 'Upload',
			'upload-button': '<i class="fa fa-upload ox-before"></i>Upload',
			'upload-image-button': '<i class="fa fa-upload ox-before"></i>Upload Image',
			'upload-or-url': 'Upload or URL',
			'url': 'URL',
			'urlonly': 'URL only',
			'useitonline': 'Use it Online',
			'vertical-order': 'Vertical Order',
			'voice': 'Voice',
			'viewmode': 'View Mode',
			'view': 'View',
			'view-button': '<i class="fa fa-eye ox-before"></i>View',
			'view-icon': '<i class="fa fa-eye"></i>',
			'video': 'Video',
			'web': 'Web',
			'week': 'Week',
			'width-px': 'Width (px)',
			'windowcloseconfirm': 'Are you sure you want to leave?  You will lose any unsaved data.',
			'work': 'Work',
			'year': 'Year',
			'years': 'Years',
			'yourcomments': 'Your Comments',
			'yourfiles': 'Your Files',
			'zip': 'Zip Code',
			'zoom': 'Zoom',
			'zoom-25': 'Zoom 25%',
			'zoom-50': 'Zoom 50%',
			'zoom-100': 'Zoom 100%',
			'zoom-200': 'Zoom 200%',
			'zoom-400': 'Zoom 400%',
			'zoom-out': 'Zoom Out',
			'zoom-in': 'Zoom In',
			'zoom-fit': 'Zoom to Fit',
			'zoom-to-height': 'Zoom to Height',
			'zoom-to-width': 'Zoom to Width',
			
			days2: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
			days3: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
			
			'social-share-twitter-patternpad': 'https://twitter.com/intent/tweet?text=Create%20beautiful%20patterns&url=' + encodeURIComponent('https://patternpad.com'),
			'social-share-facebook-patternpad': 'https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent('https://patternpad.com'),
			'social-share-pinterest-patternpad': 'http://pinterest.com/pin/create/button/?url=' + encodeURIComponent('https://patternpad.com') + '&description=Create%20beautiful%20patterns',
			'social-share-linkedin-patternpad': 'http://www.linkedin.com/shareArticle?mini=true&url=' + encodeURIComponent('https://patternpad.com') + '&summary=Create%20beautiful%20patterns',
			'social-share-reddit-patternpad': 'https://reddit.com/submit/?title=Create%20beautiful%20patterns&url=' + encodeURIComponent('https://patternpad.com'),
		},
		de: {
			days2: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
			days3: ['Son', 'Mon', 'Die', 'Mit', 'Don', 'Fri', 'Sat'],
			'import-image-button': '<i class="fa fa-upload ox-before"></i>Bild hochladen',
		},
	},
	packs: {
		
		// Server2
		
		'omnia-lessdef': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-lessdef.min.js',
		},

		'omnia-core': {
			remote: [
				[
					// jQuery
					{src: 'https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js'},

					// Additional tools
					{src: 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.5/jszip.min.js'},
					{src: 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js'},
				],
				[
					// Additional tools
					{src: 'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.27/moment-timezone-with-data-10-year-range.min.js'},
				],
			],
			local: [
				[
					// jQuery
					{src: 'lib/jquery/jquery.min.js'},

					// Additional tools
					{src: 'lib/jszip/jszip.min.js'},
					{src: 'lib/moment/moment.min.js'},
				],
				[
					// Additional tools
					{src: 'lib/moment/moment-timezone-with-data-10-year-range.min.js'},
				],
			],
		},
		'omnia-coreui': {
			remote: [
				[
					// CSS
					{src: 'https://haustein.info/omnia/lib/omnia.css', type: 'css'},

					// Font
					{src: 'https://haustein.info/lib/fontopensans/open-sans.css', type: 'css'},
					{src: 'https://haustein.info/lib/fontroboto/roboto.css', type: 'css'},
					
					// Icons
					{src: 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css', type: 'css'},
					{src: 'https://cdnjs.cloudflare.com/ajax/libs/material-design-icons/3.0.1/iconfont/material-icons.min.css', type: 'css'},
					{src: 'https://code.iconify.design/1/1.0.7/iconify.min.js'},
					
					{src: 'https://haustein.info/omnia/lib/min/omnia-coreui.min.js'},
				],
				[
					// Additional tools
					{src: 'https://haustein.info/lib/jquery/jquery.mobile-events.min.js'},
				],
			],
			local: [
				[
					// CSS
					{src: 'omnia/lib/omnia.css', type: 'css'},

					// Font
					{src: 'lib/fontopensans/open-sans.css', type: 'css'},
					{src: 'lib/fontroboto/roboto.css', type: 'css'},
					
					// Icons
					{src: 'lib/fontawesome/css/all.min.css', type: 'css'},
					{src: 'lib/materialicons/material-icons.min.css', type: 'css'},
					{src: 'lib/iconify/iconify.min.js'},
					
					// JS
					{src: 'omnia/lib/min/omnia-coreui.min.js'},
				],
				[
					// Additional tools
					{src: 'lib/jquery/jquery.mobile-events.min.js'},
				],
			],
		},
		
		'omnia-app': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-app.min.js',
			local: 'omnia/lib/min/omnia-app.min.js',
		},
		'omnia-calendar': {
			remote: [
				['https://haustein.info/omnia/lib/min/omnia-calendar.min.js'],
				['https://haustein.info/lib/ical/ical.min.js'],
			],
			local: [
				['omnia/lib/min/omnia-calendar.min.js'],
				['lib/ical/ical.min.js'],
			],
		},
		'omnia-clock': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-clock.min.js',
			local: 'omnia/lib/min/omnia-clock.min.js',
		},
		'omnia-code': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-code.min.js',
			local: 'omnia/lib/min/omnia-code.min.js',
		},
		'omnia-content': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-content.min.js',
			local: 'omnia/lib/min/omnia-content.min.js',
		},
		'omnia-debug': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-debug.min.js',
			local: 'omnia/lib/min/omnia-debug.min.js',
		},
		'omnia-doc': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-doc.min.js',
			local: 'omnia/lib/min/omnia-doc.min.js',
		},
		'omnia-edit': {
			remote: {src: 'https://haustein.info/omnia/lib/min/omnia-edit.min.js'},
			local: {src: 'omnia/lib/min/omnia-edit.min.js'},
		},
		'omnia-google': {
			remote: {src: 'https://haustein.info/omnia/lib/min/omnia-google.min.js'},
			local: {src: 'omnia/lib/min/omnia-google.min.js'},
		},
		'omnia-jobs': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-jobs.min.js',
			local: 'omnia/lib/min/omnia-jobs.min.js',
		},
		'omnia-mindmap': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-mindmap.min.js',
			local: 'omnia/lib/min/omnia-mindmap.min.js',
		},
		'omnia-news': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-news.min.js',
			local: 'omnia/lib/min/omnia-news.min.js',
		},
		'omnia-travel': {
			remote: {src: 'https://haustein.info/omnia/lib/min/omnia-travel.min.js'},
			local: {src: 'omnia/lib/min/omnia-travel.min.js'},
		},
		'omnia-tv': {
			remote: {src: 'https://haustein.info/omnia/lib/min/omnia-tv.min.js'},
			local: {src: 'omnia/lib/min/omnia-tv.min.js'},
		},
		'omnia-ebook': {
			remote: {src: 'https://haustein.info/omnia/lib/min/omnia-ebook.min.js'},
			local: {src: 'omnia/lib/min/omnia-ebook.min.js'},
		},
		'omnia-pattern': {
			remote: 'https://haustein.info/omnia/lib/min/omnia-pattern.min.js',
			local: 'omnia/lib/min/omnia-pattern.min.js',
		},
		'omnia-webpage': {
			remote: {src: 'https://haustein.info/omnia/lib/min/omnia-webpage.min.js'},
			local: {src: 'omnia/lib/min/omnia-webpage.min.js'},
		},
		'omnia-crypt': {
			remote: {src: 'https://haustein.info/omnia/lib/min/omnia-crypt.min.js'},
			local: {src: 'omnia/lib/min/omnia-crypt.min.js'},
		},

		/*
		
		// Core
		
		core: {
			remote: [
				[
					// jQuery
					{src: 'https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js'},
		
					// Font
					{src: 'https://haustein.org/lib/css/opensans/open-sans.css', type: 'css'},
					{src: 'https://haustein.org/lib/css/roboto/roboto.css', type: 'css'},
					
					// Icons
					{src: 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.0/css/all.min.css', type: 'css'},
					{src: 'https://cdnjs.cloudflare.com/ajax/libs/material-design-icons/3.0.1/iconfont/material-icons.min.css', type: 'css'},
					{src: 'https://code.iconify.design/1/1.0.6/iconify.min.js'},
					
					// Additional tools
					{src: 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js'},
					
					{src: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-coreui.min.js'},
					{src: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-app.min.js'},
					{src: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-content.min.js'},
					{src: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-edit.min.js'},
					{src: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-google.min.js'},
					{src: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-webpage.min.js'},
					{src: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-travel.min.js'},
				],
				[
					// Additional tools
					{src: 'https://haustein.org/lib/js/jquery-touch-events/jquery.mobile-events.min.js'},
					{src: 'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.27/moment-timezone-with-data-10-year-range.min.js'},
				],
			],
			local: [
				[
					{src: 'lib/js/jquery/jquery.min.js'},
					
					{src: 'lib/css/opensans/open-sans.css', type: 'css'},
					{src: 'lib/css/roboto/roboto.css', type: 'css'},
					{src: 'lib/css/fontawesome5/css/fontawesome-all.min.css', type: 'css'},
					{src: 'lib/css/materialicons/material-icons.css', type: 'css'},

					{src: 'lib/js/moment/moment.min.js'},
				],
				[
					{src: 'lib/js/jquery-touch-events/jquery.mobile-events.min.js'},
					{src: 'lib/js/moment/moment-timezone-with-data-10-year-range.min.js'},
				],
			],
		},
		corecss: {
			remote: {src: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev.css', type: 'css'},
			local: {src: 'lib/js/omnia2/omnia-1.0.0-dev.css', type: 'css'},
		},
		lessdef: {
			remote: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-lessdef.min.js',
		},
		
		// Omnia Apps
		
		calendar: {
			remote: [
				['https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-calendar.min.js'],
				['https://haustein.org/lib/js/ical/ical.min.js'],
			],
			local: [
				['lib/js/omnia2/omnia-1.0.0-dev-calendar.min.js'],
				['lib/js/ical/ical.min.js'],
			],
		},
		code: {
			remote: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-code.min.js',
		},
		clock: {
			remote: 'https://haustein.org/lib/php/jshrink/?file=https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-clock.min.js',
			local: 'lib/js/omnia2/omnia-1.0.0-dev-clock.min.js',
		},
		debug: {
			remote: [
				[],
				['https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-debug.min.js'],
			],
			local: 'lib/js/omnia2/omnia-1.0.0-dev-debug.min.js',
		},
		doc: {
			remote: [
				['https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-doc.min.js'],
			],
			local: [
				['lib/js/omnia2/omnia-1.0.0-dev-doc.min.js'],
			],
		},
		jobs: {
			remote: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-jobs.min.js',
			local: 'lib/js/omnia2/omnia-1.0.0-dev-jobs.min.js',
		},
		mindmap: {
			remote: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-mindmap.min.js',
			local: 'lib/js/omnia2/omnia-1.0.0-dev-mindmap.min.js',
		},
		news: {
			remote: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-news.min.js',
			local: 'lib/js/omnia2/omnia-1.0.0-dev-news.min.js',
		},
		pattern: {
			remote: [
				['https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-pattern.min.js'],
			],
			local: [
				['lib/js/omnia2/omnia-1.0.0-dev-pattern.min.js'],
			],
		},

		book: {
			remote: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-book.min.js',
			local: 'lib/js/omnia2/omnia-1.0.0-dev-book.min.js',
		},
		cinema: {
			remote: 'https://haustein.org/lib/php/jshrink/?file=https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-cinema.min.js',
			local: 'lib/js/omnia2/omnia-1.0.0-dev-cinema.min.js',
		},
		cms: {
			remote: 'https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-cms.min.js',
		},
		styleguide: {
			remote: 'https://haustein.org/lib/php/jshrink/?file=https://haustein.org/lib/js/omnia2/omnia-1.0.0-dev-styleguide.min.js',
		},
		*/	
		
		// External UI
		
		drag: {
			remote: [
				[
				],
				[
					{src: 'https://haustein.info/lib/jquery-ui/1.12.1-dragonly/jquery-ui.min.js'},
				],
				[
					{src: 'https://haustein.info/lib/jquery-ui/jquery.ui.touch-punch.min.js'},
				],
			],
			local: [
				[
				],
				['lib/jquery-ui/1.12.1-dragonly/jquery-ui.min.js'],
				['lib/jquery-ui/jquery.ui.touch-punch.min.js'],
			],
		},
		iscroll: {
			remote: 'https://cdnjs.cloudflare.com/ajax/libs/iScroll/5.2.0/iscroll.min.js',
			local: 'lib/iscroll/iscroll.min.js',
		},
		
		// External Data
		
		calcx: {
			remote: [
				['https://haustein.info/lib/calcx/numeral.min.js'],
				['https://haustein.info/lib/calcx/jquery-calx-2.2.7.min.js'],
			],
			local: [
				['lib/calcx/numeral.min.js'],
				['lib/calcx/jquery-calx-2.2.7.min.js'],
			],
		},
		ical: {
			remote: 'https://haustein.info/lib/ical/ical.min.js',
			local: 'lib/ical/ical.min.js',
		},
		googleapi: {
			remote: 'https://apis.google.com/js/api.js',
		},

		// External Render
		
		svg: {
			remote: 'https://cdnjs.cloudflare.com/ajax/libs/d3/7.6.1/d3.min.js',
			local: 'lib/d3/d3.min.js',
		},
		pdf: {
			remote: [
				[
					//'https://haustein.org/lib/php/jshrink/?file=/lib/js/jspdf/jspdf.min.js'
					//'https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js',
					//'https://haustein.info/lib/jspdf/jspdf.debug.js',
					//'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js',
					'https://haustein.info/lib/jspdf/2.5.1/jspdf.umd.min.js',
				],
				[
					//'https://raw.githubusercontent.com/sphilee/jsPDF-CustomFonts-support/master/dist/jspdf.customfonts.debug.js',
					//'https://haustein.info/lib/jspdf/jspdf.customfonts.debug.js',
					//'https://haustein.org/lib/php/jshrink/?file=/lib/js/jspdf/jspdf.customfonts.min.js',
					//'https://haustein.org/lib/php/jshrink/?file=/lib/js/svg2pdf/svg2pdf.min.js',
				],
			],
			local: [
				[
					'lib/jspdf/jspdf.debug.js',
				],
				[
					'lib/jspdf/jspdf.customfonts.debug.js',
				],
			],
			
		},
		/*html2canvas: {
			remote: 'https://haustein.org/lib/js/html2canvas/html2canvas.min.js',
			local: 'lib/js/html2canvas/html2canvas.min.js',
		},
		html2pdf: {
			remote: [
				['https://cdn.jsdelivr.net/npm/es6-promise/dist/es6-promise.min.js'],
				['https://haustein.org/lib/js/html2pdf/html2pdf.min.js'],
			],
		},*/
		chartjs: {
			remote: [
				[],
				['https://cdn.jsdelivr.net/npm/chart.js' /*'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js'*/],
			],
			local: [
				[],
				['lib/chartjs/chart.min.js'],
			],
		},
		webfont: {
			remote: 'https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js', // https://github.com/typekit/webfontloader
			local: 'lib/webfont/webfont.js',
		},
		less: {
			remote: {src: 'https://cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js'},
		},
		
		fontalegreya: {
			remote: {src: 'https://fonts.googleapis.com/css2?family=Alegreya:ital,wght@0,400;0,500;0,600;0,700;0,800;0,900;1,400;1,500;1,600;1,700;1,800;1,900&display=swap', type: 'css'},
			local: {src: 'lib/fontalegreya/alegreya.css', type: 'css'},
		},

		// Dev

		ace: {
			remote: [
				[
					'https://haustein.org/lib/js/ace/src/ace.js',
					'https://unpkg.com/esprima@~4.0.1/dist/esprima.js',
				],
				[
					'https://haustein.org/lib/js/ace/src/ext-language_tools.js',
					'https://haustein.org/lib/js/ace/improved/ace.improvements.js',
					'https://haustein.org/lib/js/ace/improved/ace.ext.keys.js?1',
				],
			],
		},
		codemirror: {
			remote: [
				[
					'https://haustein.org/lib/js/codemirror/lib/codemirror.js',
					{src: 'https://haustein.org/lib/js/codemirror/lib/codemirror.css', type: 'css'},
				],
				[
					'https://haustein.org/lib/js/codemirror/mode/javascript/javascript.js',
					'https://haustein.org/lib/js/codemirror/mode/php/php.js',
					'https://haustein.org/lib/js/codemirror/mode/htmlembedded/htmlembedded.js',
					'https://haustein.org/lib/js/codemirror/addon/fold/foldcode.js',
					'https://haustein.org/lib/js/codemirror/addon/fold/foldgutter.js',
					'https://haustein.org/lib/js/codemirror/addon/fold/brace-fold.js',
					'https://haustein.org/lib/js/codemirror/addon/fold/xml-fold.js',
					'https://haustein.org/lib/js/codemirror/addon/fold/markdown-fold.js',
					'https://haustein.org/lib/js/codemirror/addon/fold/indent-fold.js',
					'https://haustein.org/lib/js/codemirror/addon/fold/comment-fold.js',
					{src: 'https://haustein.org/lib/js/codemirror/addon/fold/foldgutter.css', type: 'css'},
				],
			],
		},
		firebug: {
			remote: 'https://haustein.org/lib/js/firebug/build/firebug-lite.js',
		},
		diffpatch: {
			//remote: {src: 'https://gitcdn.link/repo/google/diff-match-patch/master/javascript/diff_match_patch.js', map: {'diffMatchPatch': 'diff_match_patch'}},
			remote: {src: 'https://cdnjs.cloudflare.com/ajax/libs/diff_match_patch/20121119/diff_match_patch.js', map: {'diffMatchPatch': 'diff_match_patch'}},
			local: {src: 'lib/diffmatchpatch/diff_match_patch.js', map: {'diffMatchPatch': 'diff_match_patch'}},
		},
		
		crypt: {
			local: [
				{src: 'p/lib/aes.js'},
				{src: 'p/lib/md4.js'},
				{src: 'p/lib/md5.js'},
				{src: 'p/lib/md5_v6.js'},
				{src: 'p/lib/sha256.js'},
				{src: 'p/lib/sha1.js'},
				{src: 'p/lib/ripemd160.js'},
				{src: 'p/lib/l33t.js'},
				{src: 'p/lib/hashutils.js'},
				{src: 'p/lib/crypt.js'},
			],
		},

		// Fonts
		
		fontindieflower: {
			remote: [[], [], ['https://haustein.org/lib/php/jshrink/?file=/lib/css/indieflower/IndieFlower.jspdf.js']],
		},
		fontlustria: {
			remote: [[], [], ['https://haustein.org/lib/php/jshrink/?file=/lib/css/lustria/Lustria.jspdf.js']]
		},
		fontmarcellussc: {
			remote: [[], [], ['https://haustein.org/lib/php/jshrink/?file=/lib/css/marcellussc/MarcellusSC.jspdf.js']]
		},
		fontopensans: {
			remote: [[], [], ['https://haustein.org/lib/php/jshrink/?file=/lib/css/opensans/OpenSans.jspdf.js']]
		},
		fontoxygenmono: {
			remote: [[], [], ['https://haustein.org/lib/php/jshrink/?file=/lib/css/oxygenmono/OxygenMono.jspdf.js']]
		},
		fontptsans: {
			remote: [[], [], ['https://haustein.org/lib/php/jshrink/?file=/lib/css/ptsans/PT_Sans.jspdf.js']]
		},
		fontroboto: {
			remote: [[], [], ['https://haustein.org/lib/php/jshrink/?file=/lib/css/roboto/Roboto.jspdf.js']]
		},
		fontspecialelite: {
			remote: [[], [], ['https://haustein.org/lib/php/jshrink/?file=/lib/css/specialelite/SpecialElite.jspdf.js']]
		},
		fontubuntu: {
			remote: [[], [], ['https://haustein.org/lib/php/jshrink/?file=/lib/css/ubuntu/Ubuntu.jspdf.js']]
		},
	},

	ui: { 
		packs: {
			coreui: {
				styles: {
					less: {
						shortcuts: {
						},
						styles: {
						},
						
						docu: {
						},
					},
				},
				frame: {
					bar2: {
						styles: {
						},
						docu: {
						},
						html: {
						},
					},
					bar3: {
						docu: {
						},
						styles: {
						},
						html: {
						},
					},
					frame: {
						docu: {
						},
						styles: {
						},
						html: {
						},
					},
					frame2: {
						docu: {
						},
						handler: {
						},
						styles: {
						},
						html: {
						},
					},
					loadcontent: {
						handler: {
						},
						docu: {
						},
						styles: {
						},
						html: {
						},
					},
					loaddialog: {
						open: function(args) {
							omnia.ui.loaddialog.show(args.caption, args.onReady, args.isModal, args.p, args);
							return args;
						},
						show: function(caption, onReady, isModal, p, args) {
							omnia.ui.overlay.show({
								isModal: isModal,
								onRendered: function(overlay) {
									if(args) {
										args.overlay = overlay;
										args.loader = overlay.frameHandler.loader;
									}
									if(p) overlay.frameHandler.loader.p(p);
									if(onReady) onReady(overlay.frameHandler.loader, overlay, args);
								},
								frame: {oid: 'loaddialog', caption: [{oid: 'label', text: caption}], args},
								
							});
						},
						handler: {
						},
						docu: {
						},
						html: {
						},
					},
					topnav: {
						docu: {
						},
						styles: {
						},
						html: {
						},
					},
					view: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
				bar: {
					barelement: {
						styles: {
						},
					},	
					
					button: {
						docu: {
						},
						events: {
						},
						styles: {
						},
				
						html: {
						},
					},					
					buttonicon: {
						docu: {
						},
						html: {
						},
					},
					buttonmore: {
						html: {
						},
					},
					label: {
						styles: {
						},
						docu: {
						},
						html: {
						}
					},
					panel: {
						docu: {
						},
						html: {
						},
					},
					sep: {
						styles: {
						},
						docu: {
						},
						html: {
						}
					},
					tab: {
						styles: {
						},
						docu: {
						},
						html: {
						}
					},
					tabstatic: {
						docu: {
						},
						html: {
						}
					},
					tabiconstatic: {
						docu: {
						},
						html: {
						}
					},
					tablink: {
						docu: {
						},
						html: {
						},
					},
					tablinkactive: {
						docu: {
						},
						html: {
						},
					},
					socialshare: {
						docu: {
						},
						html: {t: 'span', c: [
							{t: 'a', target: '_blank', css: 'ox-id-linktwitter ox-button ox-inline ox-blue br4 ox-slim', href: '#', style: {'background-color': '#1da1f2', 'width': 35}, c: [{t: 'i', css: 'fab fa-twitter col-white-i', style: 'line-height:35px'}]},
							{t: 'a', target: '_blank', css: 'ox-id-linkfacebook ox-button ox-inline ox-blue br4 ox-slim ml5', href: '#', style: {'background-color': '#3b5998', 'width': 35}, c: [{t: 'i', css: 'fab fa-facebook-f col-white-i', style: 'line-height:35px'}]},
							{t: 'a', target: '_blank', css: 'ox-id-linkpinterest ox-button ox-inline ox-red br4 ox-slim ml5', href: '#', style: {'background-color': '#bd081c', 'width': 35}, c: [{t: 'i', css: 'fab fa-pinterest-p col-white-i', style: 'line-height:35px'}]},
							{t: 'a', target: '_blank', css: 'ox-id-linklinkedin ox-button ox-inline ox-blue br4 ox-slim ml5', href: '#', style: {'background-color': '#007bb5', 'width': 35}, c: [{t: 'i', css: 'fab fa-linkedin-in col-white-i', style: 'line-height:35px'}]},
							{t: 'a', target: '_blank', css: 'ox-id-linkreddit ox-button ox-inline ox-red br4 ox-slim ml5', href: '#', style: {'background-color': '#ff4500', 'width': 35}, c: [{t: 'i', css: 'fab fa-reddit-alien col-white-i', style: 'line-height:35px'}]},
						]},
					},
				},
				windows: {
					dialog: {
						styles: {
						},
						docu: {
						},
						open: function(args) {
							if(!args) return;
							args.oid = 'dialog';
							ox.ov.open({frame: args});
						},
						html: {
						},
					},
					popup: {
						docu: {
						},
						html: {
						},
					},
					windowinline: {
						docu: {
						},
						styles: {
						},
						html: {
						},
					},
				},
				container: {
					accordeon: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					expandable: {
						docu: {
						},
						html: {
						},
					},
					iscroll: {
						handler: {
						},
						docu: {
						},
						html: {
						},
					},
					bartile: {
						docu: {
						},
						styles: {
						},
						html: {
						},
					},
					griditem: {
						docu: {
						},
						styles: {
						},
						html: {
						},
					},
					list: {
						docu: {
						},
						handler: {
						},			
						styles: {
						},
						html: {
						},
					},
					listgroups: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					strip: {
						docu: {
						},
						styles: {
						},
						html: {
						},
					},
				},
				overlays: {
					detailsdialog: {
						styles: {
						},
						docu: {
						},
						html: {
						},
					},
					overlay: {
						
						// Handler
			
						open: function(args) { return omnia.ui.overlay.show(args); },
						show: function(args) {
							if(args.delay || args.isDelay) setTimeout(function() { omnia.tools.create(omnia.ui.overlay.handler, args); }, 1);
							else return omnia.tools.create(omnia.ui.overlay.handler, args);
						},
						confirm: function(args) {
							ox.ov.show({
								delay: true,
								content: args.content,
								isModal: args.isModal,
								ok: {oid: 'button', css: 'ox-inline ox-alone ox-id-close ' + (args.cssButton || ' ox-red'), label: args.labelButton, click: args.action},
							});
						},
						handler: {
						},
						
						// Styles
				
						styles: {
						},
						docu: {
						},
			
						// Render
			
						html: {
						},
					},
					searchframe: {
						docu: {
						},
						html: {
						},
					},
				},
				helper: {
					board2: {
			
						// Handler
			
						trigger: function(args) {
							// boardId, evt, text, processId
							if(!args) args = {};
							if(!args.boardId) args.boardId = 'status';
							var board = $('.ox-id-board-' + args.boardId);
			
							if(board) {
								board = $(board);
								
								var handler = board.data('board');
								if(handler) {
									if(args.close) handler.remove({id: args.close}, true);
									else handler.add(args);
								}
							}
						},
					    handler: {
						},
			            
						// Styles
			
						styles: {
						},
						docu: {
						},
			
						// Render
			
			            html: {
			            },
					},
					buttonfullscreen: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					digitalclock: {
						handler: {
						},
						docu: {
						},
						html: {
						},
					},
					iconify: {
						docu: {
						},
						html: {
						},
					},
					iconbadge: {
						styles: {
						},
						docu: {
						},
						html: {
						},
					},
					login: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					notification2: {
						styles: {
						},
						docu: {
						},
						html: {
						},
					},
					tooltip: {
						styles: {
						},
						docu: {
						},
			
						html: {
						},
					},
					placeholder: {
						docu: {
						},
						html: {
						},
					},
				},
				content: {
					headline: {
						
						// Handler
						
						editor: 'omnia.ui.text.editor',
						docu: {
						},
						
						// Data
						
						data: {
							defaultData: {oid: 'headline', v: ''},
							dummyData: {oid: 'headline', v: 'Headline'},
						},
						
						// Render
						
						html: {t: 'div', css: 'ox-id-text ox-font-headline col-highlight ox-dark-col-white'},
						slide: {t: 'div', css: 'flex-1 flex-fix ox-slide-element ox-theme-font-1', text: ''},
						card: {t: 'div', css: 'ox-id-content ox-font-roboto ox-h4 bold w100', text: 'Headline', style: {'_font-size': '16px', 'padding': '13px', '_border-left': '4px solid #000000'}},
						pdf: 'omnia.ui.text.pdf',
					},
					image: {
						format: 'image/jpeg',
						quality: .8,
						
						meta: {
							label: '#image',
							icon: 'fa fa-image',
							defaultData: {v: '#image'},
						},
						docu: {
						},
						handler: {
						},
						editor: 'omnia.ui.imageeditor.handler',
						html: {t: 'div', css: 'ox-image ox-format-image w100 h100'},
						data: {
						},
						
						view: function(src) {
							var size = omnia.tools.browser.getViewportSize();
							omnia.ui.overlay.show({
								css: 'ox-center',
								frame: {oid: 'frame2', c: [
									{oid: 'bar2', css: 'ox-overlay ox-flex ox-right ox-id-close-bar ox-trans ox-glass', c: [
										{oid: 'button', css: 'ox-id-close ox-medium', label: '<i class="ma ma-18">close</i>'},
									]},
									{t: 'img', src: src, style: {'max-width': size.width, 'max-height': size.height}}
								]},
							});				
						},
					},
					nodelistitem: {
						docu: {
						},
						styles: {
						},
						handler: {
						},
						html: {
						}, //  'col-white-back br2 p10 w100'
					},
				},
				editform: {
					dropdown: {
						docu: {
						}, 
						handler: {
						},
						html: {
						},
					},
					input: {
						styles: {
						},
						docu: {
						},			
						html: {
						},
					},
					inputfield1: {
						handler: {
						},
						styles: {
						},
						docu: {
						},
						html: {
						}
					},
					inputfield: {
						docu: {
						},
						html: {
						},
					},
					search: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					searchfield: {
						handler: {
						},
						docu: {
						},
						html: {
						}
					},
					searchfield2: {
						docu: {
						},
						html: {
						},
					},
					searchtextfield: {
						docu: {
						},
						html: {
						},
					},
					textarea: {
						styles: {
						},
						docu: {
						},
						html: {
						},
					}, 
					textfield: {
						styles: {
						},
						docu: {
						},
						handler: {
						},
						html: {
						},
					}, 
					toggle: {
						handler: {
						},
						docu: {
						},
						html: {
						},
					},
				},
			},
			content: {
				content: {
					agendaitem: {
						docu: {
						},
						html: {
						},
					},
					chart: {
						docu: {
						},
						handler: {
							args: null,
							root: null,
							canvas: null,
							ctx: null,
							sizeCache: null,
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								this.canvas = ox.el.get('canvas', args.root);
								this.ctx = this.canvas[0].getContext('2d');
								
								//var me = this;
								//ox.el.onRefresh(function() {
								//	me.render();
								//});
								this.render();
							},
							
							// Public functions - Data
							
							onResize: function() {
								this.render();
							},
							
							// Private functions - Data
							
							dataToDatasets: function(data) {
								var r = {labels: [], data: []};
								if(!data || !data.c) return r;
								
								ox.each(data.c, function(i, item) {
									var d = item.value || item.count;
									if(item.time) {
										var date = new Date();
										date.setTime(item.time);
										//d = {x: date, y: d};
										r.labels.push(date.toLocaleDateString('de-DE', ox.d.format.dateNoYear));
										//r.isTime = true;
									} else {
										r.labels.push(item.label);
									}

									r.data.push(d);
								});
								
								return r;
							},
							
							// Public functions - UI
							
							getRoot: function() {
								return this.root;
							},
							render: function() {
								var me = this;
								var dataSets = this.dataToDatasets(this.args.data);
							
								// Options
								var scales = {};
								scales.y = {
									ticks: {display: !this.args.isPlain},
									grid: {
										display: true,
										drawBorder: false,
										drawTicks: false,
										drawOnChartArea: true,
									},
									beginAtZero: true
								};
								/*if(dataSets.isTime) scales.x = {
									type: 'time',
									time: {
										displayFormats: {
											day: 'DD.MM.',
											hour: 'HH:mm',
										},
										unit: 'day',
										round: 'day',
										tooltipFormat: 'DD.MM.',
									},
								};*/
								/*scales.yAxes = [{
									ticks: {
										beginAtZero: true,
									}
								}];*/
								scales.x = {
									ticks: {display: !this.args.isPlain},
									grid: {
										display: false,
										drawBorder: false,
										drawTicks: false,
										drawOnChartArea: false,
									},
								};
								/*if(dataSets.isTime) scales.xAxes = [{
									type: 'time',
									time: {
										displayFormats: {
											day: 'DD.MM.',
											hour: 'HH:mm',
										},
										unit: 'day',
										round: 'day',
										tooltipFormat: 'DD.MM.',
									},
									grid: {
										display: false,
										drawBorder: false,
										drawTicks: false,
										drawOnChartArea: false,
									},
								}];*/
								
								// Data
								var data = {};
								if(!dataSets.isTime && dataSets.labels) data.labels = dataSets.labels;
								data.datasets = [
									{
										data: dataSets.data,
										backgroundColor: 'rgba(54, 104, 203, .5)',
									}
								];
								
								var size = {w: this.args.w ? this.args.w : this.root.width(), h: this.args.h ? this.args.h : this.root.height()};
								if(size.w && size.h) this.sizeCache = size;

								this.root.css('height', size.h + 'px');
								this.canvas.width = size.w + 'px';
								this.canvas.height = size.h + 'px';
								
								var chart = new Chart(this.ctx, {
									type: 'bar',
									responsive: false,
									data: data,
									options: {
										//responsive: true,
										responsive: true,
									    maintainAspectRatio: false,
										animation: {duration: 0},
										plugins: {
											legend: {display: false},
											tooltip: {enabled: me.args.tooltips == true},
										},
										scales: scales,
									},
								});	
								
								if(this.args && this.args.h) chart.canvas.parentNode.style.height = chart.canvas.style.height = size.h + 'px';
								ox.el.onRefresh(function() {
									chart.canvas.parentNode.style.height = chart.canvas.style.height = size.h + 'px';
								});
								
								//chart.canvas.parentNode.style.width = size.h + 'px';
								//chart.canvas.width

								/*var me = this;
								ox.el.onRefresh(function() {
									me.css({'width': '100%', 'height': '100%'});
								});*/
							},
						},
						html: {
						},
					},
					contactitem: {
						docu: {
						},
						html: {
						},
					},
					contact: {
						meta: {
							label: '#contact',
							icon: 'fa fa-address-card',
							defaultData: {v: '#contact'},
						},
						docu: {
						},
						data: {
						
						},
						editor: {
						},
						html: {
						},
					},
					flight: {
						meta: {
							label: '#flight',
							icon: 'fa fa-plane',
							defaultData: {v: '#flight'},
						},
						docu: {
						},
						handler: {
						},
						html: {
						},
						_editor: {
						},
						data: {
						},
					},
					linktext: {
						docu: {
						},
						html: {
						},
					},
					linkthumbcompact: {
						docu: {
						},
						html: {
						},
					},
					linkthumb: {
						docu: {
						},
						html: {
						},
					},
					linkpreview: {
						meta: {
							label: '#link',
							icon: 'fa fa-link',
							defaultData: {v: '#link'},
						},
						docu: {
						},
						editor: 'omnia.ui.linkeditor.handler', 
						html: {
						},
						data: {
						},
					},
					linkopendialog: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					phonenumber: {
						meta: {
							label: '#phonenumber',
							icon: 'fa fa-phone',
							defaultData: {v: '#tel'},
						},
						docu: {
						},
						html: {
						},
						_editor: {
						},
						toData: function(data) {
							return {tel: data.v.substr(data.v[4] == '-' ? 5 : 4)};
						},
						toTag: function(data) {
							return {v: '#tel' + (data.tel ? (data.tel[0] == '+' ? '' : '-') + data.tel : '')};
						},
						data: {
						},
					},
					readable: {
						docu: {
						},
						styles: {
						},
						handler: {
						},
						html: {
						},
					},
					table: {
						handler: {
						},
						styles: {
						},
						docu: {
						},
						html: {
						},
						data: {
						},
					}, // *
					table2: {
						meta: {
							label: '#table',
							icon: 'fa fa-table',
							defaultData: {v: '#table'},
						},
						docu: {
						},
						editor: 'omnia.ui.tableeditor.handler',
						handler: {
						},
						html: {
						},
						data: {
						},
					},
					text: {
						
						// Handler
						
						editor: {
						},
						markup: {
						},
						docu: {
						},
			
						// Data
						
						data: {
						},
						
						// Render
						
						html: {
						},
						card: {t: 'div', css: 'ox-id-content ox-id-v w100', text: 'Text', style: {'padding': '13px'}},
					},
					textskeleton: {
						docu: {
						},
						styles: {
						},
						handler: {
						},
						html: {
						},	
					},
				},
			},
			webpage: {
				elements: {
					'teaser-text-lead': {
					}, // h1 ox-h0
					'teaser-text': {
					}, // h2 ox-h1
					'teaser-text-secondary': {
					}, // h2 ox-h2
					'teaser-image': {
					},
					'faq-block': {
						html: {t: 'div', c: [
							{t: 'h3', css: 'ox-id-headline ox-id-sample-text ox-empty-hidden ox-font-18 font bold _ox-font-headline ox-h3 col-highlight ox-border-top mt30 pt30'},
							{oid: 'text', css: 'ox-id-text ox-id-sample-text ox-empty-hidden ox-font-18 mt15'},
						]},
					},
				},
				content: {
					'content-strip-center-lead': {
					}, // teaser-text-lead h1 ox-h0
					'content-strip-center': {
					}, // teaser-text h2 ox-h1
					'content-strip-image-right': {
					}, // teaser-text h2 ox-h1
					'content-strip-image-right-secondary': {
					}, // teaser-text-secondary h2 ox-h2
					'content-strip-image-left': {
					}, // teaser-text h2 ox-h1
					'content-strip-image-left-secondary': {
					},  // teaser-text-secondary h2 ox-h2
					'content-strip-tripartite': {
					}, // h2 ox-h2
					'content-strip-faq': {
					},
					legal: {
					},
				},
			},
			edit: {
				editform: {
					colorpicker: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					fontpicker: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					form: {
						docu: {
						},
						handler: {
						}, 
						html: {
						},
					},
					formitem: {
						styles: {
						},
						docu: {
						},
						html: {
						},
					}, //
					formitemdropdown: {
						docu: {
						},
						html: {
						},
					}, //
					formiteminput: {
						docu: {
						},
						html: {
						},
					}, //
					formitemstatic: {
						docu: {
						},
						html: {
						},
					}, //
					formitemtoggle: {
						docu: {
						},
						html: {
						},
					}, //
					numberfield: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					slider: {
						styles: {
						},
						handler: {
						},
						docu: {
						},
						html: {
						},
					},
					tags: {
						handler: {
						},
						docu: {
						},
						html: {
						},
					},
				},
				edit: {
					ai: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					board: {
						docu: {
						},
						styles: {
						},
						handler: {
						},
						html: {
						},
					},
					checklist: {
						meta: {
						},
						docu: {
						},
						handler: {
						},
						editor: 'omnia.ui.checklist.handler',
						data: {
							nodeToRender: function(v, args) {
								var items = !args ? null : ox.ui.checklist.handler.getItems(args.node.data);
								var count = !args ? null : ox.ui.checklist.handler.getCompleted(items);
								//log({items: items.length, count});
								
								var isDone = count && count == items.length;
								return {t: 'span', css: 'ox-tag ox-round ox-border' + (isDone ? ' col-green-border-i col-green' : ' col-blue-border-i col-blue'), c: [
									{t: 'i', css: 'fa fa-check-double mr5'},
									count ? count + ' / ' : '',
									items ? items.length + '' : '',
								]};
								//return '<i class="ox-icon fa fa-check-double col-blue ox-font-12"></i> 1';
							},
						},
						html: {
						},
					},
					contacts: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					editor: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					iconeditor: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					imageeditor: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					imagesearch: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					linkeditor: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					keyboard: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					markupeditor: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					styleeditor: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					tableeditor: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					tageditor: {
						docu: {
						},
						styles: {
						},
						handler: {
						},
						html: {
						},
					},
					textrich: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					translate: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					photoviewer: {
						docu: {
						},
						editor: 'omnia.ui.photoviewer.handler',
						handler: {
						},
						html: {
						},
					},
					webviewer: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					screenreader: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
				editwrappers: {
					imageedit: {
						docu: {
						},
						handler: {
						},	
						styles: {
						},
						html: {
						},
					},
					tableedit: {
						docu: {
						},
						handler: {
							args: null,
							elems: null,
							root: null,
							data: null,
							isInCard: false,
							editor: null,
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								this.elems = ox.el.getAll(args.root);
								
								this.data = args.data || args.table;
								this.render();
							},
							
							// Functions UI
							
							getRoot: function() {
								return this.root;
							},
							render: function() {
								//log('#omnia.ui.tableedit.render'); log(this.root);
								
								var me = this;
								var e = this.elems;

								// Init
								var isInCard = this.isInCard = this.root.hasClass('ox-incard');
								if(isInCard) e.canvas.css({'margin': this.args.padding || '5px', 'max-height': '300px'}); 
								if(isInCard || this.root.hasClass('ox-bottom')) e.actions.addClass('ox-end');
								if(this.args.actions) ox.node(this.args.actions, e.actions.find('> .ox-childs'));

								// Handler
								//e.save.on(ox.b.CLICK, function(e) { me.editor.close(true); });
								//e.cancel.on(ox.b.CLICK, function(e) { me.editor.close(); });
								
								e.canvas.on(ox.b.CLICK, function() { me.onEdit() });
								ox.el.get('editbutton', this.root).on(ox.b.CLICK, function() { me.onEdit() });
							
								// Render
								this.renderTable();
							},
							renderTable: function() {
								var data = this.data || [ {v: ''/*ox.tx('table') + ' #t3'*/, c: [{v: ''}, {v: ''}]}, {v: '', c: [{v: ''}, {v: ''}]}, {v: '', c: [{v: ''}, {v: ''}]} ];
								
								this.elems.canvas.html('');
								//ox.node({oid: 'obj', args: {obj: this.args.table}}, this.root);
								ox.node({
									oid: 'table2', 
									args: {
										table: data, 
										isPadding: true, 
										isMarkup: true, 
										isCalc: true,
										isStatic: true,
										cssTable: 'wmin100',
										//cssAll: 'wmin100px',
										//cssRow: 'hmax90px cropped',
									},
								}, this.elems.canvas);								
							},
							edit: function() {
								var me = this;
								omnia.ui.tableeditor.handler.open({
									data: this.data,
									onClose: function(isSave, data) {
										me.save(isSave, data);
									},
								});
							},
							onEdit: function() {
								if(this.args.onEdit) this.args.onEdit();
								this.edit();
							},
							save: function(isSave, data) {
								if(isSave) {
									this.data = data;
									this.renderTable();
								}
								
								if(this.args.onClose) this.args.onClose(isSave, this.data);
							},
						},
						styles: {
						},
						html: {
						},
					},
					textedit: {
						docu: {
						},
						handler: {
						},
						styles: {
						},
						html: {
						},
					},
				},
			},
			code: {
				edit: {
					codeeditor: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			app: {
				elements: {
					
				},
				frame: {
					app: {
						docu: {
						},
						start: function(args) { return omnia.ui.app.handler.start(args); },
						styles: {
						},
						handler: {
						},
						html: {
						},
					},
					filesdialog: {
						docu: {
						},
						open: function(args) { return omnia.ui.filesdialog.handler.open(args); },
						handler: {
						},
						html: {
						},
					},
					files: {
						docu: {
						},
						handler: {
						},
						styles: {
						},
						html: {
						},
					},
					feedback: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					appframepanel: {
						docu: {
						},
						html: {
						},
					},
					appframe: {
						docu: {
						},
						handler: {
							args: null,
							root: null,
							elems: null,
							state: null,
							isVert: null,
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								var e = this.elems = ox.el.getAll(args.root);
								
								//if(!args.left) this.args.left = '10';
								//if(!args.right) this.args.right = '10';
								
								// Render
								var me = this;
								this.state = {left: null, right: null};
								ox.each(this.state, function(id, wasOn) {
									var arg = me.args[id];
									var isObj = arg && typeof arg == 'object';
									var isOpen = isObj && arg.isOpen == true ? true : false;
									var isExpanded = isObj && arg.isExpanded == false ? false : true;
									var isHidden = !arg || arg == false || (isObj && arg.isHidden) ? true : false;
									
									me.state[id] = {
										isOpen: isOpen, 
										isExpanded: isExpanded,
										isHidden: isHidden,
										mode: 'dock',
										size: isObj ? (arg.size ? arg.size.toString() : '') : (arg ? arg.toString() : ''),
										sizeVertical: isObj ? (arg.sizeVertical ? arg.sizeVertical.toString() : null) : null,
										full: arg && arg.full ? arg.full : false,
									};
									
									ox.el.get('.ox-id-' + id + '-panel .ox-id-appframepanel-handle', me.root).on(ox.b.CLICK, function() { 
										me.onHandle(id + ''); 
										this.blur();
									});
									
									if(arg && arg.label) ox.el.get('.ox-id-' + id + '-panel .ox-id-appframepanel-label', me.root).text(ox.tx(arg.label));
									if(args.cfg[id]) ox.node(args.cfg[id], ox.el.get('.ox-id-' + id + '-panel .ox-id-appframepanel-body', me.root));
								});

								this.resize();
								ox.el.onRefresh(function() { me.resize(); });
							},
							getRoot: function() {
								return this.root;
							}, 
							onResize: function() {
								this.resize();
							},
							onHandle: function(id) {
								var arg = this.state[id];
								if(arg.mode == 'full') arg.isOpen = !arg.isOpen;
								else arg.isExpanded = !arg.isExpanded;

								this.resize();
							},
							resize: function() {
								var me = this; 
								var w = this.root.width();
								var h = this.root.height();
								var e = this.elems;
								var state = this.state;
								var isVert = this.isVert = w < h;
								var fullId = null;
	
								ox.css(this.root, 'ox-vert', !isVert);
								ox.each(state, function(id, arg) {
									var size = isVert && arg.sizeVertical ? arg.sizeVertical : arg.size;
									var isFix = size.indexOf('px') >= 0;
									var isFullMode = arg.full && (isVert ? h < arg.full : w < arg.full);
									arg.mode = isFullMode ? 'full' : 'dock';
									if(!isFullMode) arg.isOpen = false;
									var isOn = isFullMode ? arg.isOpen : arg.isExpanded;
									if(isFullMode && isOn) fullId = id;

									// Panel
									var panel = e[id + '-panel'];
									var isPanelEnd = panel.hasClass('ox-end');
									panel.css('height', !isVert ? '' : (isOn ? (isFix ? size : '') : '47px'));
									panel.css('width', isVert ? '' : (isOn ? (isFix ? size : '') : '47px'));
									panel.css('flex', isOn ? (isFix ? '' : size) : '');
									ox.css(panel, 'flex-fix', isFix || !isOn);
									ox.css(panel, 'ox-hidden', arg.isHidden);
									panel.removeClass('ox-border-right ox-border-left ox-border-top ox-border-bottom');
									if(fullId != id) panel.addClass(
										!isVert ? (
											isPanelEnd ? 'ox-border-left' : 'ox-border-right'
										) : (
											isPanelEnd ? 'ox-border-top' : 'ox-border-bottom'
										)
									);
									
									// Body
									var body = ox.el.get('.ox-id-' + id + '-panel .ox-id-appframepanel-body', me.root);
									ox.css(body, 'ox-hidden', !isOn);
									
									// Bar
									//panel.css('flex-direction', (!isVert ? 'row' : 'column') + (isPanelEnd ? '' : '-reverse'));
									panel.css('flex-direction', !isVert && isOn ? '' : ((!isVert ? 'row' : 'column') + (isPanelEnd ? '' : '-reverse')));
									ox.css(panel, 'ox-vert', !isVert && !isOn);
									
									var bar = ox.el.get('.ox-id-' + id + '-panel .ox-id-appframepanel-bar', me.root);
									ox.css(bar, 'ox-stretch', isVert);
									bar.removeClass('ox-overlay ox-top ox-split ox-line ox-right br4');
									if(!isVert && isOn) bar.addClass(isPanelEnd ? '_ox-top ox-overlay ox-float-bottom-left ox-line br4' : '_ox-top ox-overlay _ox-right ox-float-bottom-right ox-line br4');
									//ox.css(bar, 'ox-bottom-safe', isVert && ((isPanelEnd && !isOn) || (!isPanelEnd && isOn && isFullMode)))
									
									var label = ox.el.get('.ox-id-' + id + '-panel .ox-id-appframepanel-label', me.root);
									ox.css(label, 'ox-hidden', !isVert && isOn);
									
									var icon = ox.el.get('.ox-id-' + id + '-panel .ox-id-appframepanel-handle-icon', me.root);
									icon.removeClass('fa-chevron-left fa-chevron-up fa-chevron-down fa-chevron-right');
									icon.addClass('fa-chevron-' + (
										!isVert ? (
											isOn ? (
												isPanelEnd ? 'right' : 'left'
											) : 
											(
												isPanelEnd ? (
													isOn ? 'down' : 'up'
												) : (
													isOn ? 'up' : 'down'
												)
											)
										) : (
											isPanelEnd ? (
												isOn ? 'down' : 'up'
											) : (
												isOn ? 'up' : 'down'
											)
										)
									));
// log('#1'),
									ox.el.onRefresh(function() {
										var h = body.data('ox-handler');
//if(h && h.onResize) log('#2');										
										if(h && h.onResize) h.onResize(null, true);
									});
								});
								
								if(fullId) ox.each(state, function(id, arg) {
									var panel = e[id + '-panel'];
									
									ox.css(panel, 'ox-hidden', id != fullId);
									if(id == fullId) {
										panel.css('width', ''); //isVert ? '' : '100%');
										panel.css('height', ''); //isVert ? '100%' : '');
										panel.css('flex', '');
										panel.removeClass('flex-fix');
									}
								});
								
								ox.css(e.main, 'ox-hidden', fullId);
								var mainHandler = e.main.data('ox-handler');
								if(mainHandler && mainHandler.onResize) mainHandler.onResize();
							},
						}, 
						html: {
						},
					},
					releasedownloader: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			google: {
				bar: {
					googlesignin: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
				components: {
					googlephotosselect: {
						docu: {
						},
						handler: {
						}, 
						html: {
						},
					},
				},
			},
			mindmap: {
				elements: {
					node: {
						docu: {
						},
						styles: {
						},
						html: {
						},
					}, 
					datarender: {
						docu: {
						},
						editor: {
						},
						data: {
						},
						handler: {
							args: null,
							root: null,
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								
								this.render(args);
							},
							getRoot: function() {
								return this.root;
							},
							render: function(args) { 
								var refId = args.refId;
								var refData = args.refData;
								var data = args.data;

								// Render external component
								if(refData.render) {
									if(!omnia.ui[refData.render]) {
										ox.each(args.map.items, (id, item) => {
											if(item.v && item.v.indexOf('#comp-omnia.ui.' + refData.render) >= 0) {
												ox.ui.text.markup.render(item.v, {node: {data: item}});
												return true;
											}
										});
									}
									
									if(omnia.ui[refData.render]) {	
										var cfg = {oid: refData['render']};
										Object.keys(args.data).forEach((id) => cfg[id] = args.data[id]);
										
										log({id: 'datarender', cfg, data: args.data, args});
										ox.node(cfg, this.root);
										return;
									}
								}
								
								// Render by print template
								var cfg = [];
								var print = refData.print;
								
								ox.each(refData.c, function(i, refItem) {
									var label = refItem.label || (refItem.name[0].toUpperCase() + refItem.name.substr(1));
									
									// Replace placeholder in print
									if(print) {
										var value = data[refItem.name];
										if(value == 'null') value = null;
										if(value && typeof value == 'object' && value.s) value = '#d' + value.s;
										if(value && refItem.name == 'date' && value.substr(0, 2) != '#d') value = '#d' + value;
										if(refItem.items) {
											var item = refItem.items.find(it => typeof it == 'object' && it.value == value);
											if(item && item.label) value = item.label;
										}
										
										print = print.split('%' + refItem.name).join(value || '');
										return;
									}

									// Generic list
									if(refItem.name == 'date' && typeof data.date == 'object') {
										cfg.push({oid: 'datetag', args: {date: data.date}});
									} else if(data[refItem.name]) {
										var value = data[refItem.name];
										var printItem = refItem.print || '%l %v';
										printItem = printItem.split('%v').join(value);
										printItem = printItem.split('%l').join('*c{' + label + '}');
										
										var render = omnia.ui.text.markup.render(printItem);
										cfg.push({t: 'div', style: '_margin:2px 0;', css: render.css + ' ' + (refItem.css ? refItem.css : ''), c: render.objs || null});
									}	
								});
								
								// Build cfg
								if(print) {
									var render = omnia.ui.text.markup.render(print);
									cfg.push({t: 'span', oxid: 'content-element', css: render.css + '', c: render.objs || null});
								}
								
								// No comp render or print
								if(!cfg.length) cfg.push({t: 'span', css: 'col-medium-4 italic', text: 'data-' + refId + '...'});
								
								// Add type icon
								ox.node(refData['icon-item'] ? {t: 'span', css: 'nowrap ', c: [
									{t: 'i', css: 'vmiddle inline mr5 ox-icon col-medium-1 ox-font-13 fa fa-' + refData['icon-item']},
									{t: 'span', oxid: 'content-element', css: 'vmiddle inline', style: '', c: cfg},
								]} : cfg, this.root);
							},
						},
						html: {
						},
					},
					dash: {
						docu: {
						},
						html: {
						},
					},
					ref: {
						docu: {
						},
						handler: {
						},
						html: {
						},
						data: {
						},
					},
					textimport: {
						docu: {
						},
						meta: {
						},
						editor: {
						},
						data: {
						},
					},
					trackevent: {
						html: {
						},
					},
					sum: {
						meta: {
							label: '#summary',
							icon: 'fa fa-tachometer-alt',
							defaultData: {v: '#sum'},
						},
						docu: {
						},
						editor: {
						},
						data: {
						},
						handler: {
						},
						html: {
						},
					},
				},
				edit: {},
			}, 
			doc: {
				content: {
					doc: {
					},
				},
				edit: {
					doceditor: {
					},
					docpageeditor: {
					},
					docpageselect: {
					},
					docwelcomeheader: {
						html: {t: 'div', css: 'hcenter', c: [
							{t: 'img', css: 'mt30', src: 'https://slide.style/images/slide-logo-full.svg', style: 'height:20px;'},
							{
								oid: 'headline', 
								css: 'ox-h2 mt5 hcenter pl15 pr15 ox-font-web-google-Alata bold', 
								text: 'Welcome to the new kind of presentations',
								style: 'color:#2B2992;',
							},
							{oid: 'text', css: 'font col-highlight ox-h5 mt10 mb15 hcenter pl15 pr15 semibold', text: 'Please choose a template'},
						]},
					},
				},
				printelements: {
					'print-cv-bullets': {
					},
					'print-bullets': {
					},					
					'print-cv-step': {
					},
					
					'print-block': {
					},
					'print-subtitle': {
					},
					'print-headline': {
					},
					
					'print-image-1': {
					},
					'print-image-2': {
					},
					'print-image-2v': {
					},
					'print-image-2x2': {
					},
					'print-image-2v2': {
					},
					'print-image-1x2': {
					},
					'print-image-1v2': {
					},
					'print-image-3': {
					},
					'print-image-3v': {
					},
					'print-image-3x3': {
					},
					'print-image-1x3': {
					},		
					'print-image-4': {
					},
					'print-image-5': {
					},
					'print-image-4v': {
					},
					'print-image-4x4': {
					},
					'print-image-6': {
					},
					
					'print-slide-element-headline-chapter': {
					},
					'print-slide-element-title': {
					},
					'print-slide-element-title-space-right': {
					},		
					'print-slide-element-content': {
					},
					'print-slide-element-text': {
					},
					'print-slide-element-headline': {
					},
					'print-slide-element-headline-text': {
					},
					'print-slide-element-logo-top-left': {
					},
					'print-slide-element-logo-top-right': {
					},
					'print-slide-element-logo-bottom-left': {
					},
					'print-slide-element-logo-bottom-right': {
					},
				},
				print: {
					'print-letter': {
					},
					
					'print-cv-letter': {
					},
					'print-cv-page1': {
					},
					'print-cv-page1-flat': {
					},
					'print-cv-page2': {
					},
					
					'print-slide': {

						meta: {
						},
						html: {
						},
						styles: {
						},
						
						init: function() {
							if(!omnia.ui['print-slide'].html.t) return;
							
							var variants = {
								'chapter': {
									tags: 'chapter',
									
									image: {style: {'grid-area': '1 / 1 / span 26 / span 64'}, oids: {
										'image-1': 'print-image-1',
									}},
									headline: {t: 'div', css: 'flex-center flex-column _ox-d2', style: {'grid-area': '29 / 5 / span 6 / span 51'}, c: [
										{
											oid: 'print-slide-element-headline-chapter',
											style: {'min-height': '90px'},
										},
										{
											oid: 'textskeleton', 
											lines: 1,
											css: 'ox-id-body font wrap cropped w100 ox-noscale ox-id-col-text ox-id-col-highlight', 
											style: {'font-size': '35px', 'line-height': '55px', 'margin-top': '30px'},
										},
										
										
									]},
									
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'chapter-split-50-left': {
									tags: 'chapter,text-right',
			
									image: {style: {'grid-area': '1 / 1 / span 36 / span 32'}, oids: {
										'image-1': 'print-image-1',
										'image-2v': 'print-image-2v',
									}},
									headline: 1,
									body: {t: 'div', css: 'flex-center flex-column', style: {'grid-area': '3 / 35 / span 32 / span 26'}, c: [
										/*{
											oid: 'print-slide-element-headline-chapter',
											style: {'min-height': '90px'},
										},*/
										{
											oid: 'textskeleton', 
											lines: 2,
											css: 'ox-id-body font wrap cropped w100 ox-id-col-text ox-id-col-highlight ox-id-body-chapter', 
											style: {'font-size': '35px', 'line-height': '55px', 'margin-top': '30px'},
										}
									]},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'chapter-split-50-right': {
									tags: 'chapter,text-left',
			
									image: {style: {'grid-area': '1 / 33 / span 36 / span 32'}, oids: {
										'image-1': 'print-image-1',
										'image-2v': 'print-image-2v',
									}},
									headline: 1,
									body: {t: 'div', css: 'flex-center flex-column', style: {'grid-area': '3 / 5 / span 32 / span 26'}, c: [
										/*{
											oid: 'print-slide-element-headline-chapter',
											style: {'min-height': '90px'},
										},*/
										{
											oid: 'textskeleton', 
											lines: 2,
											css: 'ox-id-body font wrap cropped w100 ox-id-col-text ox-id-col-highlight ox-id-body-chapter', 
											style: {'font-size': '35px', 'line-height': '55px', 'margin-top': '30px'},
										}
									]},
									
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'full': {
									tags: 'chapter,content',
			
									image: {style: {'grid-area': '1 / 1 / span 36 / span 64'}, oids: {
										'image-1': 'print-image-1',
									}},
									headline: {t: 'div', css: 'flex-center flex-column z1', style: {'grid-area': '3 / 3 / span 32 / span 60'}, c: [
										{
											oid: 'print-slide-element-headline-chapter',
											css: 'ox-id-col-highlight-invert hcenter',
											style: {'min-height': '90px'},
										},
										{
											oid: 'textskeleton', 
											lines: 2,
											//t: 'div', 
											css: 'ox-id-body font wrap cropped w100 col-white hcenter ox-id-col-text-invert ox-id-col-highlight-invert', 
											style: {'font-size': '35px', 'line-height': '55px', 'margin-top': '30px'},
										}
									]},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'full-text-highlight': {
									tags: 'chapter,content',
			
									image: {style: {'grid-area': '1 / 1 / span 36 / span 64'}, oids: {
										'image-1': 'print-image-1',
									}},
									headline: {t: 'div', css: 'flex-center flex-column z1', style: {'grid-area': '3 / 3 / span 32 / span 60'}, c: [
										{
											t: 'div',
											css: 'hcenter',
											style: {'min-height': '90px'},
											c: [
												{
													oid: 'print-slide-element-headline-chapter',
													css: 'ox-id-col-back-highlight ox-id-col-highlight-invert p15',
												},
											],
										},
										{
											//oid: 'textskeleton', 
											//lines: 2,
											t: 'div', 
											css: 'ox-id-body font wrap cropped w100 col-white hcenter ox-id-col-text-invert ox-id-col-highlight-invert', 
											style: {'font-size': '35px', 'line-height': '55px', 'margin-top': '30px'},
										}
									]},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'full-highlight': {
									tags: 'chapter,content',
			
									headline: {t: 'div', css: 'flex-center flex-column z1 ox-format-back ox-id-col-back-highlight', style: {'grid-area': '1 / 1 / span 36 / span 64', 'min-height': '90px', 'padding': '60px'}, c: [
										{
											oid: 'print-slide-element-headline-chapter',
											css: 'ox-id-col-highlight-invert hcenter',
											style: {'min-height': '90px'},
										},
										{
											//oid: 'textskeleton', 
											//lines: 2,
											t: 'div',
											css: 'ox-id-body font wrap cropped w100 ox-id-col-text-invert ox-id-col-highlight-invert hcenter', 
											style: {'font-size': '35px', 'line-height': '55px', 'margin-top': '30px'},
										}
									]},
									
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'chapter-full': {
									tags: 'chapter,content',
			
									headline: {t: 'div', css: 'flex-center flex-column z1', style: {'grid-area': '3 / 3 / span 32 / span 60', '_min-height': '90px'}, c: [
										{
											oid: 'print-slide-element-headline-chapter',
											css: 'ox-id-col-highlight hcenter',
											style: {'min-height': '90px'},
										},
										{
											//oid: 'textskeleton', 
											//lines: 2,
											t: 'div',
											css: 'ox-id-body font wrap cropped w100 ox-id-col-text ox-id-col-highlight hcenter', 
											style: {'font-size': '35px', 'line-height': '55px', 'margin-top': '30px'},
										}
									]},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								
								'title': {
									tags: 'content,title',
			
									headline: {oid: 'print-slide-element-title-space-right', style: {'grid-area': '1 / 1 / span 7 / span 64'}},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '9 / 5 / span 25 / span 56'}},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								
								'split-25-left-title': {
									tags: 'content,title,text-right',
			
									image: {style: {'grid-area': '1 / 1 / span 36 / span 16'}, oids: {
										'image-1': 'print-image-1',
										'image-2v': 'print-image-2v',
										'image-3v': 'print-image-3v',
									}},
									headline: {oid: 'print-slide-element-title-space-right', style: {'grid-area': '1 / 17 / span 7 / span 48'}},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '9 / 21 / span 25 / span 40'}},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'split-25-right-title': {
									tags: 'content,title,text-left',
			
									image: {style: {'grid-area': '1 / 49 / span 36 / span 16'}, oids: {
										'image-1': 'print-image-1',
										'image-2v': 'print-image-2v',
										'image-3v': 'print-image-3v',
									}},
									headline: {oid: 'print-slide-element-title', style: {'grid-area': '1 / 1 / span 7 / span 48'}},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '9 / 5 / span 25 / span 40'}},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'split-50-left-title': {
									tags: 'content,title,text-right',
			
									image: {style: {'grid-area': '1 / 1 / span 36 / span 32'}, oids: {
										'image-1': 'print-image-1',
										'image-2': 'print-image-2',
										'image-2v': 'print-image-2v',
										'image-2v2': 'print-image-2v2',
										'image-2x2': 'print-image-2x2',
										'image-1x2': 'print-image-1x2',
										'image-3x3': 'print-image-3x3',
									}},
									headline: {oid: 'print-slide-element-title', style: {'grid-area': '1 / 33 / span 7 / span 48'}},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '9 / 37 / span 25 / span 24'}},
			
									logo0: {oid: 'print-slide-element-logo-top-left', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'split-50-right-title': {
									tags: 'content,title,text-left',
			
									image: {style: {'grid-area': '1 / 33 / span 36 / span 32'}, oids: {
										'image-1': 'print-image-1',
										'image-2': 'print-image-2',
										'image-2v': 'print-image-2v',
										'image-2v2': 'print-image-2v2',
										'image-2x2': 'print-image-2x2',
										'image-1x2': 'print-image-1x2',
										'image-3x3': 'print-image-3x3',
									}},
									headline: {oid: 'print-slide-element-title', style: {'grid-area': '1 / 1 / span 7 / span 32'}},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '9 / 5 / span 25 / span 24'}},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'split-75-left': {
									tags: 'content,text-right',
			
									image: {style: {'grid-area': '1 / 1 / span 36 / span 48'}, oids: {
										'image-1': 'print-image-1',
										'image-2': 'print-image-2',
										'image-2v': 'print-image-2v',
										//'image-2v2': 'print-image-2v2',
										//'image-2x2': 'print-image-2x2',
										'image-1x2': 'print-image-1x2',
										'image-3x3': 'print-image-3x3',
									}},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '3 / 51 / span 31 / span 12'}},
			
									logo0: {oid: 'print-slide-element-logo-top-left', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'split-75-right': {
									tags: 'content,text-left',
			
									image: {style: {'grid-area': '1 / 17 / span 36 / span 48'}, oids: {
										'image-1': 'print-image-1',
										'image-2': 'print-image-2',
										'image-2v': 'print-image-2v',
										'image-2v2': 'print-image-2v2',
										'image-2x2': 'print-image-2x2',
										'image-1x2': 'print-image-1x2',
										'image-3x3': 'print-image-3x3',
									}},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '3 / 3 / span 31 / span 12'}},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								
								'title-inline-right': {
									tags: 'content,title',
			
									headline: {oid: 'print-slide-element-title-space-right', style: {'grid-area': '1 / 1 / span 7 / span 64'}},
									text: {t: 'div', css: 'ox-format-back ox-id-col-back-block cropped', style: {'grid-area': '9 / 33 / span 24 / span 28', padding: '60px'}, c: [
										{oid: 'print-slide-element-text', css: 'ox-id-text ox-id-text-1'},
									]},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '9 / 5 / span 25 / span 26'}},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'title-inline-left': {
									tags: 'content,title',
			
									headline: {oid: 'print-slide-element-title-space-right', style: {'grid-area': '1 / 1 / span 7 / span 64'}},
									text: {t: 'div', css: 'ox-format-back ox-id-col-back-block cropped', style: {'grid-area': '9 / 5 / span 24 / span 28', padding: '60px'}, c: [
										{oid: 'print-slide-element-text', css: 'ox-id-text ox-id-text-1'},
									]},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '9 / 35 / span 25 / span 26'}},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'title-inline-right-image': {
									tags: 'content,title,text-left',
			
									image: {style: {'grid-area': '9 / 33 / span 24 / span 28'}, oids: {
										'image-1': 'print-image-1',
										'image-2': 'print-image-2',
										'image-2v': 'print-image-2v',
										'image-2v2': 'print-image-2v2',
										'image-2x2': 'print-image-2x2',
										'image-1x2': 'print-image-1x2',
									}},
									headline: {oid: 'print-slide-element-title-space-right', style: {'grid-area': '1 / 1 / span 7 / span 64'}},
									body: {oid: 'print-slide-element-content', style: {'grid-area': '9 / 5 / span 25 / span 26'}},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
								'grid-9': {
									tags: 'content',
			
									headline0: {oid: 'print-slide-element-headline-text', cid: 'headline', 'headline-element': {css: 'ox-id-headline ox-id-headline1'}, 'text-element': {css: 'ox-id-text ox-id-text1'}, style: {'grid-area': '3 / 3 / span 10 / span 18'}},
									headline1: {oid: 'print-slide-element-headline-text', cid: 'headline', 'headline-element': {css: 'ox-id-headline2'}, 'text-element': {css: 'ox-id-text2'}, style: {'grid-area': '3 / 24 / span 10 / span 18'}},
									headline2: {oid: 'print-slide-element-headline-text', cid: 'headline', 'headline-element': {css: 'ox-id-headline3'}, 'text-element': {css: 'ox-id-text3'}, style: {'grid-area': '3 / 45 / span 10 / span 18'}},
								
									headline3: {oid: 'print-slide-element-headline-text', cid: 'headline', 'headline-element': {css: 'ox-id-headline4'}, 'text-element': {css: 'ox-id-text4'}, style: {'grid-area': '14 / 3 / span 10 / span 18'}},
									headline4: {oid: 'print-slide-element-headline-text', cid: 'headline', 'headline-element': {css: 'ox-id-headline5'}, 'text-element': {css: 'ox-id-text5'}, style: {'grid-area': '14 / 24 / span 10 / span 18'}},
									headline5: {oid: 'print-slide-element-headline-text', cid: 'headline', 'headline-element': {css: 'ox-id-headline6'}, 'text-element': {css: 'ox-id-text6'}, style: {'grid-area': '14 / 45 / span 10 / span 18'}},
			
									headline6: {oid: 'print-slide-element-headline-text', cid: 'headline', 'headline-element': {css: 'ox-id-headline7'}, 'text-element': {css: 'ox-id-text7'}, style: {'grid-area': '25 / 3 / span 10 / span 18'}},
									headline7: {oid: 'print-slide-element-headline-text', cid: 'headline', 'headline-element': {css: 'ox-id-headline8'}, 'text-element': {css: 'ox-id-text8'}, style: {'grid-area': '25 / 24 / span 10 / span 18'}},
									headline8: {oid: 'print-slide-element-headline-text', cid: 'headline', 'headline-element': {css: 'ox-id-headline9'}, 'text-element': {css: 'ox-id-text9'}, style: {'grid-area': '25 / 45 / span 10 / span 18'}},
			
									logo0: {oid: 'print-slide-element-logo-top-right', css: 'ox-id-image-logo-top-right'},
									logo1: {oid: 'print-slide-element-logo-bottom-left', css: 'ox-id-image-logo-bottom-left'},
									logo2: {oid: 'print-slide-element-logo-bottom-right', css: 'ox-id-image-logo-bottom-right'},
								},
							};
							
							$.each(variants, function(id, v) {
								var variants2 = {};
								var comp = {meta: {ref: 'omnia.ui.print-slide.meta', content: {c: []}, tags: v.tags}, html: {oid: 'print-slide', c: []}};
								
								$.each(v, function(oid, element) {
									if(typeof element == 'string') return;
									
									if(typeof element == 'number') {
										//if(!comp.meta.content[oid]) comp.meta.content[oid] = 0;
										//comp.meta.content[oid] += element;
										//for(var i = 0; i < element; i++) comp.meta.content.c.push({v: '#attr-' + oid});
										return; 
									}
									
									if(element.cid) {
										oid = element.cid;
										delete element.cid;
									}
			
									if(element.oid || element.t) {
										if(/*oid != 'body' */oid == 'image' || oid == 'text' || oid == 'headline') {
											comp.meta.content.c.push({v: '#attr-' + oid});
											
											if(!comp.meta.content[oid]) comp.meta.content[oid] = 0;
											comp.meta.content[oid]++;
										}
			
										comp.html.c.push(element);
									} else if(element.oids) variants2[oid] = element;
								});
								
								if(!Object.keys(variants2).length) {
									omnia.ui['print-slide-' + id] = ox.copy(comp);
								} else {
									$.each(variants2, function(oid, element) {
										
										var html = ox.copy(element);
										delete html.oids;
										
										$.each(element.oids, function(id2, oidn) {
											var htmln = ox.copy(html);
											htmln.oid = oidn;
			
											var compn = ox.copy(comp);
											compn.html.c.push(htmln);
											
											if(/*oid != 'body' */oid == 'image' || oid == 'text' || oid == 'headline') {
												var n = omnia.ui[oidn] && omnia.ui[oidn].meta && omnia.ui[oidn].meta.content && omnia.ui[oidn].meta.content[oid] ? omnia.ui[oidn].meta.content[oid] : 0;
												for(k = 0; k < n; k++) {
													compn.meta.content.c.push({v: '#attr-' + oid});
												
													if(!compn.meta.content[oid]) compn.meta.content[oid] = 0;
													compn.meta.content[oid]++;
												}
											}
			
											omnia.ui['print-slide-' + id + '-' + id2] = compn;
											
											//log('print-slide-' + id + '-' + id2, omnia.ui['print-slide-' + id + '-' + id2]);
										});
			
									});
								}
							});
							
							//log(omnia.ui);
						},
					},
					
					'print-photobook-whitewall-square-hardcover': {
					},
					'print-photobook-whitewall-square-softcover-24': {
					},
					'print-photobook-whitewall-square': {
					},
					'print-photobook-whitewall-square-dynamic': {
					},
			
					'print-photobook-onlinedruckbiz-a5portrait-softcover-dynamic': {
					},
					'print-photobook-onlinedruckbiz-a5portrait': {
					},
					'print-photobook-onlinedruckbiz-a5portrait-dynamic': {
					},
					
					'print-photobook-saal-19x19': {
					},
					'print-photobook-saal-28x28-cover': {
					},
					'print-photobook-saal-28x28': {
					},
				},
				pagesstatic: {
					documenthome: {
					},
					documentterms: {
					},
				},
			},
			job: {
				content: {
					jobitem: {
						docu: {
						},
						html: {
						},
					},
					jobitem2: {
						docu: {
						},
						styles: {
						},
						html: {
						},
					},
					jobsummary: {
						docu: {
						},
						meta: {
							label: '#job',
							icon: 'fa fa-briefcase',
							defaultData: {v: '#job'},
						},
						data: {
						},
						html: {
						},
					},
				},
				admin: {
					jobs: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					jobs2: { 
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			news: {
				content: {
					newsitem: {
						docu: {
						},
						html: {
						},
					},
					newsitemsmall: {
						docu: {
						},
						html: {
						},
					},
					news: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					magazine: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			pattern: {
				components: {
					pattern: {
						docu: {
						},
						handler: {
							
							// Presets
							
							shapes: {
								'circle': '<circle cx="10" cy="10" r="10" fill="black"/>',
								'rect': '<rect width="20" height="20" fill="black"/>',
								'rect-half': '<rect width="20" height="10" fill="black"/>',
								'arc': '<path fill-rule="evenodd" clip-rule="evenodd" d="M20 0C8.9543 0 0 8.9543 0 20H20V0Z" fill="black"/>',
								'leaf': '<path fill-rule="evenodd" clip-rule="evenodd" d="M0 20C0 8.95431 8.95431 0 20 0V0V0C20 11.0457 11.0457 20 0 20V20V20Z" fill="black"/>',
								'triangle': '<path fill-rule="evenodd" clip-rule="evenodd" d="M0 19.9823V20H20V0H19.9823L0 19.9823Z" fill="black"/>',
								'arrow': '<path d="M19.9981 0.00193429L3.72652 -7.68637e-07L8.4784 4.75382L0 13.2345L6.76585 20L15.2462 11.5208L20 16.2746L19.9981 0.00193429Z" fill="black"/>',
								'stripes': '<path d="M5 0H10L5 5L0 10V5L5 0Z" fill="black"/><path d="M20 15V20H15L20 15Z" fill="black"/><path d="M20 5V10L15 15L10 20H5L20 5Z" fill="black"/><path d="M15 0H20L5 15.0002L0 20.0002V15.0002L15 0Z" fill="black"/>',
								'stripes-bold': '<path d="M10 0H20L0 20V10L10 0Z" fill="black"/><path d="M20 10V20H10L20 10Z" fill="black"/>',
								'stripes-v': '<rect width="2" height="20" fill="black"/><rect x="4" width="2" height="20" fill="black"/><rect x="8" width="2" height="20" fill="black"/><rect x="12" width="2" height="20" fill="black"/><rect x="16" width="2" height="20" fill="black"/>',
								'stripes-h': '<rect width="20" height="2" fill="black"/><rect y="4" width="20" height="2" fill="black"/><rect y="8" width="20" height="2" fill="black"/><rect y="12" width="20" height="2" fill="black"/><rect y="16" width="20" height="2" fill="black"/>',
								'rhomb': '<path d="M10 0L20 10L10 20L0 10L10 0Z" fill="black"/>',
								'star': '<path d="M10 1L12.2451 7.90983H19.5106L13.6327 12.1803L15.8779 19.0902L10 14.8197L4.12215 19.0902L6.36729 12.1803L0.489441 7.90983H7.75487L10 1Z" fill="black"/>',
								'cross': '<path d="M10 5L5 0L0 5L5 10L0 15L5 20L10 15L15 20L20 15L15 10L20 5L15 0L10 5Z" fill="black"/>',
								'stripe-single': '<path d="M13 0H20V7L7 20H0V13L13 0Z" fill="black"/>',
								'stripe-single-bold': '<path d="M10 0H20V10L10 20H0V10L10 0Z" fill="black"/>',
								'ring': '<path fill-rule="evenodd" clip-rule="evenodd" d="M10 20C15.5228 20 20 15.5228 20 10C20 4.47715 15.5228 0 10 0C4.47715 0 0 4.47715 0 10C0 15.5228 4.47715 20 10 20ZM10 17C13.866 17 17 13.866 17 10C17 6.13401 13.866 3 10 3C6.13401 3 3 6.13401 3 10C3 13.866 6.13401 17 10 17Z" fill="black"/>',
							},
							shapeNum: {
								'1': 'circle', 
								'2': 'rect', 
								'4': 'triangle', 
								'8': 'arc', 
								'16': 'leaf', 
								'32': 'arrow', 
								'64': 'stripes',
							},
							subShapes: [
								//[[1, 0], [1, 0], [1, 0], [1, 0]], // 4 Circles
								//[[1, 0], [1, 0], [2, 0], [2, 0]], // Movie
								[[1, 0], [2, 0], [1, 0], [2, 0]], // 8 + Column
			
								[[8, 0], [8, 1], [8, 2], [8, 3]], // Circle
								[[8, 2], [8, 3], [8, 0], [8, 1]], // Bowl
								[[8, 1], [8, 0], [8, 3], [8, 2]], // Cup
								[[8, 3], [8, 2], [8, 1], [8, 0]], // Flower
			
								[[8, 6], [8, 7], [8, 8], [8, 9]], // Ring
								//[[8, 4], [8, 5], [8, 5], [8, 4]], // Flower
							
								[[4, 3], [4, 2], [4, 1], [4, 0]], //[[4, 0], [4, 1], [4, 2], [4, 3]], // Open Raute
								[[4, 3], [4, 2], [4, 0], [4, 1]], //[[4, 0], [4, 1], [4, 3], [4, 2]], // Arrow up
								//[[4, 1], [4, 0], [4, 2], [4, 3]], // Arrow down
								//[[4, 0], [4, 2], [4, 1], [4, 3]], // Karo
								[[4, 3], [4, 0], [4, 1], [4, 2]], //[[4, 0], [4, 3], [4, 1], [4, 2]], // Stripes left
								
								//[[64,3], [64, 2], [64, 1], [64, 0]], // Stripes
							],
							presets: {
								pattern: {
									'BauhausCanvas': {
										label: 'Bauhaus M',
										shapes: 'rect,triangle,arc', //2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: .5,
										back: 1,
										isNoFade: true,
										space: 0,
									},
									'BauhausCanvasFade': {
										label: 'Bauhaus M Fade',
										shapes: 'rect,triangle,arc', //2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: .5,
										back: 1,
										space: 0,
									},
									'BauhausCanvasLargeFade': {
										label: 'Bauhaus L Fade',
										shapes: 'rect,triangle,arc', //2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: 0,
										back: 1,
										space: 0,
									},
									/*'BauhausTriangle': {
										label: 'Triangles',
										shapes: 4,
										block: 50, //200,
										density: 1,
										split: 0.5,
										back: 1,
										space: 0,
										isNoFade: true,
										//backcolor: 1,
									},*/
									'BauhausTriangleFade': {
										label: 'Triangles Fade',
										shapes: 'triangle', //4,
										block: 50, //200,
										density: 1,
										split: 0.5,
										back: 1,
										space: 0,
										//backcolor: 1,
									},
									'BauhausLeafsFade': {
										label: 'Leafs Fade',
										shapes: 'leaf', //16,
										block: 50, //200,
										density: .33,
										split: 0.5,
										back: 0,
										space: 0,
										//backcolor: 1,
									},
									'BauhausLeafsFadeBottom': {
										label: 'Leafs Fade Bottom',
										shapes: 'leaf', //16,
										block: 50, //200,
										density: 'top',
										split: 0.5,
										back: 0,
										space: 0,
										//backcolor: 1,
									},
									'BauhausArcs': {
										label: 'Arcs',
										shapes: 'arc', //8,
										block: 50, //200,
										density: 1,
										split: 0.5,
										back: 1,
										space: 0,
										isNoFade: true,
										//backcolor: 1,
									},
									'BauhausArcsFade': {
										label: 'Arcs Fade',
										shapes: 'arc', //8,
										block: 50, //200,
										density: 1,
										split: 0.5,
										back: 1,
										space: 0,
										//backcolor: 1,
									},
									'BauhausCircles': {
										label: 'Circles',
										shapes: 'circle', //1,
										block: 50, //200,
										density: 1,
										split: 0.5,
										back: 0,
										space: 0,
										isNoFade: true,
										//backcolor: 1,
									},
									'BauhausCirclesFade': {
										label: 'Circles Fade',
										shapes: 'circle', //1,
										block: 50, //200,
										density: 1,
										split: 0.5,
										back: 0,
										space: 0,
										//backcolor: 1,
									},
									'BauhausCirclesDisco': {
										label: 'Disco',
										shapes: 'circle', //1,
										block: 50, //200,
										density: 1,
										split: 0,
										back: 0,
										space: 'center',
										isNoFade: true,
										//backcolor: 1,
									},
									'BauhausTetris': {
										label: 'Tetris',
										shapes: 'rect', //2,
										block: 50, //200,
										density: 'top',
										split: 1,
										back: 0,
										space: 0,
										//backcolor: 1,
									},
									/*'BauhausCirclesMedium': {
										label: 'Circles M',
										shapes: 1,
										block: 50, //200,
										density: 1,
										split: 0,
										back: 0,
										backcolor: 1,
										space: .25,
									},*/
									'BauhausCirclesSmall': {
										label: 'Circles S',
										shapes: 'circle', //1,
										block: 50, //200,
										density: 1,
										split: 0,
										back: 0,
										//backcolor: 1,
										space: .4,
									},
									/*'BauhausPoster': {
										label: 'Poster',
										shapes: 2 + 4 + 8,
										block: 100, //200,
										space: 0,
										density: 1,
										split: .5,
										back: 1,
										isNoFade: true,
										colors: 2,
									},*/
									/*'BauhausTiny': {
										label: 'Tiny',
										shapes: 2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: 1,
										back: 0,
										space: .4,
										colors: [null, '#ffffff'],
										backcolor: 1,
										isNoFade: true,
									},*/
									/*'BauhausTinyFade': {
										label: 'Tiny Fade',
										shapes: 2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: 1,
										back: 0,
										space: .4,
										backcolor: 1,
										isNoFade: false,
									},*/
									'StripesV': {
										label: 'Stripes Vertical',
										shapes: 'stripes-v', //2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: 0,
										back: 1,
										space: 0,
									},
									'StripesH': {
										label: 'Stripes Horizontal',
										shapes: 'stripes-h', //2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: 0,
										back: 1,
										space: 0,
									},
									'StripesBold': {
										label: 'Stripes',
										shapes: 'stripes-bold', //2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: 0,
										back: 1,
										space: 0,
									},
									'Arrows': {
										label: 'Arrows',
										shapes: 'arrow', //1,
										block: 50, //200,
										density: 'center',
										split: 0,
										back: 0,
										space: .25,
										isNoFade: false,
										//backcolor: 1,
									},
									'Rhombs': {
										label: 'Rhombs',
										shapes: 'rhomb', //2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: 0,
										back: 0,
										space: 0,
									},
									'Stars': {
										label: 'Stars',
										shapes: 'star', //2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: .25,
										back: 0,
										space: 0,
									},
									'Cross': {
										label: 'Patch',
										shapes: 'cross', //2 + 4 + 8,
										block: 50, //200,
										density: 1,
										split: .25,
										back: 0,
										space: 0,
									},
									'Rings': {
										label: 'Rings',
										shapes: 'ring', //1,
										block: 50, //200,
										density: 'center',
										split: 0,
										back: 0,
										space: 'center',
										isNoFade: false,
										//backcolor: 1,
									},
								},
								colors: {  
									// Candy
									'DanceToForget': ['#FF4E50', '#FC913A', '#F9D423', '#EDE574', '#E1F5C4'], // https://www.colourlovers.com/palette/937624/Dance_To_Forget
									'GimmeCandy': ['#DADAD8', '#FE6196', '#FF2C69', '#1EA49D', '#CBE65B'], // https://www.colourlovers.com/palette/1827722/gimme_*_c_a_n_d_y_!
									'BubbleKitten': ['#FF548F', '#9061C2', '#BE80FF', '#63D3FF', '#02779E'], // https://www.colourlovers.com/palette/364067/Bubble_Kitten
									'ShadesOfAPumpkin': ['#F17008', '#F19C08', '#F1C808', '#FCF4D0', '#DAEBD9'], // https://www.colourlovers.com/palette/2110/shades_of_a_pumpkin
									'FoggyBubbles': ['#27374D', '#33A4A7', '#6BD69B', '#A3E973', '#DDFF62'], // https://www.colourlovers.com/palette/1954630/Foggy_Bubbles
									
									// Retro
									//'GiantGoldfish': ['#69D2E7', '#A7DBD8', '#E0E4CC', '#F38630', '#FA6900'], // https://www.colourlovers.com/palette/92095/Giant_Goldfish
									
									// Modern
									'RobarovWebdesign': ['#D0DD2B', '#98C73D', '#00A9E0', '#67CDDC', '#3B3B3D'], // https://www.colourlovers.com/digital-art/trends/branding/7874/ROBAROV_WEBDESIGN
									'RainyDayPrints': ['#233645', '#345065', '#ABCDCF', '#00DEF2'],
									//'SmithBrennanResidence': ['#D5D2CB', '#868E8E', '#8C8781', '#434B4E', '#C9B99F', '#92623E'], // https://www.colourlovers.com/home/trends/interior-looks/7840/Smith_Brennan_Residence
								},
								nocolor: [
									/*'#4E637E', '#738BA9', */
									//'#5661f8', '#acc7ff', '#d5e3ff',
									'#91A3BA', '#bfcad8', '#e6ebf2'
								],
							},
							
							//
							
							args: null,
							root: null,
							svg: null,
							
							CIRCLE: 1,
							RECT: 2,
							TRIANGLE: 4,
							ARC: 8,
							LEAF: 16,
							SHAPE: 32,
							
							sizeCache: {w: -1, h: -1},
							config: {
								shapes: 'rect,triangle,arc', //2 + 4 + 8,
								block: 100, //200,
								density: 1,
								split: .5,
								back: 1,
								colors: [
									'#3668cb', // blue
									'#b4261a', // red
									//'#183FE1', // blue bright
									//'#01CFF8', // blue bright 2
									//'#f0db4e', // yellow
									//'#27be48', // green
									//'#ffffff',
								],
							},
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								
								if(args.config || args.isRandom) this.setConfig(args.config); //this.config = args.config;
								
								var me = this;
								ox.el.onRefresh(function() { 
									me.render();
								});
								
								this.root.on(ox.b.CLICK, function() { 
									//if(app && app.debug) { me.download(); return; }

									if(args.isRandom) me.setConfig(); 
									me.render({}); 
								});
							},
							render: function(args) {
								var t0 = ox.now();
								
								// Values
								if(args && args.config) this.setConfig(args.config); //this.config = args.config;
								
								var w = this.root.width();
								var h = this.root.height();
								if(!args && w == this.sizeCache.w && h == this.sizeCache.h) return;
								
								this.sizeCache = {w: w, h: h};
								
								// Render
								this.root.html('');
								
								// Label
								if(this.args.label) ox.node({t: 'div', css: 'font abs b0 ox-tag col-white-50-back col-highlight ox-dark-col-highlight ml5-i mb5-i z1', text: this.args.label}, this.root);
								
								// SVG
								var svg = this.svg = this.svgNode('svg');// $(document.createElementNS('http://www.w3.org/2000/svg', 'svg'));
								svg.css({'width': '100%', 'height': '100%'});
								this.generate();
								ox.node(svg, this.root);

								/*var dots = { 
									'background': '-webkit-linear-gradient(90deg, rgb(252, 252, 252) ' + (this.config.block - 2) + 'px, transparent 1%) center, -webkit-linear-gradient(rgb(252, 252, 252) ' + (this.config.block - 2) + 'px, transparent 1%) center, #000000 !important',
									'background-size': this.config.block + 'px ' + this.config.block + 'px !important',
									'background-position': 'top left !important',
								};
								log(dots);

								
								this.root[0].style.background = dots.background;
								this.root[0].style.backgroundSize = dots['background-size'];
								this.root[0].style.backgroundPosition = dots['background-position'];
								log(this.root[0].style.background)*/

								//log('%comnia.ui.pattern.handler.render' + (this.args.id ? '(' + this.args.id + ')' : '') + ': Done in ' + (ox.now() - t0) + ' ms', 'color:green');
							},
							getRoot: function() { 
								return this.root; 
							},
							onResize: function() {
								//log('#omnia.ui.pattern.handler.onResize');
								this.render();
							},
							download: function(w, format) {
								if(!w) w = 1000;
								if(!format) format = 'svg';
								//var h = (w / this.root.width() * this.root.height());
								
								var svg = this.svgNode('svg');
								var h = (w / this.svg.width() * this.svg.height());

								svg.attr('viewBox', '0 0 ' + w + ' ' + h);
								svg.attr('preserveAspectRatio', 'xMaxYMax slice');
								var g = this.svgNode('g');
								g.append(this.svg.children().clone());
								g.attr('transform', 'scale(' + (w / this.root.width()) + ')');
								svg.append(g);
								
								omnia.tools.file.downloadSVG(svg[0], 'patternpad.' + format, format, w, h);
								//omnia.tools.file.downloadSVG(this.svg[0], 'patternpad.svg');
								
								/*var serializer = new XMLSerializer();
								var source = serializer.serializeToString(this.svg[0]);
			
								if(!source.match(/^<svg[^>]+xmlns="http\:\/\/www\.w3\.org\/2000\/svg"/)){
									source = source.replace(/^<svg/, '<svg xmlns="http://www.w3.org/2000/svg"');
								}
								if(!source.match(/^<svg[^>]+"http\:\/\/www\.w3\.org\/1999\/xlink"/)){
									source = source.replace(/^<svg/, '<svg xmlns:xlink="http://www.w3.org/1999/xlink"');
								}
								
								var source = '<?xml version="1.0" standalone="no"?>' + source;
								var url = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(source);
								
								//log(source);
								omnia.tools.file.download(source, 'patternpad.svg', true);*/
							},
							
							// Private functions - Meta
							
							generate: function(x0, y0, cx, cy, block, density, split, shapes, rs, isSub) {
								
								// Get config
								var config = this.config;
								var isColRows = this.config.cols && this.config.rows;
								if(!x0) x0 = 0;
								if(!y0) y0 = 0;

								if(!block) {
									if(isColRows) {
										block = Math.round(this.root.width() / this.config.cols);
										if(Math.round(this.root.height() / this.config.rows) < block) block = Math.round(this.root.height() / this.config.rows);
										this.svg.css({'width': (this.config.cols * block) + 'px', 'height': (this.config.rows * block) + 'px'});
										
										this.config.block = block;
									} else {
										block = this.config.block;
									}
								}
								if(!cx) cx = isColRows ? this.config.cols : Math.ceil(this.root.width() / block);
								if(!cy) cy = isColRows ? this.config.rows : Math.ceil(this.root.height() / block);

								if(!density) density = config.density;
								if(!split) split = config.split;
								if(!shapes) shapes = config.shapes;
								var space = config.space || 0;
								
								shapes = this.shapesToArray(shapes);
								shapes.sort();
								var isShapeFiltered = shapes.length == 1 || !(shapes.length == 3 && shapes.join(',') == 'arc,rect,triangle'); 
								
								// Draw
								if(config.backcolor) this.drawRect(x0, y0, block * cx, block * cy, config.backcolor, {css: null});
								
								for(var y = 0; y < cy; y++) {
									for(var x = 0; x < cx; x++) {
										
										var nv = y / cy * 1.2;
										var ncx = (1 - Math.abs(cx / 2 - x) / (cx / 2)) * 1.2;
										var ncy = (1 - Math.abs(cy / 2 - y) / (cy / 2)) * 1.2;
										if(nv < 0) nv = 0;
										if(nv > 1) nv = 1;
										if(ncx > 1) ncx = 1;
										if(ncx < 0) ncx = 0;
										if(ncy > 1) ncy = 1;
										if(ncy < 0) ncy = 0;
										
										var densityCell = typeof density == 'number' ? density : (
											density == 'top' ? nv : 
												(density == 'centered' ? ncx : 
													(density == 'center' ? ncx * ncy : 
													1)
												)
										);
										
										var spaceCell = typeof space == 'number' ? space : (
											(block - block * (space == 'top' ? nv : 
												(space == 'centered' ? ncx : 
													(space == 'center' ? ncx * ncy : 
													1)
												)
											)) * .4
										);
										
										if(Math.random() < densityCell) {
											if(Math.random() < split) {
												this.generate(
													x * block + spaceCell, // x0 
													y * block + spaceCell, // y0
													2, // cx
													2, // cy
													(block - 2 * spaceCell) / 2, // block
													densityCell, // density
													-1, // split
													!isShapeFiltered ? null : shapes, // shapes
													!isShapeFiltered ? this.subShapes[Math.floor(Math.random() * this.subShapes.length)] : null, // rs
													true, // isSub
												);  // 
											} else {
												this.drawBlock(
													x0 + x * block + (!isSub ? spaceCell : 0), // x
													y0 + y * block + (!isSub ? spaceCell : 0), // y
													block - (!isSub ? 2 * spaceCell : 0), // w
													block - (!isSub ? 2 * spaceCell : 0), // h
													shapes, 
													rs ? rs[y * cx + x][0] : null, // r - Shape
													rs ? rs[y * cx + x][1] : null, // s - Direction
												);
											}
										}
									}
								}
							},
							drawBlock: function(x, y, w, h, shapes, r, s) {

								if(!r) { 
									if(shapes) shapes = this.shapesToArray(shapes);
									//var n = 7; // 2-1 = 2, 2-2 = 4, 2-3 = 8, 2-4 = 16, 2-5 = 32 
									//var i = 0;
									//do { r = Math.pow(2, Math.floor(Math.random() * n)); } while(!(r & shapes) && ++i < 100);
									
									r = shapes[Math.floor(Math.random() * shapes.length)];
								} else {
									if(typeof r == 'number') r = this.shapeNum[r];
								}
								//log({r})
								
								var config = this.config;
								
								var fill = this.getColor();
								var color = ''; //this.getColor(); //'col-' + (Math.floor(Math.random() * 5) + 1);
								
								x = Math.round(x * 100) / 100;
								y = Math.round(y * 100) / 100;
								w = Math.round(w * 100) / 100;
								h = Math.round(h * 100) / 100;
								
								if(config.back) {
									var backColor = this.getColor(); //'col-' + (Math.floor(Math.random() * 5) + 1);
									this.drawRect(x, y, w, h, backColor, {css: null});
								} 
								
								switch(r) {
									//case 1: // Circle
									case 'circle':
										this.drawCircle(x + w / 2, y + h / 2, w / 2, fill, {css: color});
										break;
									//case 2: // Rect
									case 'rect':
										this.drawRect(x, y, w, h, fill, {css: color});
										break;
									//case 4: // Triangle
									case 'triangle':
										if(!s && s != 0) s = Math.floor(Math.random() * 4);
										this.drawTriangle(x, y, w, h, s, fill, {css: color});
										break;
									//case 8: // Arc
									case 'arc':
										if(!s && s != 0) s = Math.floor(Math.random() * 6); // Random 0-5
										this.drawArc(x, y, w, h, s, fill, {css: color});
										break;
									//case 16: // Leaf
									case 'leaf':
										if(!s && s != 0) s = Math.floor(Math.random() * 2) + 4; // Random 4-5
										this.drawArc(x, y, w, h, s, fill, {css: color});
										break;
									//case 32: // Shape
									//case 'arrow':
									//case 64:
									//case 'stripes':
									default:
										this.drawShape(x, y, w, h, s, fill, {css: color}, r);
										break;
								}
							},
							getColor: function() {
								var idx = Math.floor(Math.random() * this.config.colors.length);
								var hex = this.config.colors[idx]; //'#ff0000';
								
								if(this.config.isNoFade) return hex;
							
								if(idx == 0 || 1) {
								
									return '#' + omnia.tools.color.mixHex(hex, this.config.backcolor || '#ffffff', Math.random() * 100);				
								
									//var rgb = omnia.tools.color.hexToRgb(hex);
									//var hsl = omnia.tools.color.rgbToHsl(rgb.r, rgb.g, rgb.b);
								
									//return 'hsl(' + Math.round(hsl.h * 360) + ', ' + Math.round(hsl.s * 100) + '%, ' + Math.round((Math.random() * (1 - hsl.l) + hsl.l) * 100) + '%)';
								}
								
								return hex;
								//return this.config.colors[Math.floor(Math.random() * this.config.colors.length)];
							},
							setConfig: function(config) {
								var presets = ox.ui.pattern.handler.presets;
								
								if(!config) {
									config = ox.copy(omnia.tools.array.randomProperty(presets.pattern));
								}
								
								if(typeof config == 'string') {
									config = ox.copy(presets.pattern[config]);
								}
								
								switch(typeof config.colors) {
									case 'number':
										var n = config.colors;
										config.colors = ox.copy(this.args.isNoColor ? presets.nocolor : omnia.tools.array.randomProperty(presets.colors));
										if(n < config.colors.length) config.colors = config.colors.slice(0, n);
										break;
									case 'string':
										if(presets.colors[config.colors]) config.colors = presets.colors[config.colors];
										else config.colors = ox.copy(omnia.tools.array.randomProperty(presets.colors));
										break;
									case 'object':
										if(!config.colors[0]) {
											var c = config.colors.splice(1);
											config.colors = [ox.copy(this.args.isNoColor ? presets.nocolor : omnia.tools.array.randomProperty(presets.colors))[0]].concat(c);
										}
										break;
									default:
										config.colors = ox.copy(this.args.isNoColor ? presets.nocolor : omnia.tools.array.randomProperty(presets.colors));
										break;
								}
								
								if(config.backcolor && typeof config.backcolor == 'number') {
									config.backcolor = config.colors[0];
									config.colors = config.colors.slice(1);
								}
								if(this.args.isNoColor) config.backcolor = '#eff2f5';
								
						//log('#space1 '+config.space)		
								this.config = {
									shapes: config.shapes || ox.ui.pattern.handler.RECT + ox.ui.pattern.handler.TRIANGLE + ox.ui.pattern.handler.ARC,
									block: config.block || 100,
									density: config.density !== undefined ? config.density : 1, // Density of core blocks (keep holes)
									split: config.split !== undefined ? config.split : .5, // Density of blocks that are split into second level
									back: config.back !== undefined ? config.back : 0, // Fill back in split blocks with random color too
									backcolor: config.backcolor, // Back color of full canvas
									space: config.space !== undefined ? (typeof config.space == 'string' ? config.space : (config.space < 1 ? (config.block || 100) * config.space : config.space)) : 0, // Percent of space around shape in block
									isNoFade: config.isNoFade !== undefined ? config.isNoFade : false, // Merge color of shapes with background
									colors: config.colors,
									cols: config.cols ? config.cols : null,
									rows: config.rows ? config.rows : null,
								};
								
								//log('#space2 ' + config.space)
							},
							shapesToArray: function(shapes) {
								if(typeof shapes == 'number') shapes = this.shapesNumToArray(shapes);
								if(typeof shapes == 'string') shapes = shapes.split(',');
							
								return shapes;
							},
							shapesNumToArray: function(n) {
								var s = [];
								for(var i = 0; i < 7; i++) {
									var a = Math.pow(2, i);
									if(n & a) s.push(this.shapeNum[a]);
								} 
								return s;//.join(',');
							},
							
							// Private functions - Draw elements
							
							drawCircle: function(cx, cy, r, fill, args) {
								if(!args) args = {};
								if(!args.svg) args.svg = this.svg;
								
								var element = $(document.createElementNS('http://www.w3.org/2000/svg', 'circle'));
								element.attr({cx: cx, cy: cy, r: r, fill: fill});
								if(args.css) element.addClass(args.css);
								args.svg.append(element);
							},
							drawRect: function(x, y, w, h, fill, args) {
								if(!args) args = {};
								if(!args.svg) args.svg = this.svg;
								
								var element = $(document.createElementNS('http://www.w3.org/2000/svg', 'rect'));
								element.attr({x: x, y: y, width: w, height: h, fill: fill});
								if(args.css) element.addClass(args.css);
								args.svg.append(element);
							},
							drawTriangle: function(x, y, w, h, d, fill, args) {
								if(!args) args = {};
								if(!args.svg) args.svg = this.svg;
								
								var element = $(document.createElementNS('http://www.w3.org/2000/svg', 'polygon'));
								var path = '';
								switch(d) {
									case 2:
										element.attr({points: [x + ',' + y, (x + w) + ',' + (y + h), x + ',' + (y + h)].join(' '), fill: fill});
										break;
									default:
										element.attr({points: [x + ',' + y, (x + w) + ',' + y, x + ',' + (y + h)].join(' '), fill: fill});
										break;
									case 1:
										element.attr({points: [x + ',' + y, (x + w) + ',' + y, (x + w) + ',' + (y + h)].join(' '), fill: fill});
										break;
									case 3:
										element.attr({points: [(x + w) + ',' + y, (x + w) + ',' + (y + h), x + ',' + (y + h)].join(' '), fill: fill});
										break;
								}
								if(args.css) element.addClass(args.css);
								args.svg.append(element);
							},
							drawArc: function(x, y, w, h, d, fill, args) {
								if(!args) args = {};
								if(!args.svg) args.svg = this.svg;
								
								var element = $(document.createElementNS('http://www.w3.org/2000/svg', 'path'));
								var path = '';
								
								var tl = x + ' ' + y;
								var tl25 = x + ' ' + (y + h * .25);
								var tl252 = (x + w * .25) + ' ' + y;
								var tr = (x + w) + ' ' + y;
								var tr25 = (x + w) + ' ' + (y + h * .25);
								var tr252 = (x + w * .75) + ' ' + y;
								var bl = x + ' ' + (y + h);
								var bl25 = (x + w * .25) + ' ' + (y + h);
								var bl252 = x + ' ' + (y + h * .75);
								var br = (x + w) + ' ' + (y + h);
								var br25 = (x + w * .75) + ' ' + (y + h);
								var br252 = (x + w) + ' ' + (y + h * .75);
								var a = ' A ' + w + ' ' + h;
								var a75 = ' A ' + (w * .75) + ' ' + (h * .75);
								
								switch(d) { 
									case 2:
										path = 'M ' + tl + a + ' 0 0 0 ' + br + ' L ' + tr; // Corner right top
										break;
									case 1:
										path = 'M ' + tl + a + ' 0 0 1 ' + br + ' L ' + bl; // Corner left bottom
										break;
									case 3:
										path = 'M ' + bl + a + ' 0 0 0 ' + tr + ' L ' + tl; // Corner left top
										break;
									default:
										path = 'M ' + bl + a + ' 0 0 1  ' + tr + ' L ' + br; // Corner right bottom
										break;
									case 6:
										path = 'M ' + bl + a + ' 0 0 1 ' + tr + ' L ' + tr25 + a75 + ' 0 0 0 ' + bl25; // Ring, corner right bottom
										break;
									case 7:
										path = 'M ' + tl + a + ' 0 0 1 ' + br + ' L ' + br25 + a75 + ' 0 0 0 ' + tl25; // Ring, corner left bottom
										break;
									case 8:
										path = 'M ' + tl + a + ' 0 0 0 ' + br + ' L ' + br252 + a75 + ' 0 0 1 ' + tl252; // Ring, corner right top
										break;
									case 9:
										path = 'M ' + bl + a + ' 0 0 0 ' + tr + ' L ' + tr252 + a75 + ' 0 0 1 ' + bl252; // Ring, corner left top
										break;
									case 4:
										path = 'M ' + tl + a + ' 0 0 1  ' + br + ' L ' + tl + a + ' 0 0 0 ' + br; // Leaf backslash
										break;
									case 5:
										path = 'M ' + bl + a + ' 0 0 1  ' + tr + ' L ' + bl + a + ' 0 0 0 ' + tr; // Leaf slash
										break;
								}
								element.attr({d: path, fill: fill});
								if(args.css) element.addClass(args.css);
								args.svg.append(element);
							},
							drawShape: function(x, y, w, h, d, fill, args, r) {
								//var shapes = {
									//'32': /*'arrow'*/ '<path d="M19.9981 0.00193429L3.72652 -7.68637e-07L8.4784 4.75382L0 13.2345L6.76585 20L15.2462 11.5208L20 16.2746L19.9981 0.00193429Z" fill="black"/>',
									//'64': /*'stripes'*/ '<path d="M5 0H10L5 5L0 10V5L5 0Z" fill="black"/><path d="M20 15V20H15L20 15Z" fill="black"/><path d="M20 5V10L15 15L10 20H5L20 5Z" fill="black"/><path d="M15 0H20L5 15.0002L0 20.0002V15.0002L15 0Z" fill="black"/>',
								//};
								
								if(!args) args = {};
								if(!args.svg) args.svg = this.svg;
								
								var g = $(document.createElementNS('http://www.w3.org/2000/svg', 'g'));
								
								//var xml = jQuery.parseXML('<circle cx="10" cy="10" r="10" fill="#26588a"/>');
								//g.append(xml.documentElement);

								g.attr('transform', 'translate(' + x + ',' + y + ') scale(' + (w / 20) + ') rotate(' + (d * 90) + ')');
								//g.html('<circle cx="10" cy="10" r="10" fill="' + fill + '"/>');
								
								var shape = this.shapes[r]; //shapes[r];
								if(!shape) {log(r); return;}
								
								g.html(shape.split('black').join(fill));
								
								if(args.css) element.addClass(args.css);
								args.svg.append(g);
							},
							
							svgNode: function(tag) {
								return $(document.createElementNS('http://www.w3.org/2000/svg', tag));
							},
						},
						html: {t: 'div', css: '_ox-resize rel flex-center'},
					},
					crosspromobanner: {
					},
					crosspromopopup: {
					},
					buymeacoffee: {
					},
					patternhistory: {
					},
				},
				edit: {
					palettesearch: {
					},
					patterneditor: {
					},
					patterneditor2: {
					},
				},
				pages: {
					patternpad: {
					},
					patternpadeditor: {
					},
				},
				pagesstatic: {
					patternpadhome: {
					},
					patternpadlegal: {
					},
					
				},
			},
			calendar: {
				content: {
					stand: {
						docu: {
						},
						html: {
						},
					},
					datetag: {
						docu: {
						},
						data: {
						},
						handler: {
						},
						//editor: 'omnia.ui.datepickerpanel',
						html: {
						},
					},
					datespan: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					calendar: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					calendar2: {
						docu: {
						},
						styles: {
						},
						handler: {
						},
						html: {
						},
					},
					calendarviewer: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					calendarviewer2: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
				editform: {
					monthpicker: {
						docu: {
						},
						html: {
						},
					},
					timepicker: {
						docu: {
						},
						html: {
						},
					},
					datepickerpanel: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					datepicker: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			clock: {
				components: {
					wheel: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					countdown: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					worldclock: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			travel: {
				ibe: {
					hoteltitle: {
					},
					hotelprice: {
					},
					hotel: {
					},
					hotelslist: {
					},
					subregion: {
					},
					region: {
					},
					regionslist: {
					},
					tripsearch: {
					},
					tripsearchform: {
					},
					tripsearchframe: {
					},
					triplistheader: {
					},
				},
			},
			tv: {
				content: {
					artwork: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					channel4: {
						docu: {
						},
						meta: {
							banner: {t: 'div', pcss: 'ox-card-node ox-node-back', css: 'ox-font-headline ox-h1 flex-center', style: {'width': 250, 'height': 100}, c: [
								{t: 'img', src: 'https://haustein.info/omnia/images/all4.svg', css: '', style: 'height:60%'},
							]},
						},
						handler: {
						},
						editor: 'omnia.ui.channel4.handler',
						data: {
							nodeToRender: function(v, args) {
								// Auto open
								//if(args && args.node && !omnia.ui.channel4.data.wasOpen) ox.el.onRefresh(function() { args.node.edit(); omnia.ui.channel4.data.wasOpen = true; });
								return omnia.ui.channel4.meta.banner;
							},
						},
						html: {
						},
					},
					mediathek: {
						docu: {
						},
						meta: {
							banner: {t: 'div', pcss: 'ox-card-node ox-node-back', css: 'ox-font-headline ox-h1 flex-center semibold', style: {'width': 250, 'height': 100}, text: 'Mediathek'},
						},
						handler: {
						},
						html: {
						},
					},
				},		
			},
			ebook: {
				ebook: {
					book: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					boox: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					ebook1: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					ebook: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					shelf: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
					pdfviewer: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			game: {
				fidget: {
					spinable: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			stride: {
				frame: {
					stride: {
					},
				},
			},
			crypt: {
				edit: {
					encryper: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			debug: {
				content: {
					colorsample: {
					},
					colsgrid: {
						
						docu: {
						},
						styles: {
						},
						html: {
						},

					},
					nodetest: {
					},
					obj: {
					},
					omniadocu: {
					},
					omniadocu2: {
					},
					valuetile: {
					},
				},
				tools: {
					apitester: {
					},
					appspaceviewer: {
					},
					elementsviewer: {
					},
					fontchoise: {
					},
					logviewer: {
					},
					uiviewer: {
					},
					uiviewer2: {
					},
					storageviewer: {
					},
					system: {
					},
					linkpage: {
					},
					benchmark: {
					},
					uitester: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				},
			},
			template: {
				comps: {
					template: {
						docu: {
						},
						handler: {
						},
						html: {
						},
					},
				}
			},
		},
		
		// Other

		backlog: {
			docu: {
			},
			handler: {
				id: null,
				args: null,
				root: null,
				data: null,
				
				lists: [],
				
				init: function(args) {
					log('omnia.ui.backlog.handler.init');

					this.args = args;
					this.root = args.root;
					this.id = ox.id();
					
					this.parse(args.items);
					this.render(true);
				},
				
				// UI
				
				getRoot: function() {
					return this.root;
				},
				render: function(isInitial) {
					log('omnia.ui.backlog.handler.render');
					var me = this;
					
					if(isInitial) ox.el.get('refresh', this.root).on(ox.b.CLICK, function() { me.refresh(); });
					
					// Redraw
					$.each(this.lists, function(i, list) { if(list) list.destroy(); });
					this.lists = [];
					
					var progElem = ox.el.get('programs', this.root);
					var body = ox.el.get('.ox-id-body-epics > .ox-id-frame', this.root);

					progElem.html('');
					body.html('');

					$.each(this.data.programs, function(id, prog) {
						log('omnia.ui.backlog.handler.render: Program, id = ' + id);
	
						// Programs
						//ox.node({oid: 'button', css: '_ox-white ox-inline mr5 ox-medium', label: prog.title}, progElem);
		
						// Lists
						var label = prog.title;
						if(prog.nodeId && me.args.items[prog.nodeId]) {
							var render = omnia.ui.text.markup.render(me.args.items[prog.nodeId].v.split('#program-id-' + id).join(''));
							label = render.html;
						}
						ox.node({oid: 'list', css: 'ox-grid ox-drag no-crop mt10 mb30', style: {'_max-width': 400}, onReady: function(elem, list) { me.lists.push(list); }, title: {css: 'ox-h3 semibold', html: label}, args: {
							gridInfo: {gap: 10},
							data: prog.epics,
							getItem: function(idx, epicId) { return me.getEpicItem(idx, epicId); },
						}}, body);
					});
					
					//ox.node({oid: 'obj', args: {obj: this.data}}, body);
				},
				getEpicItem: function(idx, epicId) {
					log('omnia.ui.backlog.handler.getEpicItem: epicId = ' + epicId);
					var me = this;
					
					var epic = this.data.epics[epicId];
					var path = this.args.map ? this.args.map.getFamily2(epic.nodeId, 'root') : null;

					var args = {};
					return {oid: 'frame2', css: 'ox-border _ox-tile ox-interactive font br2 ox-content p0 flex-center', style: {'_border-left-width': 5}, c: [
						{oid: 'bar2', css: 'col-white-back ox-stretch', c: [
							{oid: 'panel', css: '_ox-nohighlight ox-left ox-font-headline ox-h3 semibold ox-id-panel-epic-' + epicId, label: epic.title, click: function(e, elem) { elem.closest('section').toggleClass('ox-interactive'); }},
							{
								oid: 'dropdown', 
								css: 'flex-fix', 
								args: {
									isMenu: true,
									items: [
										{t: 'div', css: 'col-medium-4 ox-font-12 pl15 pr15 font ox-border-bottom', html: me.getPathHtml(path)},
										{oid: 'button', css: 'ox-id-close _ox-inline', label: '#edit-button', click: function(e, elem) { 
											epic.node.edit(true, null, null, function() {
												/*if(args.nodelistitem) {
													args.nodelistitem.setNodeValue(me.removeTags(me.args.items[epic.nodeId].v, story));
													args.nodelistitem.update(); 
												}*/
											}); 
										}},
										
									],
								},
								onReady: function(elem, nodelistitem) { args.nodelistitem = nodelistitem; },
							},
							//{oid: 'sep', css: 'ox-inline flex-fix'},
							{oid: 'buttonicon', css: 'flex-fix', icon: 'fa fa-grip-lines'},
						]},
						{oid: 'frame2', css: 'ox-col-ui-dialog-0-back ox-id-panel-epic-' + epicId, style: 'margin-top:1px', c: [
							/*!this.args.items[epic.nodeId] ? null : {
								oid: 'nodelistitem', 
								css: 'p15 pt10 _col-white-back _ox-border-bottom m0' + (ox.pf.isDesktop ? ' _ox-pathhover' : ''), 
								style: {'min-height': 45, 'margin-left': 30},
								args: {node: {v: this.args.items[epic.nodeId].v.split('#epic-id-' + epicId).join('') }, path: path},
							},*/
							{oid: 'frame2', css: 'ox-vert', c: [
								{oid: 'list', css: 'vtop ox-grid ox-drag pr15 mb15 mt15', style: {'width': '25%', 'margin-left': 30, 'min-height': 45, 'min-width': 200}, title: {css: 'ox-h4', text: 'Backlog'}, body: {style: {'padding-bottom': 30}}, args: {
									gridInfo: {gap: 10},
								 	data: epic.stories,
								 	connect: 'ox-epic-' + me.id,
									getItem: function(idx, storyId) { return me.getStoryItem(idx, storyId); },
									dragAppend: me.root,
								}},
								{oid: 'list', css: 'vtop ox-grid ox-drag pl15 pr15 mb15 mt15 ox-border-left', style: {'width': '25%', 'min-height': 45, 'min-width': 200}, title: {css: 'ox-h4', text: 'In Progress'}, body: {style: {'padding-bottom': 30}}, args: {
									gridInfo: {gap: 10},
								 	connect: 'ox-epic-' + me.id,
									getItem: function(idx, storyId) { return me.getStoryItem(idx, storyId); },
									dragAppend: me.root,
								}},
								{oid: 'list', css: 'vtop ox-grid ox-drag pl15 pr15 mb15 mt15 ox-border-left', style: {'width': '25%', 'min-height': 45, 'min-width': 200}, title: {css: 'ox-h4', text: 'Test'}, body: {style: {'padding-bottom': 30}}, args: {
									gridInfo: {gap: 10},
								 	connect: 'ox-epic-' + me.id,
									getItem: function(idx, storyId) { return me.getStoryItem(idx, storyId); },
									dragAppend: me.root,
								}},
								{oid: 'list', css: 'vtop ox-grid ox-drag pl15 pr15 mb15 mt15 mr15 ox-border-left', style: {'width': '25%', 'min-height': 45, 'min-width': 200}, title: {css: 'ox-h4', text: 'Done'}, body: {style: {'padding-bottom': 30}}, args: {
									gridInfo: {gap: 10},
								 	connect: 'ox-epic-' + me.id,
									getItem: function(idx, storyId) { return me.getStoryItem(idx, storyId); },
									dragAppend: me.root,
								}},
							]},
						]},
					]};
				},
				getStoryItem: function(idx, storyId) {
					var me = this;
					var story = this.data.stories[storyId];
					var path = this.args.map ? this.args.map.getFamily2(story.nodeId, 'root') : null;
					
					var args = {};
					return !this.args.items[story.nodeId] ? null : {t: 'div', css: 'flex-fix', c: [
						{
							oid: 'nodelistitem', 
							css: 'ox-tile ox-interactive br2 col-white-back _p10 font ox-expand ' + (ox.pf.isDesktop ? ' _ox-pathhover' : ''), 
							args: {
								node: {v: me.removeTags(me.args.items[story.nodeId].v, story)}, 
								path: path,
								style: {'border-left': '5px solid #b4261a !important'},
								actions: !story.node ? null : [
									
									{t: 'div', css: 'col-medium-4 ox-font-12 pl15 pr15 font ox-border-bottom', html: me.getPathHtml(path)},
									{oid: 'button', css: 'ox-id-close _ox-inline', label: '#edit-button', click: function(e, elem) { 
										story.node.edit(true, null, null, function() {
											if(args.nodelistitem) {
												args.nodelistitem.setNodeValue(me.removeTags(me.args.items[story.nodeId].v, story));
												args.nodelistitem.update(); 
											}
										}); 
									}},
								],
							},
							onReady: function(elem, nodelistitem) { args.nodelistitem = nodelistitem; },
						},
					]};
				},
				getPathHtml: function(path) {
					var f = '';
					$.each(path, function(i, p) {
						if(p.node) p = p.node;
						if(p.v) {
							var renderP = ox.ui.text.markup.render(p.v, {textOnly: true});
							f = (renderP.text || '...') + '<i class="fa fa-caret-right ml5 mr5"></i>' + f; //f.unshift({t: 'span', text: p.v + ' - '});
						}
					});	
					return f;
				},
				refresh: function() {
					this.parse();
					this.render();
				},
				
				// Data
				
				parse: function(items) {
					log('omnia.ui.backlog.handler.parse');

					var me = this;
					if(!items) items = this.args.items;
					
					var data = {
						programs: {},
						epics: {},
						stories: {},
						tasks: {},
					};
					
					$.each(items, function(i, item) {
						if(!item.v) return;
						
						// Register
						if(item.v.indexOf('#program-id-') >= 0) { // Program
							
							var id = ox.str.getInfoFromTag(item.v, '#program-id-');
							if(!data.programs[id]) data.programs[id] = {epics: []};
							data.programs[id].title = me.getText(item);
							data.programs[id].nodeId = item.id;
							if(me.args.map) data.programs[id].node = me.args.map.getNodeById(item.id);
							
						} else if(item.v.indexOf('#epic-id-') >= 0) { // Epic
							
							var id = ox.str.getInfoFromTag(item.v, '#epic-id-');
							if(!data.epics[id]) data.epics[id] = {stories: []};
							data.epics[id].title = me.getText(item);
							data.epics[id].nodeId = item.id;
							if(me.args.map) data.epics[id].node = me.args.map.getNodeById(item.id);
							
						} else if(item.v.indexOf('#story') >= 0) { // Story
							
							data.stories[item.id] = {nodeId: item.id, title: me.getText(item)};
							if(me.args.map) data.stories[item.id].node = me.args.map.getNodeById(item.id);

						}
						
						if(item.v.indexOf('#program-') >= 0 && item.v.indexOf('#program-id-') == -1) {
							if(item.v.indexOf('#epic-id-') >= 0) { // Epic - Program link
								var epicId = ox.str.getInfoFromTag(item.v, '#epic-id-');
								var progId = ox.str.getInfoFromTag(item.v, '#program-');
								
								if(!data.programs[progId]) data.programs[progId] = {epics: []};
								if(!data.programs[progId].epics) data.programs[progId].epics = [];
								data.programs[progId].epics.push(epicId);
								
								if(!data.epics[epicId]) data.epics[epicId] = {stories: []};
								data.epics[epicId].program = progId;
							} else if(item.v.indexOf('#story') >= 0) { // Story - Program link
								var progId = ox.str.getInfoFromTag(item.v, '#program-');
								var epicId = progId + '-none';
								
								if(!data.programs[progId]) data.programs[progId] = {epics: []};
								if(!data.programs[progId].epics) data.programs[progId].epics = [];
								if(!data.programs[progId].epics[epicId]) data.programs[progId].epics.push(epicId);

								if(!data.epics[epicId]) data.epics[epicId] = {title: '#none', stories: []};
								data.epics[epicId].program = progId;
								data.epics[epicId].stories.push(item.id);
								
								data.stories[item.id].epic = epicId;
							}
						}

						if(item.v.indexOf('#epic-') >= 0 && item.v.indexOf('#epic-id-') == -1) { // Story - Epic link

							var id = ox.str.getInfoFromTag(item.v, '#epic-');
							
							if(!data.epics[id]) data.epics[id] = {stories: []};
							if(!data.epics[id].stories) data.epics[id].stories = [];
							data.epics[id].stories.push(item.id);
							
							if(data.stories[item.id]) data.stories[item.id].epic = id;
						}
					});
					
					var noEpics = {title: ox.tx('none'), isNone: true, stories: []};
					$.each(data.stories, function(id, story) { if(!story.epic) noEpics.stories.push(id); });
					if(noEpics.stories.length) data.epics['none'] = noEpics;

					var noProgram = {title: ox.tx('none'), isNone: true, epics: []};
					$.each(data.epics, function(id, epic) { if(!epic.program) noProgram.epics.push(id); });
					if(noProgram.epics.length) data.programs['none'] = noProgram;
					
					//log('#omnia.ui.backlog.handler.parse: data = ', data);
					this.data = data;
				},
				getText: function(item) {
					var render = omnia.ui.text.markup.render(item.v);
					return render.text;
				},
				removeTags: function(v, story) {
					return v.split('#story').join('').split('#epic-' + story.epic).join('');
				},
			},
			html: {oid: 'frame2', css: 'ox-backlog ox-col-ui-dialog-1-back', c: [
				{oid: 'bar2', css: 'ox-id-controls ox-overlay ox-flex ox-right _ox-hidden', c: [
					{oid: 'buttonicon', css: 'ox-id-refresh ox-medium', icon: 'fa fa-redo-alt'},
					//{oid: 'sep', css: 'ox-inline'},
					{t: 'div', css: 'ox-id-programs'},
				]},
				{oid: 'frame2', css: 'no-crop ox-content mt60', c: [
					{oid: 'strip', css: 'ox-id-body-epics _ox-narrow'},
				]},
			]},
			data: {
				nodeToRender: function(v, args) {
					log('omnia.ui.backlog.data.nodeToRender: v = ' + v);

					
					var r = {
						//args: args,
						map: args.map,
						items: args.map.items,
						//data: args.node.data,
					};
					
					return {t: 'span', css: 'col-blue font-code', html: '<i class="fas fa-stream mr5"></i>Backlog<i class="fa fa-arrow-right ml5 ox-font-9-i"></i>', onProcess: function() { 
						if(!args || !args.map) return;
						
						var subView = {oid: 'backlog', args: r};
						args.map.subTab({cfg: {oid: 'frame2', css: '_col-white-back _ox-dark-col-none-back ', c: subView}, css: '_col-white-back', label: 'Backlog'});
					}};
					
					return [
						//{oid: 'obj', args: {obj: r}},
						{oid: 'backlog', args: r},
					];
				},
			},
		},
		buttonios: {
			docu: {},
			styles: {
			},
			html: {t: 'div', css: 'ox-button-ios', c: [
				{t: 'button', css: 'ox-button ox-id-label ox-free font', onRendered: 'omnia.ui.button.events.init'},
				{t: 'div', css: 'ox-id-content font'},
				{t: 'i', css: 'ox-id-arrow ma', text: 'keyboard_arrow_right'}
			]},
		}, // * 
		imagetile: {
			docu: {},
			html: {t: 'div', css: 'inline ox-tile ox-radius ox-interactive hand mr10 mb10 backcover'}
		}, // * 
		dialog2: {
			docu: {},
			html: {oid: 'frame2', css: 'ox-dialog ox-overlay-content', style: {'max-width': '100%'}, c: [
				{oid: 'bar2', css: 'ox-overlay ox-flex ox-right ox-id-close-bar', c: [
					{oid: 'button', css: 'ox-id-close ox-medium', label: '<i class="ma ma-18">close</i>'},
				]},
				{oid: 'bar2', css: 'ox-id-caption col-highlight ox-line ox-split'},
				{t: 'div', css: 'ox-childs ox-id-childs ox-id-body col-light-35-back'},
				{oid: 'bar2', css: 'ox-end ox-split ox-id-actions ox-line ox-actions', c: [
				]},
			]},
		}, // *
		filename: {
			docu: {},
			html: {oid: 'bar2', css: 'col-light-35-back ox-center cropped', c: [
				{oid: 'label', css: 'pr15', text: '#filename'},
				{oid: 'input', css: 'ox-inline col-white-back bold ox-id-focus ox-id-filename ox-id-value', style: {'width': '400px'}, placeholder: function() { return omnia.tools.t('filename') }},
			]},
		}, // *
		comment: {
			data: {
				defaultData: {oid: 'comment', v: ''},
			},
		},
		film: {
			docu: {},
			editor: {
				overlay: null,
				popup: null,
				input: null,
				list: null,
				args: null,
				
				init: function(args) {
					this.args = args;
					
					var me = this;
					var details = args.data.v && args.data.v.substr(0, 6) == '#film-' ? args.data.v.substr(6) : null;
					
					omnia.ui.overlay.show({
						delay: true,
						onClose: args.onClose ? function() { args.onClose(); } : null,
						onRendered: function(overlay) { me.overlay = overlay; },
						isScroll: true,
						frame: {
							oid: 'frame2', css: 'ox-overlay-content _ox-content w100 h100 ox-noani ox-nosafe col-light-35-back', onRendered: function(elem) { me.popup = elem; }, c: [
								{oid: 'bar2', css: 'ox-overlay ox-flex ox-right ox-id-close-bar', c: [
									{oid: 'button', css: 'ox-id-close ox-medium', label: '<i class="ma ma-18">close</i>'},
								]},
								{oid: 'searchframe', input: {placeholder: 'Title'}, onRendered: function(elem) {
									me.onInputRendered(elem);
								}},
								{oid: 'bar2', css: 'ox-end ox-line ox-split ox-id-actions ox-actions col-white-back ox-bottom-safe', c: [
									{oid: 'button', css: 'ox-id-close ox-inline ox-alone', label: '#cancel'},
								]},
							],
						},
						/*frame: {
							oid: 'popup',
							css: 'ox-overlay-content ox-content ox-noani ox-nosafe w100 h100',
							c: [
								{oid: 'frame2', css: 'w100 h100', c: [
									{oid: 'bar2', css: 'ox-flat ox-line col-highlight _ox-p15 ox-notabborder scrollable ox-id-bar-core ox-top-safe', c: [
										{oid: 'tabstatic', css: 'ox-id-tab-select ox-breadcrumb', label: '#search'},
									]},
									{oid: 'frame2', css: 'ox-id-tab-select ox-child w100 h100', _style: {'width': '800px', 'height': '500px', 'max-height': '100%', 'max-width': '100%'}, c: [
										{oid: 'searchframe', input: {placeholder: 'Title'}, onRendered: function(elem) {
											var input = me.input = $(elem.find('.ox-id-input'));
											input.on('input', function() { me.search({
												q: input[0].value
											}); });
											
											me.list = $(elem.find('.ox-id-list'));
										}},
									]},
								]},
							],
							actions: [
								{oid: 'button', css: 'ox-hidden ox-inline ox-alone ox-id-action col-red ox-green ox-id-savebutton', label: '#ok-save-button', click: function() { me.close(); }},
							],
						},*/
					});	
				},
				
				onInputRendered: function(elem) {
					var me = this;
					var input = me.input = $(elem.find('.ox-id-input'));
					input.on('input', function() { me.search({ q: input[0].value }); });
					input.on('focus', function() { $(me.popup.find('.ox-id-actions')).removeClass('ox-bottom-safe'); });
					input.on('blur', function() { $(me.popup.find('.ox-id-actions')).addClass('ox-bottom-safe'); });
					
					me.list = $(elem.find('.ox-id-list'));
					me.list.on('touchstart', function() { input.blur(); });
					input.click();
				},
				close: function(item) {
					var args = this.args;
					args.data.v = '#film-title=' + encodeURIComponent(item.Title) + '&time=' + item.Year + '&poster=' + encodeURIComponent(item.Poster);
	
					this.overlay.close();
					if(args.onClose) args.onClose(true);
				},
				search: function(args) {
					args.q = args.q.trim();
					if(args.q.length < 4) return;

					var me = this;
					args.id = this.searchId = omnia.tools.getUniqueId();

					setTimeout(function() {
						if(args.id == me.searchId) {
							log('omnia.ui.film.handler.search: q = ' + args.q);

							omnia.tools.net.get({
								cache: true,
								param: {
									'cmd': 'proxy',
									'api': 'omdbapi',
									'url': 'plot=full&s=' + encodeURIComponent(args.q),
								}, 
								onResponse: function(args2) {
									log(args2);
									if(args2.data) me.searchlist(args2.data);
								},
							});					
						}
					}, 200);
				},
				searchlist: function(data) {
					if(!data || !data.Search) return;

					var me = this;
					var cfg = [];
					$.each(data.Search, function(idx, item) {
						cfg.push({
							oid: 'movieitemsmall',
							image: item.Poster ? {style: {'background-image': 'url(' + item.Poster + ')'}} : null,
							headline: item.Title,
							time: item.Year,
							css: 'ox-id-track-oe-t hand pb15 pl15',
							style: {'width': (100 / Math.floor(me.list.width() / 150)) + '%'},
							click: function() { me.close(item); },
						})
					});
					
					this.list.html('');
					omnia.tools.html.node(cfg, this.list);
				},
				details: function() {},
			},
			data: {
				nodeToRender: function(v, args) {
					if(!v || v.substr(0, 6) != '#film-') return v;
					var detailsStr = v.substr(6).trim();
					var details = omnia.tools.string.urlStringToObject(detailsStr);
	
					return {
						oid: 'moveitemsmallflat',
						image: details.poster ? {style: {'background-image': 'url(' + decodeURIComponent(details.poster) + ')'}} : null,
						headline: decodeURIComponent(details.title),
						time: decodeURIComponent(details.time),
						//style: {'width': '150px'},
					};
				},
			},
		},
		moveitemsmallflat: {
			docu: {},
			html: {t: 'div', css: 'rel _col-white-back flex flex-row cropped', style: 'height:100px;', c: [
				{t: 'div', css: 'ox-id-image backcover col-light-3-back cropped', style: {'width': '90px'}},
				{t: 'div', css: 'p15 pt10 pb10 cropped', style: {'width': '180px'}, c: [
					{oid: 'text', css: 'ox-id-headline ox-id-title bold cropped hyphens hleft wrap', style: 'word-break:hyphenate !important;'},
					{oid: 'text', css: 'ox-id-time pb10 col-medium-4 hleft wrap'},
				]},
			]},
		},
		movieitemsmall: {
			docu: {},
			html: {t: 'div', css: 'rel inline vtop w100', _style: 'padding:0 0 15px 15px;', c: [
				{t: 'div', css: 'rel ox-tile _ox-interactive br4 col-white-back w100', c: [
					{t: 'img', css: 'ox-id-provider col-white-back abs br2 ox-shadow-1', style: {'width': '40px', 'top': '170px', 'left': 'calc(100% - 50px)'}, onerror: 'this.style.display = "none"'},
					{t: 'div', css: 'ox-id-image w100 mb15 backcover col-light-3-back', style: {'height': '200px', 'border-radius': '4px 4px 0 0'}},
					{t: 'a', target: '_blank', css: 'ox-id-link ox-id-headline ox-id-title w100 cropped hyphens block ox-font-headline ox-h4 semibold pt5 pb10 pl10 pr10', style: 'word-break:hyphenate;'},
					//{oid: 'text', css: 'pl10 pr10 ox-id-lead pb10 hyphens w100 cropped', style: {'font-size': '12px', 'line-height': '16px', 'word-break': 'hyphenate'}},
					{oid: 'text', css: 'ox-id-cinema pt10 pl10 pr10 bold _col-light-0 ox-border-top', style: {'border-width': '.5px'}},
					{oid: 'text', css: 'ox-id-time pb10 pl10 pr10 _col-light-0'},
				]},
			]},
		},
		previewsquare: {
			docu: {
			},
			html: {t: 'div', css: 'rel flex _col-white-back _br3 _ox-border cropped', style: 'width:300px;height:200px;flex-direction:column', c: [
				{t: 'div', css: 'ox-id-image backcover col-light-3-back cropped', style: {'flex': 2, '_border-top-left-radius': '2px', '_border-top-right-radius': '2px'}},
				{t: 'div', css: '', style: {'flex': '1'}, c: [
					{oid: 'text', css: 'ox-id-headline ox-id-title pt10 pl15 pr15 bold cropped hyphens hleft wrap', style: 'word-break:hyphenate !important;'},
					{oid: 'text', css: 'ox-id-desc pb10 pl15 pr15 col-medium-4 hleft wrap'},
				]},
			]},
		},
		shore: {
			docu: {
			},
			_html: {oid: 'frame2', css: 'ox-vert', c: [
				{oid: 'bar2', css: 'ox-vert ox-dark ox-flat ox-split ox-vert-center', style: {'background': '#00d0be', width: '55px'}, c: [
					//{oid: 'tabstatic', css: 'ox-id-tab-dashboard ox-font-16', style: {'border-bottom': '1px solid rgba(255, 255, 255, .7)'}, label: '<i class="fa fa-search"></i>'},
					{oid: 'buttonicon', icon: 'fa fa-angle-right'},
					{oid: 'tabstatic', css: 'ox-id-tab-dashboard ox-font-16', label: '<i class="fa fa-lightbulb"></i>', style: {'margin-top': '0px'}},
					{oid: 'tabstatic', css: 'ox-id-tab-company ox-font-16 ox-active', label: '<i class="fa fa-tools"></i>'},
					{oid: 'tabstatic', css: 'ox-id-tab-calendar ox-font-16', label: '<i class="fa fa-calendar"></i>'},
					{oid: 'tabstatic', css: 'ox-id-tab-payment ox-font-16', label: '<i class="fa fa-credit-card"></i>'},
					{oid: 'tabstatic', css: 'ox-id-tab-clients ox-font-16', label: '<i class="fa fa-user-friends"></i>'},
					{oid: 'tabstatic', css: 'ox-id-tab-feedback ox-font-16', label: '<i class="fa fa-comment-alt"></i>'},
					{oid: 'tabstatic', css: 'ox-id-tab-statistics ox-font-16', label: '<i class="fa fa-chart-line"></i>'},
					{oid: 'tabstatic', css: 'ox-id-tab-more', style: {'border-top': '1px solid rgba(255, 255, 255, .7)'}, label: '<i class="fa fa-grip-horizontal" style="font-size:18px"></i>'},

					{oid: 'tabstatic', css: 'ox-id-tab-search ox-font-16', label: '<i class="fa fa-search"></i>', style: {'margin-top': 100}},
					{oid: 'tabstatic', css: 'ox-id-tab-user ox-font-16', label: '<i class="fa fa-user"></i>'},
				]},
				{oid: 'frame2', c: [
					{oid: 'bar2', css: 'ox-line ox-split', c: [
						{t: 'div', c: [
							{t: 'img', src: 'https://assets-cdn.shore.com/app-shell/master/01335/images/logo-shore.png', css: 'm15 mr30', style: {'height': '20px', 'width': 'auto', 'margin-top': '12px'}},
							{oid: 'sep', css: 'ox-inline'},
							{oid: 'tabstatic', css: 'ox-breadcrumb col-black-i', label: 'Unternehmen'},
							{oid: 'tabstatic', css: 'ox-breadcrumb ox-active col-black-i', label: 'Mitarbeiter'},
							//{oid: 'sep', css: 'ox-inline'},
						]},
						{oid: 'button', css: 'ox-inline', label: '<i class="fa fa-plus ox-before"></i>Neuer Mitarbeiter', style: {'color': 'white', 'background': '#00d0be'}},
						{oid: 'searchfield', css: 'ox-border-left', placeholder: 'Suchen'},
					]},
					{oid: 'frame2', css: 'm30', c: [
						/*{oid: 'table2', css: 'col-args: {table: [
							['', 'Name', 'E-Mail', 'Zugang', 'Telefonnummer', 'Zugang'],
							//['<i class="fa fa-grip-lines"></i>', 'John Smith', 'john.smith@company.com', '', ''],
						]}},*/
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
					]}
				]},
			]},
			html: {oid: 'frame2', css: 'ox-vert', c: [
				{oid: 'frame2', c: [
					{oid: 'bar2', css: 'ox-line ox-split', c: [
						{t: 'div', c: [
							{oid: 'buttonicon', icon: 'fa fa-bars pl10 pr10', css: 'col-white', style: {'background': '#00d0be'}},
							{t: 'img', src: 'https://assets-cdn.shore.com/app-shell/master/01335/images/logo-shore.png', css: 'm15 mr30', style: {'height': '20px', 'width': 'auto', 'margin-top': '12px'}},
						]},	
						{oid: 'searchfield', css: 'ox-border-left', placeholder: 'Suchen'},
					]},
					{oid: 'bar2', css: 'ox-line', c: [
						{oid: 'label', css: 'ml15 mr15', text: 'Kunden'},
						{oid: 'sep'},
						{oid: 'button', css: 'ox-inline br4 ox-alone', label: '<i class="fa fa-plus ox-before"></i>Neuer Kunde', style: {'color': 'white', 'background': '#00d0be'}, click: function() {
							ox.ov.show({
								blend: 0,
								frame: {oid: 'dialog', css: '', style: {'width': '50%', 'height': '30%'}, title: 'Neuer Kunde', cancel: 'Abbrechen', c: [
									{t: 'div', css: 'br4 col-light-3-back mb5 mt30 ml30 mr30', style: 'height:30px'},
									{t: 'div', css: 'br4 col-light-3-back mb5 ml30 mr30', style: 'height:30px'},
									{t: 'div', css: 'br4 col-light-3-back mb5 ml30 mr30', style: 'height:30px'},
									{t: 'div', css: 'br4 col-light-3-back mb5 ml30 mr30', style: 'height:30px'},
									{t: 'div', css: 'br4 col-light-3-back mb5 ml30 mr30', style: 'height:30px'},
								], actions: [{oid: 'button', css: 'ox-green br4 ox-inline ox-alone', label: 'Speichern', style: {'background-color': '#00d0be'}}]},
							});
						}},
						{oid: 'button', css: 'ox-inline br4 ox-alone', label: 'Gruppen verwalten', style: {'color': '#00d0be', 'border': '1px solid #00d0be'}},
						{oid: 'button', css: 'ox-inline br3 ox-alone', label: 'Exportieren', style: {'color': '#00d0be', 'border': '1px solid #00d0be'}},
					]},
					{oid: 'frame2', css: 'm30', c: [
						/*{oid: 'table2', css: 'col-args: {table: [
							['', 'Name', 'E-Mail', 'Zugang', 'Telefonnummer', 'Zugang'],
							//['<i class="fa fa-grip-lines"></i>', 'John Smith', 'john.smith@company.com', '', ''],
						]}},*/
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
						{t: 'div', css: 'br4 col-light-3-back mb5', style: 'height:30px'},
					]}
				]},
			]},
		},
	},
	app: {
		
		// Variables
		
		events: {
			info:  {id: 'info', behave: '', text: ''},

			saveStart: {id: 'save-start', css: 'col-blue-back col-white', behave: 'sticky', text: 'Save file'},
			saveSend: {id: 'save-send', css: 'col-blue-back col-white', behave: 'sticky', text: 'Save file send'},
			saveReceive: {id: 'save-receive', css: 'col-purple-back-i col-white', behave: 'sticky', text: 'Save file receive'},
			saveEnd: {id: 'save-end', css: 'col-green-back col-white', text: '<i class="fa fa-check ox-before"></i>File saved'},
			
			loadStart: {id: 'load-start', css: 'col-blue-back col-white', behave: 'sticky', text: 'Load file'},
			loadSend: {id: 'load-send', css: 'col-blue-back col-white', behave: 'sticky', text: 'Load file send'},
			loadReceive: {id: 'load-receive', css: 'col-purple-back-i col-white', behave: 'sticky', text: 'Load file receive'},
			loadEnd: {id: 'load-end', css: 'col-green-back col-white', text: '<i class="fa fa-check ox-before"></i>File loaded'},

			loadDataStart: {id: 'load-data-start', css: 'col-blue-back col-white', behave: 'sticky', text: ''},
			loadDataProgress: {id: 'load-data-progress', css: 'col-blue-back col-white', behave: 'sticky', text: ''},
			loadDataEnd: {id: 'load-data-end', css: 'col-green-back col-white', text: '<i class="fa fa-check ox-before"></i>'},
			
			loadMetaStart:  {id: 'load-meta-start', css: 'col-blue-back col-white', type: 'hidden', behave: 'sticky', text: 'Load meta'},
			loadMetaSend:  {id: 'load-meta-send', css: 'col-blue-back col-white', type: 'hidden', behave: 'sticky', text: 'Load meta send'},
			loadMetaReceive:  {id: 'load-meta-receive', css: 'col-purple-back-i col-white', type: 'hidden', behave: 'sticky', text: 'Load meta receive'},
			loadMetaEnd:  {id: 'load-meta-receive', css: 'col-blue-back col-white', type: 'hidden', text: '<i class="fa fa-check ox-before"></i>Load meta received'},

			inSync:  {id: 'in-sync', css: 'col-green-back col-white', type: 'hidden', text: '<i class="fa fa-check ox-before"></i>Data in sync'},
			inbound: {id: 'inbound', css: 'col-green-back col-white', text: '<i class="fa fa-check ox-before"></i>Data imported'},
			outbound: {id: 'outbound', css: 'col-black-back col-white', text: '<i class="fa fa-info-circle ox-before"></i>Local data is newer. Please sync'},

			online:  {id: 'online', behave: '', text: '<i class="fa fa-exclamation-triangle ox-before"></i>Internet is back'},
			offline:  {id: 'offline', error: true, behave: 'sticky', text: '<i class="fa fa-exclamation-triangle ox-before"></i>No internet connection'},
			
			servererror: {id: 'load-fail', behave: 'sticky', error: true, css: 'col-red-back col-white', text: '<i class="fa fa-exclamation-triangle ox-before"></i>Server error'},
			
			errorparse: {id: 'errornet', behave: 'sticky', error: true, css: 'col-red-back col-white', text: '<i class="fa fa-exclamation-triangle ox-before"></i>The data was loaded, but has the wrong format'},
			errornet: {id: 'errornet', behave: 'sticky', error: true, css: 'col-red-back col-white', text: '<i class="fa fa-exclamation-triangle ox-before"></i>The data could not be transfered from or to the server'},
			errortimeout: {id: 'errortimeout', behave: 'sticky', error: true, css: 'col-red-back col-white', text: '<i class="fa fa-exclamation-triangle ox-before"></i>There was a server timeout'},
			errorserver: {id: 'errorserver', behave: 'sticky', error: true, css: 'col-red-back col-white', text: '<i class="fa fa-exclamation-triangle ox-before"></i>There data could not be processed by the server'},
			errorunknown: {id: 'errornet', behave: 'sticky', error: true, css: 'col-red-back col-white', text: '<i class="fa fa-exclamation-triangle ox-before"></i>An unknown error occured'},
			errorload: {id: 'errornet', behave: 'sticky', error: true, css: 'col-red-back col-white', text: '<i class="fa fa-exclamation-triangle ox-before"></i>The data could not be loaded'},
			errorsave: {id: 'errornet', behave: 'sticky', error: true, css: 'col-red-back col-white', text: '<i class="fa fa-exclamation-triangle ox-before"></i>The data could not be saved'},
			
		},
		defaults: {},
		
		// Views
			
		ui: {
			Frame: {
				// Logos
				
				logos: {
					'omnia': {oid: 'label', css: 'col-light-0', text: '<span style="font-weight:300;font-size:20px;font-family:Roboto;margin:0 20px 0 20px;">omnia</span>'},
					'omnia-dark': {oid: 'label', css: 'col-white-75', text: '<span style="font-weight:300;font-size:20px;font-family:Roboto;margin:0 20px 0 20px;">omnia</span>'},
					'mindfreeze': {oid: 'label', css: 'col-white', text: '<img src="https://haustein.org/omnia/app/images/icon-z.svg" height="15px" class="vmiddle" style="margin:16px 10px 0 10px">'},
				}, //
				
				// Event placeholder
				
				onAfterInit: function() {}, //
				onAfterRender: function() {}, //

				// Variables
				
				clsId: 'omnia.app.ui.Frame', 
				controller: null,
				frame: null,
				root: null,
				inactiveTime: null, 
				displayMode: null,

				init: function(args) {
					var me = this;
					
					this.controller = args.controller;
					this.root = args && args.root || $('body');
					
					if(!args.isNotConfirmClose) {
						$(window).on('beforeunload.' + this.controller.id, function() { return omnia.tools.text('windowcloseconfirm'); });
						$(window).on('close.' + this.controller.id, function() { confirm(omnia.tools.text('windowcloseconfirm')); return false; });
					}
					$('body').on('keydown.' + this.controller.id, function(e) { me.onKey(e); });
	
					$(window).on('blur.' + this.controller.id, function() { me.onInactive('blur'); });
					$(window).on('focus.' + this.controller.id, function() { me.onActive('focus'); });
					$(document).on("pause." + this.controller.id, function() { me.onInactive('pause'); });
					$(document).on("resume." + this.controller.id, function() { me.onActive('resume'); });
					
					this.onAfterInit();
				}, //
				destroy: function() {
					$(window).off('beforeunload.' + this.controller.id);
					$(window).off('close.' + this.controller.id);
					$('body').off('keydown.' + this.controller.id);

					$(window).off('blur.' + this.controller.id);
					$(document).off("pause." + this.controller.id);
					$(document).off("resume." + this.controller.id);
				}, //
				
				activate: function(id) {
					this.frame.activate(id);
				}, //
				addView: function(args) {
					if(args.frame) {
						if(!args.frame.css) args.frame.css = '';
						args.frame.css += ' ox-id-contentframe';
					}
					return this.frame.addTab(args);
				}, //
				closeView: function(args) {
					return this.frame.closeTab(args.id, false, args.barId);
				}, //
				
				render: function() {
					var platform = omnia.tools.browser.platform;
					var args = this.controller.args;
					var me = this;

					this.frame = omnia.tools.html.node({
						oid: 'frame2', css: (args.css ? ' ' + args.css : ''), c: [
							{oid: 'board2', css: 'ox-id-board-status ox-right' + (args.isBoardStatic ? ' ox-noani' : '')},
							{
								oid: 'bar2', 
								css: 'ox-id-bar-files ox-noprint ox-scrollable' + (platform.device != 'desktop' ? ' ox-flat ox-top-safe ox-noflex' : '') + (args.barCss ? ' ' + args.barCss : ''), 
								style: args.barStyle ? args.barStyle : (platform.device != 'desktop' ? {'z-index': 3} : {}), 
								c: [
									args.logo && platform.device != 'phone' ? omnia.app.ui.Frame.logos[args.logo] : null,
									!this.controller.args.isOptions ? null : {oid: 'button', css: 'ox-inline ox-medium ox-alone', label: '<i class="fa fa-ellipsis-v"></i>', click: function() { me.options(); }},
									//!this.controller.args.isReload ? null : {oid: 'button', css: 'ox-inline ox-medium', label: '<i class="fa fa-redo-alt"></i>', click: function() { window.location.reload(true); }},
									//!this.controller.args.isOptions  || ox.pf.isPhone ? null : {oid: 'googlesignin', css: 'ox-dark'},
								]
							},
						],
					}, this.root);
					this.setDarkMode();
					this.onAfterRender();
				}, //
				getRoot: function() {
					return this.frame;
				}, //
				
				requestToken: function(args) {
					var overlay = omnia.ui.overlay.show({
						delay: true,
						onClose: function() { args.next(false); },
						frame: {oid: 'dialog', caption: [{oid: 'label', text: '<i class="fas fa-lock ox-before"></i>Please enter the token'}], c: [
							!args.isUrl ? null : {oid: 'input', css: 'ox-id-focus ox-id-input-url ox-border-bottom-i', placeholder: 'File'/*, keyup: function(e, elem) { 
								var code = event.keyCode ? event.keyCode : event.which;
								if(code == 13) { overlay.close(); args.next(elem[0].value); } 
							}*/},
							{oid: 'input', css: 'ox-id-focus ox-id-input-token', placeholder: 'Token'/*, keyup: function(e, elem) { 
								var code = event.keyCode ? event.keyCode : event.which;
								if(code == 13) { overlay.close(); args.next(elem[0].value); } 
							}*/},
						], actions: [
							{oid: 'button', css: 'ox-inline ox-alone ox-id-action', label: 'Ok', click: function(e, elem) { 
								var dialog = elem.closest('section');
								args.next(dialog.find('.ox-id-input-token')[0].value, !args.isUrl ? null : dialog.find('.ox-id-input-url')[0].value);
							}}
						]},
					})
				},
				setBack: function(args) {
					var frame = this.frame.getRoot();

					var cssOxCol = omnia.tools.element.getClassByPrefix(frame, 'ox-col-', true);
					var cssCol = omnia.tools.element.getClassByPrefix(frame, 'col-', true);
					frame.removeClass(cssOxCol + ' ' + cssCol);
					frame.css('background', '');
					
					if(!args) {
						frame.addClass('ox-col-gradient-blue-bright-full');
						return;
					}
					
					if(args.css) frame.addClass(args.css);
					if(args.style) frame.css('background', args.style.background);
					
				}, //
				toggleFullscreen: function(body, isHandler) {
					var me = this;
					var isFull = this.frame.isHidden();

					this.frame.toggleVisible();
					if(!isHandler) this.setFullscreen(!isFull, body, function() { me.toggleFullscreen(body, true); });
				}, //
				setFullscreen: function(isOn, elem, onClose) {
					var me = this;
					var frames = this.frame.getRoot().find('.ox-id-contentframe');
					ox.css(frames, 'ox-fullscreen', isOn);

					try {
						if(ox.pf.framework == 'cordova') { 
							if(isOn) StatusBar.hide();
							else StatusBar.show();
						} else {
							var id = ox.id();
							omnia.tools.browser.addFullscreenHandler(function(isOn) { 
								if(isOn) return;
	
								me.setFullscreen(false);
								if(onClose) onClose();
								ox.b.removeFullscreenHandler(id);
							}, id);
							omnia.tools.browser.fullscreen(isOn, elem);
							
						}
					}
					catch(e) {
						log(e);
					}
				}, //
				options: function() {
					var me = this;

					ox.ov.show({
						frame: {oid: 'dialog', caption: [{oid: 'label', text: '#settings'}], cancel: '#close', c: [
							{oid: 'frame2', css: '_ox-col-ui-dialog-0-back', c: [
								{oid: 'formitemtoggle', name: '#display-mode', css: 'ox-border-bottom-i', args: {
									isPass: true,
									items: [
										{label: '#light', mode: 'light'}, 
										{label: '#dark', mode: 'dark'},
										{label: '#monochrome', mode: 'mono'},
									],
									active: (this.displayMode == 'light' ? 0 : (this.displayMode == 'dark' ? 1 : 2)),
									onActivate: function(value, idx) { me.setDarkMode(value.mode); },
								}},
								!app || !app.debug ? null : {oid: 'bar2', css: 'ox-alone ox-stretch', c: [
									{oid: 'button', css: '', label: '#reload', click: function() { me.reload(); }},
								]},
							]},
						]},
					});
				}, //
				setDarkMode: function(mode) {
					var isAppSpace = app && app.space;
					
					if(!mode) {
						if(!isAppSpace) return false;
						mode = app.space.getSetting('frame', 'displaymode');
					}
					
					ox.css($('body'), 'ox-mode-light', false);
					ox.css($('body'), 'ox-mode-dark', false);
					ox.css($('body'), 'ox-mode-mono', false);
					ox.css($('body'), 'ox-mode-' + mode, true);
					
					this.displayMode = mode;
					
					if(isAppSpace) {
						app.space.setSetting('frame', 'displaymode', mode);
						app.space.save();
					}
				}, //
				reload: function() {
					window.location.reload(true);
				}, //

				onResize: function() {
					return; 
					
					var viewport = omnia.tools.browser.getViewport();
					this.frame.getRoot().css({'bottom': 'auto', 'height': viewport.height});
					
					/*$('body').css('height', viewport.height);
					$('body').addClass('cropped');
					$('html').css('height', viewport.height);
					$('html').css('position', 'fixed');*/
				}, //
				onKey: function(event) {
					var me = this;
			
					var code = event.keyCode;
					var metaKey = event.metaKey || event.ctrlKey;
					var shiftKey = event.shiftKey;
					if(!event.preventDefault) event.preventDefault = function() {};
					
					switch(code) {
					}
				}, //
				onOpenError: function() {
					omnia.ui.overlay.show({content: '#openfileerror'});
				},
				onActive: function(evt) {
					var gap = omnia.tools.now() - this.inactiveTime;

					log('omnia.app.ui.Frame.onActive: away for ' + gap + ' ms');
					this.inactiveTime = null;
					
					$.each(this.controller.documents, function(i, doc) {
						if(doc.file.meta.open == 2 && doc.handler && doc.handler.onActivate) doc.handler.onActivate({gap: gap, evt: evt});
					});
				}, //
				onInactive: function(evt) {
					log('omnia.app.ui.Frame.onInactive');
					this.inactiveTime = omnia.tools.now();

					$.each(this.controller.documents, function(i, doc) {
						if(doc.file.meta.open == 2 && doc.handler && doc.handler.onDeactivate) doc.handler.onDeactivate({evt: evt});
					});
				}, //
			},
			
			// Apps
			
			Stand: {
				controller: null,
				body: null,
				args: null,
				
				akkuStatus: null,
				intervalBat: null,
				
				init: function(args) {
					log('omnia.app.ui.Stand.init');
		
					var me = this;
					this.controller = args.controller;
					this.args = args;
					
					if(ox.pf.device == 'desktop') this.args.isNoAkku = true;
					if(ox.pf.framework == 'cordova') {
						try {
							log('omnia.app.ui.Stand.init: Battery handler set')
							window.addEventListener("batterystatus",function(status) { me.onBatteryStatus(status); }, false);
						}
						catch(e) {
							
						}
						log(navigator.battery);
					}
				},
				destroy: function() {
					
				},
				render: function() {
					var me = this;
					me.args.isNoAkku = !ox.pf.isPhone;

					this.body = this.controller.frame.addView({
						id: this.controller.id,
						barId: '.ox-id-bar-stand',
						label: 'Stand',
						isStatic: this.args.file.meta.sticky != undefined ? this.args.file.meta.sticky : false,
						isActive: true,
						file: this.args.file,
						frame: {oid: 'frame2', css: 'ox-trans _ox-content', _style: {'width': screen.width + 'px !important', 'height': screen.height + 'px !important'}, c: [
							{oid: 'frame2', css: 'ox-trans _ox-content flex-center', c: [
								{t: 'div', c: [
									{oid: 'digitalclock', css: 'hcenter ox-font-headline ox-h-2 col-white', style: ox.pf.device == 'desktop' ? 'font-size:20em; font-weight:bold !important; padding-bottom:100px; display:block;' : null},
									{oid: 'headline', css: 'hcenter col-white ' + (ox.pf.device == 'desktop' ? 'ox-h1' : 'ox-h3'), text: (new Date()).toLocaleString('de-DE', ox.d.format.fullDay)},
								]},
							]},
							me.args.isNoAkku ? null : {oid: 'bar2', css: 'ox-end ox-trans', style: {'height': '210px'}, c: [
								{t: 'div', css: 'w100 h100 rel', c: [
									{oid: 'headline', css: 'flex-center ox-id-battery-title col-white ox-h1 semibold', style: {'height': '55px', 'font-size': '30px'}},
									{t: 'div', css: 'rel nowrap', style: {'height': '100px', 'border-top': '.5px dashed rgba(255, 255, 255, .5)'}, c: [
										{t: 'div', css: 'abs w100', style: {top: '50px', 'border-top': '.5px dashed rgba(255, 255, 255, .5)', 'height': '50px'}},
										{t: 'div', css: 'abs w100', style: {top: '100px', 'border-top': '.5px dashed rgba(255, 255, 255, .5)', 'height': '50px'}},
										//{t: 'div', css: 'abs w100', style: {top: '75%', 'border-top': '.5px dashed rgba(255, 255, 255, .5)'}},
										{t: 'div', css: 'abs ox-id-battery cropped scrollable w100 h100 b0'},
									]},
								]},
							]},
							{oid: 'bar2', css: 'ox-end ox-bottom-safe ox-dark ox-glass ox-right ox-trans ox-id-actions ox-actions _col-white-back', c: [
								{oid: 'button', css: 'ox-inline ox-id-close mr5 ox-alone', label: '<i class="fa fa-expand"></i>', click: function() { me.full(); }},
							]},
						]},
					});
					
					this.body.getRoot().data('ox-handler', this);
					this.controller.frame.setBack({css: 'col-black-back'});

					if(!this.args.isNoAkku) this.intervalBat = setInterval(function() { 
						try {
							if(ox.pf.framework == 'cordova') navigator.battery.triggerUpdate();
						} 
						catch(e) {}
					}, 1000 * 60);
					if(ox.pf.framework == 'cordova') navigator.battery.triggerUpdate();

					//this.onAkkuUpdate();
				},
				full: function(isHandler) {
					if(this.controller.frame.toggleFullscreen) {
						this.controller.frame.toggleFullscreen();
						return;
					}
					
					var me = this;
					var isFull = this.controller.frame.isFull ? this.controller.frame.isFull() : this.controller.frame.getRoot().isHidden();

					this.controller.frame.getRoot().toggleVisible();
					if(!isHandler) this.controller.frame.ui.setFullscreen(!isFull, this.body.getRoot(), function() { me.full(true); });

					/*if(omnia.tools.browser.platform.framework == 'cordova') {
						if(isFull) StatusBar.hide();
						else StatusBar.show();
					}*/
				},
				onBatteryStatus: function(status) {
					log('omnia.app.ui.Stand.onBatteryStatus');

					if(!status || !status.level) return;
					this.akkuStatus = status;
					
					this.onAkkuUpdate();
				},
				onAkkuUpdate: function() {
					//log('omnia.app.ui.Stand.onAkkuUpdate');
					if(this.args.isNoAkku || !this.akkuStatus || !this.body || !this.body.getRoot()) return;
					
					var v = this.akkuStatus.level || 0; //Math.random() * 40;
					var isCharge = this.akkuStatus.isPlugged; //Math.random() > .5;
					
					var t = $(this.body.getRoot().find('.ox-id-battery-title'));
					t.html('');
					var col = isCharge ? 'col-white' : (v > 20 ? 'col-blue' : (v > 10 ? 'col-yellow' : 'col-red'));
					ox.node([
						!isCharge ? null : {t: 'i', css: 'ox-icon fa fa-bolt mr10 col-white'}, 
						{t: 'span', css: col, text: Math.round(v) + '%'}
					], t);

					var a = $(this.body.getRoot().find('.ox-id-battery'));
					ox.node({t: 'div', css: 'inline', style: {'width': '3px', 'margin-left': '2px', 'margin-top': (100 - v) + 'px', 'height': v + 'px', 'background-color': isCharge ? '#ffffff' : (v > 20 ? '#3668cb' : (v > 10 ? '#b4261a' : '#b4261a'))}}, a);
					a.scrollLeft(Number.MAX_SAFE_INTEGER);
				},
				onActivate: function() {
					this.controller.frame.setBack({css: 'col-black-back'});
					this.onAkkuUpdate();
				},
				onDeactivate: function() {
					this.controller.frame.setBack();
				},
				onClose: function(args) {
					this.controller.frame.setBack();
					if(!this.args.isNoAkku) clearInterval(this.intervalBat);
					args.close();
				},
			},
			Cinema: {
			},
			Clock: {
			},
			News: {
			},
			Jobs: {
			},
			Calendar: {
			},

			// System apps
			
			Files: {
				controller: null,
				args: null,
				body: null,
				files: null,

				init: function(args) {
					log('omnia.app.ui.Files.init');
					this.controller = args.controller;
					this.args = args;
				},
				render: function() {
					log('omnia.app.ui.Files.render');
					var me = this;
					var platform = omnia.tools.browser.platform;
					
					this.body = this.controller.frame.addView({
						id: this.controller.id,
						label: this.args.file.meta.name || 'Files',
						file: this.args.file,
						frame: {oid: 'frame2', css: 'ox-trans _ox-space-top _ox-scrollable h100 cropped', style: {'overflow': 'hidden !important'}, c: [
							
							// Float
							!this.args.file.meta.addtile || platform.device == 'desktop' ? null : {oid: 'bar2', css: 'ox-float', c: [
								{oid: 'button', label: '<i class="fa fa-plus"></i>', click: function() { 
									me.openFile({meta: {type: 'add', template: me.args.file.meta.addtile}}); 
								}, tip: this.args.file.meta.onboard ? {
									id: 'files-add',
									content: '#file-new-tip',
									file: app && app.space ? app.space.getDataFile() : this.args.file,
									isLeft: true,
									css: 'ox-shadow-2',
								} : null},
							]},
							
							// Body
							{oid: 'strip', css: 'scrollable pb60' + (platform.device == 'desktop' ? ' pt60' : (platform.device == 'tablet' ? ' pt30' : '')), c: [
								{oid: 'files2', onReady: function(elem, handler) { me.files = handler; }, css: platform.device == 'phone' ? 'mt15' : 'mt30', args: {
									add: this.args.file.meta.addtile ? this.args.file.meta.addtile : null,
									open: this.args.file.meta.opentile,
									ucs: 'f', // Use case subject
									uctp: 't', // Use case trigger point
									noTitle: true,
									view: this.args.file.meta.view,
									
									files: this.args.file.data ? this.args.file.data.c : this.controller.frame.args.files.data.c,
									onOpenError: function() {
										me.controller.frame.onOpenError();
									},
									onOpen: function(file, args) {
										me.openFile(file, args);
									},
									onRemove: function(file) {
										me.onRemoveFile(file);
									},
								}},
							]},

						]},
					});
					
					this.body.getRoot().data('ox-handler', this);
				},
				
				// Public events
				
				onActivate: function() {
					log('omnia.app.ui.Files.onActivate');
					if(this.files) this.files.render();
				},
				onRemoveFile: function(file) {
					if(!file || !file.meta) return;
					log('#' + file.meta.id);
					this.controller.frame.closeView({id: file.meta.id});
				},
				
				// Private functions
				
				openFile: function(file, args) {
					var me = this;
					
					if(file.meta.type == 'add' && file.meta.template == 'all') {
						this.menu();
						return;
					}
					
					this.controller.frame.open({file: file, isActive: true, isForce: false, noOpen: file.meta.noOpen, args: args});
					if(this.files) this.files.render({isRedraw: true});
				},
				menu: function() {
					var me = this;
					
					var typesByGroup = {files: [], tools: []};
					
					$.each(omnia.app.Frame.types, function(id, type) {
						if(type.add == 1 || (type.add == 2 && app && app.debug)) {
							
							if(type.file) {
								typesByGroup.files.push({id: id, type: type});
							} else {
								var isExisting = me.files.files.filter(function(item) { return item.meta && item.meta.id == type.id; }).length;
								if(!isExisting) {
									typesByGroup.tools.push({id: id, type: type});
								}
							}
							
						}
					});
					
					var gridInfo = null/*{
						w: 200,
						wPhone: 150,
						gap: 15,
						ratio: 16 / 9,
					}*/;
					var getItem = function(i, type) { 
						var tile = omnia.ui.files2.handler.getItem(null, {meta: {type: type.id, name: type.type.label, fix: true}});
						tile.css = (tile.css ? tile.css : '') + ' ox-id-close ox-list-item';
						tile.click = function() { me.openFile({meta: {type: 'add', template: type.id, name: type.type.label, noOpen: !type.type.file, id: type.type.id}}); };
						
						if(app && app.debug && type.type.file) {
							var tile2 = omnia.tools.jsonCopy(tile);
							//tile2.c[1].text = type.type.label + ' Remote';
							tile2.click = function() { me.openFile({meta: {type: 'add', template: type.id, name: type.type.label, fileTemplate: 'addremote'}}); };
							return [tile, tile2];
						}
						
						return tile;
					};
					
					var frame = {
						oid: 'popup', 
						css: 'ox-trans',
						style: {'max-height': '80%'},
						title: '#new-item',
						//actions: {css: 'ox-line'},
						//caption: [{oid: 'label', text: '#new-item'}], 
						//style: {'width': '630px', 'max-width': '100%', 'max-height': '90%'}, 
						//body: {
							//style: {'height': 'calc(90% - 180px)'}, 
							c: [
								{oid: 'frame2', css: 'ox-content pl15 pr15 pb30', c: [
									{oid: 'list', css: 'ox-grid pt15 pb30 no-crop', title: {css: 'ox-h3 semibold', text: '#file'}, args: {
										data: typesByGroup.files,
										getItem: getItem,
										//gridInfo: gridInfo,
									}},
									{oid: 'list', css: 'ox-grid pb15 no-crop', title: {css: 'ox-h3 semibold', text: '#tool'}, args: {
										data: typesByGroup.tools,
										getItem: getItem,
										//gridInfo: gridInfo,
									}},
								]},
							],
						//},
					};
					
					omnia.ui.overlay.show({
						frame: frame,
						isScroll: true,
					});
				},
			},
			Log: {
			},
			
			Appspace: {
			}, // *
			Styleguide: {
			}, // *
			Track: {
			}, // *

			Template: {
				controller: null,
				body: null,
				args: null,

				init: function(args) {
					log('omnia.app.ui.Template.init');
		
					var me = this;
					this.controller = args.controller;
					this.args = args;
				},
				destroy: function() {
					
				},
				render: function() {
					var me = this;

					this.body = this.controller.frame.addView({
						id: this.controller.id,
						barId: '.ox-id-bar-template',
						label: 'Template',
						isStatic: this.args.file.meta.sticky != undefined ? this.args.file.meta.sticky : false,
						isActive: true,
						file: this.args.file,
						frame: {oid: 'frame2', css: 'ox-content', c: [
							{t: 'div', text: 'content'}
						]},
					});
					
					this.body.getRoot().data('ox-handler', this);
					
				},
				onActivate: function() {
				},
				onDeactivate: function() {
				},
				onClose: function(args) {
					args.close();
				},
			},

			// Editor
			
			Book: {
			},
			Mindmap: {
			},
			Code: {
			},
			Board: {
				controller: null,
				body: null,
				args: null,

				init: function(args) {
					log('omnia.app.ui.Board.init');
		
					var me = this;
					this.controller = args.controller;
					this.args = args;
				},
				destroy: function() {
					
				},
				render: function() {
					var me = this;
					
					this.body = this.controller.frame.addView({
						id: this.controller.id,
						barId: '.ox-id-bar-board',
						label: 'Board',
						isStatic: this.args.file.meta.sticky != undefined ? this.args.file.meta.sticky : false,
						isActive: true,
						file: this.args.file,
						//frame: ibeAll,
						frame: {oid: 'frame2', css: 'ox-content _col-light-4-back ox-col-pattern-dotted font', c: [
							{t: 'div', css: 'abs ox-shadow-1 ox-tile-flat br2 col-white-back', style: {'left': 100, 'top': 100, 'width': 199, 'height': 149}, c: [
								{
									oid: 'textedit', 
									css: 'col-white-back ox-inline ox-incard w100 h100', 
									style: {'min-height': ox.pf.method == 'mouse' ? '90px' : '45px'}, 
									//text: {style: data.oid ? {'line-height': '21px'} : null},
									args: {
										isInline: ox.pf.device == 'desktop', 
										isUnique: true, 
										isNoFormat: true,
										isModal: false,
										//labelPlaceholder: data.oid == 'headline' ? ox.tx('headline-placeholder') + '...' : (data.oid == 'comment' ? ox.tx('comment-placeholder') + '...' : null),
										data: {v: 'Text'},
										/*actions: [
											{oid: 'button', css: 'ox-id-close ox-inline ox-alone', label: '#delete-icon', click: function() { me.onElementRemove(data); }},
										],*/
										//onEdit: function() { me.onElementEdit(); },
										//onClose: function(isSave) { me.onElementEditClose(); },
									}, 
									/*context: [
										{oid: 'button', css: 'ox-id-close', label: '#delete', click: function() { me.onElementRemove(data); }},
									],*/								
								},
							]},
						]},
					});
					
					this.body.getRoot().data('ox-handler', this);
					
				},
				onActivate: function() {
				},
				onDeactivate: function() {
				},
				onClose: function(args) {
					args.close();
				},
			},

			// Prototype
			
			Travel: {
				controller: null,
				body: null,
				args: null,

				init: function(args) {
					log('omnia.app.ui.Travel.init');
		
					var me = this;
					this.controller = args.controller;
					this.args = args;
				},
				destroy: function() {
					
				},
				render: function() {
					var me = this;
					
					// IBE
					
					var data = {
						regions: [
							{title: 'Spanien', sub: [
								{title: 'Mallorca', thumb: 'http://haustein.org/test/ibe/images/subregion-mallorca.jpg'},
								{title: 'Ibiza', thumb: 'http://haustein.org/test/ibe/images/subregion-ibiza.jpg'},
								{title: 'Kanarische Inseln', thumb: 'http://haustein.org/test/ibe/images/subregion-kanaren.jpg'},
								{title: 'Barcelona &amp; Umgebung', thumb: 'http://haustein.org/test/ibe/images/subregion-barcelona.jpg'},
								{title: 'Andalusien', thumb: 'http://haustein.org/test/ibe/images/subregion-granada.jpg'},
							]},
							{title: '&Auml;gypten', sub: [
								{title: 'Kairo', thumb: 'http://haustein.org/test/ibe/images/subregion-kairo.jpg'},
								{title: 'Scharm El-Scheich', thumb: 'http://haustein.org/test/ibe/images/subregion-scharm.jpg'},
								{title: 'Gizeh', thumb: 'http://haustein.org/test/ibe/images/subregion-gizeh.jpg'},
								{title: 'Auf dem Nil', thumb: 'http://haustein.org/test/ibe/images/subregion-assuan.jpg'},
							]},
						],
						hotels: [
							{
								title: 'Labranda Coral Beach Resort',
								price: 772,
								imgs: [
									'https://i20.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58474148',
									'https://i20.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58098534',
									'https://i20.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58218732',
									'https://i20.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58098540',
								],
							},
							{
								title: 'Kairaba Beach Hotel',
								price: 792,
								imgs: [
									'https://i17.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=63510655',
									'https://i17.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=63510652',
									'https://i17.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58145960',
									'https://i17.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58218739',
								],
							},
							{
								title: 'Seaview Gardens',
								price: 485,
								imgs: [
									'https://i19.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=2470&iid=59570274',
									'https://i19.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=2470&iid=60322241',
									'https://i19.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=2470&iid=53925063',
									'https://i19.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=2470&iid=60447243',
								],
							},
						],
						imgs: [
							'https://slide.style/images/image.jpg',
							'https://i20.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58474148',
							'https://i20.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58098534',
							'https://i20.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58218732',
							'https://i20.giatamedia.com/s.php?uid=197894&source=xml&size=800&cid=20232&iid=58098540',
						],
					};
					
					/*
					
					// Regions
					
					var ibeSubRegion = {t: 'div', css: 'flex col-white-back w100', style: {'margin-bottom': 1, 'height': 100}, c: [
						{t: 'div', css: 'inline backcover flex-fix', style: {'width': '150px', 'height': '100px', 'background-image': 'url(' + ibeData.imgs[1] + ')'}},
						{t: 'div', css: 'pt15 pl15 pb15 font flex-1 flex-vmiddle', c: [
							{t: 'div', css: 'w100 hright', c: [
								{t: 'div', css: 'hright bold ox-font-14 mb10', text: 'Mallorca'},
								{t: 'div', css: 'ox-font-12-i', html: '<i class="fa fa-plane-departure mr5"></i>1h, 123 Angebote'},
								{t: 'div', css: 'hright', c: [
									{t: 'span', css: 'ox-font-12-i mr5', text: 'p.P. ab'},
									{t: 'span', css: 'ox-font-12', html: '1.950 &euro;'},
								]},
							]},
						]},
						{t: 'div', css: 'p15 font flex-center', c: [
							{t: 'i', css: 'ml10 fa fa-angle-right ox-font-18'}
						]},
					]};
					var ibeRegion = {t: 'div', c: [
						{oid: 'headline', css: 'semibold mt15 mb10 pl15 pr15', text: 'Spanien'},
						//ibeSubRegion,
						//ibeSubRegion,
						//ibeSubRegion,
					]};
					var ibeRegionList = {oid: 'frame2', css: 'ox-content scrollable-y ox-trans', c: [
						{oid: 'list', css: 'pb60', args: {
							data: ibeData.regions,
							getItem: function(i, data) {
								var n = ox.copy(ibeRegion);
								n.c[0].text = data.title;
								
								if(data.sub)
									for(var j = 0; j < data.sub.length; j++) {
										var m = ox.copy(ibeSubRegion);
										m.click = function() { ibe.onHotelsRequest(); };
										n.c.push(m);
									}
								
								return n;
							},
						}}
					]};
					
					// Hotel Tiles
					
					var ibeHotelTitle = {t: 'div', c: [
						{t: 'div', css: 'bold ox-font-18-i mb5', text: 'Elegance Playa Arenal'},
						{t: 'div', css: 'ox-font-10-i mb10', c: [
							{t: 'i', css: 'fas fa-square mr5'},
							{t: 'i', css: 'fas fa-square mr5'},
							{t: 'i', css: 'fas fa-square mr5'},
							{t: 'i', css: 'fas fa-square mr5'},
							{t: 'i', css: 'far fa-square'},
						]},
						{t: 'div', css: 'ox-font-12-i bold', html: '<i class="fa fa-map-marker-alt mr5"></i>Mallorca, Can Picaford'},
						{t: 'div', css: 'ox-font-12-i bold', html: '2 Wochen, All-Inclusive'},
					]};
					var ibeHotelTitle2 = {t: 'div', c: [
						{t: 'div', css: 'semibold ox-font-18-i mb5', text: 'Elegance Playa Arenal'},
						{t: 'div', css: 'ox-font-10-i mb10', c: [
							{t: 'i', css: 'fas fa-square mr5'},
							{t: 'i', css: 'fas fa-square mr5'},
							{t: 'i', css: 'fas fa-square mr5'},
							{t: 'i', css: 'fas fa-square mr5'},
							{t: 'i', css: 'far fa-square'},
						]},
						{t: 'div', css: 'ox-font-12-i', html: '<i class="fa fa-map-marker-alt mr5"></i>Mallorca, Can Picaford'},
						{t: 'div', css: 'ox-font-12-i', html: 'Weiterempfehlung'},
					]};
					var ibeHotelPrice = {oid: 'bar2', css: 'ox-id-rate-price col-white-back ox-stretch ox-end', c: [
						{oid: 'label', css: 'pl15 ox-font-12-i', style: 'text-align:left !important;', text: 'Weiterempfehlung'},
						{oid: 'label', css: 'pr15', style: 'text-align:right !important;', c: [
							{t: 'span', css: 'ox-font-12-i mr5', text: 'p.P. ab'},
							{t: 'span', css: 'ox-font-18', html: '1.950 &euro;'},
							{t: 'i', css: 'ml10 fa fa-angle-right ox-font-18'},
						]},
					]};
					var ibeHotelPrice2 = {oid: 'bar2', css: 'ox-id-rate-price col-white-back ox-stretch ox-end', c: [
						{oid: 'label', css: 'pl15 ox-font-12-i', style: 'text-align:left !important;', text: '2 Wochen, All-Inclusive'},
						{oid: 'label', css: 'pr15', style: 'text-align:right !important;', c: [
							{t: 'span', css: 'ox-font-12-i mr5', text: 'p.P. ab'},
							{t: 'span', css: 'ox-font-18', html: '1.950 &euro;'},
							{t: 'i', css: 'ml10 fa fa-angle-right ox-font-18'},
						]},
					]};
					var ibeHotelTile = {t: 'div', css: 'br4 rel cropped ox-tile ox-interactive', c: [
						{oid: 'frame2', css: 'ox-id-image w100 col-white-back scrollable-x ox-content nowrap', style: {'height': 'calc(375px / 3 * 2)'}, c: [
							{t: 'div', css: 'inline backcover', style: {'width': 375, 'height': 'calc(375px / 3 * 2)', 'background-image': 'url(' + ibeData.imgs[1] + ')'}},
							{t: 'div', css: 'inline backcover', style: {'margin-left': .5, 'width': 375, 'height': 'calc(375px / 3 * 2)', 'background-image': 'url(' + ibeData.imgs[3] + ')'}},
							{t: 'div', css: 'inline backcover', style: {'margin-left': .5, 'width': 375, 'height': 'calc(375px / 3 * 2)', 'background-image': 'url(' + ibeData.imgs[4] + ')'}},
						]},
						//{t: 'div', css: 'ox-id-image w100 backcover col-light-3-back', style: {'height': 'calc(375px / 3 * 2)', 'background-image': 'url(' + ibeData.imgs[1] + ')'}},
						{t: 'div', css: 'ox-id-details col-white font abs t00 w100 p15 flex-vbottom', style: {'height': 'calc(375px / 3 * 2)', 'background': '-webkit-linear-gradient(top, rgba(0, 0, 0, 0) calc(100% - 120px), rgba(0, 0, 0, .7) 100%)', 'pointer-events': 'none'}, c: [ibeHotelTitle]},
						ibeHotelPrice,
					]};
					var ibeHotelTile2 = {t: 'div', css: 'br4 m15 rel cropped ox-shadow-light-3', c: [
						{oid: 'frame2', css: 'ox-id-image w100 col-white-back scrollable-x ox-content nowrap', c: [
							{t: 'div', css: 'inline backcover', style: {'width': '200px', 'height': '150px', 'background-image': 'url(' + ibeData.imgs[1] + ')'}},
							{t: 'div', css: 'inline backcover', style: {'margin-left': .5, 'width': '200px', 'height': '150px', 'background-image': 'url(' + ibeData.imgs[3] + ')'}},
							{t: 'div', css: 'inline backcover', style: {'margin-left': .5, 'width': '200px', 'height': '150px', 'background-image': 'url(' + ibeData.imgs[4] + ')'}},
						]},
						{t: 'div', css: 'col-white-back font pt10 pl15 pr15', c: [ibeHotelTitle2]},
						ibeHotelPrice2,
					]};
					var ibeHotelList = {oid: 'frame2', css: 'ox-content scrollable-y ox-trans', c: [
						{oid: 'headline', css: 'semibold mt15 ml15 mr15', text: '124 Hotels'},
						{oid: 'list', css: 'pt15 pl15 pr15 pb60 ox-grid', args: {
							gridInfo: {gap: 15},
							data: [{}, {}, {}],
							getItem: function(i, data) {
								return ibeHotelTile;
							},
						}}
					]};
					var ibeHotelListPortal = {oid: 'frame2', css: 'ox-content scrollable-y ox-trans', c: [
						{oid: 'headline', css: 'semibold mt15 ml15 mr15', text: 'Top Angebote'},
						{oid: 'list', css: 'pt15 pl15 pr15 pb60 ox-grid', args: {
							gridInfo: {gap: 15},
							data: [{}, {}],
							getItem: function(i, data) {
								return ibeHotelTile;
							},
						}}
					]};
					
					// Header
					
					var ibeHeader = {oid: 'bar2', css: 'ox-id-header ox-split ox-line col-white-back', c: [
						{oid: 'button', css: 'ox-inline ox-alone', label: '<i class="fa fa-bars"></i>'},
						{oid: 'button', css: 'ox-inline', label: 'Logo'},
						{t: 'div', c: [
							{oid: 'button', css: 'ox-inline', label: '<i class="fa fa-heart"></i>'},
							{oid: 'button', css: 'ox-inline ox-alone', label: '<i class="fa fa-phone"></i>'},
						]},
					]};
					var ibeSearch = {oid: 'bar2', css: 'ox-line col-blue-back col-white ox-large p5 ox-hand', c: [
						{oid: 'label', css: 'ox-alone col-white-10-back-i ox-inline pl10 pr10 ox-font-12-i', style: 'line-height:36px;', text: '<i class="fa fa-plane-departure mr5"></i>MUC'},
						{oid: 'label', css: 'col-white-10-back-i ox-inline pl10 pr10 ox-font-12-i', style: 'line-height:36px;', text: '<i class="fa fa-plane-arrival mr5"></i>Mallorca'},
						{oid: 'label', css: 'ox-alone col-white-10-back-i ox-inline pl10 pr10 ox-font-12-i', style: 'line-height:36px;', text: '<i class="fa fa-calendar-alt mr5"></i>14-28. Aug'},
						{oid: 'label', css: 'col-white-10-back-i ox-inline pl10 pr10 ox-font-12-i', style: 'line-height:36px;', text: '2<i class="fa fa-user ml5"></i>'},
						{oid: 'label', css: 'ox-alone pl10 pr10 ox-inline ox-font-12-i ox-slim', style: 'line-height:36px;', text: '<i class="fa fa-filter"></i>&nbsp;'},
					]};
					var ibeSearch2 = {oid: 'bar2', css: 'ox-line col-blue-back col-white ox-large p5 hand', style: 'min-height: 55px !important', click: function() { ibe.onRegionsRequest(); }, c: [
						//{oid: 'label', css: 'ox-alone col-white-10-back-i ox-inline pl10 pr10 ox-font-12-i', style: 'line-height:36px;', text: '<i class="fa fa-plane-departure mr5"></i>MUC'},
						{oid: 'label', css: 'col-white-10-back-i ox-inline pl10 pr10 ox-font-12-i', style: 'line-height:36px;', text: '<i class="fa fa-plane-departure mr5"></i>Mallorca'},
						{oid: 'label', css: 'ox-alone col-white-10-back-i ox-inline pl10 pr10 ox-font-12-i', style: 'line-height:36px;', text: '<i class="fa fa-calendar-alt mr5"></i>14-28. Aug'},
						{oid: 'label', css: 'col-white-10-back-i ox-inline pl10 pr10 ox-font-12-i', style: 'line-height:36px;', text: '2<i class="fa fa-user ml5"></i>'},
						{oid: 'label', css: 'ox-alone pl10 pr10 ox-inline ox-font-12-i ox-slim', style: 'line-height:36px;', text: 'Filtern'},
					]};
					var ibeViewBack = {oid: 'bar2', css: 'ox-line col-white ox-line ox-split col-white-back', c: [
						{oid: 'button', css: '', label: '<i class="fa fa-arrow-left mr5"></i>Start'},
						{t: 'div', c: [
							{oid: 'tabstatic', css: 'ox-active ox-id-tab-list', label: 'Liste'},
							{oid: 'tabstatic', css: 'ox-id-tab-map', label: 'Karte'},
						]},
					]};
					var ibeViewBackSort = {oid: 'bar2', css: 'ox-line col-white ox-line ox-split col-white-back', c: [
						{oid: 'button', css: 'ox-font-12-i ox-medium', label: '<i class="fa fa-arrow-left mr5"></i>Start'},
						//{oid: 'sep'},
						{t: 'div', c: [
							{oid: 'tabstatic', css: 'ox-active ox-id-tab-list ox-font-12-i', label: 'Liste'},
							{oid: 'tabstatic', css: 'ox-id-tab-map ox-font-12-i', label: 'Karte'},
						]},
						//{oid: 'sep'},
						{oid: 'button', css: 'ox-font-12-i ox-medium', label: '<i class="fa fa-sort mr5"></i>Sortieren'},
					]};
					var ibeSortBack = {oid: 'bar2', css: 'ox-line col-white-back ox-line', c: [
						{oid: 'button', css: '', label: '<i class="fa fa-arrow-left mr5"></i>Start'},
						{oid: 'sep', css: 'ox-inline'},
						{oid: 'button', css: 'ox-font-12-i ox-slim', label: '<i class="fa fa-sort mr5"></i>Preis'},
						{oid: 'button', css: 'ox-font-12-i ox-slim', label: '<i class="fa fa-sort mr5"></i>Weiterempfehlung'},
					]};
					var ibeSort = {oid: 'bar2', css: 'pl10', style: {'height': 35, 'min-height': 35}, c: [
						{oid: 'button', css: 'ox-flat ox-font-12-i ox-slim', label: '<i class="fa fa-sort mr5"></i>Preis'},
						{oid: 'button', css: 'ox-flat ox-font-12-i ox-slim', label: '<i class="fa fa-sort mr5"></i>Weiterempfehlung'},
					]};

					// Funk
					
					var ibePortalsView = [
						ibeSearch2,
						ibeHotelListPortal,
					];
					var ibeRegionsView = [
						ibeSearch2,
						ibeViewBackSort,
						ibeRegionList,
					];
					var ibeHotelsView = [
						ibeSearch2,
						ibeViewBackSort,
						ibeHotelList,
					];
					ibe.onRegionsRequest = function() { this.elem.html(''); ox.node(ibeRegionsView, this.elem); };
					ibe.onHotelsRequest = function() { this.elem.html(''); ox.node(ibeHotelsView, this.elem); }; */

					var views = {
						portal: [
							//{oid: 'headline', css: 'semibold mt15 mb10 pl15 pr15', text: 'Top Regionen'},
							//{oid: 'subregion', args: {subregion: data.regions[0].sub[0], onSubregionSelect: function(subregion) { ibe.changeList('hotels', subregion.title); }}},
							{oid: 'hotel', css: 'm15', args: {hotel: data.hotels[0]}},
							//{oid: 'hotelslist', title: 'Top-Hotels', args: {hotels: [data.hotels[0]]}},
						], 
						regions: [
							{oid: 'regionslist', args: {
								regions: data.regions, 
								backLabel: 'Start',
								onBack: function() { ibe.changeList('portal', 'Beliebig'); },
								onSubregionSelect: function(subregion) { ibe.changeList('hotels', subregion.title); },
							}},
						],
						hotels: [
							//{oid: 'triplistheader', backlabel: 'Regionen', back: {click: function() { ibe.changeList('regions', 'Mittelmeer'); }}},
							{oid: 'hotelslist', title: '184 Hotels', args: {
								hotels: data.hotels,
								backLabel: 'Regionen',
								onBack: function() { ibe.changeList('regions', 'Mittelmeer'); },
							}},
						],
					};
					
					var ibe = {
						elem: null,
						changeList: function(view, dest) {
							var c = $(this.elem.find('.ox-id-main-content')); 
							if(!c) return;
							
							c.html(''); 
							ox.node(views[view], c); 

							var s = $(this.elem.find('.ox-id-destination')); 
							if(dest) s.html(dest);
						},
					};

					var header = {oid: 'bar2', css: 'ox-id-header ox-split ox-line col-white-back', c: [
						{oid: 'button', css: 'ox-inline ox-alone col-brand-sub-0', label: '<i class="fa fa-bars"></i>'},
						{oid: 'button', css: 'ox-inline', label: '<img src="https://haustein.org/test/ibe/images/fti.svg" style="height:100%">', click: function() { ibe.changeList('portal'); }},
						{t: 'div', c: [
							{oid: 'button', css: 'ox-inline col-brand-sub-0', label: '<i class="fa fa-heart"></i>'},
							{oid: 'button', css: 'ox-inline ox-alone col-brand-sub-0', label: '<i class="fa fa-phone"></i>'},
						]},
					]};
					
					// Views
					
					var ibeAll = {oid: 'frame2', css: 'col-light-35-back col-brand-body ox-content', style: {'position': 'relative', '_top': 'auto', '_left': 'auto', '_bottom': 'auto', '_right': 'auto', '_overflow': 'scrollable-y'}, onRendered: function(elem) { ibe.elem = $(elem); }, c: [
						header,
						{oid: 'tripsearch', css: 'ox-id-search', destination: 'Beliebig', args: {onSubmit: function() { ibe.changeList('regions', 'Mittelmeer'); }}/*, click: function() { ibe.changeList('regions', 'Mittelmeer'); }*/},
						{oid: 'frame2', css: 'ox-id-main-content ox-trans', c: views.portal},
					]};

					$('body').addClass('ox-skin-fti');
					$('body').css('overflow', 'auto');
					$('body').css('-webkit-overflow-scrolling', 'touch');
					$('body').css('height', '100%');
					$('body').css('position', '');
					
					$('html').css('position', '');
					$('html').css('width', '');
					$('html').css('height', '');
					$('html').css('overflow', '');
					
					// 'html, body': { less: '.fixed; .w100; .h100; .cropped;' },
					// 'html': { less: '.cropped;', 'touch-action': 'manipulation' },
					// 'body': { less: '.m0;', 'height': '100vh', 'background': 'black'},


					/*this.body = this.controller.frame.addView({
						id: this.controller.id,
						barId: '.ox-id-bar-board',
						label: 'IBE',
						isStatic: this.args.file.meta.sticky != undefined ? this.args.file.meta.sticky : false,
						isActive: true,
						file: this.args.file,
						frame: ibeAll,
					});*/
					
					if(this.args.isRoot) {
						this.body = ox.node(ibeAll, this.args.root);
					} else {
						this.body = this.controller.frame.addView({
							id: this.controller.id,
							barId: '.ox-id-bar-board',
							label: 'IBE',
							isStatic: this.args.file.meta.sticky != undefined ? this.args.file.meta.sticky : false,
							isActive: true,
							file: this.args.file,
							frame: ibeAll,
						});
						this.onActivate();
					}
					
					this.body.getRoot().data('ox-handler', this);
					
				},
				onActivate: function() {
				},
				onDeactivate: function() {
				},
				onClose: function(args) {
					args.close();
				},
			},
			
			// Sub views
	
			Node: {
			},
		},
		
		Frame: {
			
			// Constants
			
			types: {
				// add: 1 - to be add
				//      2 - debug user
				
				// Apps
				
				//'omnia-clock': {handler: 'omnia.app.Clock', thumb: 'https://haustein.org/omnia/app/images/omnia-clock.jpg', add: 1, label: 'Clock', id: 'ox-clock', sort: 0},
				'omnia-clock': {oid: 'worldclock', thumb: 'https://haustein.org/omnia/app/images/omnia-clock.jpg', add: 1, label: 'Clock', id: 'ox-clock', sort: 0},
				//'omnia-news': {handler: 'omnia.app.Generic', ui: 'omnia.app.ui.News', id: 'ox-news', thumb: 'https://haustein.org/omnia/app/images/omnia-news.jpg', add: 1, label: 'News', sort: 0},
				'omnia-news': {oid: 'magazine', id: 'ox-news', thumb: 'https://haustein.org/omnia/app/images/omnia-news.jpg', add: 1, label: 'News', sort: 0},
				//'omnia-stand': {handler: 'omnia.app.Generic', ui: 'omnia.app.ui.Stand', id: 'ox-stand', thumb: 'https://haustein.org/omnia/app/images/omnia-stand.jpg', add: 1, label: 'Stand', sort: 0},
				'omnia-stand': {oid: 'stand', id: 'ox-stand', thumb: 'https://haustein.org/omnia/app/images/omnia-stand.jpg', add: 1, label: 'Stand', sort: 0},
				//'omnia-jobs': {handler: 'omnia.app.Jobs', thumb: 'https://haustein.org/omnia/app/images/omnia-jobs.jpg', add: 2, label: 'Jobs', id: 'ox-jobs', sort: 0},
				'omnia-jobs': {oid: 'jobs', id: 'ox-jobs', thumb: 'https://haustein.org/omnia/app/images/omnia-jobs.jpg', label: 'Jobs', add: 1, sort: 0},
				'omnia-jobs2': {oid: 'jobs2', id: 'ox-jobs2', thumb: 'https://haustein.info/omnia/images/apps/jobs2.jpg', label: 'Jobs 2', add: 1, sort: 0},
				'omnia-cinema': {handler: 'omnia.app.Generic', ui: 'omnia.app.ui.Cinema', id: 'ox-cinema', label: 'Cinema', sort: 0},
				//'omnia-calendar': {handler: 'omnia.app.Calendar', id: 'ox-calendar', thumb: 'https://haustein.org/omnia/app/images/omnia-calendar.jpg', add: 1, label: 'Calendar', sort: 0},
				'omnia-calendar': {oid: 'calendarviewer2', id: 'ox-calendar', thumb: 'https://haustein.org/omnia/app/images/omnia-calendar.jpg', add: 1, label: 'Calendar', sort: 0},
				'omnia-timer': {oid: 'countdown', thumb: 'https://haustein.info/omnia/images/apps/timer.jpg', add: 1, id: 'ox-timer', label: '#omnia-timer', sort: 0},
				'omnia-translate': {oid: 'translate', id: 'ox-translate', thumb: 'https://haustein.info/omnia/images/apps/translate2.jpg', add: 1, label: '#omnia-translate', sort: 0},
				'omnia-pattern': {oid: 'patternpad', thumb: 'https://haustein.org/omnia/app/images/omnia-pattern.svg', add: 1, label: '#omnia-pattern', sort: 0},
				'stride': {oid: 'stride', thumb: 'https://haustein.info/stride/images/drone/stride-forest.jpg', add: 1, label: 'Research Stride', sort: 0},
				'omnia-contacts': {oid: 'contacts', id: 'ox-contacts', thumb: 'https://haustein.info/omnia/images/apps/phone.jpg', add: 1, label: 'Contacts', sort: 0},
				'omnia-mediathek': {oid: 'mediathek', id: 'ox-mediathek', thumb: 'https://haustein.info/omnia/images/apps/tv2.jpg', add: 1, label: 'Mediathek', sort: 0},
				'omnia-artwork': {oid: 'artwork', id: 'ox-artwork', thumb: 'https://haustein.info/omnia/images/apps/artwork.jpg', add: 1, label: 'Artwork', sort: 0},
				'omnia-ebook': {oid: 'shelf', id: 'ox-ebook', thumb: 'https://haustein.info/omnia/images/apps/ebook7.jpg', add: 1, label: '#omnia-ebook', sort: 0},
				'omnia-ai': {oid: 'ai', id: 'ox-ai', thumb: 'https://haustein.info/omnia/images/apps/ai.jpg', add: 1, label: '#omnia-ai', sort: 0},
				'omnia-boox': {oid: 'boox', id: 'ox-boox', _thumb: 'https://haustein.info/omnia/images/apps/ebook7.jpg', add: 1, label: 'Boox', sort: 0},
				'omnia-crypt': {oid: 'encryper', id: 'ox-crypt', thumb: 'https://haustein.info/omnia/images/apps/lock.jpg', add: 1, label: '#omnia-crypt', sort: 0},
				'omnia-webbrowser': {oid: 'webviewer', id: 'ox-webbrowser', thumb: 'https://haustein.info/omnia/images/apps/browse.jpg', add: 1, label: '#omnia-webbrowser', multiple: 1, sort: 0},
				
				// System Apps

				'omnia-files': {handler: 'omnia.app.Generic', ui: 'omnia.app.ui.Files', id: 'ox-files', sort: 1},
				'omnia-log': {handler: 'omnia.app.Generic', ui: 'omnia.app.ui.Log', id: 'ox-log', thumb: 'https://haustein.org/omnia/app/images/omnia-log.jpg?1', add: 2, label: 'Log', sort: 1},
				'omnia-appspace': {handler: 'omnia.app.Generic', ui: 'omnia.app.ui.Appspace', id: 'ox-appspace', _thumb: 'https://haustein.org/omnia/app/images/omnia-log.jpg', add: 0, label: 'AppSpace', sort: 1},
				'omnia-styleguide': {handler: 'omnia.app.Generic', ui: 'omnia.app.ui.Styleguide', id: 'ox-styleguide', _thumb: 'https://haustein.org/omnia/app/images/omnia-log.jpg', add: 0, label: 'Styleguide', sort: 1},
				'omnia-track': {handler: 'omnia.app.Track', id: 'ox-track', add: 0, label: 'Track', sort: 1},
				'omnia-system': {oid: 'system', id: 'ox-system', thumb: 'https://haustein.org/omnia/app/images/omnia-log.jpg', label: 'System', add: 1, sort: 1},

				// Files
				
				'omnia-mindmap': {handler: 'omnia.app.Mindmap', editor: true, add: 1, label: 'Mindmap', file: 1, sort: 2},
				'omnia-document': {oid: 'doceditor', editor: true, add: 1, label: 'Document', file: 1, sort: 2},
				'omnia-office': {handler: 'omnia.app.Book', editor: true, add: 0, label: 'Office', file: 1, sort: 2},
				'omnia-board': {handler: 'omnia.app.Generic', ui: 'omnia.app.ui.Board', id: 'ox-board', label: 'Board', add: 1, sort: 1},

				'json': {handler: 'omnia.app.Code', file: 1},
				'js': {handler: 'omnia.app.Code', file: 1},
				'php': {handler: 'omnia.app.Code', file: 1},
				'html': {handler: 'omnia.app.Code', file: 1},
				
				// Prototype

				'omnia-travel': {handler: 'omnia.app.Generic', ui: 'omnia.app.ui.Travel', add: 0, label: 'Travel', id: 'ox-travel', sort: 0},
			},
			
			// Variables

			clsId: 'omnia.app.Frame', 
			id: null,
			ui: null,
			documents: [],
			space: null,
			args: null,
			clipboard: null,
			
			// Event placeholder
			
			onAfterInit: function() {}, //
			onAfterOpen: function() {}, //
			
			//
			
			init: function(args) {
				//log('omnia.app.Frame.init');
				log('%comnia.app.Frame.init: start after ' + (omnia.tools.now() - omnia.tools.console.start) + ' ms', 'color:green');
				
				if(!args) args = {};
				this.args = args;
				args.controller = this;
				this.id = 'ox-app-frame-' + omnia.tools.getUniqueId();
				
				if(args.space) {
					this.space = app.space = app && app.space ? app.space : omnia.tools.create(omnia.tools.AppSpace, {id: args.space, isLocalStorage: true});
					this.space.track({ucid: 'la', value: omnia.tools.now() - omnia.tools.console.start});
				}
				
				this.ui = omnia.tools.create(omnia.app.ui.Frame, args);
				this.ui.render();
				
				args.isInitial = true;
				if(args.files) {
					log('omnia.app.Frame.init: Reopen files');
					this.open(args);
				}
				
				log('%comnia.app.Frame.init: done after ' + (omnia.tools.now() - omnia.tools.console.start) + ' ms', 'color:green');
				
				this.onAfterInit();
			}, //
			destroy: function() {
				this.ui.destroy();
				delete this.ui;
			}, //
			open: function(args) {
				var me = this;

				// Batch
				if(args.files) {
					if(args.files.data && args.files.data.c && args.files.data.c.length) {
						log('omnia.app.Frame.open: Batch, ' + args.files.data.c.length + ' files available');
						
						var openFiles = args.files.data.c.filter(function(file) { return file && file.meta && file.meta.open; });
						var openLoader = omnia.tools.create(omnia.tools.Loader, {
							items: openFiles.length,
							onLoad: function() {
								log('omnia.app.Frame.open: opened');
							},
							onLoaded: function() {
								log('omnia.app.Frame.open: all opened');
								if(args.isInitial && app && app.space) app.space.onInitEnd();
							},
						})
						
						$.each(openFiles, function(i, file) { 
							me.open({
								file: file, 
								isInitial: args.isInitial,
								isForce: args.isForce,
								isActive: args.isActive,
								noOpen: args.noOpen,
								onOpen: function() {
									openLoader.onLoad();
								},
							}); 
						});
					} else {
						omnia.tools.error('omnia.app.Frame.open: Could not read batch.');
					} 
					return;
				}
				
				// Check file format
				var file = args.file ? args.file : args;
				if(!file) return;
				
				if(file.meta.type == 'add') {
					try {
						var handler = omnia.tools.string.stringToObject(omnia.app.Frame.types[file.meta.template].handler);
						file = handler.defaults ? omnia.tools.jsonCopy(handler.defaults.files[file.meta.fileTemplate ? file.meta.fileTemplate : 'add']) : {meta: {type: file.meta.template, name: file.meta.name, id: file.meta.id}};
						if(handler.defaults) file.meta.id = omnia.tools.getUniqueId();
						
						if(app && app.space) {
							app.space.getData().c.push(file);
							app.space.save();
						}
						
					}
					catch(e) {
						this.onOpenError();
					}
				}
			
				// Error?
				if(!file.meta || !file.meta.type || !(omnia.app.Frame.types[file.meta.type] || file.meta.type == 'add' || file.meta.type == 'omnia')) {
					omnia.tools.error('omnia.app.Frame.open: File could not be opened');
					log(file);
					this.onOpenError();
					return;
				}

				if(!file.meta.id) file.meta.id = ox.id();
				if(args.noOpen) return;

				log('omnia.app.Frame.open: type = ' + file.meta.type + ', open = ' + file.meta.open);

				var isOpen = file.meta.id ? this.getDocumentById(file.meta.id) : false;

				// Create document
				if((!file.meta.open && !isOpen) || args.isForce || args.isInitial) {
					var view;
					
					switch(file.meta.type) {
						case 'omnia':
							// Direct UI data
							var id = 'ox-id-content-' + omnia.tools.getUniqueId();
							view = {
								id: id,
								root: this.ui.addView({
									id: id,
									barId: '.ox-id-bar-files',
									isStatic: file.meta.sticky === undefined || file.meta.sticky == true,
									label: file.meta.name,
									isActive: true,
									frame: {oid: 'frame2', css: 'ox-id-tab-' + id, c: file.data}
								})
							}
							break;
						default:
							// File by type
							view = {
								frame: me,
								file: file,
								handler: omnia.tools.create(omnia.tools.string.stringToObject(omnia.app.Frame.types[file.meta.type].handler), {
									frame: me, 
									file: file,
									ui: omnia.app.Frame.types[file.meta.type].ui ? omnia.tools.string.stringToObject(omnia.app.Frame.types[file.meta.type].ui) : null,
									id: omnia.app.Frame.types[file.meta.type].id || null,
									args: args.args,
								}),
							};
							break;
					}
					this.documents.push(view);
				}
				
				if(!file.meta.open) file.meta.open = 1;
				if((args.isActive && !args.isInitial) || (args.isInitial && file.meta.open == 2)) this.activate(file.meta.id);
				
				if(app && app.space) app.space.save();

				if(args.onOpen) args.onOpen();
				
				this.onAfterOpen();
			}, //
			activate: function(id, isInitial) {
				log('omnia.app.Frame.activate: id = ' + id);
				
				this.ui.activate(id, isInitial);
			}, //
			addView: function(args) {
				var me = this;
				if(!args.frame.css) args.frame.css = '';
				args.frame.css += ' ox-id-tab-' + args.id;
				args.barId = '.ox-id-bar-files';
				args.isActive = args.isActive !== false;
				args.isStatic = args.isStatic === undefined ? args.file.meta.sticky != undefined ? args.file.meta.sticky : false : args.isStatic;
				
				if(args.file) args.onClose = function() { me.onClose(args.file); };
				args.onActivate = function(id) { me.onActivate(id); };
				args.onDeactivate = function(id) { me.onDeactivate(id); };
				
				return this.ui.addView(args);
			}, //
			closeView: function(args) {
				args.barId = '.ox-id-bar-files';
				return this.ui.closeView(args);
			}, //
			getDocumentById: function(id) {
				var docs = this.documents;
			
				for(var i = 0; i < docs.length; i++) {
					if(docs[i].handler && docs[i].handler.id == id) return docs[i].handler;
					if(docs[i].id && docs[i].id == id) return docs[i];
				}
				
				return false;
			}, //
			getRoot: function() {
				return this.ui.getRoot();
			}, //
			setBack: function(args) {
				this.ui.setBack(args);
			}, //
			
			// Loading
			
			sync: function(args) {
				if(args.file.meta.link && args.file.meta.link.service) {
					//if(args.file.meta.link.isSync) { omnia.tools.error('omnia.app.Frame.sync: Sync is ongoing'); return; }
					args.file.meta.link.isSync = true;
					
					switch(args.file.meta.link.service) {
						case 'cloud':
							args.id = omnia.tools.getUniqueId(),
							delete args.remote;
							this.syncCloud(args);
							break;
					}
				}
			},
			syncCloud: function(args) {
				//log('#omnia.app.Frame.syncCloud');

				var me = this;
				if(!args) return;
				if(!args.remote) args.remote = {meta: {}};
				if(!args.remote.meta) args.remote.meta = {};
				if(args.loop === undefined) args.loop = 0;
				else args.loop++; 

				// Authentication
				if(!args.file.meta.link.token || !args.file.meta.link.url) {
					this.ui.requestToken({next: function(token, url) { 
						if(!token || !token.length) me.onTokenFail(args);
						else {
							if(url) args.file.meta.link.url = url;
							if(token) args.file.meta.link.token = token;
							me.syncCloud(args);
						}
					}, isUrl: args.file.meta.link.url ? false : true});
					return;
				}
			
				// Import from remote
				if(args.remote.data && (args.remote.meta.lastsave > args.file.meta.lastsave || !args.file.data)) {

					/*if(args.mergeData) args.mergeData(args);
					else */
					args.file.data = args.remote.data;

					args.file.meta.lastsync = omnia.tools.now();
					args.file.meta.lastsave = args.remote.meta.lastsave;
					
					if(args.remote.meta.latestid) args.file.meta.latestid = args.remote.meta.latestid;
					else delete args.file.meta.latestid;
					
					log('%comnia.app.Frame.syncCloud: Imported from remote file', 'color:#aa00ff');

					delete args.file.meta.link.isSync;
					if(args.onDone) { args.status = 'inbound'; args.hasChanged = true; args.onDone(args); }
					return;
				}
				
				// Offline
				if(!window.navigator.onLine) {
					omnia.tools.error('omnia.app.Frame.syncCloud: No internet connection');
					omnia.ui.board2.trigger({evt: omnia.app.events.offline, id: 'ox-event-offline'});
					delete args.file.meta.link.isSync;
					if(args.onDone) { args.onDone(args); }
					return;
				} else {
					omnia.ui.board2.trigger({evt: omnia.app.events.online, replace: true, id: 'ox-event-offline'});
				}
				
				// Save from local
				if(args.file.data && args.remote.meta.lastsave && args.remote.meta.lastsave < args.file.meta.lastsave) {

					// save to server
					if(args.isSend) {

						args.next = function () { me.syncCloud(args); };
						
						var json = omnia.tools.jsonCopy(args.file);
						delete json.meta.link;
						delete json.meta.open;
						delete json.meta.thumb;

						log('#history');
						//log(json.meta.history);
						delete args.file.meta.history;

						var dataStr = JSON.stringify(json);
						
						log('%comnia.app.Frame.syncCloud: Local file is newer. Send full data to \'' + args.file.meta.link.url + '\' (' + omnia.tools.string.toSize(dataStr.length, true) + ')', 'color:blue');
						if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.saveStart, text: ' ' + args.file.meta.link.url, id: args.id});

						omnia.tools.net.get({
							param: {
								cmd: 'save',
								url: args.file.meta.link.url,
								token: args.file.meta.link.token,
								data: dataStr,
							},
							type: 'text',
							method: 'POST',
							id: args.id,
							timeout: 30000,
	
							onProgressSend: function(bytes, e, args2) { 
								if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.saveSend, text: ' ' + omnia.tools.string.toSize(bytes) + (e.lengthComputable ? ' / ' + omnia.tools.string.toSize(e.total) : ''), id: args.id});
							},
							onProgress: function(bytes, e, args2) { 
								if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.saveReceive, text: ' ' + bytes + ' bytes', id: args.id});
							},
							onResponse: function(args2) { 
								if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.saveEnd, text: ' ' + args.file.meta.link.url, id: args.id});
								me.syncCloudDataValidation(args2, args); 
							},
						});
					} else {
						log('%comnia.app.Frame.syncCloud: Local file is newer. Not sent', 'color:#aa00ff');
						//if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.outbound, id: args.id});

						delete args.file.meta.link.isSync; 
						if(args.onDone) { args.status = 'outbound'; args.onDone(args); }
					}
					return;
				}
				
				// Load meta
				if(args.file.data && !args.remote.meta.type && !args.loop) {
					log('%comnia.app.Frame.syncCloud: Load meta \'' + args.file.meta.link.url + '\'', 'color:blue');
					if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.loadMetaStart, id: args.id});
	
					args.next = function () { me.syncCloud(args); };
					omnia.tools.net.get({
						param: {
							cmd: 'loadmeta',
							url: args.file.meta.link.url,
							token: args.file.meta.link.token,
						},
						method: 'POST',
						id: args.id,
						timeout: 30000,

						onProgressSend: function(bytes, e, args2) { 
							if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.loadMetaSend, text: ' ' + omnia.tools.string.toSize(bytes), id: args.id});
						},
						onProgress: function(bytes, e, args2) { 
							if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.loadMetaReceive, text: ' ' + omnia.tools.string.toSize(bytes), id: args.id});
						},
						onResponse: function(args2) {
							if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.loadMetaEnd, id: args.id});
							me.syncCloudDataValidation(args2, args);
						},
					});
					return;
				}
				
				// Get full data
				if(!args.file.data || (!args.remote.data && args.remote.meta.lastsave > args.file.meta.lastsave)) {
					log('%comnia.app.Frame.syncCloud: Remote file is newer. Load full \'' + args.file.meta.link.url + '\'', 'color:blue');
					omnia.ui.board2.trigger({evt: omnia.app.events.loadStart, text: ' ' + args.file.meta.link.url, id: args.id});

					args.next = function () { me.syncCloud(args); };
					omnia.tools.net.get({
						param: {
							cmd: 'load',
							url: args.file.meta.link.url,
							token: args.file.meta.link.token,
						},
						method: 'POST',
						id: args.id,
						timeout: 30000,

						onProgressSend: function(bytes, e, args2) { 
							omnia.ui.board2.trigger({evt: omnia.app.events.loadSend, text: ' ' + omnia.tools.string.toSize(bytes), id: args2.id});
						},
						onProgress: function(bytes, e, args2) { 
							args.bytes = bytes;
							omnia.ui.board2.trigger({evt: omnia.app.events.loadReceive, text: ' ' + omnia.tools.string.toSize(bytes), id: args2.id});
						},
						onResponse: function(args2) { 
							omnia.ui.board2.trigger({evt: omnia.app.events.loadEnd, text: ' ' + args.file.meta.link.url + ' (' + omnia.tools.string.toSize(args.bytes) + ')', id: args.id});
							me.syncCloudDataValidation(args2, args); 
						},
					});
					return;
				}
				
				// Synced
				if(args.file.data && args.remote.meta.lastsave == args.file.meta.lastsave) {
					args.file.meta.lastsync = omnia.tools.now();
					
					log('%comnia.app.Frame.syncCloud: Data is in sync', 'color:#aa00ff');
					if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.inSync, text: ' ' + args.file.meta.link.url, id: args.id});
					args.status = 'synced';
				} else {
					log('%comnia.app.Frame.syncCloud: No further action', 'color:#aa00ff');
				}

				delete args.file.meta.link.isSync; 
				if(args.onDone) { args.onDone(args); }
			},
			syncCloudDataValidation: function(args2, args) {
				var error = null;

				try {
				
					// Check response
					if(!args2 || !args2.response || typeof args2.response != 'object') {
						error = 'parse';
					} else {
		
						// Check net ok
						if(!args2.response.success) {
							error = args2.response.str == 'timeout' ? 'timeout' : 'net'
						} else {
		
							// Check server ok
							if(args2.type == 'text') args2.data = JSON.parse(args2.response.dataStr);
							
							if(args2.data && args2.data.status && args2.data.status != 'ok') {
								error = args2.data.status == 'access denied' ? 'auth' : 'server';
							} else {
								// Data ok
							}
							
						} 
					}
					
				}
				catch(e) {
					error = 'unknown';
				}
				
				switch(error) {
					case 'unknown':
					case 'parse':
					case 'net':
						if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.errornet, text: ' ' + args.file.meta.link.url, id: args.id});
						delete args.file.meta.link.isSync;
						break;
					case 'timeout':
						if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.errortimeout, text: ' ' + args.file.meta.link.url, id: args.id});
						delete args.file.meta.link.isSync;
						break;
					case 'auth':
						this.onTokenFail(args);
						delete args.file.meta.link.isSync;
						return;
						break;
					case 'server':
						if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.errorserver, text: ' ' + args.file.meta.link.url, id: args.id});
						delete args.file.meta.link.isSync;
						break;
					default:
						log('omnia.app.Frame.syncCloudDataValidation: Data ok');

						//if(!args.isSilent && args2.data.status) omnia.ui.board2.trigger({evt: omnia.app.events.info, text: args.file.meta.link.url + '<br>status: ' + args2.data.status + '<br>partial: ' + args2.data.partial + '<br>', id: omnia.tools.getUniqueId()});
						
						args.remote = args2.data;
						if(args.next) args.next();
				}
				
				if(error) {
					omnia.tools.error('omnia.app.Frame.syncCloudDataValidation: Data failed, error = ' + error);
					delete args.file.meta.link.isSync;

					if(args.onDone) { args.onDone(args); }
				}
				/*return;
				
				// response: {str: 'timeout', error: 'timeout'};
				log('#data response');
				log(args2);		
				
				if(args2.response.success) {
					if(args2.type == 'text') args2.data = JSON.parse(args2.response.dataStr);
					
					if(args2.data && args2.data.status && args2.data.status != 'ok') {
						delete args.file.meta.link.isSync;

						omnia.tools.error('omnia.app.Frame.onDataEnd: Data failed');
						log(args2);
						
						switch(args2.data.status) {
							case 'access denied':
								this.onTokenFail(args);
								break;
							default:
								if(!args.isSilent) this.onDataFail(args);
								break;
						}
					} else {
						log('omnia.app.Frame.onDataEnd: Data ok');
						args.remote = args2.data;
		
						if(args.next) args.next();
						
					}
				} else {
					delete args.file.meta.link.isSync;
					this.onDataFail(args);
				}*/

			},
			onTokenFail: function(args) {
				log('omnia.app.Frame.onTokenFail');
				
				delete args.file.meta.link.isSync;
				if(args && args.file) delete args.file.meta.link.token;
				
				this.ui.onOpenError();
			},
			
			// Events
			
			onActivate: function(id) {
				log('omnia.app.Frame.onActivate: id = ' + id);

				$.each(this.documents, function(i, doc) {
					if(!doc || !doc.file || !doc.file.meta) return;
					
					if(doc.file.meta.open == 2) doc.file.meta.open = 1;
					if(doc.file.meta.id == id) {
						doc.file.meta.open = 2;
						//if(doc.handler && doc.handler.onActivate) doc.handler.onActivate();
					}
				});
				if(app && app.space) app.space.save();
			}, //
			onDeactivate: function(id) {
				//var doc = this.getDocumentById(id);
				//if(doc.handler && doc.handler.onDeactivate) doc.handler.onDeactivate();
			}, //
			onClose: function(file) {
				log('omnia.app.Frame.onClose: file = ' + file.meta.id);
				
				file.meta.open = 0;
				if(app && app.space) app.space.save();
				
				this.documents = this.documents.filter(function(item) { return item.handler ? item.handler.id != file.meta.id : item.id != file.meta.id; });
			}, //
			
			onOpenError: function() {
				this.ui.onOpenError();
			},
			onResize: function() {
				this.ui.onResize();
			}, //
			onAllOpen: function() {
				if(app && app.space) app.space.onInitEnd();
			}, //
		},
		
		// Apps
		
		Generic: {

			clsId: 'omnia.app.Generic', 
			ui: null,
			frame: null,
			id: null,
			file: null,

			init: function(args) {
				log('omnia.app.Generic.init: id = ' + args.id);
				
				this.id = args.id = args.id || args.type;
				this.frame = args.frame;
				this.file = args.file;

				args.controller = this;
				this.ui = omnia.tools.create(args.ui, args);
				this.ui.render();
			},
			onClose: function(args) {
				if(this.ui.onClose) this.ui.onClose(args);
				delete this.ui;
			},
			onActivate: function(args) {
				if(this.ui.onActivate) this.ui.onActivate(args);
			},
		},
		Code: {
		},
		Book: {
		},
		Mindmap: {
		},
		Jobs: {
		},
		Clock: {
		},
		Track: {
		},
		Calendar: {
		},
		
		// Sub views
		
		Node: {
		},
	},
	api: {
	},
	index: {
		init: {
			core: function() {
				
			},
		},
		main: function() {},
		
		ide: {
		}, 
		idedev: {
		}, 
		idecsscompile: {
		}, 
		
		system: {
		}, 
		
		omnia: {
		}, 
		omniamono: {
		}, 
		
		ebook: {
		}, 
		
		crypt: {
		}, 

		//
		
		slidestyle: {
		}, 		
		slidestyledev: {
		}, 	
		slidestylelogin: {
		},
		slidestylelogindev: {
		},
		slidestyleweb: {
			main: function() {
				
			
			},
		},
		
		clock: {
		},
		test: {
			
			//test2: {
				
				//test2: function() {
				//	omnia.app.Node.checkRef();
				//},
				
			//}
		}, 
		
		stride: {
		},
		strideide: {
		},
		
		pattern: {
		}, // App *
		patterneditor: {
		}, // App
		patterneditordev: {
		}, // App
		patternhome: {

			main: function() {


			}, 
		},
		patternlegal: {
		}, // *
		
	},
	tools: {
		
		// Static variables
		
		keys: {
			CANCEL: 3,
			HELP: 6,
			BACKSPACE: 8,
			TAB: 9,
			CLEAR: 12,
			RETURN: 13,
			ENTER: 14,
			SHIFT: 16,
			CONTROL: 17,
			ALT: 18,
			PAUSE: 19,
			CAPSLOCK: 20,
			ESC: 27,
			SPACE: 32,
			PAGEUP: 33,
			PAGEDOWN: 34,
			END: 35,
			HOME: 36,
			LEFT: 37,
			UP: 38,
			RIGHT: 39,
			DOWN: 40,
			PRINTSCREEN: 44,
			INSERT: 45,
			DELETE: 46,
			KEY0: 48,
			KEY1: 49,
			KEY2: 50,
			KEY3: 51,
			KEY4: 52,
			KEY5: 53,
			KEY6: 54,
			KEY7: 55,
			KEY8: 56,
			KEY9: 57,
			SEMICOLON: 59,
			EQUALS: 61,
			A: 65,
			B: 66,
			C: 67,
			D: 68,
			E: 69,
			F: 70,
			G: 71,
			H: 72,
			I: 73,
			J: 74,
			K: 75,
			L: 76,
			M: 77,
			N: 78,
			O: 79,
			P: 80,
			Q: 81,
			R: 82,
			S: 83,
			T: 84,
			U: 85,
			V: 86,
			W: 87,
			X: 88,
			Y: 89,
			Z: 90,
			CONTEXTMENU: 93,
			NUMPAD0: 96,
			NUMPAD1: 97,
			NUMPAD2: 98,
			NUMPAD3: 99,
			NUMPAD4: 100,
			NUMPAD5: 101,
			NUMPAD6: 102,
			NUMPAD7: 103,
			NUMPAD8: 104,
			NUMPAD9: 105,
			NUMPADMULTIPLY: 106,
			NUMPADADD: 107,
			NUMPADSEPARATOR: 108,
			NUMPADSUBTRACT: 109,
			NUMPADDECIMAL: 110,
			NUMPADDIVIDE: 111,
			F1: 112,
			F2: 113,
			F3: 114,
			F4: 115,
			F5: 116,
			F6: 117,
			F7: 118,
			F8: 119,
			F9: 120,
			F10: 121,
			F11: 122,
			F12: 123,
			F13: 124,
			F14: 125,
			F15: 126,
			F16: 127,
			F17: 128,
			F18: 129,
			F19: 130,
			F20: 131,
			F21: 132,
			F22: 133,
			F23: 134,
			F24: 135,
			NUMLOCK: 144,
			SCROLLLOCK: 145,
			PLUS: 187,
			COMMA: 188,
			MINUS: 189,
			PERIOD: 190,
			SLASH: 191,
			BACKQUOTE: 192,
			OPENBRACKET: 219,
			BACKSLASH: 220,
			HASHTAG: 220,
			CLOSEBRACKET: 221,
			QUOTE: 222,
			META: 224,
		},
		modes: {
			SELECTED: 1,
			CUTTED: 2,
			COPIED: 4,
			FILTERED: 8,
			SAVEPENDING: 16,
			EDIT: 32,
			LINKED: 64,
		},
				
		// Static functions
		
		init: function() {
			for(packId in omnia.ui.packs) { 
				for(groupId in omnia.ui.packs[packId]) {
					for(oid in omnia.ui.packs[packId][groupId]) {
						omnia.ui[oid] = omnia.ui.packs[packId][groupId][oid]; 
					}	
				}
			}

			log = omnia.tools.console.log; //console.log;
			try {
				if(window.omnialog) { var l = window.omnialog; delete window.omnialog; l.forEach(item => omnia.tools.console.items.push(item)); } // from index.core
			}
			catch(e) {}
			log('omnia.tools.init: Start');
			
			omnia.tools.console.start = (new Date()).getTime();
			omnia.lib = {};
			try {
				omnia.window = window;
			}
			catch (e) {
				omnia.window = {isServer: true};
			}
			
			omnia.window.onerror = function(message, url, line) {  
				if(omnia && omnia.tools && omnia.tools.error) omnia.tools.error(message);
				else {
					console.log(message);
					//alert(message + ': ' + url + ' (Line ' + line + ')');
				}
				return false;
			};
			if(omnia.window.applicationCache) omnia.window.applicationCache.addEventListener('updateready', function(e) {
				omnia.tools.cache.onUpdateReady(e);
			});
			
		},
		t: function(id, value, icon, isDots) {
			return omnia.tools.text(id, value, icon, isDots);
		},
		text: function(id, value, icon, isDots) {
			//log('omnia.tools.text: id = ' + id);
			
			if(!id || typeof id != 'string') return;
			if(id[0] == '#') id = id.substr(1);
			
			if(id.substr(id.length - 3) == '...') { id = id.substr(0, id.length - 3); isDots = true; }
			var lib = app && app.text ? app.text : (app && app.lang && app.lang.en ? app.lang.en : {});
			var libOmnia = omnia.text.en;
			
			var prefix = icon ? '<i class="' + icon + ' ox-before"></i>' : '';
			var suffix = isDots ? '...' : '';
//if(id == 'profile') log('#render ' + libOmnia.profile);
			if(lib[id]) return prefix + (value !== undefined ? lib[id].split('%s').join(value) : lib[id]) + suffix;
			if(libOmnia[id]) return prefix + (value !== undefined ? libOmnia[id].split('%s').join(value) : libOmnia[id]) + suffix;
			if(omnia.text[id]) return prefix + (value !== undefined ? omnia.text[id].split('%s').join(value) : omnia.text[id]) + suffix;

			return id;
		},
		create: function(proto, args) {
			if(!proto) return null;
			if(typeof proto == 'string') proto = omnia.tools.string.stringToObject(proto);
			
			var c = Object.create(proto);
			if(c.init) c.init(args);
			
			return c;
		},
		jsonCopy: function(obj) {
			return JSON.parse(JSON.stringify(obj));
		},
		objectMerge: function(objs) {
			var r = {};
			$.each(objs, function(i, obj) {
				$.each(obj, function(id, value) {
					r[id] = value;
				});
			});
			return r;
		},
		getIdByPrefix: function(elem, prefix) {
			var css = $(elem).attr('class').toString();
			var id = css.split(prefix);
			if(id.length > 1) return id[1].split(' ')[0];
			
			return false;
		},
		getUniqueId: function() {
			return (new Date()).getTime().toString(16) + Math.round(Math.random() * 100000).toString(16) + Math.round(Math.random() * 100).toString(16);
		},
		error: function(t, e) {
			omnia.tools.console.error(t, e);
			return t;
		},
		each: function(obj, callback) {
			var length, i = 0;
			if(obj instanceof Array) {
				length = obj.length;
				for( ; i < length; i++) {
					if( callback.call(obj[i], i, obj[i] ) === false ) {
						break;
					}
				}
			} else {
				for(i in obj) {
					if(callback.call(obj[i], i, obj[i]) === false ) {
						break;
					}
				}
			}

			return obj;
		},		
		now: function() { return (new Date()).getTime(); },
		showBS: function(isHide) {
			if(!isHide) {
				var d = $('<div class="bs-debug">');
				d.css({
					'position': 'absolute',
					'display': 'block !important',
					'width': '100%',
					'height': '100%',
					//'max-height': '20px',
					'top': '0',
					'left': '0',
					'overflow': 'hidden',
					'background': 'rgba(255, 240, 255, 1)',
				});
				d.on('click', function() { omnia.tools.showBS(true); });
				
				var row = $('<div class="row" />');
				row.css({
					//'width': '100%',
					//'height': '100%',
					//'background': 'rgba(255, 0, 255, .1)',
				});
				d.prepend(row);
				
				for(var i = 0; i < 12; i++) {
					var col = $('<div class="col-xs-1 debug" />');
					col.css({
						'height': '100%',
						//'background': 'rgba(255, 0, 255, .1)',
					});
					var c = $('<div />');
					c.css({
						'height': '100%',
						'border': '1px dashed #ff00ff',
						'background': 'rgba(255, 240, 255, 1)',
					});
					col.prepend(c);
					row.prepend(col);
				}
					
				$('.row').prepend(d);
				
				$('*[class^="col-"]:not(.debug)').css({
					'border': '1px solid #ff00ff',
					//'background': 'rgba(0, 0, 255, .1)',
				});
				
				var bp = ['xs', 'sm', 'md', 'lg'];
				$.each(bp, function(idx, b) {
					var l = $('<div style="z-index:2000; width:30px; height:30px; background:rgba(255, 0, 255, .5); color:white; font-family:Arial,Helvetiva,sans-serif; text-align:center; line-height:30px; font-size:15px; position:fixed; top:0; left:0;"></div>');
					l.addClass('debug-bp device-' + b + ' visible-' + b);
					l.text(b.toUpperCase());
					$('body').append(l.clone());
				});
				
			} else {
				$('.row .bs-debug').remove();
				$('.debug-bp').remove();
				$('*[class^="col-"]:not(.debug)').css({
					'border': '',
				});
			}
		},
		
		day: 24 * 60 * 60 * 1000,
		hour: 60 * 60 * 1000,
		min: 60 * 1000,
		
		// Static tools
		
		// Core
	
		array: {
			insertAt: function(array, idx, item) {
				if(idx >= array.length) array.push(item);
				else array.splice(idx, 0, item);
			},
			replaceAt: function(array, idx, item) {
				array.splice(idx, 1, item);
			},
			remove: function(array, item) {
				for(var i = 0; i < array.length; i++) {
					if(array[i] === item) {
						array.splice(i, 1);
						return i;
					}
				}
			},
			removeAt: function(array, idx) {
				return array.splice(idx, 1);
			},
			getPos: function(array, item) {
				for(var i = 0; i < array.length; i++) {
					if(array[i] === item) {
						return i;
					}
				}
				return false;
			},
			sortByColumns: function(array, cols) {
				var chunks = omnia.tools.array.splitToChunks(array, cols);
				var r = [];
				for(var i = 0; i < chunks[0].length; i++) 
					for(var n = 0; n < chunks.length; n++)
						if(chunks[n][i]) r.push(chunks[n][i]);
					
				return r;
			},
			sortByKey: function(array, key) {
				return array.sort(function(a, b) {
					var x = typeof key == 'function' ? key(a) : a[key]; 
					var y = typeof key == 'function' ? key(b) : b[key];
					return ((x < y) ? -1 : ((x > y) ? 1 : 0));
				});
			},
			splitToChunks: function(array, parts) {
				var result = [];
				for(var i = parts; i > 0; i--) result.push(array.splice(0, Math.ceil(array.length / i)));
				return result;
			},
			randomProperty: function(obj) {
				var keys = Object.keys(obj);
				return obj[keys[Math.round((keys.length - 1) * Math.random())]];
			},
			trim: function(array, isNode) {
				//log('#omnia.tools.array.trim', ox.copy(array));
				
				var yMin = -1;
				var yMax = -1;
				var xMin = -1;
				var xMax = -1;
				var isMultiDim = true;
				
				for(var y = 0; y < array.length; y++) {
					var row = array[y];
					if(row) {
						
						//log({id: 'check row', row, xMin, xMax, len: row.length});
						
						var isEmpty = false;
						var isArray = row instanceof Array;
						isMultiDim = isMultiDim && isArray;
						if(isArray) {
							isEmpty = true;
							for(var x = 0; x < row.length; x++) {
								if(row[x] && (!isNode || typeof row[x] != 'object' || (row[x].v && row[x].v != '') || (row[x].text && row[x].text != ''))) {
									if(xMin == -1 || xMin > x) xMin = x;
									if(xMax < x) xMax = x;
									isEmpty = false;
								}
							}
						} 
						
						if(!isEmpty && (yMin == -1 || yMin > y)) yMin = y;
						if(!isEmpty && yMax < y) yMax = y;
					} 
				} 

				if(isMultiDim && xMax > 0) {
					for(var y = 0; y < array.length; y++) {
						array[y] = xMin == xMax == -1 ? new Array(1) : array[y].slice(xMin, xMax + 1);
					}
				}

				array = yMin == yMax == -1 ? null : array.slice(yMin, yMax + 1);
	log({id: 'trim', yMin, yMax, isMultiDim, xMin, xMax, array});				
				
				return array;
			},
			addColumn: function(array, idx, item, isRemove) { 
				ox.each(array, function(rowIdx, row) {
					var itemI = item instanceof Array ? item[rowIdx] : item;
					
					if(idx !== null && idx >= 0) {
						if(!isRemove) ox.arr.insertAt(row, idx, itemI);
						else ox.arr.removeAt(row, idx);
					} else {
						row.push(itemI);
					}
				});
				
				return ox.copy(array);
			},
			addRow: function(array, idx, item, isRemove) {
				var row = item instanceof Array ? item : new Array(array[0].length).fill(item);
//log(array);
				if(idx !== null && idx >= 0) {
					if(!isRemove) ox.arr.insertAt(array, idx, row);
					else ox.arr.removeAt(array, idx);
				} else array.push(row);
//log(array);				
				return ox.copy(array);
			},
			getColumn: function(array, idx) {
				var col = [];
				ox.each(array, function(rowIdx, row) {
					col[rowIdx] = row[idx];
				});
				return col;
			},
			unique: function(array) {
				return array.filter((value, index, self) => {
					return self.indexOf(value) === index;
				});
			},
			uniqueObject: function(links) {
				if(!links) links = [];
				var ls = links.map(l => JSON.stringify(l));
				return omnia.tools.array.unique(ls).map(l => JSON.parse(l));				
			},
			uniqueByAttribute: function(array, id) {
				var r = [];
				array.forEach(i => { if(!r.filter(ii => ii[id] == i[id]).length) r.push(i); });
				return r;
			},
			
			setObjectExclusive: function(target, data, values, isExtend) {
				if(!isExtend || !target) target = {};
				target = ox.copy(target);
				
				Object.keys(values).forEach(function(id) {
					if(isExtend && !data[id] && data[id] !== undefined) delete target[id];
					if(data[id]) target[id] = data[id];
				});
				return target;
			},
		},
		color: {
			hslToRgb: function(h, s, l) {
				try {
					var r, g, b;
					
					if(s == 0) {
						r = g = b = l; // achromatic
					} else {
						var hue2rgb = function(p, q, t) {
							if(t < 0) t += 1;
							if(t > 1) t -= 1;
							if(t < 1/6) return p + (q - p) * 6 * t;
							if(t < 1/2) return q;
							if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
							return p;
						}
					
						var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
						var p = 2 * l - q;
						r = hue2rgb(p, q, h + 1/3);
						g = hue2rgb(p, q, h);
						b = hue2rgb(p, q, h - 1/3);
					}
				
					return {r: Math.round(r * 255), g: Math.round(g * 255), b: Math.round(b * 255)};
				}
				catch(e) {
					return {r: 0, g: 0, b: 0};
				}
			}, // h, s, and l are contained in the set [0, 1]
			rgbToHsl: function(r, g, b) {
				try {
					r /= 255, g /= 255, b /= 255;
					var max = Math.max(r, g, b), min = Math.min(r, g, b);
					var h, s, l = (max + min) / 2;
					
					if(max == min) {
						h = s = 0; // achromatic
					} else {
						var d = max - min;
						s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
						switch(max) {
							case r: h = (g - b) / d + (g < b ? 6 : 0); break;
							case g: h = (b - r) / d + 2; break;
							case b: h = (r - g) / d + 4; break;
						}
						h /= 6;
					}
					
					return {h: h, s: s, l: l};
				}
				catch(e) {
					return {h: 0, s: 0, l: 0};
				}
			}, // r, g, and b in the set [0, 255]
			rgbToHex: function(r, g, b) {
				try {
					var dec2hex = function(rgb) { 
						var hex = Number(rgb).toString(16);
						if(hex.length < 2) {
							hex = "0" + hex;
						}
						return hex;
					};
					
					return dec2hex(r) + dec2hex(g) + dec2hex(b);
				}
				catch(e) {
					return '000000';
				} 
			},
			hexToLuma: function(hex) {
				var rgb = omnia.tools.color.hexToRgb(hex);
				return omnia.tools.color.rgbToLuma(rgb.r, rgb.g, rgb.b);
			},
			rgbToLuma: function(r, g, b) {
				return 0.2126 * r + 0.7152 * g + 0.0722 * b;
			},
			hexToHsl: function(hex) {
				var rgb = omnia.tools.color.hexToRgb(hex);
				return omnia.tools.color.rgbToHsl(rgb.r, rgb.g, rgb.b);
			},
			hexToRgb: function(hex) {
				try {
					if(hex[0] == '#') hex = hex.substr(1);
					
					var bigint = parseInt(hex, 16);
					var r = (bigint >> 16) & 255;
					var g = (bigint >> 8) & 255;
					var b = bigint & 255;
					
					return {r: r, g: g, b: b};
				}
				catch(e) {
					return {r: 0, g: 0, b: 0};
				}
			},
			mixHex: function(hex0, hex1, weight) {
				var rgb0 = omnia.tools.color.hexToRgb(hex0);
				var rgb1 = omnia.tools.color.hexToRgb(hex1);

				var rgb = omnia.tools.color.mixRgb(rgb0, rgb1, weight);
				return omnia.tools.color.rgbToHex(rgb.r, rgb.g, rgb.b);
			},
			mixHsl: function(hsl0, hsl1, weight) {
				var rgb0 = omnia.tools.color.hslToRgb(hsl0);
				var rgb1 = omnia.tools.color.hslToRgb(hsl1);
				
				var rgb = omnia.tools.color.mixRgb(rgb0, rgb1, weight);
				return omnia.tools.color.rgb2Hsl(rgb.r, rgb.g, rgb.b);
			},
			mixRgb: function(rgb0, rgb1, weight) {
				if(!weight && weight != 0) weight = 50;
				
				var f1 = weight / 100;
				var f0 = 1 - f1;
				return {
					r: Math.round(rgb0.r * f0 + rgb1.r * f1), //  Math.floor(rgb1.r + (rgb0.r - rgb1.r) * (weight / 100)),
					g: Math.round(rgb0.g * f0 + rgb1.g * f1), //Math.floor(rgb1.g + (rgb0.g - rgb1.g) * (weight / 100)),
					b: Math.round(rgb0.b * f0 + rgb1.b * f1), //Math.floor(rgb1.b + (rgb0.b - rgb1.b) * (weight / 100)),
				};
			},
		},
		console: {
			start: null,
			handler: [],
			items: [],
			
			clear: function() {
				omnia.tools.console.items = [];
				omnia.tools.console.start = ox.now();
				
			},
			log: function() {
				
				// Get parameters
				if(!arguments || !arguments.length) return;
				if(arguments.length > 2 || (arguments.length == 2 && arguments[0].indexOf('%c') == -1)) {
					// Batch
					for(var i = 0; i < arguments.length; i++) log(arguments[i]);
					return;
				}
				

				// Set log item
				var as = arguments;
				var items = omnia.tools.console.items;
				if(as.length && as[0] && typeof as[0] == 'object' && as[0].isDirect && as[0].items) {
					items = as[0].items;
					as = [as[0].t];
				}
				
				var args = {
					t: as[0],
					style: as.length == 2 && (typeof as[1] == 'string') && as[0].indexOf('%c') >= 0 ? as[1] : null,
					time: (new Date()).getTime(),
					mem: omnia.tools.browser.platform.isNode ? mem : null,
				};
				if(!args.style) delete args.style;
				if(!args.mem) delete args.mem;

				// Save item + process events
				var c = omnia.tools.console;
				items.push(args);

				if(omnia.tools.browser.platform.isNode) {
				} else {
					// Browser
					if(typeof args.t == 'string' && args.t[0] == '#') {
						console.log('%c' + args.t.substr(1), 'color:red');
					} else {
						if(args.style) console.log(args.t, args.style); 
						else console.log(args.t); //console.log(...arguments);
					}
					
					// Event handler
					if(c.handler && c.handler.length) {
						$.each(c.handler, function(idx, h) {
							if(h && h.log) h.log(args);
						});
					}
				}
			},
			getStringArray: function(items) {
				if(!items) items = omnia.tools.console.items;
				items.sort((a, b) => a.time - b.time);
				
				var r = [];
				ox.each(items, function(i, item) {
					r.push((item.time - omnia.tools.console.start) + (item.mem ? ' (' + item.mem + ' MB)' : '') + ': ' + item.t);
				});
				return r;
			},
			addHandler: function(handler) {
				log('omnia.tools.console.addHandler');
				omnia.tools.console.handler.push(handler);
			},
			removeHandler: function(handler) {
				log('omnia.tools.console.removeHandler');
				
				$.each(omnia.tools.console.handler, function(idx, h) {
					if(h === handler) {
						omnia.tools.console.handler = omnia.tools.console.handler.splice(idx, 1);
						return;
					}
				});
			},
			error: function(t, e) {
				var error = typeof t == 'object' ? t : e;
				var text = typeof t == 'string' ? t : null;

				if(text) log('%c' /*+ '<span class="ox-tag col-red-back col-white mr10">Error</span>'*/ + text, 'color:#ff0000;');
				if(error) log(typeof error == 'object' ? error : {error});
				
				if(error && error.stack) throw error;
				if(error && error.e && error.e.stack) throw error.e;

				//console.log(arguments, {type: 'error'});
			},
			saveLog: function(url, data, history, l) {
				if(!omnia.tools.browser.platform.isNode) return false;
				
			},
			
			logStorageSize: function() {
				var size = unescape(encodeURIComponent(JSON.stringify(localStorage))).length + ' Bytes';
				log('omnia.tools.console.logStorageSize: total = ' + size);
				
				$.each(localStorage, function(id, s) {
					if(typeof localStorage[id] == 'string') log('omnia.tools.console.logStorageSize: ' + id + ' = ' + unescape(encodeURIComponent(JSON.stringify(s))).length + ' Bytes');
				});
			},
		}, 
		date: {
			parse2: function(s, m00, s00) {
				
				// 2020-01-06_12:34_Europe,Berlin/2020-01-10_14:16_Asia,Peking
				// 08-14
				// 2020-w42/w44
				// 2020-w42-1/2020-w44-7
				
				try {
					var yThreshold = 40;
					s = s.split('_').join('T');
					s = s.split('w').join('W');
					var hasTime = s.indexOf('T') >= 0;
					
					var d = s.split('/'); // Dates
					var d0 = d[0].split('-');
					
					if(m00) {
						if(s[0] == 'W') {
							if(d0.length == 1) d0.push(7);
							d0.unshift(m00.year());
						} else if(d0.length == 1 && s[2] == ':') {
							var s00 = s00.split('-');
							d0[0] = s00[2].substr(0, 2) + 'T' + d[0];
							d0.unshift(s00[1]);
							d0.unshift(s00[0]);
						} else if(d0.length == 1) {
							d0.unshift(m00.month());
							d0.unshift(m00.year());
						} else if(d0.length == 2) {
							d0.unshift(m00.year() + (parseInt(d0[0]) < m00.month() + 1 ? 1 : 0));
						}
						
						//log('#' + s + ' -> ' + d0.join('-'));
					}
					
					var isWeek0 = d0[d0.length - 1][0] == 'W' || d0[d0.length - 2][0] == 'W';
					var isNoYear = d0.length < 3 && !isWeek0;
					
					var year0 = isNoYear ? 1970 : parseInt(d0[0]);
					if(year0 < 100) year0 = (year0 < yThreshold ? 2000 : 1900) + year0;
					
					var tzone0 = null;
					if(!isWeek0) {
						var dayIdx = isNoYear ? 1 : 2;
						var dayStr = d0[dayIdx];
						var day0 = dayStr.split('T');
						
						if(day0.length == 3) {
							tzone0 = day0[2].split(',').join('/');
							day0.pop();
						}
						d0[dayIdx] = day0.join('T');
					} 
					
					var date0 = isNoYear ? d0.slice(0, 2).join('-') : d0.slice(1).join('-');
					var s0 = year0 + '-' + date0;
					
					if(isWeek0 && d.length == 1 && d0.length == 2) {
						date0.push('-1');
						d.push(s0 + '-7');
					}
					
					let m0 = tzone0 ? moment.tz(s0, tzone0) : moment(s0);
					let m1r = null;
					
					if(d.length == 2) m1r = omnia.tools.date.parse2(d[1], m0, s0);
					
					//if(!m00) log('#' + s0 + ' -> ' + tzone0 + ' = ' + m0.format());
		
					var r = {
						d0: m0, 
						d1: m1r ? m1r.d0 : null,
						isNoYear: isNoYear,
						hasTime: hasTime,
						tzone0: tzone0,
						tzone1: m1r ? m1r.tzone0 : null,
						s: s,
					}
					r.t0 = r.d0.toDate();
					if(r.d1) r.t1 = r.d1.toDate();
					return r;
					
				}
				catch(e) {}
				
				//
				
				var d0, d1;
				try {
					var yThreshold = 40;
					//var d0 = new Date();
					//var d1 = new Date();
					
					s = s.split('_').join('T');
					s = s.split('w').join('W');
					
					var ds = s.split('/');
					
					var di0 = ds[0].split('-');
					var y0 = parseInt(di0[0]);
				
					if(di0.length == 2 && di0[1][0] != 'W') ds[0] = '1970-' + ds[0];
					else if(y0 < 100) ds[0] = (y0 < yThreshold ? '20' : '19') + ds[0];
					
					//d0.setTime(Date.parse(ds[0]));
					var dt0 = ds[0].split('T');
					var tzone0 = null;
					if(dt0.length >= 3) {
						ds[0] = dt0[0] + 'T' + dt0[1];
						tzone0 = ds[0].substr(18).split('-').join('/');
					}
					
					d0 = moment(ds[0]);

					if(di0.length == 2 && di0[1][0] == 'W' && ds.length == 1) {
						ds.push(ds[0] + '-7');
						ds[0] += '-1';
					} 
					
					if(ds.length > 1) {
						var dd1 = ds[1].split('T');
						
						if(dd1.length == 1 && dd1[0][2] == ':') ds[1] = ds[0].substr(0, 10) + 'T' + ds[1];
		
						var di1 = ds[1].split('-');
						var y1 = parseInt(di1[0]);
						
						if(di1.length == 2 && di1[1][0] != 'W') {
							var m1 = parseInt(di1[0]);
							//var y1 = d0.getFullYear() + (d0.getMonth() + 1 > m1 ? 1 : 0);
							var y1 = d0.year() + (d0.month() + 1 > m1 ? 1 : 0);
							ds[1] = y1 + '-' + ds[1];
						} else if(y1 < 100) ds[1] = (y1 < yThreshold ? '20' : '19') + ds[1];
	
						if(di1[1][0] == 'W' && di1.length == 2) ds[1] += '-7';
	
						//d1.setTime(Date.parse(ds[1]));
						
						var dt1 = ds[1].split('T');
						var tzone1 = null;
						if(dt1.length >= 3) {
							ds[1] = dt1[0] + 'T' + dt1[1];
							tzone1 = ds[0].substr(18).split('-').join('/');
						}
						//log('#' + s + ' ' + ds[1]);
						
						d1 = moment(ds[1]);
					}
				}
				catch(e) {
					
				};
				
				return {
					d0: d0, 
					d1: ds.length > 1 ? d1 : null, 
					t0: d0.toDate(), 
					t1: ds.length > 1 ? d1.toDate() : null,
					s: s,
				};
			}, //
			toStr: function(d, pre) {
				if(typeof d == 'number') { var d2 = new Date(); d2.setTime(d); d = d2; }
				
				var now = new Date();
				now.setTime(ox.now());

				var isTime = d.getHours() || d.getMinutes() || d.getSeconds();
				var f = pre && pre.getMonth() == d.getMonth() && pre.getDate() == d.getDate() && pre.getFullYear() == d.getFullYear() ? {} : {'month': '2-digit', 'day': '2-digit'};
				if(d.getFullYear() != now.getFullYear() && (!pre || pre.getFullYear() != d.getFullYear())) f['year'] = '2-digit';
				if(isTime) {
					f['hour'] = '2-digit';
					f['minute'] = '2-digit';
					if(d.getSeconds()) f['second'] = '2-digit';
				}
				return d.toLocaleString('de-DE', f).split(',').join('');
			},
			toFormat: function(d, format) {
				if(typeof d == 'number') { var d2 = new Date(); d2.setTime(d); d = d2; }
				return d.toLocaleString('de-DE', format || omnia.tools.date.format.full);	
			},
			toISO: function(time0, time1, hasTimes) { 
				if(!time0) return false;
				hasTime = true;

				var s0 = ox.d.dateStr(time0) + (hasTimes ? '_' + ox.d.timeStr(time0, true) : ''); //time0.toISOString();
				var isSameDay = !time1 ? false : ox.d.isSameDay(time0, time1);
				var s1 = time1 ? (isSameDay ? '' : ox.d.dateStr(time1)) + (hasTimes ? (!isSameDay ? '_' : '') + ox.d.timeStr(time1, true) : '') : null;
				if(time1 && !isSameDay && time0.getFullYear() == time1.getFullYear()) s1 = s1.substr(5);
				
				//var isNoTime0 = !time0.getHours() && !time0.getMinutes() && !time0.getSeconds();
				//var isNoTime1 = time1 && !time1.getHours() && !time1.getMinutes() && !time1.getSeconds();
		
				//if((!time1 && isNoTime0) || (isNoTime0 && isNoTime1)) s0 = s0.split('T')[0];
				//if(time1 && isNoTime0 && isNoTime1) s1 = s1.split('T')[0];
				
//log({id: 'toISO', time0, time1, hasTime, s0, s1});				

				return s0 + (time1 && s1.length ? '/' + s1 : '');
			},
			
			parse: function(s) {
				var p = s.split('/');
				var d = parseInt(p[0]);
				var m = parseInt(p[1]);
				var y = parseInt(p[2]);
				y += y < 50 ? 2000 : 1900;
				var t = new Date(y, m - 1, d);
	
				return {t: t, d: d, m: m, y: y};
			}, //
			timeDiff: function(time0, time1, isSummary, isTimeOnly) {
				var date = omnia.tools.date;
				
				var time0 = time0 instanceof Date ? time0.getTime() : parseInt(time0);
				var time1 = time1 instanceof Date ? time1.getTime() : (time1 ? parseInt(time1) : omnia.tools.now());

				if(time0 > time1) {
					var t1 = time1;
					time1 = time0;
					time0 = t1;
				}
				
				var m0 = moment(time0);
				var m1 = moment(time1);
				
				var diff = time1 - time0;
				var diffDate = new Date(diff);
				
				var years = m0.diff(m1, 'years'); //Math.abs(diffDate.getUTCFullYear() - 1970);
				var yearsFloat = m0.diff(m1, 'years', true); 

				var days = (diff - diff % date.day);
				diff -= days;
				days /= date.day;
				var hours = (diff - diff % date.hour);
				diff -= hours;
				hours /= date.hour;
				var mins = (diff - diff % date.min);
				diff -= mins;
				mins /= date.min;
				var secs = (diff - diff % date.sec);
				diff -= secs;
				secs /= date.sec;
				var ms = diff;
			
				if(isSummary) {
					if(Math.abs(yearsFloat) >= 1) return (Math.round(Math.abs(yearsFloat) * 10) / 10) + ' ' + ox.tx('years');
					//if(years && days > 30) return Math.abs(yearsFloat) + ' ' + ox.tx('years') + ' ' + days + ' ' + ox.tx('days');
					if(Math.abs(days) > 3 || (hours == 0 && mins == 0 && secs == 0 && ms == 0)) return days + ' ' + (days == 1 ? ox.tx('day') : ox.tx('days'));
					if(Math.abs(days) > 0) return days + 'd ' + hours + 'h';
					if(Math.abs(hours) > 1) return (hours ? hours + 'h ' : '') + (hours || mins ? (mins < 10 ? '0' : '') + mins + 'min' : '');
					/*return '' + 
						(years ? years + ' ' + ox.tx('years') + ' ' : '') + 
						(years || days ? days + ' ' + ox.tx('days') + ' ' : '') + 
						(years || days || hours ? hours + ' ' + ox.tx('hours-short') + ' ' : '') + 
						(years || days || hours || mins ? mins + ' ' + (mins < 10 ? '0' : '') + ox.tx('minutes-short') + ' ' : '') + 
						(years || days || hours || mins || secs ? secs + ' ' + (secs < 10 ? '0' : '') + ox.tx('seconds-short') + ' ' : '') + 
						(!years && !days && !hours && !minutes && ms ? ms + ' ms' : '');*/
				}
				
				if(isTimeOnly) {
					var h = days * 24 + hours;
					return (h ? h + 'h ' : '') + (mins < 10 ? '0' : '') + mins + 'min ' + (secs ? (secs < 10 ? '0' : '') + secs + 's' : '');
				}

				var full = '' + (years ? years + 'y ' : '') + 
					(years || days ? days + 'd ' : '') + 
					(years || days || hours ? hours + 'h ' : '') + 
					(years || days || hours || mins ? (mins < 10 ? '0' : '') + mins + 'min ' : '') + 
					(secs ? (secs < 10 && (hours || mins || days || years) ? '0' : '') + secs + 's' : '') + 
					(!days && !hours && !mins && !secs ? ms + 'ms' : '');	
				
				//log({time0, time1, diff, diffDate, years, days, hours, mins, secs, full});				
				return full;
			},
			timeStr: function(time, isLocalTimezone) {
				if(typeof time == 'string') time = parseInt(time);
				if(!(time instanceof Date)) {
					var t = time;
					time = new Date();
					time.setTime(t);
				}
					
				if(isLocalTimezone) return (time.getHours() < 10 ? '0' : '') + time.getHours() + ':' + (time.getMinutes() < 10 ? '0' : '') + time.getMinutes();
				return (time.getUTCHours() < 10 ? '0' : '') + time.getUTCHours() + ':' + (time.getUTCMinutes() < 10 ? '0' : '') + time.getUTCMinutes();
			},
			dateStr: function(time) {
				if(typeof time == 'string') time = parseInt(time);
				if(!(time instanceof Date)) {
					var t = time;
					time = new Date();
					time.setTime(t);
				}
				return time.getFullYear() + '-' + (time.getMonth() < 9 ? '0' : '') + (time.getMonth() + 1) + '-' + (time.getDate() < 10 ? '0' : '') + time.getDate();
			},
			dateTimeStr: function(args) {
				if(typeof args == 'object') {
					var time = args.time;
					if(typeof time == 'string') time = parseInt(time);
					if(!(time instanceof Date)) {
						var t = time;
						time = new Date();
						time.setTime(t);
					}
					return time.toLocaleDateString(args.local ? args.local : 'de-DE', args.options ? args.options : {month: 'short', day: '2-digit', hour: 'numeric', minute: '2-digit'});
				}
				return omnia.tools.date.dateStr(args) + ' ' + omnia.tools.date.timeStr(args);
			},
			today: function() {
				var d = new Date();
				d.setHours(0, 0, 0, 0);
				return d;
			}, //
			currentHour: function() {
				var d = new Date();
				d.setMinutes(0, 0, 0);
				return d;
			},
			getDay: function(date) {
				var d = new Date(date.getFullYear(), date.getMonth(), date.getDate());
				return d;
			}, //
			tomorrow: function() {
				return omnia.tools.date.move(omnia.tools.date.today(), omnia.tools.date.day);
			}, //
			yesterday: function() {
				return omnia.tools.date.move(omnia.tools.date.today(), -omnia.tools.date.day);
			}, //
			toTomorrow: function(time) {
				return omnia.tools.date.move(time, omnia.tools.date.day);
			}, //
			toYesterday: function(time) {
				return omnia.tools.date.move(time, -omnia.tools.date.day);
			}, //
			move: function(date, offset) {
				//var time = timeOrDate instanceof Date ? timeOrDate.getTime() : timeOrDate;
				var d = new Date();
				d.setTime(date.getTime() + offset);
				return d;
			}, //
			is12: function() { 
				var d = new Date(2018, 1, 1, 13);
				return parseInt(d.toLocaleTimeString([], {hour: 'numeric'})) == 1;
			},
			isSameDay: function(date0, date1) {
				return date0.getFullYear() == date1.getFullYear() && date0.getMonth() == date1.getMonth() && date0.getDate() == date1.getDate();
			},
			isInDays: function(date, dateStart, dateEnd) {
				var d = new Date(date.getFullYear(), date.getMonth(), date.getDate());

				var d0 = new Date(dateStart.getFullYear(), dateStart.getMonth(), dateStart.getDate());
				var d1 = new Date(dateEnd.getFullYear(), dateEnd.getMonth(), dateEnd.getDate());

				var e = new Date();
				e.setTime(d1.getTime() + ox.d.day - 1);
				
				return d.getTime() >= d0.getTime() && d.getTime() <= e;
			},
			isOverlapDays: function(date0Start, date0End, date1Start, date1End) {
				return (date0End.getTime() >= date1Start.getTime() && date0Start.getTime() <= date1End.getTime()) || (date1End.getTime() >= date0Start.getTime() && date1Start.getTime() <= date0End.getTime());// || date1Start.getTime() <= date0End.getTime();
			},
			isTime: function(date) {
				return date.getHours() || date.getMinutes() || date.getSeconds();
			},
			fromUTC: function(timeOrDate) {
				if(typeof timeOrDate == 'number') timeOrDate = new Date(timeOrDate);
				var date = timeOrDate; 
				var utc = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
				return new Date(utc);
			},
			
			getWeek: function(date) {
				if(!date) date = new Date();
				if(typeof date == 'number') {
					var dateObj = new Date();
					dateObj.setTime(date);
					date = dateObj;
				}				
				
				var target = new Date(date.valueOf());
				var dayNr = (date.getDay() + 6) % 7;
				target.setDate(target.getDate() - dayNr + 3);
				var firstThursday = target.valueOf();
				target.setMonth(0, 1);
				
				if(target.getDay() != 4) {
					target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);
				}
				return 1 + Math.ceil((firstThursday - target) / 604800000);
			},
			getDateRangeOfWeek: function(weekNo) {
				var d1 = new Date();
				
				// Set to Monday
				var numOfdaysPastSinceLastMonday = d1.getDay() - 1;
				d1 = ox.d.move(d1, -numOfdaysPastSinceLastMonday * ox.d.day);

				var weekNoToday = ox.d.getWeek(d1);
				var weeksOffset = weekNo - weekNoToday;
				
				// Set to target week
				d1 = ox.d.move(d1, 7 * weeksOffset * ox.d.day);
				var d2 = ox.d.move(d1, 6 * ox.d.day);

				d1.setHours(0, 0, 0, 0);
				d2.setHours(23, 59, 59, 999);
				return {start: d1, end: d2};
			}, //
			getMonday: function(date) {
				if(!date) date = new Date();
				if(typeof date == 'number') {
					var dateObj = new Date();
					dateObj.setTime(date);
					date = dateObj;
				}
				
				var d = new Date(date.getFullYear(), date.getMonth(), date.getDate());
				//d.setHours(0);	
				//d.setMinutes(0); 
				//d.setSeconds(0);
				var day = d.getDay();
				var diff = d.getDate() - day + (day == 0 ? -6 : 1);

				return new Date(d.setDate(diff));
			}, //
			
			year: 365 * 24 * 60 * 60 * 1000,
			week: 7 * 24 * 60 * 60 * 1000,
			day: 24 * 60 * 60 * 1000,
			hour: 60 * 60 * 1000,
			min: 60 * 1000,
			sec: 1000,
			
			format: {
				full: {'weekday': 'long', 'year': 'numeric', 'month': 'short', 'day': 'numeric', 'hour': '2-digit', 'minute': '2-digit', 'second': '2-digit'},
				weekDayDate: {'weekday': 'short', 'day': 'numeric'},
				compactDay: {'weekday': 'short', 'month': 'numeric', 'day': 'numeric'},
				shortDay: {'weekday': 'short', 'month': 'short', 'day': 'numeric'},
				fullDay: {'weekday': 'long', 'year': 'numeric', 'month': 'short', 'day': 'numeric'},
				fullDayLong: {'weekday': 'long', 'year': 'numeric', 'month': 'long', 'day': 'numeric'},
				fullDayDate: {'year': 'numeric', 'month': 'short', 'day': 'numeric'},
				fullDate: {'year': 'numeric', 'month': 'long', 'day': 'numeric'},
				dateNoYear: {'month': 'short', 'day': '2-digit'},
				monthYear: {'month': 'short', 'year': 'numeric'},
				dateTimeNoYear: {'month': 'short', 'day': '2-digit', 'hour': '2-digit', 'minute': '2-digit'},
				time: {'hour': '2-digit', 'minute': '2-digit'},
				data: {'year': '2-digit', 'month': '2-digit', 'day': '2-digit', 'hour': '2-digit', 'minute': '2-digit', 'second': '2-digit'},
			},
		},
		string: {
			keys: {
				o3: 'GD3iGehd,Ha(',
			},
			mimeTypes: {
				js: 'application/javascript',
				json: 'application/json',
				text: 'text/plain',
				log: 'text/plain',
				html: 'text/html',
				shtml: 'text/html',
				jpg: 'image/jpeg',
				png: 'image/png',
				pdf: 'application/pdf',
				epub: 'application/epub+zip',
			}, 

			objectToUrlString: function(obj) {
				if(!obj) return "";
				
				var r = "";
				for(var id in obj) {
					if(typeof obj[id] != "object") {
						r += (r.length > 0 ? "&" : "") + id + "=" + encodeURIComponent(obj[id]);
					}
				}
				
				return r;
			},
			urlStringToObject: function(urlString) {
				if(!urlString) return {};
				
				var vars = urlString.split("&");
				var r = {};
				for(var i = 0; i < vars.length; i++) {
					var v = vars[i].split("=");
					if(v.length == 2) {
						r[v[0]] = decodeURIComponent(v[1]);
					}
				}
				
				return r;
			},
			objectToSaveString: function(data) {
				var dataStr = JSON.stringify(data);
				return encodeURIComponent(dataStr);
			},
			saveStringToObject: function(str) {
				str = decodeURIComponent(str);
				
				var data = {};
				try { data = str.length ? JSON.parse(str) : {}; }
				catch(e) { data = {}; }
				return data;
			},
			stringToObject: function(str, n, r, isMustNotBeObject) {
				if(typeof str == 'object') return str;
				try {
					var arr = str.split("."); 
					var fn = r ? r : (window || this);
					for(var i = 0, len = arr.length; i < len; i++) {
						fn = fn[arr[i]];
					}
//if(str.indexOf('user') >= 0) log({id: 'stringToObject', str, r, fn})				
			//log('fn: ' + fn);
					if(!isMustNotBeObject && typeof fn !== "object" && typeof fn !== 'function') {
						throw new Error('omnia.tools.string.stringToObject: ' + str + ' not found');
					}
					return fn;
				}
				catch(e) {
					return null;
				}
			},
			colorToNumber: function(css) {
				var r = css.replace(/\s/g,'').match(/^rgba?\((\d+),(\d+),(\d+),?(\d*)/i);
				return [parseInt(r[1]), parseInt(r[2]), parseInt(r[3]), parseInt(r[4])];
			},
			styleJson: function(json, highlight) {
				if(typeof json != 'string') {
					json = JSON.stringify(json, undefined, 2);
				}
				json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

				var formatted = json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
					var cls = 'number';
					if(/^"/.test(match)) {
						if(/:$/.test(match)) {
							cls = 'key';
						} else {
							cls = 'string';
						}
					} else if (/true|false/.test(match)) {
						cls = 'boolean';
					} else if (/null/.test(match)) {
						cls = 'null';
					}
					
					if(cls == 'number') {
						var v = parseInt(match);
						var dr = new Date(2000, 1, 1);
						
						if(v > dr.getTime()) {
							var d = new Date();
							d.setTime(v);
							match = v + ' <span class="col-medium-4">' + d.toLocaleString({day: '2-digit', month: '2-digit'}) + '</span>';
						}
					}
					
			        return '<span class="ox-text-' + cls + '">' + (match.toString().length > 100 ? match.substr(0, 50) + ' ... ' + match.substr(match.length - 50) : match) + '</span>';
				});
				if(highlight) formatted = formatted.split(highlight).join('<b>' + highlight + '</b>');
				
				return formatted;
			},
			toSize: function(n, isBytes) {
				if(isBytes === true || n < 1024) return n.toLocaleString('en-US'/*, { maximumSignificantDigits: 3 }*/) + ' Bytes';
				if(n < 1024 * 1024) return (Math.round(n * 100 / 1024) / 100).toLocaleString('en-US'/*, { maximumSignificantDigits: 3 }*/) + ' KB' + (isBytes == 2 ? ' (' + n.toLocaleString('en-US'/*, { maximumSignificantDigits: 3 }*/) + ' Bytes)' : '');
				if(n < 1024 * 1024 * 1024) return (Math.round(n * 100 / 1024 / 1024) / 100).toLocaleString('en-US'/*, { maximumSignificantDigits: 3 }*/) + ' MB' + (isBytes == 2 ? ' (' + n.toLocaleString('en-US'/*, { maximumSignificantDigits: 3 }*/) + ' Bytes)' : '');
			},
			toText: function(str) {
				return $('<div />').html(str).text();
			},
			getDomain: function(url, subdomain) {
				subdomain = subdomain || false;
				url = url.replace(/(https?:\/\/)?(www.)?/i, '');

				if(!subdomain) {
					url = url.split('.');
					url = url.slice(url.length - 2).join('.');
				}
				
				if(url.indexOf('/') !== -1) { return url.split('/')[0]; }
				return url;		
			},
			getTLD: function(url) {
				var reLink = /((https?|webcal):\/\/([^/?\s]+)([\S]*))/;
				var urlInfo = url.match(reLink);
				var tld = urlInfo && urlInfo.length > 3 ? urlInfo[3] : null;
				return tld;
			},
			getRandomText: function(length) {
				var words = omnia.text.lorem.split(' ');
				var max = words.length;
				var n = Math.round(Math.random() * max);
				var len = Math.round(Math.random() * (max - n)) / 6 + 1;
				
				var s = words.slice(n, n + len).join(' ');
				if(length) s = s.repeat(Math.round(length / s.length));
				return s;
			},
			getRandomWord: function() {
				var words = omnia.text.lorem.split(' ');
				return words[Math.round(Math.random() * (words.length - 1))];
			},
			getInfoFromTag: function(str, prefix) {
				var idx = str.indexOf(prefix);
				var s0 = str.substr(idx + prefix.length);
				return s0.indexOf(' ') > 0 ? s0.substr(0, s0.indexOf(' ')) : s0;
			},
			removeNoneContentTags: function(html) {
				var s = html.replace(/<head>(?:.|\n|\r)+?<\/head>/gi, '');
				s = s.replace(/((<[\s\/]*script\b[^>]*>)([^>]*)(<\/script>))/gi, '');
				s = s.replace(/<style\b[^>]*>(?:.|\n|\r)+?<\/style>/gi, '');
				s = s.replace(/<svg\b[^>]*>(?:.|\n|\r)+?<\/svg>/gi, '');
				
				//log('omnia.tools.string.removeNoneContentTags: ' + html.length + ' to ' + s.length);
				return s;
			},
			checksum: function(s) {
				if(!s) return false;
				if(typeof s == 'object') s = JSON.stringify(s);
				
				var hash = 0, strlen = s.length, i, c;
				if ( strlen === 0 ) {
					return hash;
				}
				for ( i = 0; i < strlen; i++ ) {
					c = s.charCodeAt( i );
					hash = ((hash << 5) - hash) + c;
					hash = hash & hash; // Convert to 32bit integer
				}
				return hash;
			},
			textToBullets: function(v, dot, space) {
				if(dot === undefined) dot = '<span class="ox-textblock" style="display:inline-block; width:1.2em;">&bull;</span>';
				if(space === undefined) space = '<span style="display:inline-block; width:1.2em;"></span>';
				
				var re = /(^|\n|<br>)( )*(-[ ]*)([^<\$\n]*)/g; 
				var all = [...v.matchAll(re)];
				//var all2 = [];
				
				var s = v;
				ox.each(all, function(idx, match) {
					match = {
						full: match[0],
						del: match[1],
						space: match[2],
						dot: match[3],
						text: match[4],
						level: (match[0].indexOf('-') - match[1].length) / 2,
					};
					//all2.push(match);
					
					var s0 = s.substr(0, s.indexOf(match.full));
					var s1 = s.substr(s.indexOf(match.full) + match.full.length);
					
					//match.s0 = s0;
					//match.s1 = s1;
					
					s = s0 + match.del + space.repeat(match.level) + dot + match.text + s1;
				});
				
				/*log({
					v: v,
					match: v.match(re),
					matchAll: v.matchAll(re),
					all: all,
					all2,
					s,
				});*/
				
				return s;
			},
			encryptXor: function(value, key, isEncode, isDecode) {
				try {
					var r = "";
					
					if(typeof value == 'object') value = JSON.stringify(value);
					if(isDecode) value = decodeURIComponent(value);
					
					var klen = key.length;
					var vlen = value.length;
					var k = 0;
					var v = 0;
					
					for(v; v < vlen; v++) {
						r += String.fromCharCode(value.charCodeAt(v) ^ key.charCodeAt(k));
						k = (++k < klen ? k : 0);
					}
					
					return isEncode ? encodeURIComponent(r) : r;
				}
				catch(e) {
					return false;
				}	
			},
			decryptXor: function(hash, key, isDecode, isObjectReturn) {
				try {
					var r = omnia.tools.string.encryptXor(hash, key, null, isDecode);
					if(!r) return false;
					
					return isObjectReturn ? JSON.parse(r) : r;
				}
				catch(e) {
					return false;
				}
			},
			isTextIn: function(text0, text1, isNormalized) {
				//text0 = text0.toLowerCase();
				//text1 = text1.toLowerCase();
				//var text1Words = text1.replace(/[^a-zA-Z0-9 ]+/g, '').replace(/[ ]+/, ' ').split(' ');
				//var text0Words = text0.replace(/[^a-zA-Z0-9 ]+/g, '').replace(/[ ]+/, ' ').split(' ');
				
				if(!isNormalized) {
					text1 = text1.toLowerCase();
					text0 = ox.str.toNormalize(text0);
				}
				var text0Words = text0.split(' ');
				
				var isAllIn = text0Words.length >= 1;
				if(isAllIn) for(var i = 0; i < text0Words.length; i++) if(!(text1.indexOf(text0Words[i]) >= 0)) isAllIn = false;
				
				return isAllIn;
			},
			toNormalize: function(s) {
				return s.toLowerCase().replace(/[^a-zA-Z0-9 ]+/g, ' ').replace(/[ ]+/, ' ').trim();
			},
			htmlToObject: function(html, isFull) {
				var body = html.match(/<body(?:.|\n|\r)+?<\/body>/);
				if(body) {
					body = body.toString();
					body = body.substr(body.indexOf('>') + 1);
					body = body.substr(0, body.lastIndexOf('<'));
				}
				
				if(isFull) {
					var head = html.match(/<head(?:.|\n|\r)+?<\/head>/);
					if(head) head = head.toString();
					
					return ox.node({t: 'html', c: [{t: 'head', html: head}, {t: 'body', html: body}]});
				} else {
					return ox.node({t: 'body', html: body});
				}
			},
			xmlToJson: function(xml) {
				const parser = new DOMParser();
				const doc = parser.parseFromString(xml, "application/xml");
				return omnia.tools.string.parseXmlNode(doc.documentElement);
			},
			parseXmlNode: function(node) {
				const obj = {};
				const attrs = node.attributes;
				for(let i = 0; i < attrs.length; i++) {
					obj[attrs[i].name] = attrs[i].value;
				}
				
				const children = node.childNodes;
				for(let i = 0; i < children.length; i++) {
					const child = children[i];
					if(child.nodeType === 3/*Node.TEXT_NODE*/ || child.nodeType === 8/*Node.COMMENT_NODE*/) {
						continue;
					}
					const nodeName = child.nodeName;
					const nodeValue = omnia.tools.string.parseXmlNode(child);
					if(obj[nodeName]) {
						if(!Array.isArray(obj[nodeName])) {
							obj[nodeName] = [obj[nodeName]];
						}
						obj[nodeName].push(nodeValue);
					} else {
						obj[nodeName] = nodeValue;
					}
				}
				return obj;
			},
			getDocFromHtml: function(html) {
				const parser = new DOMParser();
				const doc = parser.parseFromString(html, "application/xhtml+xml");
				
				var isParseError = parsedDocument => {
					var parser = new DOMParser();
					var errorneousParse = parser.parseFromString('<', 'application/xml');
					var parsererrorNS = errorneousParse.getElementsByTagName("parsererror")[0].namespaceURI;

					if(parsererrorNS === 'http://www.w3.org/1999/xhtml') {
						return parsedDocument.getElementsByTagName("parsererror").length > 0;
					}
					return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;
				};

				//log({id: 'ox.str.getDocFromHtml', html, doc});
				if(isParseError(doc)) return html;
				
				//const doc = parser.parseFromString(html, "text/html");
				//if(doc.toString().includes('This page contains the following errors')) return html;
				
				return doc;
			},
			max: function(text, length) {
				var end = length > 20 ? 10 : 3;
				var start = length - end;
				return text.length > length ? text.substr(0, start) + '...' + text.substr(text.length - end) : text;
			},
			highlight: function(text, highlights, col) {
				if(!text || typeof text != 'string') return text;
				
				highlights.forEach(q => {
					var re = new RegExp('(' + q + ')', "ig");
					text = text.replace(re, '<span style="background:' + (col || 'rgba(0, 255, 255, .2)') + '; margin-top:-6px;">$1</span>')
				});
				return text;
			},
			urlToName: function(url) {
				var n = url.replace("://", "_").replace(/[\/\?\=\.,]+/g, "_").replace(/(%[0-9a-fA-F]{2})+/g, '_');
				//n = n.substring(0, n.lastIndexOf('_')) + "." + n.substring(n.lastIndexOf('_') + 1, n.length);
				return n;
			},
			toAsciiReadable: function(s, isKeepSlashed) {
				if(isKeepSlashed) return s.replace(/[\xFC]/g, 'ue').replace(/[\xF6]/g, 'oe').replace(/[\xE4ä]/g, 'ae').replace(/[\xDC]/g, 'Ue').replace(/[\xD6]/g, 'Oe').replace(/[\xC4]/g, 'Ae').replace(/[\xDF]/g, 'ss').replace(/\s/g, '_').replace(/[_]+/, '_');
				return s.replace(/[\xFC]/g, 'ue').replace(/[\xF6]/g, 'oe').replace(/[\xE4ä]/g, 'ae').replace(/[\xDC]/g, 'Ue').replace(/[\xD6]/g, 'Oe').replace(/[\xC4]/g, 'Ae').replace(/[\xDF]/g, 'ss').replace(/\s/g, '_').replace(/[^\w\-\(\)\{\}\[\]]/g, '-').replace(/[_]+/, '_').replace(/[-]+/g, '-');
			},
			splitToSentences: function(s) {
				//var re = /[^.!?]+[.!?]+/g;
				var re = /[^.!?]+[.!?]+/g;
			
				var se = [];
				//var sp = s.split(/[.!?]/);
				var sp = [].concat(s.match(re)).map(s => (s ? '' + s : ''));
				sp.forEach((p, i) => {
					var isNew = false;
					var next = i == sp.length - 1 ? null : sp[i + 1];
					var last = i ? sp[i - 1] : null;
					var isLastNum = i && parseInt(last[last.length - 2]).toString() == last[last.length - 2];
					
					if(!i) isNew = true;
					else if(!isLastNum && !(/[a-zA-ZÄÖÜ]/.test(p.substr(0, 1)))) isNew = true;
					
					//if(!isNew) p = isLastNum ? '#' : '_' + p;
					//p = '[' + p[0] + ']' + p.substr(1);
					
					if(isNew) se.push(p);
					else se[se.length - 1] += p;
				});
				se = se.map(t => t.trim()).filter(t => t.length > 3);
				if(se.length) return se;
				return s.split(/[\.\?\!](\s|$)/g).map(t => t.trim()).filter(t => t.length > 3 && t.includes(' '));
			
				//
				//var re = /BEGIN(?:(?!\d+\.\s+[a-z])(?![A-Z][a-z])\s*\b|\.\s+[A-Z])/g;
				
				var ss = [].concat(s.match(re)).map(s => (s ? '' + s : '').trim()).filter(t => t.length > 3);
				if(ss.length) return ss;
				return s.split(/[\.\?\!](\s|$)/g).map(t => t.trim()).filter(t => t.length > 3);
			},
			toJSON: function(s) { //return;
				try {
					//var reJSON = new RegExp('{\s*("[^"]*"\s*:\s*(?:(?:"[^"]*")|[^\{\},"]*)(?:,\s*|\s*\}))*');
					//if(!reJSON.test(s)) return null;
					
					//var jsonText = s.match(reJSON)[0];
					var json = JSON.parse(s);
					//return !isReturnFinding ? json : {json, match: jsonText};
					return json
				}
				catch(e) {
					log({id: 'omnia.tools.string.toJSON', e});
					return null;
				}
			},
			getStatistics: function(s) {
				return {
					'string': s.length,
					'bytes': ox.str.toSize(s.length),
					'words': s.split(' ').filter(w => w.length > 1).length,
					'chars': s.replace(/[^A-Za-z0-9]/g, '').length,
				};
			},
			
			// Nodes
			replaceLists: function(text, type) {
				/*str = str.split('\n\n').join('\n$');
				const regex = /([\*\-]+\s+\w+([\s\S]*?(?=\n[\*\-]+|\n[0-9]+\.|$)))|([0-9]+\.\s+\w+([\s\S]*?(?=\n[\*\-]+|\n[0-9]+\.|$)))/gm; // regular expression to match both unordered and ordered lists, including empty lines between list items
				const listItems = str.match(regex); // match all lists in the string
				var r = [];
				if(listItems && listItems.length) listItems.forEach((li, i) => {
					if(
						!i || 
						listItems[i - 1][0] != li[0] || 
						(parseInt(listItems[i - 1][0]) == 0) != (parseInt(li[0]) == 0) 
					) r.push([]);
					li = li.split('\n$').join('\n\n');
					r[r.length - 1].push(li);
				});
				
				log({r});
				return r;*/
			
				try {
					var syntax = {
						html: {
							li: '<li>',
							lic: '</li>',
							ul: '<ul class="">',
							ulc: '</ul>',
							ol: '<ol class="">',
							olc: '</ol>',
							p: '',
							pc: '<br>',
							pm: '',
							join: '\n',
						},
						node: {
							li: '  {"v": "',
							lic: '"}',
							ul: '{"v": "", "c": [\n',
							ulc: '\n]}',
							ol: '{"v": "", "c": [\n',
							olc: '\n]}',
							p: '{"v": "',
							pc: '"}',
							pm: '',
							join: ',\n',
							convert: (text) => {
								try {
									var n = JSON.parse('{"c": [' + text + ']}'); 
									if(!n.v && n.c && n.c.length == 1) n = n.c[0];
									return n;
								}
								catch(e) {
									log({e, text});
									return text;
								}
							},
						},
					};
					var f = syntax[type || 'html'];
			
					text = text.split('\n\n').join(f.pm + '\n');
					//var regex = /([\*\-]+\s+\w+([\s\S]*?(?=\n[\*\-]+|\n[0-9]+\.|$)))|([0-9]+\.\s+\w+([\s\S]*?(?=\n[\*\-]+|\n[0-9]+\.|$)))/gm;
					var regex = /([\*\-]+\s+[\w\u00c4\u00e4\u00d6\u00f6\u00dc\u00fc\u00df]+([\s\S]*?(?=\n[\*\-]+|\n[0-9]+\.|$)))|([0-9]+\.\s+[\w\u00c4\u00e4\u00d6\u00f6\u00dc\u00fc\u00df]+([\s\S]*?(?=\n[\*\-]+|\n[0-9]+\.|$)))/gm;
					var listItems = text.match(regex);
					if(!listItems) listItems = [];
					
					listItems.forEach(li => { 
						var isOl = parseInt(li[0]) > 0;
						text = text.split(li).join('<li' + (isOl ? 'o' : 'u') + '>' + li + '</li>'); 
					});
					
					var lines = text.split('\n');
					lines.forEach((line, i) => {
						if(line.substr(0, 3) != '<li') return;
						if(!i || lines[i - 1].substr(0, 3) != '<li' || lines[i - 1][3] != line[3]) lines[i] += '<start>'; //lines[i] = '<' + line[3] + 'l>' + line;
						if(i == lines.length - 1 || lines[i + 1].substr(0, 3) != '<li' || lines[i + 1][3] != line[3]) lines[i] += '<end>'; //lines[i] = '<' + line[3] + 'l>' + line;
					});
					//log({t2: text});
					lines.forEach((line, i) => {
						if(line.substr(0, 3) != '<li') {
							//if(i == lines.length - 1 || lines[i + 1].substr(0, 3) != '<li') 
							lines[i] = f.p + lines[i] + f.pc;
							return;
						}
						var tag = line[3] + 'l';
						
						lines[i] = 
							(line.includes('<start>') ? f[tag].split('class=""').join('class="m0 ' + (i ? 'mt10 ' : '') + (i == lines.length - 1 ? '' : 'mb10') + '"') : '') + 
							f.li + line.substr(line.indexOf(' ') + 1).split('</li>').join(f.lic) + 
							(line.includes('<end>') ? f[tag + 'c'] : '');
						lines[i] = lines[i].split('<start>').join('');
						lines[i] = lines[i].split('<end>').join('');
					});
					text = lines.join(f.join);
			
					if(f.convert) text = f.convert(text);
			
					//log({text});
					return text;
				}
				catch(e) {
					log({e});
					return text;
				}
			},
			textToNode: function(text, isGetEditInfo) {
				if(!text) return {v: ''};
				
				var isEdit = false;
				var data = {v: ''};
				var textLines = text.split('\n');
				
				//if(/((https?|webcal):\/\/([^/?\s]+)([\S]*)))/.test(text)) text = '#link-' + text;
				if(text.substr(0, 4) == 'http') {
					data = {v: '#link-' + text};
					isEdit = true;
				} else if(textLines.length == 3 && textLines[2].substr(0, 4) == 'http') {
					data = {v: '#link', s: 1, c: [
						{v: '#attr-title ' + textLines[0]},
						{v: '#attr-url ' + textLines[2]},
					]};
					isEdit = true;
				} else if(textLines.length > 1) {
					//data = {c: textLines.map((l) => { return {v: l}; })};
					data = ox.str.replaceLists(text, 'node');
				} else {
					data = {v: text};
				}
				
				if(isGetEditInfo) return {data, isEdit};
				return data;
			},
			
			// Patch
			getPatch: function(str0, str1, asObject) {
				if(!str0 || !str1) {
					ox.error('omnia.tools.string.getPatch: Parameter error' + (!str0 ? ', str0 missing' : '') + (!str1 ? ', str1 missing' : ''));
					return;
				}
				var t0 = ox.now();
				
				if(!omnia.lib.dmp) omnia.lib.dmp = new diff_match_patch();

				try {
					if(typeof str0 == 'object') str0 = JSON.stringify(str0);
					if(typeof str1 == 'object') str1 = JSON.stringify(str1);
				}
				catch(e) {
					log(e);
					return false;
				}

				var patch = ox.lib.dmp.patch_make(str0, str1);
				if(asObject) return patch;

				var patchText = ox.lib.dmp.patch_toText(patch);
				
				log('%comnia.tools.string.getPatch: done in ' + (ox.now() - t0) + ' ms, size = ' + ox.str.toSize(str1.length) + ', ' + patch.length + ' diffs', 'color:#a0a0a0');
				return patchText;
			},
			applyPatch: function(patch, str1) {
				var t0 = ox.now();

				if(typeof patch == 'string') patch = ox.lib.dmp.patch_fromText(patch);
				if(typeof str1 == 'object') str1 = JSON.stringify(str1);
		
				var s = ox.lib.dmp.patch_apply(patch, str1)[0];

				log('%comnia.tools.string.applyPatch: done in ' + (ox.now() - t0) + ' ms, size = ' + ox.str.toSize(str1.length) + ', ' + patch.length + ' diffs', 'color:#a0a0a0');
				return s;
			}, 
		},

		// Client/DOM related

		browser: {
			
			// Public variables
			
			isTouch: false,
			env: 'desktop',
			platform: {},
			isReady: false,

			CLICK_TOUCH: 'tap',
			CLICK_MOUSE: 'click',
			CLICK: 'click',
			CLICK_DOWN_TOUCH: 'touchstart',
			CLICK_DOWN_MOUSE: 'mousedown',
			CLICK_DOWN: 'mousedown',
			CLICK_MOVE_TOUCH: 'touchmove',
			CLICK_MOVE_MOUSE: 'mousemove',
			CLICK_MOVE: 'mousemove',
			CLICK_UP_TOUCH: 'touchend',
			CLICK_UP_MOUSE: 'mouseup',
			CLICK_UP: 'mouseup',
			CLICK_DOUBLE: 'dblclick',
			CLICK_DOUBLE_TOUCH: 'doubletap',
			CLICK_DOUBLE_MOUSE: 'dblclick',
			CLICK_HOLD: 'tabhold',
			OVER: 'mouseover',
			OVER_MOUSE: 'mouseover',
			OVER_TOUCH: 'touchstart',
			OUT: 'mouseover',
			OUT_MOUSE: 'mouseout',
			OUT_TOUCH: 'touchend',
			
			loadedResources: {},

			// Public functions
			
			init: function(args) {
				var me = this;
				if(app && !app.debug) log = function() {};
				
				window.onerror = (message, url, line, column, error) => log('#Error', {message, url, line, column, error});
				
				var html = document.getElementsByTagName('html');
				html[0].style.background = args.back || '#000000';
				
				// 'html, body': { less: '.fixed; .w100; .h100; .cropped;', 'overscroll-behavior-x': 'none' },
				try {
					html[0].style.overflow = document.body.style.overflow = 'hidden';
					html[0].style.position = document.body.style.position = 'fixed';
					html[0].style.width = document.body.style.width = '100%';
					html[0].style.height = document.body.style.height = '100%';
					html[0].style.overscrollBehaviorX = document.body.style.overscrollBehaviorX = 'none';
				}
				catch(e) {}

				//omnia.tools.browser.addViewport();
				
				if(!args.bar && args.back) {
					log('omnia.tools.browser.init: Initial');
					
					omnia.tools.browser.ready(function() { 
						log('omnia.tools.browser.init: Draw loading bar');
	
						var bar0 = document.createElement('div');
						bar0.style.height = '50%';
						bar0.style.width = '100%';
						bar0.style.borderBottom = '6px solid ' + args.color;
						bar0.style.opacity = '.3';
						bar0.style.position = 'absolute';
	
						var bar = document.createElement('div');
						bar.style.height = '50%';
						bar.style.width = '10%'; // Document ready is 10%
						bar.style.borderBottom = '6px solid ' + args.color;
						bar.style.position = 'absolute';
						//bar.style.setProperty('-webkit-transition', 'all .1s ease-out');
	
						document.body.style.background = args.back; 
						document.body.style.margin = '0px';
						document.body.appendChild(bar0); 
						document.body.appendChild(bar); 
						
						try { 
							navigator.splashscreen.show(); 
							navigator.splashscreen.hide();
						}
						catch(e) {}
	
						args.bar0 = bar0;
						args.bar = bar;
					});
				};
				
				if(args.packs) {
					log('omnia.tools.browser.init: Load packs');
					args.onPacksLoaded = function() { me.init(args); };
					if(!args.exitWave) args.exitWave = 3;
					
					omnia.tools.browser.loadPacks(args);
					return;
				}

				log('omnia.tools.browser.init: All packs loaded');
				if(!app) app = {};

				// Meta
				var platform = omnia.tools.browser.getEnironment2();
				$('body').addClass('ox-env-' + platform.os);
				$('body').addClass('ox-env-' + platform.method);
				$('body').addClass('ox-env-' + platform.device);
				$('body').addClass('ox-env-' + (platform.screen.pixelratio > 1 ? 'retina' : ''));
				$('body').addClass('ox-env-' + platform.framework);
				
				//log(platform);

				var env = omnia.tools.browser.env = omnia.tools.browser.getEnironment();
				if(app) app.env = env;
				
				$('head').append('<link rel="shortcut icon" href="' + (args.favicon ? args.favicon : args.icon) + '"/>');
				omnia.tools.browser.addViewport(null, args.isWeb);
				if(!args.isWeb) omnia.tools.browser.addAppleStandalone(args);
				$('head').append('<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>');
				
				if(env != 'desktop' || args.isTouch) {
					omnia.tools.browser.isTouch = true;
					omnia.tools.browser.CLICK = omnia.tools.browser.CLICK_TOUCH;
					omnia.tools.browser.CLICK_UP = omnia.tools.browser.CLICK_UP_TOUCH;
					omnia.tools.browser.CLICK_MOVE = omnia.tools.browser.CLICK_MOVE_TOUCH;
					omnia.tools.browser.CLICK_DOWN = omnia.tools.browser.CLICK_DOWN_TOUCH;
					omnia.tools.browser.CLICK_DOUBLE = omnia.tools.browser.CLICK_DOUBLE_TOUCH;
					omnia.tools.browser.OVER = omnia.tools.browser.OVER_TOUCH;
					omnia.tools.browser.OUT = omnia.tools.browser.OUT_TOUCH;
				}

				if(args.title) document.title = args.title;
				
				// Cordova
				if(platform.framework == 'cordova') {
					$('body').addClass('ox-env-' + platform.framework);
					try {
						log('omnia.tools.browser.init: Cordova found');
						
						Keyboard.shrinkView(true);
						Keyboard.disableScrollingInShrinkView(true);
						Keyboard.hideFormAccessoryBar(true);
					}
					catch(e) {
						log('omnia.tools.browser.init: No Cordova found');
						log(e);
					}
				}

				// Less
				if(args.isLess) {
					log('omnia.tools.browser.init: Render less');
					var config = {
						root: 'omnia',
						isCustom: false,
						isExport: args.isLessExport,
						multiple: [
							{id: 'omnia.ui.less.shortcuts2', less: omnia.ui.less.shortcuts}, 
							{id: 'omnia.ui.less.defaults.styles2', less: [omnia.ui.less.styles, true]},
	
							//{id: 'omnia.ui.less.shortcuts', less: omnia.ui.less.shortcuts}, 
							//{id: 'omnia.ui.less.defaults.styles', less: [omnia.ui.less.defaults.styles, true]},
							//{id: 'omnia.ui.less.defaults.elements' , less: omnia.ui.less.defaults.elements},
							//{id: 'omnia.ui.less.defaults.components', less: omnia.ui.less.defaults.components},
							//{id: 'omnia.ui.less.skin', less: omnia.ui.less.skins['mind']},
						],
					};
					
					$.each(omnia.ui, function(id, element) {
						if(id != 'less' && omnia.ui[id].styles) config.multiple.push({id: 'omnia.ui.' + id + '.styles', less: omnia.ui[id].styles});
					});
					
					if(args.less) {
						config.multiple = config.multiple.concat(args.less);
						config.isCustom = true;
					}
					omnia.tools.less.attach(config);
				}
				
				// Common handler
				$.each(omnia.ui, function(oid, comp) {
					if(comp.init) comp.init();
				});

				// Start
				if(args.bar) { $(args.bar0).remove(); $(args.bar).remove(); }
				
				log('%comnia.tools.browser.init: Call onReady, after ' + (omnia.tools.now() - omnia.tools.console.start) + ' ms', 'color:green;');
				//if(window.omniasource == 'device') ox.fs.client.stable();
				if(args.onReady) args.onReady();

				log('%comnia.tools.browser.init: Done, after ' + (omnia.tools.now() - omnia.tools.console.start) + ' ms', 'color:green');
			},
			setMethod: function(method) {
				//method = 'auto';
				if(!method || method == 'auto') method = ox.pf.method;
				
				$('body').removeClass('ox-env-mouse ox-env-touch');
				$('body').addClass('ox-env-' + method);
				ox.pf.method = method;
				
				var b = ox.b;
				var mc = method.toUpperCase();
				var isTouch	= omnia.tools.browser.isTouch = method == 'touch';
				b.CLICK = b['CLICK_' + mc];
				b.CLICK_UP = b['CLICK_UP_' + mc];
				b.CLICK_MOVE = b['CLICK_MOVE_' + mc];
				b.CLICK_DOWN = b['CLICK_DOWN_' + mc];
				b.CLICK_DOUBLE = b['CLICK_DOUBLE_' + mc];
				b.OVER = b['OVER_' + mc];
				b.OUT = b['OUT_' + mc];
			},
			ready: function(callback) {
				log('%comnia.tools.browser.ready: after ' + (omnia.tools.now() - omnia.tools.console.start) + ' ms', 'color:green');
				var onDone = function() {
					omnia.tools.browser.isReady = true;
					callback();
				};
				
				if(document.readyState != 'loading') onDone(); // in case the document is already rendered
				else if(document.addEventListener) document.addEventListener('DOMContentLoaded', onDone);
				else document.attachEvent('onreadystatechange', function() { if(document.readyState == 'complete') onDone(); }); // IE <= 8
    		},
    		loadPacks: function(args) {
				//var packs = omnia.packs;
				var isFirst = false;
				
				if(!args.waves) {
					var waves = [[], [], [], []];
					var waves2 = [[], [], [], []];

					for(var i = 0; i < args.packs.length; i++) { 
						var pack = args.packs[i]; 
						
						var packs = omnia.packs;
						var isLocal = window.omniasource != 'remote' || (typeof pack == 'string' && pack.indexOf('-local') >= 0);
						var packId = isLocal ? pack.split('-local').join('') : pack;
						var packConfig = !packs[packId] ? null : (isLocal && packs[packId].local ? packs[packId].local : packs[packId].remote);
						
						if(!packConfig) { waves[1] = waves[1].concat([pack]); } // Pack not available, URL
						else if(!packConfig instanceof Array) { waves[1] = waves[1].concat([packConfig]); } // Single string
						else { 
							if(packConfig[0] instanceof Array) { // Waves
								var w = 1;
								packConfig.forEach(function(wave) {
									if(packId == 'core' && w == 1) {
										waves[0] = [wave[0]];
										waves[1] = waves[1].concat(wave.splice(1));
									} else waves[w] = waves[w].concat(wave);
									w++;
								});
							} else { // Multiple items
								waves[1] = waves[1].concat(packConfig);
							}
						}
					}
					//log('%comnia.tools.browser.loadPacks: Build packs, ' + waves[1].length + ' found in wave 1', 'color:#0000ff;');
					
					delete args.packs;
					isFirst = true;
		
					args.waves = waves;
					args.waveIdx = waves[0].length ? 0 : 1;
					
					//console.group('omnia.tools.browser.loadPacks: Load wave ' + args.waveIdx);
				} else {
					args.waveIdx++;
					if((!args.exitWave && args.waveIdx == args.waves.length) || (args.waveIdx == args.exitWave)) { 
						log('%comnia.tools.browser.loadPacks: Exit from waves', 'color:#a0a0a0;');
						args.onPacksLoaded(args);
					}

					//console.groupEnd();
					//console.group('omnia.tools.browser.loadPacks: Load wave ' + args.waveIdx);
					
					if(args.waves[args.waveIdx].length) log('%comnia.tools.browser.loadPacks: Next wave ' + args.waveIdx, 'color:#a0a0a0;');
				}

				var loader = omnia.tools.create(omnia.tools.Loader, {
					items: args.waves[args.waveIdx].length, 
					onLoad: args.bar ? function(loaded, items) { 

						var c = args.waves.length;
						var w = args.waveIdx / c;
						var i = loaded / items;
						var p = (w + i * (1 / c)) * 100;
						
						args.bar.style.width = (p * .9 + 10) + '%';
					
					} : (args.onLoad ? function(loaded, items) { args.onLoad(loaded, items) } : null), 
					onLoaded: args.waveIdx < args.waves.length - 1 ? function() { omnia.tools.browser.loadPacks(args); } : (args.exitWave === undefined  ? function() { 
						//console.groupEnd();
						//log('%comnia.tools.browser.loadPacks: Waves are done', 'color:#a0a0a0;');
						if(args.onPacksLoaded) args.onPacksLoaded(args); 
					} : null),
				});
			
				if(!args.waves[args.waveIdx].length) {
					//log('%comnia.tools.browser.loadPacks: Wave empty', 'color:#aa00ff');
					loader.onLoaded();
				} else {
					var task = function() { omnia.tools.browser.loadResource({batch: args.waves[args.waveIdx], loader: loader}); };
				
					if(!omnia.tools.browser.isReady && isFirst) omnia.tools.browser.ready(task);
					else task();
				}
    		},
			loadResource: async function(args) {
				if(args.batch) { 
					/// TODO: Add loader if there is none
					for(var i = 0; i < args.batch.length; i++) { 
						omnia.tools.browser.loadResource({
							src: typeof args.batch[i] == 'object' ? args.batch[i].src : args.batch[i], 
							type: args.type || args.batch[i].type || 'js', 
							loader: args.loader, 
							onLoaded: args.onLoaded,
							map: typeof args.batch[i] == 'object' ? args.batch[i].map : null, 
						});
					}
					return;
				}
				
				if(omnia.tools.browser.loadedResources[args.src]) {
					if(args.loader) args.loader.onLoad();
					if(args.onLoaded) args.onLoaded();
					return;
				}
				
				// Get device file
				if(window.omniasource == 'device' && (args.type == 'js' || (args.type == 'css' && args.src.includes('omnia.css')))) {
					var file = await ox.fs.client.readFile('release/' + args.src, 'external', 'text');
					if(file && file.content) {
						var info = args.loader ? (args.loader.loaded + 1) + '/' + args.loader.items + ' ' : '';
						var script = null;
						if(args.type == 'js') {
							script = document.createElement("script");
							script.type = 'text/javascript';
						} else if(args.type == 'css') {
							script = document.createElement("style");
							script.rel = 'stylesheet';
							script.type = 'text/css';
						}
						script.id = args.src;
						script.textContent = file.content;
						document.head.appendChild(script);
						
						log('%commnia.tools.browser.loadResource: Loaded from device ' + info + args.src, 'color:#aa00ff');
	
						omnia.tools.browser.loadedResources[args.src] = true;
						if(args.loader) args.loader.onLoad();
						if(args.onLoaded) args.onLoaded();
						return true;
					}
				}

				var elem;
				var unique = args.src.indexOf('omnia') >= 0 ? '?_=' + omnia.tools.getUniqueId() : '';
				switch(args.type) {
					case 'js':
						elem = document.createElement('script');
						elem.type = 'text/javascript';
						elem.src = args.src + unique;
						break;
					case 'css':
						elem = document.createElement('link');
						elem.rel = 'stylesheet';
						elem.type = 'text/css';
						elem.href = args.src + unique;
						break;
				}
				if(!elem) return;

				elem.onload = function(loaded, items) {
					var info = args.loader ? (args.loader.loaded + 1) + '/' + args.loader.items + ' ' : '';
					log('%comnia.tools.browser.loadResource: Loaded ' + info + args.src, 'color:#aa00ff');
					
					if(args.map) ox.each(args.map, function(id, obj) {
						ox.lib[id] = window[obj];
					});
					
					if(args.loader) args.loader.onLoad();
					if(args.onLoaded) args.onLoaded();
				};
				elem.onerror = function(loaded, items) {
					var info = args.loader ? (args.loader.loaded + 1) + '/' + args.loader.items + ' ' : '';
					ox.error('omnia.tools.browser.loadResource: Failed to load ' + info + args.src);
					
					if(args.loader) args.loader.onLoad();
					if(args.onLoaded) args.onLoaded();
				};
				
				omnia.tools.browser.loadedResources[args.src] = true;
				document.head.appendChild(elem);
			},
			addViewport: function(content, isWeb) {
				$('head').append('<meta name="viewport" content="' + (content ? content : 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover' + (isWeb ? '' : ', minimal-ui')) + '">');
			},
			addAppleStandalone: function(args) {
				$('head').append('<link rel="manifest" href="manifest.json">');
				$('head').append('<meta name="format-detection" content="telephone=no">');
				$('head').append('<meta name="apple-mobile-web-app-capable" content="yes">');
				//$('head').append('<meta name="apple-mobile-web-app-status-bar-style" content="' + (args.barStyle ? args.barStyle : 'black-translucent') + '">');
				$('head').append('<meta name="apple-mobile-web-app-title" content="' + args.title + '">');
				if(args.icon) $('head').append('<link rel="apple-touch-icon" href="' + args.icon + '" />');
				if(args.splash) $('head').append('<link rel="apple-touch-startup-image" href="' + args.splash + '">');
			},
			getEnironment: function() {
				
				var isTouch = this.isTouch = (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));
				//var isMobile = jQuery.browser.mobile;
				var isIPhone = ((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i)));
				var isWindows = (navigator.userAgent.match(/Windows/i));
			
				return isTouch ? (isIPhone ? 'iphone' : 'iphone') : 'desktop';
			},
			getEnironment2: function() {
				
				// Get details
				var isTouch = this.isTouch = (('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0));
				var isSmartphone = /iPhone|iPod|Android/i.test(navigator.userAgent);
				var isTablet = /iPad|Android/i.test(navigator.userAgent) && parseInt(screen.width) >= 600;
				var isLargeScreen = parseInt(screen.width) >= 600;
				
				if(navigator.appVersion.indexOf('H96_Max') >= 0) isTouch = false;
				if(navigator.appVersion.indexOf('waipu') >= 0) isTouch = false;
				var p = {
					//agent: navigator.userAgent,
					os: navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/iPad/i) ? 'ios' : (
							navigator.userAgent.match(/Windows/i) ? 'windows' : (
								navigator.userAgent.match(/Android/i) ? 'android' : (
									navigator.userAgent.match(/Macintosh/i) ? 'mac' : 
									'other'
								)
							)
						),
					method: isTouch ? 'touch' : 'mouse',
					device: !isTouch ? 'desktop' : (isLargeScreen ? 'tablet' : 'phone'),
					devicetype: 'other',
					screen: {
						width: parseInt(screen.width) * (window.devicePixelRatio || 1),
						height: parseInt(screen.height) * (window.devicePixelRatio || 1),
						pixelratio: window.devicePixelRatio,
					},
					framework: 'none',
					userAgent: navigator.userAgent,
				}
				if(navigator.appVersion.indexOf('H96_Max') >= 0) p.device = 'tablet';
				if(p.os == 'ios' && p.screen.height == 2436) p.devicetype = 'iphonex';
				try { 
					p.framework = cordova ? 'cordova' : p.framework; 
					if(p.framework == 'cordova') {
						if(device) p.deviceModel = device.model;
						if(device) p.deviceManufacturer = device.manufacturer;
						if(device) p.osVersion = p.iosversion = device.version;
						p.cordovaDevice = device; //device.getInfo();
						if(BuildInfo) {
							p.buildinfo = BuildInfo;
							p.releaseId = BuildInfo.packageName.substr(4).replace(/\./g, '-');
						}
					}
				}
				catch(e) {}
				p.isDesktop = p.device == 'desktop';
				p.isTablet = p.device == 'tablet';
				p.isPhone = p.device == 'phone';
				p.envId = 
					p.device + 
					'_' + p.os + 
					(p.deviceModel ? '_' + p.deviceModel : '') + 
					(p.framework && p.framework != 'none' ? '_' + p.framework : '');
					
				//this.platform = p;
	
				var platform = this.platform;
				Object.keys(p).forEach(id => platform[id] = p[id]);
				
				/*platform.os = p.os;
				platform.method = p.method;
				platform.device = p.device;
				platform.devicetype = p.os;
				platform.screen = p.screen;
				platform.framework = p.framework;
				platform.p = p;
				//platform.userAgent = p.userAgent;
				platform.osVersion = p.osVersion;
				platform.deviceModel = p.deviceModel;
				platform.deviceManufacturer = p.deviceManufacturer;
				
				platform.envId = 
					p.device + 
					'_' + p.os + 
					(p.deviceModel ? '_' + p.deviceModel : '') + 
					(p.framework && p.framework != 'none' ? '_' + p.framework : '');

				platform.isDesktop = platform.device == 'desktop';
				platform.isTablet = platform.device == 'tablet';
				platform.isPhone = platform.device == 'phone';*/
				
				return this.platform;
			},
			getUrlParameters: function() {
				//if(!document || document.location) return {};
		
				var q = document.location.search;
				if(q && q.length) return omnia.tools.string.urlStringToObject(q.substr(1));
			
				return {};
			},
			getViewport: function() {
				var el = document.activeElement;
				var tagName = el && el.tagName && el.tagName.toLowerCase();
				var isInput = (tagName == 'input' && el.type != 'button' && el.type != 'radio' && el.type != 'checkbox') || (tagName == 'textarea');
				
				if(window.visualViewport && /Android/.test(navigator.userAgent)) {
					// https://developers.google.com/web/updates/2017/09/visual-viewport-api    Note on desktop Chrome the viewport subtracts scrollbar widths so is not same as window.innerWidth/innerHeight
					return {
						left: visualViewport.pageLeft,
						top: visualViewport.pageTop,
						width: visualViewport.width,
						height: visualViewport.height
						};
				}
				var viewport = {
					left: window.pageXOffset,   // http://www.quirksmode.org/mobile/tableViewport.html
					top: window.pageYOffset,
					width: window.innerWidth || documentElement.clientWidth,
					height: window.innerHeight || documentElement.clientHeight
				};
				if(/iPod|iPhone|iPad/.test(navigator.platform) && isInput) {
					// iOS *lies* about viewport size when keyboard is visible. See http://stackoverflow.com/questions/2593139/ipad-web-app-detect-virtual-keyboard-using-javascript-in-safari Input focus/blur can indicate, also scrollTop: 
					var r = {
						left: viewport.left,
						top: viewport.top,
						width: viewport.width,
						height: viewport.height * (viewport.height > viewport.width ? 0.66 : 0.45) // Fudge factor to allow for keyboard on iPad
					};
					//if(r.height < window.innerHeight) r.height -= 36; // 'Fertig' bar on iOS
					return r;
				}
				return viewport;
			},
			getViewportSize: function() {
				var w = window,
					d = document,
					e = d.documentElement,
					g = d.getElementsByTagName('body')[0],
					x = w.innerWidth || e.clientWidth || g.clientWidth,
					y = w.innerHeight|| e.clientHeight|| g.clientHeight;
					
				return {width: x, height: y};
			},

			fullscreen: function(isOn, elem) {
				var e = elem[0];

				if(e.requestFullScreen) {
					if(isOn/*!document.fullScreen*/) {
						e.requestFullscreen();
					} else {
						document.exitFullScreen();
					}
				} else if(e.mozRequestFullScreen) {
					if(isOn/*!document.mozFullScreen*/) {
						e.mozRequestFullScreen();
					} else {
						document.mozCancelFullScreen();
					}
				} else if(e.webkitRequestFullScreen) {
					if(isOn/*!document.webkitIsFullScreen*/) {
						e.webkitRequestFullScreen();
					} else {
						document.webkitCancelFullScreen();
					}
				}
			},
			isFullscreen: function() {
				var e = $('body')[0];

				if(e.requestFullScreen) {
					return document.fullScreen;
				} else if(e.mozRequestFullScreen) {
					return document.mozFullScreen;
				} else if(e.webkitRequestFullScreen) {
					return document.webkitIsFullScreen;
				}
				
				return null;
			},
			addFullscreenHandler: function(handler, id) {
				var h = function() { handler(omnia.tools.browser.isFullscreen()); }
				
				$(document).on('fullscreenchange' + (id ? '.' + id : '') + ' mozfullscreenchange' + (id ? '.' + id : '') + ' webkitfullscreenchange' + (id ? '.' + id : ''), h);
				//document.addEventListener("fullscreenchange", h, false);
				//document.addEventListener("mozfullscreenchange", h, false);
				//document.addEventListener("webkitfullscreenchange", h, false);
			},
			removeFullscreenHandler: function(id) {
				$(document).off('fullscreenchange' + (id ? '.' + id : '') + ' mozfullscreenchange' + (id ? '.' + id : '') + ' webkitfullscreenchange' + (id ? '.' + id : ''));
			},
			
			copyToClipboard: function(text, isConfirm) {
				return omnia.tools.client.copyToClipboard(text, isConfirm);
			},
			
			openBrowser: function(args) { 
				return omnia.tools.client.browser(args); 
			},
			dismissBrowser: function() {
				if(omnia.tools.browser.platform.framework != 'cordova') return;
				try {
					SafariViewController.hide();
				}
				catch(e) {}
			},
			
			firebug: function(onLoaded) {
				omnia.tools.browser.loadPacks({
					packs: ['firebug'],
					onPacksLoaded: function() {
						if(onLoaded) onLoaded();
					},
				});					
			},
			
			getStaticPage: function(oid, asHtml, isHeadOnly, meta) {
				if(!meta) {
					var comp = omnia.ui[oid];
					meta = comp && comp.meta && comp.meta.export ? comp.meta.export : {};
				}
				
				//log(meta);

				var resources = [];
				$.each(meta.resources, function(i, item) {
					switch(item.format) {
						case 'js':
							resources.push({t: 'script', type: 'text/javascript', src: item.url, async: item.async ? 'true' : null});
							break;
						case 'css':
							resources.push({t: 'link', rel: item.rel || 'stylesheet', type: item.type ||'text/css', href: item.url, media: item.media, as: item.as, crossorigin: item.crossorigin});
							break;
					}
				});
				var head = {t: 'head', c: [
					
					// Meta SEO
					!meta.title ? null : {t: 'title', html: meta.title},
					!meta.description ? null : {t: 'meta', name: 'description', content: meta.description},
					!meta.keywords ? null : {t: 'meta', name: 'keywords', content: meta.keywords},
					{t: 'meta', name: 'robots', content: meta.robots || 'index, nofollow'},
					!meta.author ? null : {t: 'meta', name: 'author', content: meta.author},
					!meta.publisher ? null : {t: 'meta', name: 'publisher', content: meta.author},
					!meta.copyright ? null : {t: 'meta', name: 'copyright', content: meta.copyright},
					!meta.url ? null : {t: 'link', rel: 'canonical', href: meta.url},
					{t: 'link', rel: 'shortcut icon', href: meta.favicon || '/favicon.ico'},
					
					// Meta Open Graph - https://ogp.me/
					!meta.banner ? null : {t: 'meta', property: 'og:image', content: meta.banner},
					!meta.title ? null : {t: 'meta', property: 'og:title', content: meta.title},
					!meta.description ? null : {t: 'meta', property: 'og:description', content: meta.description},
					{t: 'meta', property: 'og:type', content: 'website'},
					!meta.url ? null : {t: 'meta', property: 'og:url', content: meta.url},
					!meta.name ? null : {t: 'meta', property: 'og:site_name', content: meta.name},
					
					// Meta Twitter
					!meta.card ? null : {t: 'meta', property: 'twitter:card', content: meta.banner},
					!meta.banner ? null : {t: 'meta', property: 'twitter:image', content: meta.banner},
					!meta.title ? null : {t: 'meta', property: 'twitter:title', content: meta.title},
					!meta.description ? null : {t: 'meta', property: 'twitter:description', content: meta.description},
					!meta.url ? null : {t: 'meta', property: 'twitter:url', content: meta.urll},
					!meta.creator ? null : {t: 'meta', name: 'twitter:creator', content: meta.author},

					// Meta Format
					{t: 'meta', 'http-equiv': 'content-language', content: meta.language || 'en'},
					!meta.utf8 ? null : {t: 'meta', 'http-equiv': 'Content-Type', content: 'text/html; charset=utf-8'},

					// Meta Appearance
					!meta.viewport ? null : {t: 'meta', name: 'viewport', content: 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover, minimal-ui'},
					!meta.appleWebApp ? null : [
						{t: 'meta', name: 'apple-mobile-web-app-capable', content: 'yes'},
						{t: 'meta', name: 'apple-mobile-web-app-title', content: meta.appleWebApp.title},
						{t: 'link', rel: 'apple-touch-icon', href: meta.appleWebApp.icon},
					],
					
					// Resources
					!resources.length ? null : resources,
					
				]};
				
				if(isHeadOnly) return head;
				
				var html = {t: 'html', c: [
					head,
					{t: 'body', css: 'ox-env-mouse ox-env-touch ox-env-static', style: {'background': '#ffffff'}, c: [
						{oid: oid},
					]},
				]};
				var comp = ox.node(html);
				return comp;
			},
			isDarkMode: function() { 
				if(ox.pf.os == 'android' && ox.pf.framework == 'cordova') {
					var h = (new Date()).getHours();
					return h < 7 || h > 21;
				}
				return window.matchMedia('(prefers-color-scheme: dark)').matches;
			},
		},
		cache: {
			onUpdateReady: function(e) {
				return;
				
				var c = window.applicationCache;
		
				log('omnia.tools.cache.onUpdateReady: status = ' + c.status);
				if(c.status == c.UPDATEREADY) {
					c.swapCache();
					if(confirm('A new version of this site is available. Load it?')) {
						window.location.reload();
					}
				}
			},
			update: function() {
				var c = window.applicationCache;
				if(!c) return false;
		
				log('omnia.tools.cache.update: status = ' + c.status);
				//if(c.status == c.UNCACHED) return true;
		
				c.update();
			},
		},
		client: {
			awake: function(isAwake) {
				try {
					if(ox.pf.framework != 'cordova' || !window.plugins || !window.plugins.insomnia) {
						//ox.error('omnia.tools.client.awake: Plugin missing');
						return false;
					}
									
					if(isAwake) {
						window.plugins.insomnia.keepAwake();
						log('omnia.tools.client.awake: Keep screen awake!');
					} else {
						window.plugins.insomnia.allowSleepAgain();
						log('omnia.tools.client.awake: Allow sleep again');
					}
					
					return true;
				}
				catch(e) {
					ox.error('omnia.tools.client.awake: Error: ' + e);
					return false;
				}
			},
			pasteFromClipboard: function(textarea, onDone) {
				//textarea.focus();
				//var isSuccess = document.execCommand('paste');
				
				var onProcess = (text) => { 
					if(textarea) {
						const [start, end] = [textarea.selectionStart, textarea.selectionEnd];
						textarea.setRangeText(text, start, end, 'select');
						
						var pos = start + text.length;
						textarea.focus();
						textarea.setSelectionRange(pos, pos);
					}
					if(onDone) onDone(text);
				};
				var onFail = (e) => ox.error('omnia.tools.client.pasteFromClipboard: Error: ' + e);
		
				try {
					/* / Native
					navigator.clipboard.readText().then(onProcess).catch((e) => {
						// Plugin
						if(ox.pf.framework == 'cordova') {
							cordova.plugins.clipboard.paste(onProcess, onFail);
						} else {
							onFail(e);
						}
					});*/
					
					// Plugin
					if(ox.pf.framework == 'cordova') { 
						cordova.plugins.clipboard.paste(onProcess, () => navigator.clipboard.readText().then(onProcess).catch(onFail));
					} else {
						// Native 
						navigator.clipboard.readText().then(onProcess).catch(onFail);
					}
				}
				catch(e) { onFail(); }
			},
			copyToClipboard: function(text, isConfirm, onConfirm, textarea) {
				text = text.trim();
					
				if(textarea) {
					var sel = omnia.tools.selection.getSelection(textarea);
					if(!sel.text) textarea.select();
					var isSuccess = document.execCommand('copy');
					if(onConfirm) onConfirm();
					return;
				}
			
				if(!isConfirm) {
					ox.error('omnia.tools.client.copyToClipboard: Might not work on Android');
					return false;
				}
				
				var id = ox.id();
				var cfg = {oid: 'frame2', css: '' + (!ox.pf.isPhone ? ' ox-wmax' : ''), c: [
					{t: 'div', css: 'font m15', text: '#confirm-clipboard'},
					{t: 'div', css: 'ox-border-dashed-top p15 w100 scrollable col-blue font-code _nowrap-i', html: text.split('\n').join('<br>').split('\t').join('&nbsp;&nbsp;&nbsp;&nbsp;').split('  ').join('&nbsp;&nbsp;')},
					{t: 'textarea', css: 'abs opa0 ox-id-' + id, style: {'height': 0}, text: text.split('\n').join('\r\n')},
				]};
				ox.ov.show({
					content: cfg,
					isScroll: true,
					actions: [
						{oid: 'buttonicon', icon: 'fa fa-clipboard ox-before', css: 'ox-id-close', label: '#copy', click: function() {
							var ta = $('.ox-id-' + id);
							ta.select();
							var isSuccess = document.execCommand('copy');
							
							if(onConfirm) onConfirm();
							
							omnia.ui.board2.trigger({evt: {
								id: 'copy', 
								type: 'info', 
								css: '_col-green-back _col-white', 
								text: '<i class="fa fa-copy ox-before"></i>Copied to clipboard',
							}});
					
						}},
					],
				});
		
				return false;
			},
			phoneCall: function(phoneNumber) {
				window.location.href = 'tel:' + phoneNumber;
				//window.open('tel:' + phoneNumber, '_self');
			},
			email: function(email) {
				window.location.href = 'mailto:' + email;
				//window.open('mailto:' + email, '_self');
			},
			maps: function(query, provider) {
				var self = omnia.tools.client.maps;
				
				if(provider == true && ox.pf.os != 'android') {
					ox.ov.show({
						content: {oid: 'bar2', css: 'ox-context ox-large', c: [
							{oid: 'label', text: query},
							//{oid: 'button', css: 'ox-id-close', label: 'Geo location', click: () => { self(query, 'geo'); }},
							//{oid: 'button', css: 'ox-id-close', label: 'Maps', click: () => { self(query, 'maps'); }},
							ox.pf.os == 'android' ? null : {oid: 'button', css: 'ox-id-close', label: 'Apple', click: () => { self(query, 'apple'); }},
							{oid: 'button', css: 'ox-id-close', label: 'Google', click: () => { self(query, 'google'); }},
						]},
					});
					return;
				}
				
				query = encodeURIComponent(query);
				var url = '';
				
				switch(provider) {
					case 'geo':
						url = 'geo:q=' + query;
						window.location.href = url;
						return;
						break;
					case 'maps':
						url = 'maps://?q=' + query;
						break;
					case 'apple':
						url = 'http://maps.apple.com/?q=' + query;
						break;
					default:
						url = 'https://maps.google.com/?q=' + query;
						break;
				}
			
				//window.open(url, '_self');
				omnia.tools.browser.openBrowser({url, isSystem: true});
			},
			tts: {
				clsId: 'omnia.tools.client.tts',
				
				id: null,
				isSpeaking: false,
				current: null,
				
				speak: function(text, lang, onDone) {
					if(ox.pf.framework != 'cordova') {
						ox.error('omnia.tools.client.tts.speak: No Cordova, feature not available');
						return false;
					}
					/*if(omnia.tools.client.tts.isSpeaking) {
						ox.error('omnia.tools.client.tts: Voice is still speaking');
						return false;
					}*/

					try {
						if(typeof text == 'object') return ox.client.tts.speak2(text);
						
						//omnia.tools.client.tts.isSpeaking = true;
						if(TTS.stop) return ox.client.tts.speak2({text, locale: lang, onDone});

						TTS.speak({
							text: text,
							locale: lang || 'en-GB',
							rate: ox.pf.os == 'ios' ? 1.5 : 1,
						}, function() {
							//omnia.tools.client.tts.isSpeaking = false;
							if(onDone) onDone(true);
						}, function(e) {
							ox.error('omnia.tools.client.tts: Error: ' + e, {e});
							//omnia.tools.client.tts.isSpeaking = false;
							if(onDone) onDone(false);
						});
					}
					catch(e) {
						ox.error('omnia.tools.client.tts.speak: Error: ' + e, {e});
						if(onDone) onDone(false);
						return false;
					}
				},
				speak2: function(args) {
					if(ox.pf.framework != 'cordova') {
						ox.error('omnia.tools.client.tts.speak2: No Cordova, feature not available');
						if(args.onDone) args.onDone(false);
						return false;
					}
					try {
						if(!args.onDone) args.onDone = () => {};
						if(args.lang) args.locale = args.lang;
						if(args.voice) args.identifier = args.voice;
						if(args.cancel === undefined) args.cancel = true;
						if(!args.locale) args.locale = 'en-GB';
						if(args.id) omnia.tools.client.tts.id = args.id;
						//if(!args.rate) args.rate = ox.pf.os == 'ios' ? 0.5 : 1;
						
						if(args.identifier == 'male' || args.identifier == 'female') {
							var voices = {
								ios: {
									male: {
										'en-GB': 'com.apple.ttsbundle.Oliver-premium',
										'de-DE': 'com.apple.ttsbundle.siri_Martin_de-DE_compact',
									},
									female: {
										'en-GB': 'com.apple.ttsbundle.siri_Martha_en-GB_compact',
										'de-DE': 'com.apple.ttsbundle.siri_Helena_de-DE_compact',
									},
								},
								android: {
									male: {
										'en-GB': 'en-gb-x-rjs-network',
										'de-DE': 'de-de-x-deg-network',
									},
									female: {
										'en-GB': 'en-gb-x-gbc-local',
										'de-DE': 'de-de-x-nfh-local',
									},
								},
							};
							args.identifier = voices[ox.pf.os][args.identifier][args.locale];
						}
						
						if(args.locale == 'de-DE') {
							if(!args.rate) args.rate = ox.pf.os == 'ios' ? 0.45 : 1.3;
							args.text = args.text.split('ü').join('ue').split('ä').join('ae').split('ö').join('oe').split('Ü').join('Ue').split('Ä').join('Ae').split('Ö').join('Oe').split('ß').join('ss');
							//if(!args.identifier) args.identifier = 'com.apple.eloquence.de-DE.Grandpa';
							//args.identifier = 'com.apple.voice.enhanced.de-DE.Markus';
						} else {
							if(!args.rate) args.rate = ox.pf.os == 'ios' ? 0.5 : 1.2;
							//if(!args.identifier) args.identifier = 'com.apple.voice.premium.en-GB.Malcolm';
						}
						
						ox.client.tts.stop();
						TTS.speak(args).then(() => args.onDone(true), (e) => args.onDone(false, e));
						
						/*TTS.speak({
							text,
							//identifier: 'com.apple.ttsbundle.Samantha-compact',
							rate: ox.pf.os == 'ios' ? 1.5 : 1,
							//pitch: 0.9,
							//cancel: true,
						}).then(() => onDone(true), (e) => onDone(false, e));*/
					}
					catch(e) {
						ox.error('omnia.tools.client.tts: Error: ' + e, {e});
						if(args.onDone) args.onDone(false);
						return false;
					}
				},
				speak3: async function(args) {
					try {
						var features = ox.client.tts.getFeatures();
						log(this.clsId + '.speak3');
						
						ox.client.tts.stop();
						if(args.id) omnia.tools.client.tts.id = args.id;
							
						if(features.isWebTTS && (!args.voice || args.voice.type == 'web')) {
							log(this.clsId + '.speak3: api = web, text = "' + args.text + '"');
							
							var utterance = ox.client.tts.current = new SpeechSynthesisUtterance(args.text);
							if(!args.rate) args.rate = args.lang == 'de-DE' ? (ox.pf.os == 'ios' ? 0.45 : (ox.pf.os == 'mac' ? 0.94 : 1.3)) : (ox.pf.os == 'ios' ? 0.9 : (ox.pf.os == 'mac' ? 0.94 : 1.2));
							if(args.voice) utterance.voice = args.voice;
							if(args.volume) utterance.volume = args.volume;
							if(args.pitch) utterance.pitch = args.pitch;
							if(args.rate) utterance.rate = args.rate;
							if(args.onDone) utterance.addEventListener('pause', () => args.onDone(true, 'pause'));
							if(args.onDone) utterance.addEventListener('end', () => args.onDone(true, 'end'));
							speechSynthesis.speak(utterance);
						}
						else if(features.isNativeTTS && (!args.voice || args.voice.type == 'native')) {
							log(this.clsId + '.speak3: api = native, text = "' + args.text + '"');
							
							if(!args.rate) args.rate = args.lang == 'de-DE' ? (ox.pf.os == 'ios' ? 0.45 : 1.3) : (ox.pf.os == 'ios' ? 0.37 : 1.2);
							args.locale = args.lang;
							args.identifier = args.voice.identifier;
							//args.text = args.text.split('ü').join('ue').split('ä').join('ae').split('ö').join('oe').split('Ü').join('Ue').split('Ä').join('Ae').split('Ö').join('Oe').split('ß').join('ss');
							
							var res = await TTS.speak(args);
							if(args.onDone) args.onDone(true, 'end');
							
						} else ox.error('omnia.tools.client.tts.speak3: Cordova or TTS plugin not available.');
					}
					catch(e) {
						if(args.onDone) args.onDone(false);
						log({e});
					}
				},
				stop: function(isGlobal) {
					var features = ox.client.tts.getFeatures();
					
					try {
						if(features.isWebTTS) {
							speechSynthesis.cancel();
						}
						if(features.isNativeTTS) {
							if(TTS.stop) TTS.stop();
						}
						omnia.tools.client.tts.id = null;
					}
					catch(e) {
						ox.error('omnia.tools.client.tts.stop: Error: ' + e, {e});
						return false;
					}
				},
				getVoices: async function() {
					var features = ox.client.tts.getFeatures();
					var isWebTTS = features.isWebTTS;
					var isNativeTTS = features.isNativeTTS;
					
					try {
						if(this.voices) return this.voices;
						
						var voicesLocal = [];
						if(isWebTTS) {
							voicesLocal = speechSynthesis.getVoices();
							if(isWebTTS && (!voicesLocal || !voicesLocal.length)) await new Promise(resolve => { speechSynthesis.onvoiceschanged = () => { resolve(); } });
							voicesLocal = speechSynthesis.getVoices();
							voicesLocal.forEach(v => v.type = 'web');
						} else ox.error('omnia.tools.client.tts.getVoices: No Web Speech API available.');
						
						var voicesNative = [];
						if(isNativeTTS) {
							voicesNative = await TTS.getVoices();
							voicesNative.forEach(v => { v.type = 'native'; v.lang = v.language; delete v.language; });
						} else ox.error('omnia.tools.client.tts.getVoices: Cordova or TTS plugin not available.');
						
						return this.voices = voicesLocal.concat(voicesNative);
					}
					catch(e) { log({e}); }
				},
				getFeatures: function() {
					var isWebTTS = false;
					var isNativeTTS = false;
					
					try { isWebTTS = window.speechSynthesis; } catch(e) {}
					try { isNativeTTS = ox.pf.framework == 'cordova' && TTS; } catch(e) {}
					
					return {isWebTTS, isNativeTTS};
				},
			},
			statusBar: function(isOn) {
				try {
					if(omnia.tools.browser.platform.framework != 'cordova') return;
					
					if(!isOn && isOn !== undefined) StatusBar.hide();
					else StatusBar.show();
				}
				catch(e) {
					ox.error('omnia.tools.client.statusBar: Error: ' + e);
					return false;
				}
			},
			fullscreenNative: function(isOn) {
				if(ox.pf.os != 'android' || ox.pf.framework != 'cordova') return false;
				try {
					if(isOn) AndroidFullScreen.immersiveMode();
					/*if(isOn) AndroidFullScreen.setSystemUiVisibility(
						AndroidFullScreen.SYSTEM_UI_FLAG_LAYOUT_STABLE |
						AndroidFullScreen.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION |
						AndroidFullScreen.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN |
						AndroidFullScreen.SYSTEM_UI_FLAG_HIDE_NAVIGATION |
						AndroidFullScreen.SYSTEM_UI_FLAG_FULLSCREEN | 
						AndroidFullScreen.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
						//AndroidFullScreen.SYSTEM_UI_FLAG_LOW_PROFILE
					);*/
					else AndroidFullScreen.showSystemUI();
				}
				catch(e) {}
			},
			changeAppIcon: function(iconId, onDone) {
				try {
					if(!AppIconChanger) return;
					AppIconChanger.changeIcon({iconName: iconId, suppressUserNotification: true}, () => onDone ? onDone() : null, e => log('omnia.tools.client.changeAppIcon: Error', {e}));
				}
				catch(e) {
					log('omnia.tools.client.changeAppIcon: Error', {e});
				}
			},
			volumeButtons: function(onClick) {
				if(ox.pf.os != 'android' || ox.pf.framework != 'cordova') return false;
				try {
					//window.removeEventListener("volumebuttonslistener");
					log('_omnia.tools.client.volumeButtons: Added event');
					window.addEventListener("volumebuttonslistener", info => onClick(info.signal), false);
				}
				catch(e) {
					log('omnia.tools.client.volumeButtons: Error', {e});
				}
			},
			browser: function(args) {
				if(!args || !args.url) { omnia.tools.error('omnia.tools.browser.openBrowser: Error: Missing parameters'); return; }
				
				if(args.isNative) args.isSystem = true;
				if(!args.isBinary) args.url = args.url.split('{').join('').split('}').join('');
				
				var platform = omnia.tools.browser.platform;
				
				if(args.isSystem || platform.framework != 'cordova') {
					log('omnia.tools.browser.openBrowser: ' + (args.isSystem ? 'system' : 'no cordova'), url = '\'' + args.url + '\'');
					window.open(args.url, platform.device == 'desktop' ? '_blank' : '_system');
					return;
				}
				
				try {
					//log(SafariViewController);
					SafariViewController.isAvailable(function (available) {
						if(available) {
							log('omnia.tools.browser.openBrowser: SafariViewController, url = \'' + args.url + '\'');
							SafariViewController.show(
								{
									url: args.url,
									hidden: false, // default false. You can use this to load cookies etc in the background (see issue #1 for details).
									animated: false, // default true, note that 'hide' will reuse this preference (the 'Done' button will always animate though)
									transition: 'fade', // (this only works in iOS 9.1/9.2 and lower) unless animated is false you can choose from: curl, flip, fade, slide (default)
									enterReaderModeIfAvailable: args.isReaderMode, // default false
									//tintColor: "#00ffff", // default is ios blue
									//barColor: "#0000ff", // on iOS 10+ you can change the background color as well
									//controlTintColor: "#ffffff" // on iOS 10+ you can override the default tintColor
								},
								function(result) {
									if(result.event === 'opened') {
										if(args.onOpened) args.onOpened();
									} else if(result.event === 'loaded') {
										if(args.onLoaded) args.onLoaded();
									} else if (result.event === 'closed') {
										if(args.onClosed) args.onClosed();
									}
								},
								function(msg) {
									log('omnia.tools.browser.openBrowser: message = \'' + msg + '\'');
									window.open(args.url, platform.device == 'desktop' ? '_blank' : '_system');
								}
							)
						} else {
							// potentially powered by InAppBrowser because that (currently) clobbers window.open
							log('omnia.tools.browser.openBrowser: not available, url = \'' + args.url + '\'');
							window.open(args.url, '_blank', 'location=yes');
						}
					});
				}
				catch(e) {
					log('omnia.tools.browser.openBrowser: unknown, url = \'' + args.url + '\'');
					log(e);
					window.open(args.url, '_system');
				}				
			},
			translate: async function(text, lang, onDone) {
				return omnia.tools.net.deepl.translateText(text, lang, onDone);
			},
		},
		element: {
			get: function(query, root, isGetHandler) {
				try {
					if(!(/[\#\*\>\s\.]/.test(query))) query = '.ox-id-' + query;
					if(root && !(root instanceof jQuery)) root = $(root);
	
					if(root) {
						var result = root.find(query);
						if(isGetHandler && result.length > 1) {
							var r = [];
							$.each(result, function(i, item) { r.push($(item).data('ox-handler')); });
							return r;
						}
						return isGetHandler ? $(result).data('ox-handler') : $(root.find(query));
					}
					return isGetHandler ? $(query).data('ox-handler') : $(query);
				}
				catch(e) {
					log({e});
				}
			},
			getAll: function(root, isGetHandler) {
				if(root && !(root instanceof jQuery)) root = $(root);
				var all = root.find("*[class^='ox-id-'],*[class*=' ox-id-']");
				
				var refs = {};
				$.each(all, function(i, elem) {
					var ids = ox.el.getClassByPrefix(elem, 'ox-id-', true);
					$.each(ids.split(' '), function(j, id) {
						if(id.length) refs[id.substr(6)] = isGetHandler && $(elem).data('ox-handler') ? $(elem).data('ox-handler') : $(elem);
					});
				});
				
				return refs;
			},
			setActions: function(root, handler) {
				if(root && !(root instanceof jQuery)) root = $(root);
				var all = root.find("*[class^='ox-on-'],*[class*=' ox-on-']");

				$.each(all, function(i, elem) {
					var ids = ox.el.getClassByPrefix(elem, 'ox-on-', true);
					$.each(ids.split(' '), function(j, id) {
						if(!id) return;
						
						var ev = 'click';
						
						var func = id.substr(6);
						if(!func) return;
						if(func.indexOf('-') >= 0) {
							var fa = func.split('-');
							ev = fa[0];
							func = fa[1];
						}
						
						elem = $(elem);
						
						var oxHandler = elem.data('ox-handler');
						//if(oxHandler && typeof oxHandler.reset == 'function') ev = 'changed';
						
						if(ev == 'changed' && oxHandler && oxHandler.reset) {
							oxHandler.reset({
								onChanged: function(args) {
									handler[func](elem, args);
								},
							});
						} else {
							elem.on(ox.b.CLICK, function() { handler[func](elem); });
						}
					});
				});
			},
			set: function(cfg, elem) {
				$.each(cfg, function(attr, val) {
					//if(attr == 'grid') log('_', val);
					
					if(
						attr != 'args' && 
						attr != 'cfg' && 
						attr != 'oninput' && 
						attr != 'data' && 
						attr != 'tip' && 
						attr != 'clickhold' && 
						attr != 'onReady' && 
						attr != 'onProcess' && 
						attr != 'pos' && 
						attr != 'elem' && 
						attr != 's' && 
						attr != 'v' && 
						attr != 'keyup' && 
						attr != 'oid' && 
						attr != 'c' && 
						attr != 'css' && 
						attr != 'background' && 
						attr != 'context' && 
						attr != 'click' && 
						attr != 'clickdown' && 
						attr != 'clickup' && 
						attr != 'html' && 
						attr != 'style' && 
						attr != 'pstyle' && 
						attr != 't' && 
						attr != 'handler' && 
						attr != 'alt' && 
						attr != 'onRendered') {

						var el = null;
						if(elem.hasClass('ox-id-' + attr)) {
							el = elem;
						} else {
							var a = elem.find('.ox-id-' + attr);
							if(a) {
								el = a;
							}
						}

						if(val && el && el.length) {
							if(typeof val == "object") {
								if(val.oid || val.t || Array.isArray(val)) {
									//var target = el.find('> .ox-childs');
									//omnia.tools.html.node(val, target && target.length ? target : el);
								} else {
									val.elem = el;
									// apply cfg
									//log('#object')
									//log(val);
								}
								var target = el.find('> .ox-childs');
								
								if(cfg.args && cfg.args.log) log('omnia.tools.html.node: Render sub element');
								omnia.tools.html.node(val, {root: target && target.length ? target : el});
							} else {
								if(val) {
									switch(attr) {
										case 'css':
											el.addClass(val);
											break;
										case 'icon':
										case 'icon2':
											el.addClass(val);
											break;
										case 'img':
											el.attr('src', val);
											break;
										case 'grid-area': 
											el.css('grid-area', val);
											break;
										case 'background':
										case 'backgroundImage':
										case 'background-image':
											el.css(attr, val);
											break;
										case 'w':
										case 'width':
											el.css('width', val);
											break;
										case 'h':
										case 'height':
											el.css('height', val);
											break;
										case 'href':
											el.attr('href', ox.tx(val));
											break;
										case 'image':
											el.css('background-image', 'url(' + val + ')');
											break;
										case 'style':
											if(typeof val == 'string') el.attr('style', val); else el.css(val);
											break;
										case 'src':
										case 'value':
										case 'placeholder':
											el.attr(attr, val);
											break;
										case 'click':
											el.on(ox.b.CLICK, val);
											break;
										case 'grid':
											el.css('grid-area', val);
											break;
										default:
											if(el[0] && el[0].nodeName && el[0].nodeName.toLowerCase() == 'img') el.attr('src', val);
											else { 
												var txt = val[0] == '#' ? omnia.tools.text(val.substr(1)) : val;
												el.html(txt); 
												el.data('ox-v', txt);
											}
											break;
									}
								}
								//if(el[0] && el[0].nodeName && el[0].nodeName.toLowerCase() == 'img') el.attr('src', val);
								//else if(val) { el.html(val[0] == '#' ? omnia.tools.text(val.substr(1)) : val); }
							}
						} else {
							//console.log('#jo');
							switch(attr) {
								case 'oxid':
									val.split(' ').forEach(id => elem.addClass('ox-id-' + id));
									break;
								case 'image':
									elem.css('background-image', 'url(' + val + ')');
									break;
								case 'images':
									var imgs = {test: 1};
									if(val.c) val.c.forEach((item, i) => imgs['image' + (i ? i + 1 : '')] = item);
									ox.el.set(imgs, elem);
									//log({id: 'images', val, imgs});
									break;
								case 'font-size': 
									var val = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									elem.css('font-size', val);
									elem.css('line-height', val);
									break;
								case 'padding-top': 
									var val = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									elem.css('padding-top', val);
									break;
								case 'margin-left': 
									var val = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									elem.css('margin-left', val);
									break;
								case 'margin-right': 
									var val = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									elem.css('margin-right', val);
									break;
								case 'margin-top': 
									var val = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									elem.css('margin-top', val);
									break;
								case 'margin-bottom': 
									var val = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									elem.css('margin-bottom', val);
									break;
								case 'css2':
									var val = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									elem.addClass(val);
									break;
								case 'color':
									var color = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									elem.css('color', color);
									break;
								case 'backcolor':
									var color = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									elem.css('background-color', color);
									break;
								case 'grid':
									var grid = typeof val == 'object' && val['data-value'] ? val['data-value'] : val;
									var g;
									if((g = grid.split(',')).length == 4) grid = g[1].trim() + ' / ' + g[0].trim() + ' / span ' + g[3].trim() + ' / span ' + g[2].trim();
									//log(grid);
									elem.css('grid-area', grid);
									break;
								case 'href':
									elem.attr('href', ox.tx(val));
									break;
								default:
									if(attr != 'text' && attr != 'args') elem.attr(attr, val);
									break;
							}
							
						}
					}
				});	
			},
			getClassByPrefix: function(elem, prefix, isAll, isId) {
				if(!elem) return null;
				
				var re = new RegExp('(^|\\s)' + prefix + '\\S+', 'g');
				var css = $(elem).attr('class').toString();
				var m = css.match(re);
				
				return m && m.length ? (isAll ? m.join(' ') : m[0]).trim().substr(isId ? prefix.length : 0) : '';
			},
			removeClassByPrefix: function(elem, prefix) {
				var re = new RegExp('(^|\\s)' + prefix + '\\S+', 'g');
				$(elem).removeClass(function(idx, className) {
					return (className.match(re) || []).join(' ');
				});
			},
			setEventHold: function(content, onHold, onUp, delay) {
				content = $(content);
				
				var args = {};
				args.isDown = false;
				args.isDragTimer = false;
				
				if(content.hasClass('ox-event-hold')) {
					content.off(ox.b.CLICK_DOWN + '.ox-hold');
					content.off(ox.b.CLICK_UP + '.ox-hold contextmenu.ox-hold');
					content.off('mousemove.ox-hold touchmove.ox-hold');
				}
				
				content.addClass('ox-event-hold', args);
				content.on(ox.b.CLICK_DOWN + '.ox-hold', function(e) {
					if(!args.isDragTimer) {
						//log('#omnia.tools.element.setEventHold: onDown');
						args.isDragTimer = true;
						args.downTimer = setTimeout(function() {
							if(!args.isDragTimer || !args.isDown) return;
	
							//log('#omnia.tools.element.setEventHold: onHold');
							var isProceed = onHold(e, content); 
							if(isProceed) content.trigger(e); 
						}, delay !== undefined ? delay : 300);
					}
					args.isDown = true;
				});
				content.on(ox.b.CLICK_UP + '.ox-hold contextmenu.ox-hold', function(e) {
					//log('#omnia.tools.element.setEventHold: onUp');

					if(args.isDragTimer) {
						clearTimeout(args.downTimer);
					}
					args.isDragTimer = false;
					args.isDown = false;
				
					onUp(e, content);
					return true;
				});
				content.on('mousemove.ox-hold touchmove.ox-hold', function(e) {
					if(args.isDragTimer && !args.isDown) {
						clearTimeout(args.downTimer);
						args.isDragTimer = false;
					}
				});				
			},
			isInViewport: function(elem, tolerance) {
				elem = $(elem);
				if(!elem) return false;
				if(!tolerance) tolerance = 1;
				
				try {
					var parent = elem.scrollParent();
					var l = 0;
					//while(!parent[0].offsetHeight && ++l < 100) parent = parent.scrollParent();
					
					var top = elem.offset().top;
					var line = parent ? parent.offset().top + (parent[0].offsetHeight/* || parent.outerHeight()*/) * tolerance : $(window).height() * tolerance;
					
					//if(parent) log('omnia.tools.element.isInViewport: el.top = ' + elem.offset().top + ' -> ' + line + ', p.top = ' + parent.offset().top + ', p.outerHeight = ' + parent.outerHeight());
					//log('omnia.tools.element.isInViewport: top = ' + top + ', line = ' + line + ', parent = ' + (parent ? '1' : '0') + ' ' + (parent.offset().top + parent[0].offsetHeight));

					return (top || line) && (top <= line + 1);

					//if(parent) return top <= 1 + parent.offset().top + parent.outerHeight() * tolerance;
					//return top <= $(window).height() * tolerance;
					
					/*var t = elem.offset().top;
					var b = t + elem.outerHeight();
					var vt = parent ? parent.offset().top : 0; //$(window).scrollTop();
					var vb = (parent ? vt + parent.outerHeight() : $(window).height()) * (tolerance ? tolerance : 1);// vt + $(window).height();
	
					log('omnia.tools.element.isInViewport: ' + elem[0].className + ' t = ' + t + ' vt = ' + vt + ' vb = ' + vb + ' | ' + elem.position().top + ' ' + parent.outerHeight() + ' ' + elem.height());
					return t <= vb;*/
				}
				catch(e) {
					return false;
				}
			},
			getInViewport: function(wrapper, tolerance) {
				var first = null;
				var last = null;
				var firstPart = null;
				var lastPart = null;
				
				if(tolerance === undefined) tolerance = 2;
				
				var viewport = wrapper.scrollParent();
				
				var rt = viewport.offset().top;
				var rh = viewport.height();
			
				var items = wrapper.find('> *');
				
				$.each(items, function(i, item) {
					var wt = $(item).offset().top;
					var wh = $(item).height();

					var y0 = wt - rt;
				
					if(y0 >= -tolerance/*-wh / 2*/) if(!first) first = $(item);
					if(y0 + wh >= 0 && !firstPart) firstPart = $(item);
					if(y0 <= rh) lastPart = $(item);
					if(y0 + wh <= rh + tolerance/* + wh / 2*/) last = $(item);
				});
				
				return {first: first, last: last, firstPart: firstPart, lastPart: lastPart};
			},
			setClass: function(elem, css, isOn, filter) {
				if(filter) elem = omnia.tools.element.getByClass(filter);
				if(isOn || isOn === undefined) elem.addClass(css); else elem.removeClass(css);
			},
			getByClass: function(elem, css) {
				if(!(elem instanceof jQuery)) (elem);
				
				if(elem.hasClass(css)) return elem;
				return elem.find('.' + css);
			},
			getData: function(elem, asFile, withIds, asData) {
				var r = [];
				var elemsData = elem.find('.ox-data');
				
				$.each(elemsData, function(i, elemData) {
					var elem = $(elemData);
					var handler = elem.data('ox-handler');
					if(handler && handler.getValue) {
						var id = ox.el.getClassByPrefix(elem, 'ox-id-data-').substr(11);
						
						if(asData) r[id] = handler.getValue();
						else r.push(asFile ? {v: (withIds ? '#attr-' + id + ' ' : '') + handler.getValue()} : {id: id, data: handler.getValue()});
					}
				});
				
				return asFile ? {c: r} : r;
			},
			getContext: function(elem, context, isOnClick) {
				return e => {
					try {
					
					if(e) e.stopPropagation();
					if(e) e.preventDefault();
					if(!isOnClick) elem.removeClass('ox-down');

					if(typeof context == 'function') context = context();
					
					var menu = {};
					if(context && typeof context == 'object' && (context.frame || context.content || context.length)) {
						if(ox.pf.isPhone) {
							var content = context.length ? context : (context.content ? content.content : (context.frame ? context.frame : null));
		
							menu = {};
							menu.delay = true;
							menu.isScroll = true;
							menu.frame = {
								oid: 'popup',
								css: 'ox-body-flex',
								style: {'max-height': '80%', 'width': '100%'},
								cancel: '#close',
								c: [{oid: 'bar2', css: 'ox-context ox-large', c: content}],
							};
						} else {
							if(context.length) context = {content: context};
							context.elem = elem;
							context.e = e;
							context.context = true;
							if(!context.blend) context.blend = 0;
							context.css = (context.css ? context.css : '') + ' ox-nocenter';
							if(isOnClick) context.dropdown = elem;
							
							menu = context;
						}
						
						omnia.ui.overlay.show(menu);
					}
					return false;
					
					}
					catch(err) { ox.error(err); }
				};
			},
			setContext: function(elem, context, isOnClick) {
				elem.on(!isOnClick ? 'contextmenu' : ox.b.CLICK, ox.el.getContext(elem, context, isOnClick));				
			},
			onRefresh: function(callback, timeout) {
				if(!callback || typeof callback != 'function') return;
				
				setTimeout(function() {
					window.requestAnimationFrame(function() {
						callback();
					});
				}, timeout || 1);
			},
			keyCursor: function(root, isRemove) { return;
				if(!root) return;
				log('omnia.tools.element.keyCursor: Added');
				
				if(!(root instanceof jQuery)) root = $(root);
				
				if(isRemove || !document.body.contains(root[0])) {
					$('body').off('keydown.keycursor');
					if(app) delete app.cursor;
	
					log('omnia.tools.element.keyCursor: Remove');
					return;
				}
				
				if(app) {
					if(app.cursor) {
						ox.el.keyCursor(app.cursor.root, true);
						delete app.cursor;
					}
					app.cursor = {
						root: root,
						current: null,
					};
				}
				
				$('body').on('keydown.keycursor', (e) => {
					if($('.ox-cursor-item').length == 0) {
						log('omnia.tools.element.keyCursor: Removed');
						$('body').off('keydown.keycursor');
						return;
					}
					
					if(e.key != 'ArrowLeft' && e.key != 'ArrowRight' && e.key != 'ArrowUp' && e.key != 'ArrowDown') {
						log('#key ' + e.keyCode);
						//e.preventDefault();
						return;
					}
					
					var elems = root.find('.ox-cursor-item:not(.ox-hidden)').get();
					var items = elems.map((elem) => { elem = $(elem); return {elem, pos: elem.offset(), w: elem.width(), h: elem.height()}; });

					var getClosest = function(type, ref, isInContainer) {
						//log('#getClosest ' + type);
						
						var closest = null;
						items.forEach((item) => {
							if(item && ref && item.elem && ref.elem && item.elem[0] === ref.elem[0]) return;
							//log(item.elem.parent() !== ref.elem.parent());
							if(isInContainer && item && ref && item.elem && ref.elem && item.elem.parent()[0] !== ref.elem.parent()[0]) { return; }
							
							//log('# ' + ref.pos.left + ' ' + item.pos.left + ' ' + item.elem.attr('class') + ' | ' + (!closest ? 'none' : closest.elem.attr('class')) + ' | ' + (ref.elem ? ref.elem.attr('class') : ''));
							var rl = ref.pos.left;// + ref.w / 2;
							var rt = ref.pos.top;// + ref.h / 2;
							var il = item.pos.left;// + item.w / 2;
							var it = item.pos.top;// + item.h / 2;
							var dx = Math.abs(rl - il);
							var dy = Math.abs(rt - it);
							var d = Math.sqrt(dx * dx + dy * dy);
							var dh = Math.sqrt(dx * dx + dy * dy * dy);
							var dv = Math.sqrt(dx * dx * dx + dy * dy);
													
							item.dh = dh;
							item.dv = dv;
							
							//item.elem.find('.ox-diss').remove();
							//ox.node({t: 'div', css: 'ox-diss abs t00 ox-d2', html: Math.round(item.pos.left) + ' x ' + Math.round(item.pos.top) + '<br>' + Math.round(dh) + ' x ' + Math.round(dv)}, item.elem);

							switch(type) {
								case 'ArrowLeft':
									if((rl > il) && (!closest || item.dh < closest.dh)) closest = item;
									//if(ref.pos.left > item.pos.left && (!closest || item.pos.left > closest.pos.left)) closest = item;
									break;
								case 'ArrowRight':
									if((rl < il) && (!closest || item.dh < closest.dh)) closest = item;
									//if(ref.pos.left < item.pos.left && (!closest || item.pos.left < closest.pos.left)) closest = item;
									break;
								case 'ArrowUp':
									if((rt > it) && (!closest || item.dv < closest.dv)) closest = item;
									//if(ref.pos.top > item.pos.top && (!closest || item.pos.top > closest.pos.top)) closest = item;
									break;
								case 'ArrowDown':
									if((rt < it) && (!closest || item.dv < closest.dv)) closest = item;
									//if(ref.pos.top < item.pos.top && (!closest || item.pos.top < closest.pos.top)) closest = item;
									break;
								/*default: 
									var dx = Math.abs(ref.pos.left - item.pos.left);
									var dy = Math.abs(ref.pos.top - item.pos.top);
									var d = Math.sqrt(dx * dx + dy * dy);
									item.d = d;
									if(!closest || item.d < closest.d) closest = item;
									break;*/
							}
							
							
							//if(closest === item) log('# ref.top: ' + ref.pos.top + ' item.top: ' + item.pos.top + ' isBelow ' + (ref.pos.top <= item.pos.top));
							
						});
						return closest;
					}
					
					var cursor = null;
					
					if(!app || !app.cursor.current) cursor = getClosest('ArrowRight', {pos: {left: 0, top: 0}, w: 0, h: 0});
					else {
						cursor = getClosest(e.key, app.cursor.current, true);
						//log('#c1: ' + cursor);
						if(!cursor) cursor = getClosest(e.key, app.cursor.current, false);
						//log('#c2: ' + cursor);
					}
					
					if(app && !cursor) cursor = app.cursor.current;
					
					$('.ox-cursor-item').removeClass('ox-cursor-active');
					$('.ox-cursor-item').css('-webkit-transform', '');
					$('.ox-cursor-item').blur();
					
					if(cursor) {
						cursor.elem.addClass('ox-cursor-active');
						var sc = ((cursor.elem.width() + 30) / cursor.elem.width());
						if(sc > 1.4) sc = 1.4;
						cursor.elem.css('-webkit-transform', 'scale(' + sc + ')');
						cursor.elem.focus();
						cursor.elem.find('.ox-button').focus();
						
						//if(cursor.elem[0].scrollIntoViewIfNeeded) cursor.elem[0].scrollIntoViewIfNeeded();
						//else 
						ox.el.onRefresh(() => {
							cursor.elem[0].scrollIntoViewIfNeeded(false);
							//cursor.elem[0].scrollIntoView({behavior: "smooth", block: "end"});
						});
						//log(cursor.elem.parent());
						
						//var p = cursor.elem.parent().parent().parent()[0];
						//log($(p));
						//var o0 = $(p).offsetTop()
						//log({offsetHeight: p.offsetHeight, clientHeight: p.clientHeight, offsetTop: p.offsetTop, clientTop: p.clientTop, scrollTop: p.scrollTop, offsetTop: $(p).offset().top, scrollTop2: $(p).scrollTop()});
					}
					
					if(app) app.cursor.current = cursor;

					//log({cursor: cursor.elem[0]});
					e.preventDefault();
				});
			},
			renderFrame: function(isLog) {
				if(isLog) log('%comnia.tools.element.renderFrame', 'color:#a647c8');
				return new Promise(resolve => { window.requestAnimationFrame(resolve); });
			},
			click: function(elem, handler, id) {
				elem.on(ox.b.CLICK + (id ? '.' + id : ''), e => { handler(e, elem); elem.blur(); });
				if(ox.pf.method == 'touch') elem.on('keyup' + (id ? '.' + id : ''), e => { if(e && e.keyCode == 13) handler(e, elem); });
			},
			show: function(elem) {
				if(elem.getRoot) elem = elem.getRoot();
				ox.css(elem, 'ox-hidden', false);
			},
			hide: function(elem) {
				if(elem.getRoot) elem = elem.getRoot();
				ox.css(elem, 'ox-hidden', true);
			},
			scrollTop: function(elem) {
				elem[0].scrollTop = 0;
				elem[0].scrollLeft = 0;
			},
			scrollRight: function(elem) {
				elem[0].scrollLeft = elem[0].scrollWidth;
			},
			getNodes: function(elem, options) {
				try {
					var nodes = $(elem)[0].getElementsByTagName("*");
					
					if(options && options.type == 'text') {

						var inline = {text: ['a', 'b', 'i', 'strong', 'em', 'italic', 'small'], exclude: ['sup', 'sub']};
						
						// Nodes that contain plain text
						var texts = Array.from(nodes).filter(n => Array.from(n.childNodes).filter(c => c.nodeType == Node.TEXT_NODE && c.textContent.trim().replace(/[^a-zA-Z]/g, '').length).length);
						
						// Exclude inline nodes
//						texts = texts.filter(n => !inline.text.includes(n.nodeName.toLowerCase()) && !inline.exclude.includes(n.nodeName.toLowerCase()));
						
						// Filter childs
						var unique = [];
						texts.forEach(n => { if(!unique.filter(u => u.contains(n)).length) unique.push(n); });
						texts = unique;
						
						// Filter desired nodes
						var show = ['span', 'div', 'p', 'article', 'h1', 'h2', 'h3', 'h4', 'h5', 'li', 'blockquote']; //.concat(inline.text);
					//	texts = texts.filter(n => show.includes(n.nodeName.toLowerCase()));
						
						/*texts.forEach(n => $(n).addClass('ox-d2'));
						log({
							elem, 
							nodes: Array.from(nodes).slice(0, 10),
							nodesCount: nodes.length,
							texts,
							textsHTML: texts.map(t => t.outerHTML),
							textsT: texts.map(t => { return {t, childs: Array.from(t.childNodes).map(c => { return {c, text: c.textContent, name: c.nodeName, type: c.nodeType}; })}; }),
						});*/
						
						texts = texts.map(t => { 
							var p = $(t).text(); //Array.from(t.childNodes).filter(c => c.nodeType == Node.TEXT_NODE || inline.text.includes(c.nodeName.toLowerCase())).map(c => c.textContent).join('').replace(/[ ]+/, ' ');
							var sentences = ox.str.splitToSentences(p); //p.split(/[\.\?\!](\s|$)/g).map(s => s.trim()).filter(s => s.length > 3);
							return {
								node: t, 
								text: p,
								sentences,
							}; 
						});
						
						nodes = texts;
					}
					
					return nodes;
				}
				catch(e) {
					log({e});
				}
			},
			replaceNodes: function(elem, from, to, css) {
				Array.from($(elem)[0].getElementsByTagName(from)).forEach(n => n.outerHTML = '<' + to + ' class="' + css + '">' + n.innerHTML + '</' + to + '>');
					
				//elem.find(from).each(() => { $(this).replaceWith('<' + to + '>' + $(this).html() + '</' + to + '>'); })
			},
			moveTo: function(elem, newParent) {
				elem.detach().appendTo(newParent);
			},
			showElements: async function(elem, indent) {
				if(indent == undefined) indent = 10;
				
				var nodes = $(ox.el.getNodes(elem));
				nodes.get().forEach(n => {
					n = $(n);

					var cs = window.getComputedStyle(n[0]);
					var isBlock = cs.display != 'inline';

					n.css({
						//'border': '0.5px solid rgba(255, 0, 0, .5)',
						'position': 'relative',
						'display': isBlock ? 'block' : 'inline-block',
					});
					n.css(isBlock ? 'padding' : 'padding-left', indent + 'px'); 
				});
				
				await ox.el.renderFrame();
				
				nodes.get().forEach(n => {
					n = $(n);
					
					var cs = window.getComputedStyle(n[0]);
					var isBlock = cs.display == 'block';
					n.css({
						//'border': '0.5px solid rgba(255, 0, 0, .5)',
						'position': 'relative',
						//'display': isBlock ? 'block' : 'inline-block',
					});

					var r = n[0].getBoundingClientRect();
					var m = {
						t: parseFloat(cs.marginTop), 
						b: parseFloat(cs.marginBottom), 
						l: parseFloat(cs.marginLeft), 
						r: parseFloat(cs.marginRight),
					};
					var p = {
						t: parseFloat(cs.paddingTop), 
						b: parseFloat(cs.paddingBottom), 
						l: parseFloat(cs.paddingLeft), 
						r: parseFloat(cs.paddingRight),
					};
					var w = n[0].offsetWidth;
					var h = n[0].offsetHeight;
					var wm = w + m.l + m.r;
					var hm = h + m.t + m.b;
					var wmp = w + m.l + m.r + p.l + p.r;
					var hmp = h + m.t + m.b + p.t + p.b;
					var wp = w + p.l + p.r;
					var hp = h + p.t + p.b;

					var borderFrame = ox.node({
						t: 'div', 
						css: 'abs t00 ' + (isBlock ? ' _block' : ''), 
						style: {
							'width': '100%',
							'height': '100%',
						},
						c: [
							{
								t: 'div', 
								css: 'abs t00 w100 h100', 
								style: {
									'border-style': 'solid', 
									'border-color': 'rgba(255, 0, 0, .05)', 
									'border-width': isBlock ? indent + 'px' : '0 0 0 ' + indent + 'px', 
								},
							},
							{
								t: 'div', 
								css: 'abs t00 w100 h100', 
								style: {
									'border-style': 'solid', 
									'border-color': 'rgba(255, 0, 0, .2)', 
									'border-width': m.t + 'px ' + m.r + 'px ' + m.b + 'px ' + m.l + 'px',
									'margin': '-' + m.t + 'px -' + m.r + 'px -' + m.b + 'px -' + m.l + 'px', 
									'width': 'calc(100% + ' + (m.l + m.r) + 'px)',
									'height': 'calc(100% + ' + (m.t + m.b) + 'px)',
								},
							},
							{
								t: 'div', 
								css: 'abs t00 w100 h100', 
								style: {
									'border': '0.5px solid rgba(255, 0, 0, .5)',
									'margin': '-' + m.t + 'px -' + m.r + 'px -' + m.b + 'px -' + m.l + 'px', 
									'width': 'calc(100% + ' + (m.l + m.r) + 'px)',
									'height': 'calc(100% + ' + (m.t + m.b) + 'px)',
								},
							},
							{
								t: 'div', 
								css: 'abs l0 font-code col-white nowrap t00', 
								style: 'font-size:8px !important; background:rgba(255, 0, 255, .5); padding:1px 3px; line-height:10px;', 
								text: n[0].nodeName.toLowerCase(),
							},
						],
					});
					n.append(borderFrame);
				});
			},
		},
		file: {
			img2base64: function(url, callback, outputFormat) {
				var img = new Image();
				img.crossOrigin = 'Anonymous';
				img.onload = function() {
					var canvas = document.createElement('CANVAS');
					var ctx = canvas.getContext('2d');
					var dataURL;
					canvas.height = this.height;
					canvas.width = this.width;
					ctx.drawImage(this, 0, 0);
					dataURL = canvas.toDataURL(outputFormat);
					callback(dataURL);
					canvas = null;
				};
				img.src = url;
			},
			file2base64: function(url, callback) {
				log('omnia.tools.file.file2base64: url = ' + url);
				
				var xhr = new XMLHttpRequest();
				xhr.onload = function() {
					var reader = new FileReader();
					reader.onloadend = function() {
						callback(reader.result);
					}
					reader.onerror = function(e) {
						ox.error('omnia.tools.file.file2base64: Error: ' + e);
						callback();
					}
					reader.readAsDataURL(xhr.response);
				};
				xhr.open('GET', url);
				xhr.responseType = 'blob';
				xhr.send();
			},
			
			downloadSVG: function(elem, filename, format, w, h) {
				//$(elem).attr('width', w);
				//$(elem).attr('height', h);
				if(elem instanceof jQuery) elem = elem[0];
				
				var serializer = new XMLSerializer();
				var source = serializer.serializeToString(elem);

				if(!source.match(/^<svg[^>]+xmlns="http\:\/\/www\.w3\.org\/2000\/svg"/)){
					source = source.replace(/^<svg/, '<svg xmlns="http://www.w3.org/2000/svg"');
				}
				if(!source.match(/^<svg[^>]+"http\:\/\/www\.w3\.org\/1999\/xlink"/)){
					source = source.replace(/^<svg/, '<svg xmlns:xlink="http://www.w3.org/1999/xlink"');
				}
				
				var source = '<?xml version="1.0" standalone="no"?>' + source;
				//var url = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(source);
				var blob = null;
				
				if(format && format != 'svg') {
					var svgUrl = 'data:image/svg+xml;base64,' + btoa(source);
					//var image = ox.create(omnia.tools.Image, {url: svgUrl});
					//var canvas = image.getCanvas({w: w, h: h});

					const canvas = document.createElement('canvas');
					canvas.width = w;
					canvas.height = h;
					
					const ctx = canvas.getContext('2d');
					ctx.fillStyle = '#ffffff';
					ctx.fillRect(0, 0, w, h);
					
					var img = new Image();
					img.onload = function() {
						ctx.drawImage(img, 0, 0);
						canvas.toBlob(function(blob) { 
							omnia.tools.file.download(blob, filename, format); 
						}, 'image/' + format);
					}
					img.src = svgUrl;
					return;
				}
				
				omnia.tools.file.download(source, filename, 'svg');
			},
			downloadHtml: function(elem, filename) {
				if(elem instanceof jQuery) elem = elem[0];

				var serializer = new XMLSerializer();
				var source = serializer.serializeToString(elem);

				var source = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"\n  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">' + source;
				var url = 'data:text/html;charset=utf-8,' + encodeURIComponent(source);
				
				omnia.tools.file.download(source, filename, 'html');
			},
			downloadLink: function(url) {
				var link = document.createElement('a');
				link.href = url;
				link.download = url.substr(url.lastIndexOf('/') + 1);
				link.click();
			},
			download: function(data, filename, format) {
				var blob = null;
				switch(format) {
					case 'json':
						var json = data; //JSON.stringify(data);
						blob = new Blob([json], {type: 'application/json'});
						break;
					case 'html':
						blob = new Blob([data], {type: 'octet/stream'});
						break;
					case 'svg':
						blob = new Blob([data], {type: "image/svg+xml;charset=utf-8"});
						break;
					default:
						blob = data; //new Blob([data], {type: 'octet/stream'});
						break;
				}
				//var json = format === undefined || format == 'json' ? JSON.stringify(data) : data;
				//var blob = new Blob([json], {type: 'octet/stream'});
				
				var url = window.URL.createObjectURL(blob);

				var a = document.createElement("a");
				a.href = url;
				a.download = filename;
				a.click();
				window.URL.revokeObjectURL(url);
			},
		},
		fonts: {
			fontsInfo: null,
			fonts: {},
			
			addFont: function(args) {
				// Load Webfont pack
				if(!args.isPackLoaded) {
					omnia.tools.browser.loadPacks({
						packs: ['webfont'],
						onPacksLoaded: function() { args.isPackLoaded = true; omnia.tools.fonts.addFont(args); },
					});		
					return;
				}
				
				if(!args.fontname && args.elem) args.info = omnia.tools.element.getClassByPrefix(args.elem, 'ox-font-web-');
				if(!args.fontname && !args.info) return;
				
				if(args.info) {
					args.info = args.info.split('-');
					args.provider = args.info[3];
					args.fontname = args.info[4].split('+').join(' ');
				}

				var isLoaded = omnia.tools.fonts.fonts[(args.provider || '') + '_' + args.fontname];
				try {
					if(!isLoaded && WebFont && (args.provider == 'google' || args.provider === undefined)) {
						log('omnia.tools.fonts.addFont: Load font: ' + args.fontname);
						WebFont.load({google: {families: [args.fontname + ':100,300,400,500,600,700,800,900,n4,i4,bold']}});
						omnia.tools.fonts.fonts[(args.provider || '') + '_' + args.fontname] = true;
					}
					
					if(args.elem) $(args.elem).css('font-family', args.fontname);
					//log({elem: args.elem, fontname: args.fontname});
				}
				catch(e) {
					omnia.tools.error('omnia.tools.fonts.addFont: Error: Could not add font \'' + args.fontname + '\'');
				}
			}, 
			replaceFont: function(args) {
				if(!args.elem) return;
				
				ox.el.removeClassByPrefix(args.elem, 'ox-font-web-');
				
				/*var css = omnia.tools.element.getClassByPrefix(args.elem, 'ox-font-web-');
				if(css) {
					args.elem.removeClass(css);
					log('omnia.tools.fonts.replaceFont: Remove ' + css);
				}*/
				
				omnia.tools.fonts.addFont(args);
			},
		},
		html: {
			// Static variables
			
			lastClick: null,
			
			// Static public functions
			
			node: function(cfg, args) {
				// Usage
				//
				// node([{oid: 'text'}, {oid: 'text'}])
				// node({oid: 'text', v: 'Hello'})
				// node({t: 'div'})
				// node()
				
				try {

					// Paramenters
					if(!cfg) return;
					
					var me = this;
					var self = omnia.tools.html.node;
				
					var root = null;
					if(args) {
						root = args instanceof jQuery ? args : args.root;
						if(args instanceof jQuery) args = {root: root};
						if(args.isClear && args.root) args.root.html('');
					} else {
						args = {};
					}
					if(args.log) {
						if(typeof args.log != 'object') args.log = {};
						if(!args.log.tags) args.log.tags = 0;
					}
					
					// Endless loop prevention
					if(args.depth == undefined) args.depth = 0;
					else args.depth++;
					//if(args.depth > 100) return false;
					
					// Log
					if((cfg.args && cfg.args.log) || cfg.isLog || cfg.log) args.log = true;
					//if(args.log) { log('omnia.tools.html.node: cfg.oid = ' + cfg.oid + ', args.depth = ' + args.depth + ', cfg.args = ' + cfg.args + ', cfg.length = ' + cfg.length); }
					
					// Ready object
					if(cfg instanceof jQuery) {
						if(root) {
							if(args && args.onTop) root.prepend(cfg);
							else if(args && args.pos && args.pos < root.children().length) cfg.insertBefore(root.children().eq(args.pos));
							else root.append(cfg);
						}
						if(cfg.attr('class') && cfg.attr('class').indexOf('ox-font-web-') >= 0) omnia.tools.fonts.addFont({elem: cfg});

						return cfg;
					}
					
					// Array of objects
					if(Array.isArray(cfg)) {
						if(!cfg.length) return;
						if(cfg.length == 1) return omnia.tools.html.node(cfg[0], args);
						
						if(args.log && args.log.log) log('omnia.tools.html.node: Render array (' + cfg.length + ')');
						
						if(!root) root = args.root = $('<div />');
						$.each(cfg, function(i, c) {
							self(c, args);
						});
						
						if(args && args.onDone) args.onDone();
						return root;
					}
					
					// Render
					var elem = null;
					var argsPassed = cfg.args || args.args;
				
					if(typeof cfg == 'string') {
						if(!root) return $(cfg);
						root.append(cfg);
						return $(root);
					} else if(cfg.elem && cfg.elem instanceof jQuery) {
						elem = cfg.elem;
						
						if(cfg.text) elem[0].textContent = cfg.text[0] == '#' ? omnia.tools.text(cfg.text.substr(1)) : cfg.text; //elem.text(cfg.text[0] == '#' ? omnia.tools.text(cfg.text.substr(1)) : cfg.text);
						if(cfg.html) {
							if(typeof cfg.html == 'string') elem[0].innerHTML = cfg.html[0] == '#' ? ox.tx(cfg.html) : cfg.html; //elem.html(cfg.html[0] == '#' ? ox.tx(cfg.html) : cfg.html);
							else self(cfg.html, {root: elem, depth: args.depth, log: args.log});
						}
					} else {
						if(cfg.t) {
							if(args.log) { args.log.tags++; if(args.log.log) log('omnia.tools.html.node: Render <' + cfg.t + '> depth = ' + args.depth); }
							
							var attr = {};//$.extend(true, {}, cfg);
							$.each(cfg, function(id, obj) { attr[id] = obj; });
							
							attr['class'] = attr.css;
							delete attr.c;
							delete attr.css;
							delete attr.click;
							delete attr.clickdown;
							delete attr.clickup;
							delete attr.clickhold;
							delete attr.onchange;
							delete attr.html;
							delete attr.style;
							delete attr.t;
							delete attr.text
							delete attr.context;
							delete attr.background;
							delete attr.onRendered;
							delete attr.onProcess;
							delete attr.onReady;
							delete attr.tip;
							delete attr.data;
							delete attr.alt;

							/// TODO: remove all functions from attr, otherwise they will be called by jQuery below
							elem = $('<' + cfg.t + '/>', attr);
							
							//var elemObj = document.createElement(cfg.t);
							//Object.keys(attr).forEach((id) => { elemObj.setAttribute(id, attr[id]); });
							//elem = $(elemObj);
	
							if(cfg.text) elem[0].textContent = cfg.text[0] == '#' ? omnia.tools.text(cfg.text) : cfg.text; //elem.text(cfg.text[0] == '#' ? omnia.tools.text(cfg.text.substr(1)) : cfg.text);
							if(cfg.html) {
								if(typeof cfg.html == 'string') elem[0].innerHTML = cfg.html[0] == '#' ? ox.tx(cfg.html) : cfg.html; //elem.html(cfg.html[0] == '#' ? ox.tx(cfg.html) : cfg.html);
								else self(cfg.html, {root: elem, depth: args.depth, log: args.log});
							}
						} else {
							if(!cfg.oid && args.oid) cfg.oid = args.oid;
						
							if(args.log && args.log.log) log('omnia.tools.html.node: Render component oid = ' + cfg.oid);
						
							if(cfg.oid) {
								var item;
								if(item = omnia.ui[cfg.oid]) {
									cfg.html = $.extend(true, {}, item.html);
									if(!cfg.handler && item.handler) cfg.handler = item.handler;
								}
								if(!cfg.html) { omnia.tools.error('omnia.tools.html.node: Component "' + cfg.oid + '" not found'); return; }
		
								if(args.tFirst) { 
									cfg.html = omnia.tools.jsonCopy(cfg.html);
									cfg.html.t = args.tFirst; 
								}
								if(args.cssFirst) {
									cfg.css = (cfg.css ? cfg.css : '') + ' ' + args.cssFirst;
								}
								if(!cfg.handler && args.handler) cfg.handler = args.handler;
							}
							
							//if(cfg.text) cfg.html.text = cfg.text;
							if(!cfg.oid && !cfg.html) { /*omnia.tools.error('omnia.tools.html.node: No component definition'); */return; }
							
							if(cfg.args && cfg.html && !cfg.html.args && ((args && !args.passOnce) || (cfg.args && cfg.args.isPass))) {
								args.args = cfg.args;
								if(!(cfg.args && cfg.args.isPass)) args.passOnce = true;
							} else {
								if(args.args && args.passOnce) {
									delete args.args;
									delete args.passOnce;
								}
							}
							if(!cfg.handler && cfg.args) {
								if(cfg.html.args) {
									$.extend(cfg.html.args, cfg.args);
								} else {
									cfg.html.args = cfg.args;
								}
							}
							
							elem = self(cfg.html, args);
						}
					}
					
					if(!elem) { 
						omnia.tools.error('omnia.tools.html.node: Render error, elem is missing, oid = ' + (cfg ? cfg.oid : 'unknown')); 
	
						log({cfg}); 
						//log(cfg.html);
						if(cfg.elem) {
							log('elem is instance of jQuery: ' + cfg.elem instanceof jQuery);
							log('elem constructor: ' + cfg.elem.constructor ? cfg.elem.constructor.name : 'unknown');
							log(cfg.elem); 
						}
						
						return; 
					}
					if(!(elem instanceof jQuery) && elem.getRoot) elem = elem.getRoot();
					
					// Set attributes
					//if(!elem.attr) log(cfg);
					if(cfg.id) elem.attr('id', cfg.id);
					if(cfg.data) elem.data(cfg.data);
					if(cfg.css) elem.addClass(cfg.css);
					if(cfg.background) elem.css('background', cfg.background);
					if(cfg.style) { if(typeof cfg.style == 'string') elem.attr('style', cfg.style); else elem.css(cfg.style); }
					if(cfg.css && typeof cfg.css == 'string' && cfg.css.indexOf('ox-font-web-') >= 0) omnia.tools.fonts.addFont({elem: elem});
					if(cfg.click) {
						if(cfg.css && app && app.space && cfg.css.indexOf('ox-id-track-') >= 0) {
							//log(cfg.css);
							var id = cfg.css.split('ox-id-track-');
							if(id.length > 1) { 
								var uc = id[1].split(' ')[0];
								uc = uc.split('-');
								
								elem.on(omnia.tools.browser.CLICK, function() {
									if(app && app.space) app.space.track({ucid: uc[0], uctp: uc.length > 1 ? uc[1] : null, value: uc.length >= 2 ? uc[2] : null});
								});
							}
						}
				
						if(typeof cfg.click == 'function') {
							/*elem.on(omnia.tools.browser.CLICK, function(e) {
								//e.stopPropagation();
								//e.preventDefault(); 
								
								cfg.click(e, elem);
								elem.blur();
							});*/
							/*if(ox.pf.method == 'touch') elem.on('keyup', e => {
								log('#keyclick')
								if(e && e.keyCode == 13) cfg.click(e, elem);
							});*/
							
							ox.el.click(elem, cfg.click);
						}
						
						if(typeof cfg.click == 'object') elem.on(omnia.tools.browser.CLICK, function(e) {
							e.stopPropagation();
							e.preventDefault(); 
							elem.blur(); 
							
							cfg.click.elem = $(elem); 
							cfg.click.e = e; 
							
							omnia.ui.overlay.show(cfg.click);
						});
						
						/*elem.on(omnia.tools.browser.CLICK, function(e) { 
							e.stopPropagation();
							e.preventDefault(); 
							
							this.blur(); 
							if(typeof cfg.click == 'function') cfg.click(e, elem); 
							if(typeof cfg.click == 'object') { 
								cfg.click.elem = $(elem); 
								cfg.click.e = e; 
								
								omnia.ui.overlay.show(cfg.click);
							};
						});*/
					}
					if(cfg.clickdown) elem.on(omnia.tools.browser.CLICK_DOWN, function(e) { this.blur(); cfg.clickdown(e, elem); } );
					if(cfg.clickup) elem.on(omnia.tools.browser.CLICK_UP, function(e) { this.blur(); cfg.clickup(e, elem); } );
					if(cfg.clickhold) elem.on(omnia.tools.browser.CLICK_HOLD, function(e) { this.blur(); cfg.clickhold(e, elem); } );
					if(cfg.onchange && typeof cfg.onchange == 'function') elem.on('change', function(e) { cfg.onchange(); }); 
					if(cfg.keyup) elem.on('keyup', function(e) { cfg.keyup(e, elem); });
					if(cfg.context !== undefined) {
						//ox.el.setContext(elem, cfg.context);
						elem.on('contextmenu', function(e) {
							e.stopPropagation();
							e.preventDefault();
							elem.removeClass('ox-down');

							var context = cfg.context;
							if(typeof cfg.context == 'function') context = cfg.context();
							
							if(context && typeof context == 'object' && (context.frame || context.content || context.length)) {
								if(context.length) context = {content: context};
								
								context.elem = elem;
								context.e = e;
								context.context = true;
								if(!context.blend) context.blend = 0;
								context.css = (context.css ? context.css : '') + ' ox-nocenter';
								
								omnia.ui.overlay.show(context);
							}
							return false;
						});
					}
					if(cfg.alt) {
						//elem.attr('title', ox.tx(cfg.alt));
						elem.attr('data-tooltip', ox.tx(cfg.alt));
						elem.addClass('ox-has-tooltip');
						var node = ox.node({oid: 'tooltip', css: 'ox-dark ox-black ' + (cfg.cssTooltip || ''), content: cfg.alt}, elem);
					}
					//elem.data('ox-cfg', cfg);
					
					if(elem.hasClass('ox-notouchmove')) elem.on('touchmove', function(e) { e.preventDefault(); });
					if(elem.hasClass('ox-interactive')) omnia.ui.button.events.init(elem); /// TODO: Move to omnia.tools.elements
		
					/*$.each(cfg, function(attr, val) {
						if(attr != 'oninput' && attr != 'data' && attr != 'tip' && attr != 'clickhold' && attr != 'onReady' && attr != 'onProcess' && attr != 'pos' && attr != 'elem' && attr != 's' && attr != 'v' && attr != 'keyup' && attr != 'oid' && attr != 'c' && attr != 'css' && attr != 'background' && attr != 'context' && attr != 'click' && attr != 'clickdown' && attr != 'clickup' && attr != 'html' && attr != 'style' && attr != 't' && attr != 'handler' && attr != 'onRendered') {
	
							var el = null;
							if(elem.hasClass('ox-id-' + attr)) {
								el = elem;
							} else {
								var a = elem.find('.ox-id-' + attr);
								if(a) {
									el = a;
								}
							}
							
							if(val && el && el.length) {
								if(typeof val == "object") {
									if(val.oid || val.t || Array.isArray(val)) {
										//var target = el.find('> .ox-childs');
										//omnia.tools.html.node(val, target && target.length ? target : el);
									} else {
										val.elem = el;
										// apply cfg
										//log('#object')
										//log(val);
									}
									var target = el.find('> .ox-childs');
									
									if(cfg.args && cfg.args.log) log('omnia.tools.html.node: Render sub element');
									omnia.tools.html.node(val, {root: target && target.length ? target : el});
								} else {
									if(val) {
										switch(attr) {
											case 'css':
												el.addClass(val);
												break;
											case 'icon':
												el.addClass(val);
												break;
											case 'img':
												el.attr('src', val);
												break;
											case 'background':
												el.css('background', val);
											case 'src':
											case 'value':
											case 'placeholder':
												el.attr(attr, val);
												break;
											default:
												if(el[0] && el[0].nodeName && el[0].nodeName.toLowerCase() == 'img') el.attr('src', val);
												else { el.html(val[0] == '#' ? omnia.tools.text(val.substr(1)) : val); }
												break;
										}
									}
									//if(el[0] && el[0].nodeName && el[0].nodeName.toLowerCase() == 'img') el.attr('src', val);
									//else if(val) { el.html(val[0] == '#' ? omnia.tools.text(val.substr(1)) : val); }
								}
							} else {
								if(attr != 'text' && attr != 'args') elem.attr(attr, val);
							}
						}
					});*/	
					omnia.tools.element.set(cfg, elem);

					/*if(cfg.tip) {
						cfg.tip.elem = elem;
						omnia.tools.Tips.register(cfg.tip);
					}*/
	
					// Append
					if(root) {
						if(args && (args.onTop || (args.pos < 0 && args.pos != null))) root.prepend(elem);
						else if(args && args.pos != null && args.pos >= 0 && args.pos < root.children().length) elem.insertBefore(root.children().eq(args.pos));
						else root.append(elem);
					}
	
					// Childs
					if(!args.isIgnoreChilds && cfg.c && (!cfg.s || !((cfg.s & 1) || (cfg.s & 2)))) { 
						var target = elem.find('> .ox-childs');
						if(!target || !target.length) target = elem.find('> .ox-id-frame > .ox-childs');
	
						if(args.log && args.log.log) log('omnia.tools.html.node: Render childs (' + cfg.c.length + ')');
							
						self(cfg.c, {
							root: target && target.length ? target : elem, 
							oid: args.oid,
							handler: args.handler,
							args: args.args,
							depth: args.depth,
							log: args.log,
						});
					}
					
					if(cfg.onRendered) {
						if(typeof cfg.onRendered == 'string') cfg.onRendered = omnia.tools.string.stringToObject(cfg.onRendered, args.args);
						cfg.onRendered(elem, argsPassed);
					}
	
					if(cfg.handler) {
						if(!cfg.args) cfg.args = {};
	
						cfg.args.root = elem;
						cfg.args.cfg = cfg;
	
						if(cfg.v) cfg.args.v = cfg.v;
						if(cfg.c) cfg.args.c = cfg.c;
						if(cfg.id) cfg.args.id = cfg.id;
						if(args.args) cfg.args.args = args.args;
						
						//if(!cfg.handler.getRoot) cfg.handler.getRoot = function() { return this.root; };
						var obj = omnia.tools.create(cfg.handler, cfg.args);
						//if(!obj.root) obj.root = elem;
	
						if(cfg.args && cfg.args.owner && cfg.args.storeIn) cfg.args.owner[cfg.args.storeIn] = obj;
						
						elem.data('ox-handler', obj);
						elem.data('ox-handler-' + cfg.oid, obj);
	
						if(cfg.onReady) {
							if(typeof cfg.onReady == 'string') cfg.onReady = omnia.tools.string.stringToObject(cfg.onReady);
							cfg.onReady(elem, obj, argsPassed);
						}
					}
					
					if(elem.hasClass('ox-set-after')) omnia.tools.element.set(cfg, elem);
					
					return cfg.handler ? obj : elem;
				
				}
				catch(e) {
					ox.error(e);
					log({e: {e}, cfg: cfg});
					//log(cfg);
					return null;
				}
			},

			/*	
			render: function(obj, root) {
				//if(!obj || !obj.length) omnia.tools.error('omnia.tools.html.render: Config is not an array');

				var r = [];
				var isSingle = obj.length == 1; //Object.keys(obj).length == 1;
				
				$.each(obj, function(idx, cfgObj) {
					var childs = null, text = null;
					if(!cfgObj) return;
					
					if(cfgObj.oid || cfgObj.html) { 
						omnia.tools.html.add(cfgObj, root);
						return;
					}
					
					var cfg = $.extend(true, {}, cfgObj);
					
					var tag = cfg.t;
					delete cfg.t;
					if(!tag) return;
					
					if(cfg.css) {
						cfg['class'] = cfg.css;
						delete cfg.css;
					}
					
					if(cfg.style) delete cfg.style;
					if(cfg.c) delete cfg.c;
					
					var elem = $('<' + tag + '/>', cfg);
	
					if(cfgObj.text) elem.text(cfgObj.text[0] == '#' ? omnia.tools.text(cfgObj.text.substr[1]) : cfgObj.text);
					if(cfgObj.html) elem.html(cfgObj.html);
					if(cfgObj.c) omnia.tools.html.render(cfgObj.c, elem);
					if(cfgObj.style) { if(typeof cfgObj.style == 'string') elem.attr('style', cfgObj.style); else elem.css(cfgObj.style); }
					if(cfgObj.click) elem.on(omnia.tools.browser.CLICK, function(e) { this.blur(); cfgObj.click(e, elem); } );
					if(cfgObj.clickdown) elem.on(omnia.tools.browser.CLICK_DOWN, function(e) { this.blur(); cfgObj.clickdown(e, elem); } );
					if(cfgObj.clickup) elem.on(omnia.tools.browser.CLICK_UP, function(e) { this.blur(); cfgObj.clickup(e, elem); } );

					if(root) root.append(elem);

					r = elem;
				});
				
				return r;
			},
			add: function(cfg, root, isIgnoreChilds) {
				if(!cfg) return;
				
				var me = this;
				var r = null;
				
				if(cfg instanceof jQuery) {
					if(root) root.append(cfg);
					return cfg;
				}
				
				if(cfg.length) {
					$.each(cfg, function(i, c) {
						omnia.tools.html.add(c, root, isIgnoreChilds);
					});
					return;
				}
				
				if(!cfg.html) {
					if(!cfg.oid && cfg.t) { omnia.tools.html.render([cfg], root); return; }
					if(!cfg.oid) { omnia.tools.error('omnia.tools.html.add: Error: HTML not found'); return; }
					
					switch(cfg.oid) {
						case 'frame':
							var frame = omnia.tools.create(omnia.ui.Frame, cfg);
							if(root) root.append(frame.frame);
							return frame;
						case 'files':
							var files = omnia.tools.create(omnia.ui.Files, cfg);
							if(root) root.append(files.getElement());
							return files;
					}
					
					cfg.html = omnia.ui.html.elements[cfg.oid];
					if(!cfg.html) cfg.html = omnia.ui.html.components[cfg.oid];
					if(!cfg.html) {
						var cfgItem = omnia.ui.components[cfg.oid];
						if(cfgItem) cfg.html = cfgItem.html;
						else { log('#what'); }
					}
					
					if(!cfg.html) { omnia.tools.error('omnia.tools.html.add: Error: Component "' + cfg.oid + '" not found'); return; }
				}

				var elem = omnia.tools.html.node(cfg.html, root); 
				if(!elem || !elem.data) return null;
				// Set parameters
				
				if(cfg.id) elem.attr('id', cfg.id);
				if(cfg.css) elem.addClass(cfg.css);
				if(cfg.style) elem.css(cfg.style);
				if(cfg.click) elem.on(omnia.tools.browser.CLICK, function(e) { this.blur(); cfg.click(e, elem); } );
				if(cfg.clickdown) elem.on(omnia.tools.browser.CLICK_DOWN, function(e) { this.blur(); cfg.clickdown(e, elem); } );
				if(cfg.clickup) elem.on(omnia.tools.browser.CLICK_UP, function(e) { this.blur(); cfg.clickup(e, elem); } );
				elem.data('cfg', cfg);
	
				$.each(cfg, function(attr, val) {
					if(attr != 'css' && attr != 'style' && attr != 't' && attr != 'c' && attr != 'click' && attr != 'handler' && attr != 'onRendered') {

						var el = null;
						if(elem.hasClass('ox-id-' + attr)) {
							el = elem;
							//if(typeof val == "object") omnia.tools.html.render(val, elem);
							//else elem.html(val); 
						} else {
							var a = elem.find('.ox-id-' + attr);
							if(a) {
								el = a;
								//if(typeof val == "object") omnia.tools.html.render(val, a);
								//else a.html(val);
							}
						}
						if(el) {
							if(typeof val == "object") omnia.tools.html.render(val, el);
							else {
								//log(val);
								//if(attr == 'img') log(el[0].nodeName);
								if(el[0] && el[0].nodeName && el[0].nodeName.toLowerCase() == 'img') el.attr('src', val);
								else el.html(val[0] == '#' ? omnia.tools.text(val.substr(1)) : val);
							}
						}
					}
				});
				
				if(!isIgnoreChilds && cfg.c) {
					$.each(cfg.c, function(i, c) {
						var target = elem.find('> .ox-childs');
						if(!target || !target.length) target = elem.find('> .ox-id-frame > .ox-childs');
						omnia.tools.html.add(c, target && target.length ? target : elem);
					});
				}
		
				if(cfg.oid) {
					switch(cfg.oid) {
						case 'frame2':
							if(!cfg.args) cfg.args = {};
								if(!cfg.handler) cfg.handler = omnia.ui.components.frame2.handler;
							//return omnia.tools.create(omnia.ui.Frame2, {root: elem});
							break;
					}
				}
				if(cfg.args) cfg.args.root = elem;
				if(cfg.onRendered) cfg.onRendered(elem);
				if(cfg.handler) {
					var obj = omnia.tools.create(cfg.handler, cfg.args);
					if(cfg.args && cfg.args.owner && cfg.args.storeIn) cfg.args.owner[cfg.args.storeIn] = obj;
					return obj;
				}
				
				return elem;
			},
			*/
		},
		less: {
			// Requires: jQuery, less.js
			
			// Public events
			
			onLessRendered: function() {},
			onLessError: function(id, error) {},
			
			// Private variables
			
			rendered: {},
			less: {},
			css: {},
			
			// Static public functions
			
			attach: function(args) {
				// Use:
				//		lessObj
				//		array of lessObj
				//		id, lessObj
				//		id, lessObj, isMultiple
				//		id, array of lessObj / [lessObj, isMultiple]
				//
				//		[args...]
				//		less...
				//		id, less...
				//		id, [less...]
				//		id, array, isNoRender

				if(args.multiple) {
					var isToRender = false;
					
					log('omnia.tools.less.attach: multiple');
					$.each(args.multiple, function(i, arg) {
						if(!omnia.tools.less.rendered[arg.id]) isToRender = true;

						arg.isNotRender = true;
						arg.isCustom = args.isCustom;
						arg.root = args.root;
						arg.isExport = args.isExport;
						omnia.tools.less.attach(arg, true);
						
					});
					
					if(isToRender) omnia.tools.less.render(args.root, args.isCustom, args.isExport);
					else log('omnia.tools.less.attach: nothing to render');
					
					return;
				}
				
				if(omnia.tools.less.rendered[args.id]) {
					log('omnia.tools.less.attach: id = ' + args.id + ' - already rendered');
					return;
				}
				
				//log('omnia.tools.less.attach: id = ' + args.id + (args.isCustom ? ', isCustom = ' + args.isCustom : ''));

				// Generate less code
				var s = "";
				var obj = args.less;

				if(typeof obj == "object") {
					
					var isMultiple = false;
					if(obj.length == 2 && typeof obj[1] == 'boolean') {
						obj = obj[0];
						isMultiple = obj[1];
					}
					if(obj['styles'] || obj['elements'] || obj['components'] || obj['modules'] || obj['skins'] || isMultiple) {
						$.each(obj, function(i, less) {
							omnia.tools.error('omnia.tools.less.attach: ' + i);
							s += omnia.tools.less.objToLess(obj[i]);
						});
					} else {
						s += omnia.tools.less.objToLess(obj); 
					}
				} else {
					omnia.tools.error('omnia.tools.less.attach: id = ' + args.id + ' - is no object');
					log(args);
					return;
				}

				// Store less code
				args.root = 'omnia';
				if(!args.root) args.root = args.id.split('.')[0];
				
				omnia.tools.less.rendered[args.id] = true;
				omnia.tools.less.less[args.root] = (omnia.tools.less.less[args.root] ? omnia.tools.less.less[args.root] : '') + s;
				
				// Render
				if(!args.isNotRender) omnia.tools.less.render(args.root, args.isCustom, args.isExport);
			},
			
			// Static private functions
			
			render: function(id, isCustom, isExport) {
				var version = app && app.version && isCustom ? app.version : omnia.version;
				var appId = app && app.id && isCustom ? app.id : 'omnia';

				log('omnia.tools.less.render: id = ' + id + ', app id = ' + appId + ', app version = ' + version + (isCustom ? ', isCustom = ' + isCustom : ''));
				//log(omnia.tools.less.less[id]);
				
				var storage = localStorage ? localStorage[appId + '-less'] : null;
				if(storage && !isExport) {
					var obj = $.parseJSON(storage);
					
					if(obj.css && obj.v && obj.v == version) {
						omnia.tools.less.createStyle(obj.css, id); 
						omnia.tools.less.onLessRendered(); 
						log('omnia.tools.less.render: id = '+ id + ' - done from cache');
						return;
					}		
				}
				
				log('omnia.tools.less.render: id = ' + id + ' - new render');
				less.render(omnia.tools.less.less[id], {}).then(
					function(output) {
						if(!isExport) localStorage[appId + '-less'] = JSON.stringify({v: version, css: output.css});
						else omnia.tools.less.css = output.css;

						omnia.tools.less.createStyle(output.css, id);
						omnia.tools.less.onLessRendered(); 
						log('omnia.tools.less.render: id = '+ id + ' - done');
					},
					function(error) { 
						omnia.tools.error('omnia.tools.less.render: id = ' + id + ' - Error: Less render failed'); 
						console.log(error);
						omnia.tools.less.onLessError(id, error);
					}
				);
			},
			createStyle: function(css, id) {
				var elem;
				
				if(id !== undefined) {
					elem = document.getElementById(id);
					if(elem) document.getElementsByTagName('head')[0].removeChild(elem);
				}
				
				elem = document.createElement('style');
				elem.type = 'text/css';
				if(id !== undefined) elem.id = id;
				elem.innerHTML = css;
				document.getElementsByTagName('head')[0].appendChild(elem);
			},
			objToLess: function(obj, isNoLog) {
				//if(!isNoLog) log('omnia.tools.less.objToLess');
				//log(obj);
				var s = "";
				$.each(obj, function(id, val) {
					//if(omnia.tools.browser.isTouch && id.indexOf(':hover') >= 0) id = id.split(':hover').join(':active');
					s += (id == 'less' ? val + ';' : id + (typeof val != "object" ? ':' + val + ';\n' : '{' + omnia.tools.less.objToLess(val, true) + '}\n')) + '';
				});
				return s;
			},
		},
		net: {
			server: 'https://haustein.org/omnia/app/server.php',
			get: async function(args) {
				
				if(!args) args = {};
				if(!args.server) args.server = omnia.tools.net.server;
				var url = args.server;
				var cmd = args && args.param && args.param.cmd ? args.param.cmd : null;
	
				log('%comnia.tools.net.get: ' + ('server: ' + args.server) + (cmd ? ', cmd: ' + cmd : '') + (cmd == 'proxy' ? ', api: ' + args.param.api + ', url: ' + args.param.url : ''), 'color:#0000ff;'); 
				//log({param: args.param});

				var time = new Date();
				await new Promise(resolve => {
					$.ajax({
						global: false,
						type: args.method ? args.method : "GET",
						cache: args.cache ? args.cache : false, 
						dataType: args.type ? args.type : "json",
						data: args.param,
						headers: args.headers ? args.headers : null,
						//xhrFields: {
						//	withCredentials: true,
						//},
						xhrFields: args.xhrFields || null, //{ responseType: 'arraybuffer'}
						xhr: function() {
							var xhr = new window.XMLHttpRequest();
							xhr.upload.addEventListener("progress", function(e) {
								if(!args.noLog) log('%comnia.tools.net.get: ' + (cmd ? 'cmd = ' + cmd : '') + ', Send: ' + e.loaded + (e.lengthComputable ? ' / ' + e.total : ''), 'color:#a0a0a0;');
								if(args.onProgressSend) args.onProgressSend(e.loaded, e, args);
							}, false);
						
							xhr.addEventListener("progress", function(e) {
								if(!args.noLog) log('%comnia.tools.net.get: ' + (cmd ? 'cmd = ' + cmd : '') + ', Receive: ' + e.loaded + (e.lengthComputable ? ' / ' + e.total : ''), 'color:#a0a0a0;');
								if(args.onProgress) args.onProgress(e.loaded, e, args);
							}, false);
						
							return xhr;
						},
						url: url,
						success: function(dataStr, str) {
							if(!args.noLog) log('%comnia.tool.net.get: ' + (cmd ? 'cmd = ' + cmd : '') + ', Success (' + (Math.round((new Date()).getTime() - time.getTime())) + ' ms)', 'color:#aa00ff');
							
							args.data = dataStr;
							if(args && args.data && typeof args.data == 'object' && args.data.status && args.data.status == 'ok') {
								args.isOk = true;
								args.file = args.data; // Omnia file
							}

							var analysis = args.isNoAnalyse ? {} : omnia.tools.net.analyseResponse(true, dataStr, str);
							args.response = {
								success: analysis.success,
								error: analysis.error,
								event: analysis.event,
	
								dataStr: dataStr,
								str: str,
							};
							
							if(args.onResponse) args.onResponse(args);
							resolve();
						},
						error: function(jqXHR, str, errorStr) {
							omnia.tools.error('omnia.tools.net.get: ' + (cmd ? 'cmd = ' + cmd : '') + ', Error: ' + str + ' ' + errorStr);
							args.response = {
								str: str,
								error: errorStr,
							};
							
							if(args.onResponse) args.onResponse(args);
							resolve();
						},
						timeout: args.timeout ? args.timeout : 20000,
					});
				});
				
				return args;
			},
			analyseResponse: function(success, dataStr, str) {
				var r = {
					error: null,
					event: null,
					success: success,
				};
				try {
				
					// Check response
					if(!dataStr/* || !dataStr.length*/) {
						r.error = 'parse';
						r.event = omnia.app.events.errorparse;
						//r.success = false;
					} else {
		
						// Check net ok
						if(!success) {
							r.error = str == 'timeout' ? 'timeout' : 'net';
							r.event = omnia.app.events.errornet;
							r.success = false;
						} /*else {
		
							// Check server ok
							//if(args2.type == 'text') args2.data = JSON.parse(args2.response.dataStr);
							
							if(args2.data && args2.data.status && args2.data.status != 'ok') {
								error = args2.data.status == 'access denied' ? 'auth' : 'server';
							} else {
								// Data ok
							}
							
						} */
					}
					
				}
				catch(e) {
					r.error = 'unknown';
					r.event = omnia.app.events.errorunknown;
				}		
				
				return r;
			},
			normalizeFeed: function(data, format, isLeadImage) {
				var r = [];
				var articles = null;
				
				switch(format) {
					case 'newsapiorg':
						if(data.articles) articles = data.articles;
						break;
					default:
						if(data.channel && data.channel.item) {
							format = 'rss2';
							articles = data.channel.item;
						} else if(data.entry) {
							format = 'atom';
							articles = data.entry;
						}
				}
				if(!articles) return false;
				
				$.each(articles, function(i, article) {
					var item = {};
					
					try {
						switch(format) {
							case 'newsapiorg':
								if(article.title) item.title = article.title;
								if(article.url) item.url = article.url;
								if(article.description) item.lead = article.description;
								if(article.urlToImage) item.image = article.urlToImage;
								if(article.publishedAt) item.time = new Date(article.publishedAt);
								break;
								
							case 'rss2':
								if(article.title) item.title = article.title;
								if(article.link) item.url = article.link;
								if(article.description) item.lead = $('<div />').html(article.description.replace(/<[a-zA-Z\/][^>]*>/g, '')).text();
								if(article.pubDate) item.time = new Date(article.pubDate);
								if(data.channel && data.channel.image && data.channel.image.url) item.provider = data.channel.image.url;
	
								if(article.enclosure && article.enclosure['@attributes'] && article.enclosure['@attributes'].url) {
									item.image = article.enclosure['@attributes'].url;
								}
								else {
									var n = $('<div />').html(article.description);
									n.find('a > img').remove();
									var imgs = n.find('img');
									if(imgs && imgs.length) item.image = imgs.attr('src');
									if(item.image && item.image.toLowerCase().indexOf('banner') >= 0) delete item.image;
									
									if(!item.image && item.lead) {
										var match = item.lead.match(/<img[^>]+src="([^">]+)"/);
										if(match && match.length) item.image = match[1];
									};
								}
								
								break;
								
							case 'atom':
								if(article.title) item.title = article.title;
								if(article.link && article.link['@attributes'] && article.link['@attributes'].href) item.url = article.link['@attributes'].href;
								if(article.summary) item.lead = $('<div />').html(article.summary.replace(/<[a-zA-Z\/][^>]*>/g, '')).text(); //article.summary;
								if(article.content) item.content = article.content;
								if(article.published) item.time = new Date(article.published);
								if(article.updated) item.time = new Date(article.updated);
								
								if(article.content) {
									var n = $('<div />').html(article.content);
									var imgs = n.find('img');
									if(imgs && imgs.length) item.image = imgs.attr('src');
									
									if(!item.image) {
										var match = article.content.match(/<img[^>]+src="([^">]+)"/);
										if(match && match.length) item.image = match[1];
									};
								}
								if(!item.image && article.summary) {
									var match = article.summary.match(/<img[^>]+src="([^">]+)"/);
									if(match && match.length) item.image = match[1];
								}
	
								break;
						}
					}
					catch(e) {}
					if(isLeadImage || (!item.image && item.url)) item.image = omnia.tools.net.server + '?cmd=leadimage&url=' + encodeURIComponent(item.url);

					if(Object.keys(item).length) r.push(item);
				});
				
				if(!r.length) return false;
				return r;
			},
			getFile: async function(args) { 
				var data = null;
				var lg = args.log || log;
				var error = args.log ? (t, e) => args.log('%c' + t, 'color:#ff0000') : ox.error; 
				var me = this;
				
				try {
					var time = new Date();
					
					if(args.isProxy) args.url = 'https://haustein.info/server-dev/?cmd=proxy&task=web&url=' + encodeURIComponent(args.url);
					if(args.param) args.url += '?' + ox.str.objectToUrlString(args.param);
				
					if(!args.noLog) lg('%comnia.tools.net.getFile: url = ' + args.url, 'color:#0000ff');
					
					await new Promise(resolve => {
						var xmlHttp = new XMLHttpRequest();
						xmlHttp.onreadystatechange = function() { 
							if(xmlHttp.readyState == 4) {
								if(xmlHttp.status == 200) data = xmlHttp.response;
								else ox.error('omnia.tools.net.getFile: Could not download file \'' + args.url + '\', status = ' + xmlHttp.status);
								resolve();
							}
						}
						xmlHttp.upload.addEventListener("progress", function(e) {
							if(!args.noLog) lg('%comnia.tools.net.getFile: ' + args.url + ', Send: ' + e.loaded + (e.lengthComputable ? ' / ' + e.total : ''), 'color:#a0a0a0;');
							if(args.onProgressSend) args.onProgressSend(e.loaded, e, args);
						}, false);
					
						xmlHttp.addEventListener("progress", function(e) {
							if(!args.noLog) lg('%comnia.tools.net.getFile: ' + args.url + ', Receive: ' + e.loaded + (e.lengthComputable ? ' / ' + e.total : ''), 'color:#a0a0a0;');
							if(args.onProgress) args.onProgress(e.loaded, e, args);
						}, false);
						
						if(args.type == 'bin') xmlHttp.responseType = 'arraybuffer';
						
						xmlHttp.open(args.method || "GET", args.url, true); 
						xmlHttp.send(null);
					});
					
					if(args.isProxy) data = JSON.parse(data).data; 
					if(args.type == 'json') {
						data = data ? JSON.parse(data) : null;
						//if(data.data && typeof data.data == 'string') data.data = JSON.parse(data.data);
					}
				}
				catch(e) {
					error('omnia.tools.net.getFile: Could not download file \'' + args.url + '\'', {e});
				}
				if((!args.noLog || args.noLog == 2) && data) lg('%comnia.tools.net.getFile: url = ' + args.url + ', Success (' + (Math.round((new Date()).getTime() - time.getTime())) + ' ms)', 'color:#aa00ff');
						
				return data;
			},
			
			
			google: {
    		},
			googleanalytics: {
    			init: function(measureId, isNoCookies, clientId) {
    				try {
    					//window['ga-disable-' + measureId] = true;

						window.dataLayer = window.dataLayer || [];
						var gtag = omnia.tools.net.googleanalytics.gtag = function() { dataLayer.push(arguments); }
						
						var options = {};// {'anonymize_ip': true};
						if(isNoCookies) {
							options['send_page_view'] = true;
							options['client_storage'] = 'none';
							options['client_id'] = clientId;
						}
    					log('omnia.tools.net.googleanalytics.init: options = ', options);

						gtag('js', new Date());
						gtag('config', measureId, options);
						
						omnia.tools.track.isInitiated = true;
    				}
    				catch(e) {
    					ox.error('omnia.tools.net.googleanalytics.init: Failed');
    					log(e);
    				}
    			},
    			event: function(eventId, options) { return false;
					var gtag = gtag || omnia.tools.net.googleanalytics.gtag;
					if(!gtag) {
						ox.error('omnia.tools.net.googleanalytics.event: Google Analytics not initiated');
						return;
					}

    				try {
    					gtag('event', eventId, options);
    					log('omnia.tools.net.googleanalytics.event: Send \'' + eventId + '\'');
    				}
    				catch(e) {
    					ox.error('omnia.tools.net.googleanalytics.event: Failed');
    					log(e);
    				}
    			},
    		},
			googlefonts: {
    			max: 200,
    			getWebfontsMeta: function(args) {
      				log('omnia.tools.net.googlefonts.getWebfontsMeta');
      				if(!args) args = {};
    				//if(!args.param) return;
    				
    				if(omnia.tools.fonts.fontsInfo && (!args.max || args.max == omnia.tools.fonts.fontsInfo.length) && args.onLoaded) {
    					args.onLoaded(omnia.tools.fonts.fontsInfo);
    					return;
    				}

    				omnia.tools.net.get({
    					server: 'https://haustein.org/omnia/app/server.php',
						cache: true,
						timeout: 30000,
						param: {
							'cmd': 'proxy',
							'api': 'google-fonts',
							'url': 'sort=POPULARITY',
						}, 
						onProgress: function(bytes, total) { if(args.onProgress) args.onProgress(bytes, total); },
						onResponse: function(args2) { 
							log('omnia.tools.net.googlefonts.getWebfontsMeta: received');

							if(args2 && args2.data) {
								args.results = args2.data; 
								if(args.results.items) {
									if(args.max) args.results.items = args2.data.items.slice(0, args.max);
									args.results.items.sort(function(a, b) { return b.family < a.family ? 1 : (b.family > a.family ? -1 : 9) });
								}
								omnia.tools.fonts.fontsInfo = args.results.items;
								
								var ref = {};
								ox.each(omnia.tools.fonts.fontsInfo, function(idx, font) {
									ref[font.family] = font;
								});
								omnia.tools.fonts.fontsInfoRef = ref;
								
								if(args.onLoaded) args.onLoaded(args.results.items);
							} else {
								if(args.onError) args.onError(args.response);
							}
							
							if(args.next) args.next(args);
							if(args.onNext) args.onNext(args);
						}
					});	
				},
    		},
			pixabay: {
    			cache: {},
    			
    			get: function(args) {
    				log('omnia.tools.net.pixabay.get');
    				if(!args.param) return;
    				
    				if(args.param.id && ox.net.pixabay.cache[args.param.id]) {
    					args.images = [ox.net.pixabay.cache[args.param.id]];
						
						if(args.onLoaded) args.onLoaded(args);
						if(args.next) args.next(args);
						if(args.onNext) args.onNext(args);
						return;
    				}
    				
    				omnia.tools.net.get({
						cache: true,
						timeout: 30000,
						param: {
							'cmd': 'proxy',
							'api': 'pixabay',
							'url': omnia.tools.string.objectToUrlString(args.param),
						}, 
						onProgress: function(bytes, total) { if(args.onProgress) args.onProgress(bytes, total); },
						onResponse: function(args2) { 
							log('omnia.tools.net.pixabay.get: received');
							
							if(args2 && args2.data && args2.data.hits) {
								var images = [];
								$.each(args2.data.hits, function(i, item) {
									images.push({
										provider: 'pixabay',
										preview: {
											url: item.webformatURL, //item.previewURL,
											w: item.webformatWidth, //item.previewWidth, 
											h: item.webformatHeight, //item.previewHeight,
										},
										url: item.fullHDURL || item.largeImageURL,
										w: item.fullHDURL ? item.imageWidth : 1280,
										h: item.fullHDURL ? item.imageHeight : 1280 / item.imageWidth * item.imageHeight,
										meta: item,
										action: args.action,
									});
								});
								
								args.images = images;
								if(args.param.id && images.length) ox.net.pixabay.cache[args.param.id] = images[0];
								if(args.onLoaded) args.onLoaded(args);
							} else {
								if(args.onError) args.onError(args.response);
							}
							
							if(args.next) args.next(args);
							if(args.onNext) args.onNext(args);
						}
					});					
    			},
			},
			colourlovers: {
				getPalettes: function(args) {
    				log('omnia.tools.net.colourlovers.getPalettes');
    				if(!args.param) return;

    				omnia.tools.net.get({
						cache: true,
						timeout: 30000,
						param: {
							'cmd': 'proxy',
							'api': 'color-palettes',
							'url': omnia.tools.string.objectToUrlString(args.param),
						}, 
						onProgress: function(bytes, total) { if(args.onProgress) args.onProgress(bytes, total); },
						onResponse: function(args2) { 
							log('omnia.tools.net.colourlovers.getPalettes: received');
							
							//log(args2);
							
							if(args2 && args2.data) {
								args.results = args2.data;
								if(args.onLoaded) args.onLoaded(args);
							} else {
								if(args.onError) args.onError(args.response);
							}
							
							if(args.next) args.next(args);
							if(args.onNext) args.onNext(args);
						}
					});					
    			},
			}, 
			deepl: {
				count: 0,
				cache: {},
				translate: async function(text, lang, onDone) {
					return omnia.tools.net.deepl.translateText(text, lang, onDone);
				},
				translateText: async function(text, lang, onDone) {
					//log('omnia.tools.net.deepl.translateText: ' + text.substr(0, 20) + (text.length > 20 ? '...' : ''));
					var me = omnia.tools.net.deepl;
					
					// Cache
					if(me.cache[text] && me.cache[text][lang]) { 
						var translation = {
							text: me.cache[text][lang],
							source: text,
							sourceLang: me.cache[text].sourceLang,
							lang,
							isCache: true,
						};
						if(onDone) onDone(translation);
						return translation;
					}
					
					// Request
					me.count += text.length;
					log('omnia.tools.net.deepl.count: ' + me.count);
					
					var args2 = await ox.net.get({
						server: 'https://haustein.org/omnia/app/server.php',
						//method: 'POST',
						param: {
							cmd: 'proxy',
							api: 'deepl',
							'target_lang': lang, 
							text: encodeURIComponent(text.substr(0, 1024)),
						},
					});
					
					try {
					
						// Cleanup data
						var translation = args2 && args2.data && args2.data.translations && args2.data.translations.length ? args2.data.translations[0] : null;
						
						if(translation && translation.text) {
							translation.lang = lang;
							translation.source = text;
							translation.sourceLang = translation.detected_source_language;
							delete translation.detected_source_language;
							
							// Cache
							if(!me.cache[text]) me.cache[text] = {};
							me.cache[text][lang] = translation.text;
							me.cache[text].sourceLang = translation.sourceLang;
						} else {
							//log({data: args2.data});
						}
						
						//log(me.cache);
						if(onDone) onDone(translation);
						
						//log({translation, args2});
						return translation;
					}
					catch(e) {
						ox.error({e, args2});
					}
				},
			},
    		
    		// Server related
    		
		},
		pdf: {
			_fonts: {
				'opensans': {
					packs: [
						'https://haustein.org/lib/css/opensans/fonts/Light/OpenSans-Light-normal.js',
						'https://haustein.org/lib/css/opensans/fonts/LightItalic/OpenSans-LightItalic-italic.js',
						'https://haustein.org/lib/css/opensans/fonts/Regular/OpenSans-Regular-normal.js',
						'https://haustein.org/lib/css/opensans/fonts/Italic/OpenSans-Italic-italic.js',
						'https://haustein.org/lib/css/opensans/fonts/SemiBold/OpenSans-SemiBold-normal.js',
						'https://haustein.org/lib/css/opensans/fonts/SemiBoldItalic/OpenSans-SemiBoldItalic-italic.js',
						'https://haustein.org/lib/css/opensans/fonts/Bold/OpenSans-Bold-bold.js',
						'https://haustein.org/lib/css/opensans/fonts/BoldItalic/OpenSans-BoldItalic-bolditalic.js',
						'https://haustein.org/lib/css/opensans/fonts/ExtraBold/OpenSans-ExtraBold-bold.js',
						'https://haustein.org/lib/css/opensans/fonts/ExtraBoldItalic/OpenSans-ExtraBoldItalic-bolditalic.js',
					], 
					styles: [
						['OpenSans-Light-normal.ttf', 'OpenSans-100', 'normal'],
						['OpenSans-LightItalic-italic.ttf', 'OpenSans-100', 'italic'],
						['OpenSans-Light-normal.ttf', 'OpenSans-300', 'normal'],
						['OpenSans-LightItalic-italic.ttf', 'OpenSans-300', 'italic'],
						['OpenSans-Regular-normal.ttf', 'OpenSans-400', 'normal'],
						['OpenSans-Italic-italic.ttf', 'OpenSans-400', 'italic'],
						['OpenSans-Semibold-normal.ttf', 'OpenSans-500', 'normal'],
						['OpenSans-SemiboldItalic-italic.ttf', 'OpenSans-500', 'italic'],
						['OpenSans-Semibold-normal.ttf', 'OpenSans-600', 'normal'],
						['OpenSans-SemiboldItalic-italic.ttf', 'OpenSans-600', 'italic'],
						['OpenSans-Bold-bold.ttf', 'OpenSans-700', 'bold'],
						['OpenSans-BoldItalic-bolditalic.ttf', 'OpenSans-700', 'bolditalic'],
						['OpenSans-ExtraBold-bold.ttf', 'OpenSans-900', 'bold'],
						['OpenSans-ExtraBoldItalic-bolditalic.ttf', 'OpenSans-900', 'bolditalic'],
					],
				}, 
				'ptsans': {
					packs: [
						'https://haustein.org/lib/css/ptsans/PT_Sans-Web-Regular.jspdf.js',
						'https://haustein.org/lib/css/ptsans/PT_Sans-Web-Bold.jspdf.js',
					],
					styles: [
						['PT_Sans-Web-Regular-normal.ttf', 'PTSans-100', 'normal'],
						['PT_Sans-Web-Regular-normal.ttf', 'PTSans-300', 'normal'],
						['PT_Sans-Web-Regular-normal.ttf', 'PTSans-400', 'normal'],
						['PT_Sans-Web-Regular-normal.ttf', 'PTSans-500', 'normal'],
						['PT_Sans-Web-Bold-normal.ttf', 'PTSans-700', 'normal'],
						['PT_Sans-Web-Bold-normal.ttf', 'PTSans-900', 'normal'],
					],
				},
				'roboto': {
					packs: [
						'https://haustein.org/lib/css/roboto/Roboto-Thin-normal.js',
						'https://haustein.org/lib/css/roboto/Roboto-ThinItalic-italic.js',
						'https://haustein.org/lib/css/roboto/Roboto-Light-normal.js',
						'https://haustein.org/lib/css/roboto/Roboto-LightItalic-italic.js',
						'https://haustein.org/lib/css/roboto/Roboto-Regular-normal.js',
						'https://haustein.org/lib/css/roboto/Roboto-Italic-italic.js',
						'https://haustein.org/lib/css/roboto/Roboto-Medium-normal.js',
						'https://haustein.org/lib/css/roboto/Roboto-MediumItalic-italic.js',
						'https://haustein.org/lib/css/roboto/Roboto-Bold-bold.js',
						'https://haustein.org/lib/css/roboto/Roboto-BoldItalic-bolditalic.js',
						'https://haustein.org/lib/css/roboto/Roboto-Black-bold.js',
						'https://haustein.org/lib/css/roboto/Roboto-BlackItalic-bolditalic.js',
					], 
					styles: [
						['Roboto-Thin-normal.ttf', 'Roboto-100', 'normal'],
						['Roboto-ThinItalic-italic.ttf', 'Roboto-100', 'italic'],
						['Roboto-Light-normal.ttf', 'Roboto-300', 'normal'],
						['Roboto-LightItalic-italic.ttf', 'Roboto-300', 'italic'],
						['Roboto-Regular-normal.ttf', 'Roboto-400', 'normal'],
						['Roboto-Italic-italic.ttf', 'Roboto-400', 'italic'],
						['Roboto-Medium-normal.ttf', 'Roboto-500', 'normal'],
						['Roboto-MediumItalic-italic.ttf', 'Roboto-500', 'italic'],
						['Roboto-Medium-normal.ttf', 'Roboto-600', 'normal'],
						['Roboto-MediumItalic-italic.ttf', 'Roboto-600', 'italic'],
						['Roboto-Bold-bold.ttf', 'Roboto-700', 'bold'],
						['Roboto-BoldItalic-bolditalic.ttf', 'Roboto-700', 'bolditalic'],
						['Roboto-Black-bold.ttf', 'Roboto-900', 'bold'],
						['Roboto-BlackItalic-bolditalic.ttf', 'Roboto-900', 'bolditalic'],
					],
				}, 
			},
			createDocument: function(args) {
				// w - width
				// h - height
				// f - factor
				// fonts - embedded fonts
				
				if(!args.meta) {
					omnia.tools.error('omnia.tools.pdf.createDocument: Meta information missing');
					return;
				}

				var size = omnia.tools.pdf.getPageSize(args);
				var options = {
					orientation: args.meta.w > args.meta.h ? 'l' : 'p',
					unit: size.unit,
					format: [args.meta.w * size.fToPt, args.meta.h * size.fToPt],
					putOnlyUsedFonts: true,
					compress: true,
				};
				var w = Math.round(args.meta.w * size.fToPt);
				var h = Math.round(args.meta.h * size.fToPt);
				
				log('omnia.tools.pdf.createDocument: ' + w + ' x ' + h + ' pt');
				if(args.onProgress) args.onProgress('Add page ' + w + ' x ' + h + ' pt');
				
				return new jspdf.jsPDF(options);
			},
			_registerFonts: function(pdf, fonts) {
				//var packs = [];
				var register = [];

				$.each(fonts, function(font, val) { 
					if(omnia.tools.pdf.fonts[font]) {
						log('omnia.tools.pdf.registerFonts: Register \'' + font + '\'');

						//packs = packs.concat(omnia.tools.pdf.fonts[font].packs);
						register = register.concat(omnia.tools.pdf.fonts[font].styles);
					}
				});
				for(var i = 0; i < register.length; i++) {
					var rf = register[i];
					try {
						log('omnia.tools.pdf.registerFonts: Register font \'' + rf[1] + '\', ' + rf[2]);
						pdf.addFont(rf[0], rf[1], rf[2]); 
					}
					catch(e) {
						log('omnia.tools.pdf.registerFonts: Register style failed \'' + rf[0] + ' > ' + rf[1] + '\' ');
						omnia.tools.error(e);
					}
				}
			},
			registerFonts: function(args, onDone) {
				if(!args) args = {};
				if(args.registerFontsStage === undefined) args.registerFontsStage = 0; else args.registerFontsStage++;
				var self = omnia.tools.pdf.registerFonts;
				var lg = text => {
					log('omnia.tools.pdf.registerFonts: ' + text);
					//if(args.onProgress) args.onProgress(text);
				}
				
				switch(args.registerFontsStage) {
					case 0:
						// Collect font info
						lg('Get fonts from HTML');

						if(!args.fonts) args.fonts = {};
						var fonts = args.fonts;
						var newFonts = 0;
						var html = args.elem || args.html;
						var textBlocks = html.find('.ox-format-text .ox-textblock');
		
						$.each(textBlocks, function(j, textBlock) {
							var textBlock = $(textBlock);
		
							var font = textBlock.css('font-family').split('"').join('');
							var weight = textBlock.css('font-weight');
							var style = textBlock.css('font-style').split('normal').join('regular').toLowerCase();
		
							var fontId = font + '-' + weight + '-' + style;
							if(!fonts[fontId]) {
								fonts[fontId] = {family: font, weight: weight, style: style};
								newFonts++;
								lg('Found new font, ' + font + ' ' + weight + ' ' + style);
							}
						});
						
						if(!newFonts) {
							onDone();
							return;
						}
						
						// Load Google Fonts info
						lg('Load Google Fonts info');
						
						omnia.tools.net.googlefonts.getWebfontsMeta({
							max: omnia.tools.net.googlefonts.max,
							onLoaded: function(fonts) { self(args, onDone); },
						});
						break;
					
					case 1:
						if(!omnia.tools.fonts.fontsInfo) {
							ox.error('omnia.tools.pdf.registerFonts: Googls Fonts meta info not loaded, fonts can not be registered in PDF');
							log({args});
							args.next();
							return;
						}
						lg('Load font data');		
						
						// Get meta info
						var fontsToLoad = 0;
						ox.each(args.fonts, function(id, info) {
							if(!info.isAdded) {
								var meta = omnia.tools.fonts.fontsInfoRef[info.family];
								if(meta) {
									var vid = info.weight != 400 ? info.weight.toString() + (info.style == 'italic' ? 'italic' : '') : info.style;
									
									//log({vid, variants: meta.variants, variant: meta.variants[vid], file: meta.files[vid]});

									if(!meta.files[vid]) vid = 'regular';
									info.url = meta.files[vid];

									
									fontsToLoad++;
								}
							}
						});
						
						if(!fontsToLoad) {
							onDone();
							return;
						}
					
						// Load
						var idx = 0;
						var loaded = 0;
						ox.each(args.fonts, function(id, info) {
							if(!info.isAdded && info.url !== undefined) {
								lg('Font ' + (++idx) + '/' + fontsToLoad + ', url = ' + info.url);
								
								omnia.tools.file.file2base64('https://haustein.org/omnia/app/server.php?cmd=download&url=' + encodeURIComponent(info.url), function(base64) { 
									//log('omnia.tools.pdf.registerFonts2: Font loaded ' + (idx) + '/' + fontsToLoad + ', url = ' + item.url);
									//log({url: item.url, response: base64}); 
									
									info.font = base64.substr(base64.indexOf('base64,') + 7);
									//info.isLoaded = true;
									
									if(++loaded == fontsToLoad) {
										self(args, onDone);
									}
								});
							}
						});
						break;
						
					case 2: 
						lg('Add fonts to PDF');
						//log({fonts: args.fonts});
						
						ox.each(args.fonts, function(id, info) {
							if(!info.isAdded && info.font) {
								
								var fullId = info.family.split(' ').join('-') + '-' + info.weight + '-' + info.style;
								var style = info.weight > 700 ? (info.style != 'italic' ? 'bold' : 'bolditalic') : (info.style == 'italic' ? 'italic' : 'normal');
								
								try {
									lg('Add font \'' + fullId + '\', ' + style + ', ' + ox.str.toSize(info.font.length));
									
									args.pdf.addFileToVFS(fullId + '.ttf', info.font);
									args.pdf.addFont(fullId + '.ttf', fullId, style); 
									
									info.isAdded = true;
								}
								catch(e) {
									ox.error('omnia.tools.pdf.registerFonts: Add fonts to PDF error, ' + e);
								}
							}
						});

						onDone();
						break;
				}
			},
			addPage: function(args) {
				//log('omnia.tools.pdf.addPage');

				if(!args.meta) {
					omnia.tools.error('omnia.tools.pdf.addPage: Meta information missing');
					return;
				}

				var size = omnia.tools.pdf.getPageSize(args);
				var w = Math.round(args.meta.w * size.fToPt);
				var h = Math.round(args.meta.h * size.fToPt);

				log('omnia.tools.pdf.addPage: ' + w + ' x ' + h + ' pt');
				if(args.onProgress) args.onProgress('Add page ' + w + ' x ' + h + ' pt');

				args.pdf.addPage([args.meta.w * size.fToPt, args.meta.h * size.fToPt],  args.meta.w > args.meta.h ? 'l' : 'p',);
				
				if(args.isDebug) {
					args.pdf.setDrawColor(255, 0, 0);
					args.pdf.rect(0, 0, args.meta.w * (args.meta.f || 1), args.meta.h * (args.meta.f || 1));
				}
			},
			getPageSize: function(args) {
				var unit = args.meta.unit || 'pt';
				var f = args.meta.f || 1;
				
				switch(unit) {
					case 'mm':
						return {fToPt: f /** 2.8346456695*/, unit: 'mm', fToUnit: f * 1, fToInch: 1 / 25.4};
					case 'px':
						return {fToPt: f * .75, unit: 'pt', fToUnit: f * .75};
					default:
						return {fToPt: f, unit: unit, fToUnit: f};
				}
				
			},
			renderFromHtml: function(args) {
				log('omnia.tools.pdf.renderFromHtml');
				
				// Render content
				omnia.tools.pdf.registerFonts(args, function() {
					omnia.tools.pdf.renderBacks(args);
					omnia.tools.pdf.renderImages(args, function() {
						omnia.tools.pdf.renderBorders(args);
						omnia.tools.pdf.renderTexts(args, function() {
							if(args.next) args.next(args);
						});
					});
				});
			},
			renderImages: function(args, onDone) {
				var size = omnia.tools.pdf.getPageSize(args);
				var pdf = args.pdf;
				var f = size.fToUnit; //(args.meta.f || 1) * (args.fToUnit || 1);
				var dpi = args.meta.dpi || 200;//150;
				var scale = args.scale || 1;
				var html = args.elem || args.html;
				var images = html.find('.ox-format-image');
				//images.reverse();

				if(!images.length) {
					log('omnia.tools.pdf.renderImages: No images to render');
					onDone();
					return;
				}
				
				var argsImg = {
					i: images.length - 1,
					next: function(argsImg) {
						if(argsImg.i < 0) {
							onDone();
							return;
						}
						
						var elem = $(images[argsImg.i]);
						var backImg = elem.css('background-image');
						var crop = elem.css('-webkit-background-size');
						var pos = elem.css('background-position');
						//log({zindex: elem.css('z-index')});
						
						if(pos) {
							pos = pos.split(' ');
							//if(pos.length == 2) { pos[0] = parseFloat(pos[0]); pos[1] = parseFloat(pos[1]); }
						}
						var urlBackImg = backImg.split('url("').join('').split('")').join('');
						var url = elem.attr('urlfull') || elem.attr('src') || urlBackImg || 'https://slide.style/images/samples/image.jpg';
						
						log('omnia.tools.pdf.renderImages: Image ' + (argsImg.i + 1) + '/' + images.length + ', dpi = ' + dpi + ', url = ' + (url.length > 200 ? url.substr(0, 200) + '...' : url));
						//log({meta: args.meta, size, dpi});
						
						var x = (elem.offset().left - html.offset().left) / scale * f;
						var y = (elem.offset().top - html.offset().top) / scale * f;
						var w = elem.width() * f;
						var h = elem.height() * f;
						
						var ws = args.meta.unit == 'mm' ? elem.width() * (args.meta.f || 1) * size.fToInch * dpi : elem.width() / 72 * dpi;
						var hs = args.meta.unit == 'mm' ? elem.height() * (args.meta.f || 1) * size.fToInch * dpi : elem.height() / 72 * dpi;
						
						if(args.onProgress) args.onProgress('Load image ' + (images.length - (argsImg.i + 1) + 1) + ' of ' + images.length, (images.length - (argsImg.i + 1)) / images.length);
						argsImg.i--;
		
						var img = omnia.tools.create(omnia.tools.Image, {
							url: url || 'https://slide.style/images/image.jpg', // Hotfix
							onLoaded: function(args2, img) {
								var iw = img.width();
								var ih = img.height();
								
								// Alignment / cut
								var p = 'fill';
								if(crop == 'contain') {
									if(ih >= hs && ws / iw * ih <= hs) {
										p = 'width';
									} else if(iw >= ws && hs / ih * iw <= iw) {
										p = 'height';
									} else {
										p = 'none';
									}
								}
								switch(p) {
									case 'height':
										var sw = hs/ih * iw;
										var sx = (ws - sw) / 2;
										var pw = sw / ws;
										
										//log({iw, ih, ws, hs, pos, sw, sx});

										x += pos && pos[0] == '100%' ? (1 - pw) * w : (pos && pos[0] == '50%' ? (1 - pw) / 2 * w : 0);
										w *= pw;
										ws = sw;

										//x += sx;
										//ws -= 2 * sx;
										break;
									case 'width':
										var sh = ws/iw * ih;
										var sy = (hs - sh) / 2;
										var ph = sh / hs;
										
										//log({iw, ih, ws, hs, pos, sh, sy, w, h, x, y, ph});
										
										y += pos && pos[1] == '100%' ? (1 - ph) * h : (pos && pos[1] == '50%' ? (1 - ph) / 2 * h : 0);
										h *= ph;
										hs = sh;
										
										//log({iw, ih, ws, hs, pos, sh, sy, w, h, x, y});

										//y += sy;
										//hs -= 2 * sy;
										break;		
								}
								///
								
								var format = url.toLowerCase().indexOf('.png') == url.length - 4 ? 'PNG' : 'JPEG';
								
								//log({url, format: url.toLowerCase().indexOf('.png') == url.length - 4 ? 'PNG' : 'JPEG'});
								
								log('omnia.tools.pdf.renderImages: add image, scaled = ' + Math.round(ws) + ' x ' + Math.round(hs) + ' px (pos = ' + x + ' x ' + y + ', size = ' + w + ' x ' + h + ' px)');
								
								pdf.addImage( 
									img.toBase64({
										w: ws, // Image size
										h: hs/*, f: 0.1 / 2.54 * 150*/, 
										pos: 'fill', 
										format: format, //args.meta.format || omnia.tools.Image.format, 
										quality: args.meta.quality || omnia.tools.Image.quality,
										isNoOversize: true,
										//xpos: pos ? pos[0] : null,
										//ypos: pos ? pos[1] : null,
									}), 
									format, 
									x, // Position and size on page
									y, 
									w, 
									h,
								);
								argsImg.next(argsImg);
							},
						});
					},
				};
				argsImg.next(argsImg);
			},
			renderBacks: function(args) {
				var size = omnia.tools.pdf.getPageSize(args);
				var pdf = args.pdf;
				var html = args.elem || args.html;
				var f = size.fToUnit; //(args.meta.f || 1) * (args.fToUnit || 1);
				var scale = args.scale || 1;
				var backs = html.find('.ox-format-back');
				
				for(var i = 0; i < backs.length; i++) {
					var elem = $(backs[i]);

					var x = (elem.offset().left - html.offset().left) / scale * f;
					var y = (elem.offset().top - html.offset().top) / scale * f;
					var w = elem.outerWidth() * f;
					var h = elem.outerHeight() * f;

					// Back
					var backColor = omnia.tools.string.colorToNumber(elem.css('background-color'));
					pdf.setFillColor(backColor[0], backColor[1], backColor[2]);
					pdf.rect(x, y, w, h, 'F');
					
					log('omnia.tools.pdf.renderBacks: ' + elem.css('background-color') + ' ' + x + ', ' + y + ' ' + w + 'x' + h);
				}
	
				if(!backs.length) log('omnia.tools.pdf.renderBorders: No backgrounds to render');

				//if(args.next) args.next(args);
				return true;
			},
			renderBorders: function(args) {
				var size = omnia.tools.pdf.getPageSize(args);
				var pdf = args.pdf;
				var html = args.elem || args.html;
				var f = size.fToUnit; //(args.meta.f || 1) * (args.fToUnit || 1);
				var scale = args.scale || 1;
				var borders = html.find('.ox-format-border');
				
				for(var i = 0; i < borders.length; i++) {
					var elem = $(borders[i]);

					var x = (elem.offset().left - html.offset().left) / scale * f;
					var y = (elem.offset().top - html.offset().top) / scale * f;
					var w = elem.outerWidth() * f;
					var h = elem.outerHeight() * f;

					// Border
					var borderColor = omnia.tools.string.colorToNumber(elem.css('border-color'));
					var borderWidth = elem.css('border-width').split(' ');
					$.each(borderWidth, function(j, w) { borderWidth[j] = parseFloat(w); });

					if(borderWidth.length == 1) borderWidth = [borderWidth[0], borderWidth[0], borderWidth[0], borderWidth[0]];
					pdf.setFillColor(borderColor[0], borderColor[1], borderColor[2]);

					if(borderWidth[0]) pdf.rect(x, y, w, borderWidth[0] * f, 'F'); // top
					if(borderWidth[2]) pdf.rect(x, y + h - borderWidth[2] * f, w, borderWidth[2] * f, 'F'); // bottom

					if(borderWidth[3]) pdf.rect(x, y, borderWidth[3] * f, h, 'F'); // left
					if(borderWidth[1]) pdf.rect(x + w - borderWidth[1] * f, y, borderWidth[0] * f, h, 'F'); // right

					log('omnia.tools.pdf.renderBorders: ' + elem.css('border-color') + ' ' + x + ', ' + y + ' ' + w + 'x' + h);
				}
				
				if(!borders.length) log('omnia.tools.pdf.renderBorders: No borders to render');
	
				//if(args.next) args.next(args);
				return true;
			},
			renderTexts: function(args, onDone) {
				var size = omnia.tools.pdf.getPageSize(args);
				var pdf = args.pdf;
				var f = size.fToUnit; 
				var scale = args.scale || 1;
				var html = args.elem || args.html;
				var textBlocks = html.find('.ox-format-text .ox-textblock');
				
				log('omnia.tools.pdf.renderTexts: ' + textBlocks.length + ' text block(s) found');

				var textOrg = [];
				$.each(textBlocks, function(j, textBlock) {
					var textBlock = $(textBlock);
					
					// Prepare words
					var thtml0 = textBlock.html();
					var lines = thtml0.split('<br>');
					$.each(lines, function(k, line) { 
						var words = line.split(' ');
						$.each(words, function(l, word) { words[l] = word.split('-').join('</span><span class="ox-word">-</span><span class="ox-word">'); });
						
						lines[k] = '<span class="ox-word">' + words.join('</span> <span class="ox-word">') + '</span>'; 
					});
					textBlock.html(lines.join('<br>'));
		
					textOrg.push(thtml0);
				});
				
				window.requestAnimationFrame(function() {
					$.each(textBlocks, function(j, textBlock) {

						var textBlock = $(textBlock);
						var parent = textBlock.parent();
						var deg = parent && (parent.hasClass('ox-rot-90') || parent.hasClass('ox-rot-90-right')) ? 90 : null;
						
						var texts = textBlock.find('.ox-word');
						
						for(var i = 0; i < texts.length; i++) {
							var elem = $(texts[i]);
							var text = texts[i].innerText;
							
							// Get styles
							var fontSize = parseInt(elem.css('font-size'));
							var lineHeight = parseInt(elem.css('line-height'));
							if(!lineHeight) lineHeight = elem.height();
		
							var w = elem.width() * f;
							var h = elem.height() * f;
							var x = (elem.offset().left - html.offset().left) / scale * f;
							var y = (elem.offset().top - html.offset().top) / scale * f;// + lineHeight * f;
							var yt = y + (h - fontSize * f) / 2 + fontSize * f * .82; //lineHeight * f;
							var y0 = (elem.offset().top - html.offset().top) / scale * f;
							if(deg == 90) {
								var ww = w;
								var hh = h;
								h = ww;
								w = hh;
							}
						
							var textAlign = elem.css('text-align');
							var fontFamily = elem.css('font-family').replace(/(\s|")/g, '');
							var fontSizePt = fontSize * size.fToPt /*f / 5 * 14.1732*/; // Converted mm to pt
							var fontWeight = elem.css('font-weight');
							var color = elem.css('color');
							color = color.substr(color.indexOf('(') + 1).split(',');
		
							// Render
							if(args.isDebug || args.meta.isDebug) {
								pdf.setDrawColor(255, 0, 0);
								pdf.rect(x, y, w, h);
							}
							
							//
							var font = elem.css('font-family').split('"').join('');
							var weight = elem.css('font-weight');
							var style = elem.css('font-style').split('normal').join('regular').toLowerCase();

							var fullId = font.split(' ').join('-') + '-' + weight + '-' + style;
							pdf.setFont(fullId);
							//log('#omnia.tools.pdf.renderTexts: setFont \'' + fullId + '\', text = ' + textBlock.text());
							//
						
							//pdf.setFont(fontFamily + '-' + fontWeight);
							pdf.setFontSize(fontSizePt * 2.8346456695);
							pdf.setTextColor(parseInt(color[0]), parseInt(color[1]), parseInt(color[2]));
		
							/*pdf.lineHeightProportion = lineHeight;
							var lines = text.split('\n');
							log('#' + textAlign);
							$.each(lines, function(l, line) {
							});*/
							
							if(deg) pdf.text(text, x + w * .82, y + h, null, deg);
							else pdf.text(text, x, yt);
							//pdf.text(line, x, y, {maxWidth: w, align: textAlign});
			
							/*var split = pdf.splitTextToSize(text, w);
							$.each(split, function(n, t) {
								var xOffset = textAlign == 'center' ? w / 2 - (pdf.getStringUnitWidth(t) * pdf.internal.getFontSize() / 2) : 0; 
								pdf.text(t, x + xOffset, y0 + (n + 1.3333) * lineHeight * f ); // TODO: Baseline .82 just a guess
								//pdf.rect(x, y0, w, lineHeight * f);
							});*/
						}

						textBlock.html(textOrg[j]);
					});
					
					onDone();
				});
				//if(args.next) args.next(args);
			}
		},
		selection: {
			
			// Public static functions
			
			getText: function(elem, isKeepBreaks, asHTML, manipulation, selStart, selEnd) {
				//if(!(elem instanceof jQuery)) elem = $(elem);

				var s0 = '$s$';
				var s1 = '$e$';
				
				var html = typeof elem == 'object' ? elem.html() : elem;
				var html2 = html.split('<div>').join(s0);
				html2 = html2.split('</div>').join(s1);
	
				var txt = $('<div />').html(isKeepBreaks ? html2 : html).text();
				txt = txt.split('<').join('&lt;');
				txt = txt.split('>').join('&gt;');
				
				if(manipulation && typeof manipulation == 'function') txt = manipulation(txt, selStart, selEnd);
				
				txt = txt.split(s0 + s1).join(asHTML ? '<div><br></div>' : '\\n');
				txt = txt.split(s0).join(asHTML ? '<div>' : '\\n');
				txt = txt.split(s1).join(asHTML ? '</div>' : '');
				
				if(asHTML) txt = $('<div />').html(txt).html();
	
				return txt;
			}, // * 
			manipulation: function(e) {
				//if(!e.data || typeof e.data != 'function') return;
				var elem = e.elem || $(this);
	
				// Convert to text
				//var txt = omnia.tools.selection.getText(elem, true);
				var html = elem.html();
				var rendered = html;
				if(e.onBeforeClean) {
					rendered = e.onBeforeClean(html);
					var elem2 = $('<div />').html(rendered);
				}
				var sel = omnia.tools.selection.getSelection(elem[0]);
				rendered = omnia.tools.selection.getText(e.onBeforeClean ? elem2 : elem, true, true, e.data, sel.start, sel.end);
				var isRendered = (rendered != html);
			
				if(isRendered) {
					log('#rendered');
					elem.html(rendered);
					omnia.tools.selection.setPosition(elem[0], sel.start + (e.offset ? e.offset : 0)/* + 3*/);
				}
			}, // * 
			pasteHtml: function(html) {
				var sel, range;
				if(window.getSelection) {
					// IE9 and non-IE
					sel = window.getSelection();
					if (sel.getRangeAt && sel.rangeCount) {
						range = sel.getRangeAt(0);
						range.deleteContents();
						
						// Range.createContextualFragment() would be useful here but is
						// non-standard and not supported in all browsers (IE9, for one)
						var el = document.createElement("div");
						el.innerHTML = html;
						var frag = document.createDocumentFragment(), node, lastNode;
						while ( (node = el.firstChild) ) {
							lastNode = frag.appendChild(node);
						}
						range.insertNode(frag);
						
						// Preserve the selection
						if (lastNode) {
							range = range.cloneRange();
							range.setStartAfter(lastNode);
							range.collapse(true);
							sel.removeAllRanges();
							sel.addRange(range);
						}
					}
				} else if (document.selection && document.selection.type != "Control") {
					// IE < 9
					document.selection.createRange().pasteHTML(html);
				}
			}, // * code review
			
			getSelection: function(element) {
				var start = 0;
				var end = 0;
				
				try {
					
					if(element instanceof jQuery) element = element[0];
					
					return {
						start: element.selectionStart,
						end: element.selectionEnd,
						text: element.value.substring(element.selectionStart, element.selectionEnd),
					}
					
					if(element.selectionStart && element.selectionStart >= 0) {
						return element.selectionStart;
					} else if(element.setSelectionRange) {
						var sel = document.selection.createRange();
						var selLength = document.selection.createRange().text.length;
						sel.moveStart("character", -element.value.length);
						pos = sel.text.length - selLength;
						return pos;
					}
	
					var doc = element.ownerDocument || element.document;
					var win = doc.defaultView || doc.parentWindow;
					var sel;
		
					if(typeof win.getSelection != "undefined") {
						sel = win.getSelection();
						if(sel.rangeCount > 0) {
							var range = win.getSelection().getRangeAt(0);
							var preCaretRange = range.cloneRange();
							preCaretRange.selectNodeContents(element);
							preCaretRange.setEnd(range.startContainer, range.startOffset);
							start = preCaretRange.toString().length;
							preCaretRange.setEnd(range.endContainer, range.endOffset);
							end = preCaretRange.toString().length;
						}
					} else if((sel = doc.selection) && sel.type != "Control") {
						var textRange = sel.createRange();
						var preCaretTextRange = doc.body.createTextRange();
						preCaretTextRange.moveToElementText(element);
						preCaretTextRange.setEndPoint("EndToStart", textRange);
						start = preCaretTextRange.text.length;
						preCaretTextRange.setEndPoint("EndToEnd", textRange);
						end = preCaretTextRange.text.length;
					}
					
				}
				catch(e) {}
				
				return { start: start, end: end, text: element.value.substring(start, end) };
			},
			addText: function(element, text) {
				if(!text) return;
				if(element instanceof jQuery) element = element[0];
				var sel = {start: element.selectionStart, end: element.selectionEnd}; 
				
				element.value = element.value.substr(0, sel.start) + text + element.value.substr(sel.end, element.value.length);
				omnia.tools.selection.setPosition(element, sel.start + text.length);
				element.focus();
			},
			backspace: function(element) {
				if(element instanceof jQuery) element = element[0];
				var sel = {start: element.selectionStart, end: element.selectionEnd};
				var isSel = sel.end > sel.start;
				var val = element.value;
				
				element.value = isSel ? val.substr(0, sel.start) + val.substr(sel.end, element.value.length) : val.substr(0, sel.start - 1) + val.substr(sel.start);
				omnia.tools.selection.setPosition(element, isSel ? sel.start : sel.start - 1);
				element.focus();
			},
			setPosition: function(element, pos, end) {
				if(element instanceof jQuery) element = element[0];
				//log({pos, end});
				if(pos == 'select') pos = 'all';

				// Textarea
				if(element && element.setSelectionRange) { 
					var max = element.value.length;
					var p0 = element.selectionStart;
					var p1 = element.selectionEnd;
					var val = element.value.split('\n').join(' ');
					
					var isSel = p1 > p0;
					var isSelAll = p0 == 0 && p1 == max;
					var isSelWord = (p1 - p0 > 1) && val.substring(p0, p1).indexOf(' ') == -1; 
					
					var w0 = val[p0 - 1] == ' ' ? p0 : (val.substr(0, p0 - 1).lastIndexOf(' ') > 0 ? val.substr(0, p0 - 1).lastIndexOf(' ') + 1 : 0);
					var w0prev = val.substr(0, p0 - 1).lastIndexOf(' ') > 0 ? val.substr(0, p0 - 1).lastIndexOf(' ') : 0;
					var w1 = val.substr(p0).indexOf(' ') >= 0 ? p0 + val.substr(p0).indexOf(' ') : max;
					var w1next = val.substr(p1 + 1).indexOf(' ') > 0 ? p1 + val.substr(p1 + 1).indexOf(' ') + 1 : max;
					var w1prev = val.substr(0, p1 - 1).lastIndexOf(' ') > 0 && val.substr(0, p1 - 1).lastIndexOf(' ') > p0 ? val.substr(0, p1 - 1).lastIndexOf(' ') : p0;
					
					if(isSel && !isSelAll && pos != 'all') {
						if(pos == 'start') pos = 'sel-right-word-left';
						if(pos == 'end') pos = 'sel-right-word';

						//if(pos == 'left') pos = 'sel-left';
						if(pos == 'right') pos = 'sel-right';
					} else if(!isSel && !isSelAll && pos == 'all') {
						pos = p1 == max ? 'sel-left' : 'sel-right';
					} else if(isSel && !isSelAll && !isSelWord && pos == 'all') {
						pos = 'sel-word';
					} else if(isSel && isSelAll && pos == 'all') {
						pos = 'end';
					} else if(!isSel) {
						if(pos == 'start') pos = 'left-word';
						if(pos == 'end') pos = 'right-word';
					}
					
					if(typeof pos == 'number') {
						if(!end) p0 = p1 = pos;
						else {
							p0 = pos;
							p1 = end;
						}
					}
					
					if(pos == 'all') { p0 = 0; p1 = max; }

					if(pos == 'start') p0 = p1 = 0;
					if(pos == 'end' || pos == 'last') p0 = p1 = max;

					if(pos == 'left') p0 = p1 = p0 - 1;
					if(pos == 'right') p0 = p1 = p1 + 1;
					
					if(pos == 'left-word') p0 = p1 = w0prev ? w0prev + 1 : 0;
					if(pos == 'right-word') p0 = p1 = w1next + 1;

					if(pos == 'sel-left') p0 = p0 - 1;
					if(pos == 'sel-right') p1 = p1 + 1;
					if(pos == 'sel-right-word') p1 = w1next;
					if(pos == 'sel-right-word-left') p1 = w1prev;
					if(pos == 'sel-word') { p0 = w0; p1 = w1; }

					if(p0 < 0) p0 = 0;
					if(p1 < 0) p1 = 0;
					if(p0 > max) p0 = max;
					if(p1 > max) p1 = max;
					
					//log({p0, p1, max, isSel, isSelAll});
					
					setTimeout(function() { element.setSelectionRange(p0, p1); }, 1);
					return true;
				}
				
				var max = omnia.tools.selection.getText($(element)).length;
				if(pos == 'end') pos = max;
				if(pos == 'left') pos = omnia.tools.selection.getSelection(element).start - 1;
				if(pos == 'right') pos = omnia.tools.selection.getSelection(element).start + 1;
				if(pos < 0) pos = 0;
				if(pos > max) pos = max;

				var range = null;
				var selection = window.getSelection();
				if(pos > 0) {
					range = omnia.tools.selection.createRange(element.parentNode, { count: pos });
				}	
				if(pos == 0) {
					selection.removeAllRanges();
					selection.collapse(element.lastChild, 0);
					return;

					/*range = omnia.tools.selection.createRange(element.parentNode, { count: 0 });
					range = document.createRange()
					range.selectNode(element.parentNode);
					range.setStart(element.parentNode, 1);
					range.setEnd(element.parentNode, 1);*/
				}
				
				if(range) {
					range.collapse(false);
					selection.removeAllRanges();
					selection.addRange(range);
				}
				
				return true;
			},
			selectAll: function(element) {
				if(!element) return false;
				if(element instanceof jQuery) element = element[0];
				
				if(element.setSelectionRange && element.value) {
					setTimeout(function() { element.setSelectionRange(0, element.value.length); }, 1);
					return true;
				}
				
				var doc = document;
				var element = $(element)[0];

				if(doc.body.createTextRange) {
					var range = document.body.createTextRange();
					range.moveToElementText(element);
					range.select();
				} else if(window.getSelection) {
					var selection = window.getSelection();        
					var range = document.createRange();
					range.selectNodeContents(element);
					selection.removeAllRanges();
					selection.addRange(range);
				}
				
				/*

				if(element instanceof jQuery) element = element[0];
				
				var end = omnia.tools.selection.getText($(element)).length;
				var range = omnia.tools.selection.createRange(element.parentNode, { count: end });
				var selection = window.getSelection();
				
				if(range) {
					range.collapse(false);
					selection.removeAllRanges();
					selection.addRange(range);
				}
				*/
				
				return true;
			},
			
			htmlToText: function(args) {
				//if(!args.elem) return;
				if(args.elem && !args.elem instanceof jQuery) args.elem = $(args.elem);
				
				var html = args.elem !== undefined ? args.elem.html() : args.html;
				args.html0 = html;
				args.text = html;
				
				// Before clean
//log('#  before clean', args);				
				if(args.onBeforeClean) {
					args.text = args.onBeforeClean(args);
				}
				if(args.elem) args.sel = omnia.tools.selection.getSelection(args.elem);

				// Keep tags
				if(!args.keep) args.keep = [];
				//args.keep.push('div');
//log('#  before keep', args);				
				
				$.each(args.keep, function(i, tag) {
					if(tag == 'br') {
						args.text = args.text.replace(/<br(.|\\n)*?>/gi, '$br$');
					} else {
						//var reNode = new RegExp('<' + tag + '(.|\\n)*?>((.|\\n)*?)<\\/' + tag + '>|<' + tag + '[^>]*\/>', 'gi');
						var reNode = new RegExp('<' + tag + '(.|\\n)*?>((.|\\n)*?)<\\/' + tag + '>', 'gi');
						var reNodeDetail = new RegExp('<' + tag + '(.|\\n)*?>((.|\\n)*?)<\\/' + tag + '>', 'i');
						
						var findings = args.text.match(reNode);
//log('#  keep ' + tag, findings);
						
						$.each(findings, function(i, match) {
							var d = match.match(reNodeDetail);
							args.text = args.text.split(match).join('$' + tag + '$' + d[2] + '$/' + tag + '$');
						});
					}
				});
				args.text = args.text.split('&').join('$amp$');

//log('#  kept tags', args.text);				
				
				// Clean up
				args.text = $('<div />').html(args.text).text();
				
				args.text = args.text.split('<').join('&lt;');
				args.text = args.text.split('>').join('&gt;');
				
				// After clean
				if(args.onAfterClean) args.text = args.onAfterClean(args);
//log('#  after clean', args.text);				
				
				// Reconvert kept ones
				args.html = args.text;
				
				args.html = args.html.split('$div$' + '$/div$').join('<div><br></div>');
				args.html = args.html.split('$li$' + '$/li$').join('<li><br></li>');
				args.text = args.text.split('$div$' + '$/div$').join('\\n');
				args.text = args.text.split('$div$').join('\\n');
				args.text = args.text.split('$/div$').join('');

				$.each(args.keep, function(i, tag) {
					args.html = args.html.split('$' + tag + '$').join('<' + tag + '>');
					args.html = args.html.split('$/' + tag + '$').join('</' + tag + '>');
					args.html = args.html.split('$' + tag + '/$').join('<' + tag + '/>');
					
					args.text = args.text.split('$' + tag + '$').join('&lt;' + tag + '&gt;');
					args.text = args.text.split('$/' + tag + '$').join('&lt;/' + tag + '&gt;');
					args.text = args.text.split('$' + tag + '/$').join('&lt;' + tag + '/&gt;');
				});
//log('#  reconverted', args.html);				
				
				args.html = $('<div />').html(args.html).html();

				args.html = args.html.split('$amp$').join('&');
				args.text = args.text.split('$amp$').join('&');

				args.text = args.text.replace(/^\\n*/, '');
				args.text = args.text.replace(/\\n*$/, '');
				//args.html = args.html.split('&nbsp;').join(' ');
				//args.text = args.text.split('&nbsp;').join(' ');
				
				// Output
				if(args.isUpdate && args.html != html) {
					args.elem.html(args.html);
					//log('#set selection', args);
					omnia.tools.selection.setPosition(args.elem[0], args.sel.start + (args.offset ? args.offset : 0));
				}
				
				return args;
			},
			textToHtml: function(text) {
				if(text === undefined) text = '';
				var html = text.indexOf('\\n') >= 0 ? text.split('\\n').join('<div>') + '</div>' : text;
				html = html.split('&lt;').join('<');
				html = html.split('&gt;').join('>');
				return html; //omnia.tools.selection.getText(html, true, true);
			},
			
			// Private static functions
			
			createRange: function(node, chars, range) {
				try {
					if(!range) {
						range = document.createRange()
						range.selectNode(node);
						range.setStart(node, 0);
					}
				
					if(chars.count === 0) {
						range.setEnd(node, chars.count);
					} else if(node && chars.count > 0) {
						if(node.nodeType === Node.TEXT_NODE) {
							if(node.textContent.length < chars.count) {
								chars.count -= node.textContent.length;
							} else {
								range.setEnd(node, chars.count);
								chars.count = 0;
							}
						} else {
							for (var lp = 0; lp < node.childNodes.length; lp++) {
								range = omnia.tools.selection.createRange(node.childNodes[lp], chars, range);
								if(chars.count === 0) break;
							}
						}
					} 
				}
				catch(e) {}
			
			   return range;
			}
		},
		track: {
			isInitiated: false,
			event: function(eventId, options) {
				if(!omnia.tools.track.isInitiated) return;
				omnia.tools.net.googleanalytics.event(eventId, options);
			},
			removeCookies: function() {
				var clear = [];
				var cookies = document.cookie.split(';');
				$.each(cookies, function(idx, cookieStr) {
					var c = cookieStr.split('=');
					clear.push(c[0].trim() + '= ');
				});
				log('#' + clear.join(';'));
				document.cookie = clear.join(';') + '; expires = Thu, 01 Jan 1970 00:00:00 GMT';
			},
			
			track: function(data, onDone, isClient) {
				if(typeof data == 'string') data = {ucid: data};
				
				if(app && app.id) data.pid = app.id;
				if(isClient || data.ucid == 'start') data.client = omnia.tools.track.getClientInfo();
				if(app && app.space) data.cid = app.space.file.meta.asid;
				
				ox.tr.send(data, onDone);
			},
			send: function(data, onDone) {
				log('omnia.tools.track.send');
				
				ox.net.get({
					server: 'https://haustein.info/server-dev/',
					param: {
						cmd: 'track',
						task: 'track',
						data: ox.str.encryptXor(data, ox.str.keys.o3, true),
					},
					method: 'POST',
					onResponse: function(args2) {
						var isSuccess = args2 && args2.data && args2.data.status && args2.data.status == 'ok';
						if(onDone) onDone(isSuccess, args2);
					},
				});
			},
			getClientInfo: function() {
				//var now = omnia.tools.now();
				var env = ox.copy(omnia.tools.browser.getEnironment2());
				delete env.isPhone;
				delete env.isDesktop;
				delete env.isTablet;
				
				var r = {
					useragent: navigator.userAgent,
					platform: env,
				};
				if(app && app.space) r.appspace = {
					asid: app.space.file.meta.asid,
					created: app.space.file.meta.env.created,
					lastsave: app.space.file.meta.env.lastsave,
					settings: app.space.file.meta.settings,
					usecases: app.space.file.meta.usecases,
					query: app.space.file.meta.query,
				};
				return r;
				
				/*return {
					//appversion: app && app.version ? app.version : null,
					//appid: app && app.id ? app.id : null;
					//omniaversion: omnia.version,
					useragent: navigator.userAgent,
					platform: env, //omnia.tools.browser.getEnironment2(),
					//resolution: window.screen.width + 'x' + window.screen.height,
					//query: window.location.search,

					appspace: app && app.space ? {
						asid: app.space.file.meta.asid,
						created: app.space.file.meta.env.created,
						lastsave: app.space.file.meta.env.lastsave,
						settings: app.space.file.meta.settings,
						usecases: app.space.file.meta.usecases,
					} : null,
					//time: now,
				};*/
			},
		},
		
		// Server related
		
		
		fs: {
			
			client: {
				isSupported: function() {
					try {
						return cordova && cordova.file;
					}
					catch(e) {
						return false;
					}
				},
				getDataDirectory: function(directoryType) {
					if(!ox.fs.client.isSupported()) return ox.error('omnia.tools.fs.client.getDataDirectory: Only available in cordova');
					
					var isAndroid = navigator.userAgent.match(/Android/i);
					if(directoryType == 'external') return isAndroid ? cordova.file.externalDataDirectory : cordova.file.syncedDataDirectory;
					if(directoryType == 'documents') return cordova.file.documentsDirectory;
					return cordova.file.dataDirectory;
				},
				
				listFolder: async function(folder, extFilter, directoryType, isSilent) {
					if(!ox.fs.client.isSupported()) {
						ox.error('omnia.tools.fs.client.listFolder: Only available in cordova');
						return [];
					}
					
					if(!isSilent) log('omnia.tools.fs.client.listFolder: folder = ' + folder);
					
					if(!directoryType) directoryType = 'external';
					var isRoot = !folder || folder == '/';
					var items = await ox.fs.client.getRootDirectory(directoryType, false, isRoot ? null : folder.substr(1).split('/').join('#'), extFilter);
					
					var folders = items.filter(item => item.meta.directory != (isRoot ? '/' : folder)).map(item => item.meta.directory.substr(isRoot ? 1 : folder.length, item.meta.directory.substr(isRoot ? 1 : folder.length).indexOf('/') + (isRoot ? 1 : 1)));
					folders = ox.arr.unique(folders).map(directory => { return {meta: {type: 'device-folder', directory: folder + directory, name: directory.split('/').join('')}}; });
					var files = items.filter(item => item.meta.directory == (isRoot ? '/' : folder));
					
					//log({folders, files, items});
					return {folders, files};
				},
				clearFolder: async function(folder, extFilter, directoryType) {
					if(!ox.fs.client.isSupported()) {
						ox.error('omnia.tools.fs.client.listFolder: Only available in cordova');
						return [];
					}
					
					log('omnia.tools.fs.client.clearFolder: folder = ' + folder);
					
					if(!directoryType) directoryType = 'external';
					var isRoot = !folder || folder == '/';
					var items = await ox.fs.client.getRootDirectory(directoryType, false, isRoot ? null : folder.substr(1).split('/').join('#'), extFilter);
					
					//log({items}); return;
					
					return await ox.fs.client.clearRootDirectory(directoryType, items);
				},
				
				readFile: async function(fileEntryOrName, directoryType, type, isSilent, isNoPartsCheck) {
					if(!ox.fs.client.isSupported()) { if(!isSilent) ox.error('omnia.tools.fs.client.readFile: Only available in cordova'); return false; }
					var t0 = ox.t0('omnia.tools.fs.client.readFile: ' + fileEntryOrName, isSilent);
					
					// Check for parts
					if(!isNoPartsCheck && typeof fileEntryOrName == 'string' && fileEntryOrName.substr(fileEntryOrName.length - 4) != '.jpg') {
						var list = await ox.fs.client.getFileParts(fileEntryOrName); log({list})
						t0.bp('Checked for parts, ' + list.length + ' part(s) found');
						
						// Merge parts
						if(list.length > 1) {
							var dataArrays = [];
							var file0 = null;
							for(var i = 0; i < list.length; i++) {
								var item = list[i];
								var file = await ox.fs.client.readFile(item.meta.filename, directoryType, null, isSilent, true);
								dataArrays.push(file.content);
								if(!i) file0 = file;
							}
							
							/*var size = 0;
							dataArrays.forEach(d => size += d.byteLength);
							var content = new Uint8Array(size);
							var s = 0;
							dataArrays.forEach(d => { var p = d.byteLength; content.set(new Uint8Array(d), s); s += p; });
							content = content.buffer;*/
							
							var content = await (new Blob(dataArrays)).arrayBuffer();
							
							file0.content = content;
							//log({file0, size: file0.content.byteLength});
							t0.bp('Parts merged');
							
							return file0;
						}
					}
					
					// Get file extry
					var fileEntry = typeof fileEntryOrName == 'string' ? await ox.fs.client.getFile(fileEntryOrName.split('/').join('#'), directoryType, null, isSilent) : fileEntryOrName;
					var r = {}; 
					if(!fileEntry) return false;
					
					// Read content
					await new Promise(resolve => {
						
						fileEntry.file(file => {
							var reader = new FileReader();
							reader.onloadend = () => {
								r = {file, reader, content: reader.result};
								resolve();
							};
							reader.onerror = () => {
								resolve();
							}
							reader.onprogress = data => {
								if(isSilent || !data.lengthComputable) return;
								log('%comnia.tools.fs.client.readFile: ' + data.loaded + '/' + data.total + ' bytes', 'color:#a0a0a0');
							}
							
							//log('omnia.tools.fs.client.readFile: file = \'' + fileEntry.nativeURL + '\', type = ' + file.type);
							
							switch(type) {
								case 'base64':
									reader.readAsDataURL(file);
									break;
								case 'arraybuffer':
								case 'bin':
									reader.readAsArrayBuffer(file);
									break;
								case 'text':
									reader.readAsText(file);
									break;
								default:
									if(file.type == 'text/plain' || file.type == 'text/javascript') reader.readAsText(file);
									else reader.readAsArrayBuffer(file);
									break;
							}
							//log({reader, file});
								
						});
						
					});
					
					return r;
				},
				renameFile: async function(fileName, newName, directoryType, isSilent) {
					if(!ox.fs.client.isSupported()) { ox.error('omnia.tools.fs.client.renameFile: Only available in cordova'); return false; }
					
					var r = await ox.fs.client.getFile(fileName, directoryType, null, isSilent, true);
					if(!r.fileEntry) return false;
					
					var error = (e, resolve) => {
						var msg = '';
				
						switch (e.code) {
							case FileError.QUOTA_EXCEEDED_ERR:
								msg = 'Storage quota exceeded';
								break;
							case FileError.NOT_FOUND_ERR:
								msg = 'File not found';
								break;
							case FileError.SECURITY_ERR:
								msg = 'Security error';
								break;
							case FileError.INVALID_MODIFICATION_ERR:
								msg = 'Invalid modification';
								break;
							case FileError.INVALID_STATE_ERR:
								msg = 'Invalid state';
								break;
							default:
								msg = 'Unknown error';
							break;
						};
						
						if(!isSilent) ox.error('omnia.tools.fs.client.renameFile: Error: ' + msg + (name ? ' (\'' + name + '\')' : '') + ', url = ' + fileName, {r, newName});
						resolve();
					};
				
					var isRenamed = false;
					newName = encodeURIComponent(newName.split('/').join('#'));
					
					await new Promise(resolve => {
						r.fileEntry.moveTo(r.dirEntry, newName, newFile => {
							isRenamed = true;
							log({file: r.fileEntry.nativeURL, dir: r.dirEntry.nativeURL, newName, newFile});
							resolve();
						}, fail => {
							error(fail, resolve);
							//ox.error('omnia.tools.fs.client.renameFile: Error: ', {fail});
							//resolve();
						});
					});
					
					if(!isSilent && isRenamed) log('omnia.tools.fs.client.renameFile: Successfully renamed, url = ' + newName);
					return isRenamed;
				},
				writeFile: async function(fileEntryOrName, directoryType, data, isSilent) {
					try {
					
						if(!ox.fs.client.isSupported()) { ox.error('omnia.tools.fs.client.writeFile: Only available in cordova'); return false; }
						if(!data) return ox.error('omnia.tools.fs.client.writeFile: data not available');
						
						// Split into parts
						var threshold = 8 * 1000000;
						if((data.type == ox.str.mimeTypes.pdf || data.type == ox.str.mimeTypes.epub) && data.size > threshold && typeof fileEntryOrName == 'string') {
							var dataArray = await data.arrayBuffer();
							var dataParts = [];
							var s = 0;
							while(s < data.size) {
								var l = s + threshold > data.size ? data.size : s + threshold;
								dataParts.push(dataArray.slice(s, l));
								//log({s, l, size: dataParts[dataParts.length - 1].byteLength})
								s += threshold;
							}

							if(!isSilent) log('omnia.tools.fs.client.writeFile: Split into ' + dataParts.length + ' part(s) write, url = ' + fileEntryOrName);
							var isWritten = true;
							await Promise.all(dataParts.map(async (part, i) => {
								isWritten = isWritten && await ox.fs.client.writeFile(fileEntryOrName + (i ? '.part-' + i : ''), directoryType, new Blob([part], {type: data.type}));
							}));
							return isWritten;
						}
						
						if(!directoryType) directoryType = 'external';
						var fileEntry = typeof fileEntryOrName == 'string' ? await ox.fs.client.getFile(fileEntryOrName.split('/').join('#'), directoryType, {create: true, exclusive: false}) : fileEntryOrName;
						var isWritten = false;
	
						await new Promise(resolve => {
							
							//log('omnia.tools.fs.client.writeFile: url = ' + fileEntry.nativeURL);
							
							fileEntry.createWriter(fileWriter => {
								fileWriter.onwriteend = function() {
									log('omnia.tools.fs.client.writeFile: Successful file write, url = ' + decodeURIComponent(fileEntry.nativeURL));
									isWritten = true;
									resolve();
								};
								fileWriter.onerror = function (e) {
									log('omnia.tools.fs.client.writeFile: Failed file write: ' + e.toString());
									resolve();
								};
								fileWriter.onprogress = data => {
									if(isSilent || !data.lengthComputable) return;
									log('%comnia.tools.fs.client.writeFile: ' + data.loaded + '/' + data.total + ' bytes', 'color:#a0a0a0');
								}
								
								
								//if(!data) data = new Blob(['some file data'], { type: 'text/plain' });
								//var isBin = data.byteLength; //ArrrayBuffer.isView(data);
								//log({data, type: data.type, size: data.size});
								
								fileWriter.write(data);
							});
							
						});
						
						return isWritten;
					
					}
					catch(e) {
						ox.error('omnia.tools.fs.client.writeFile: Error', {e});
						return false;
					}
				},
				deleteFile: async function(fileEntryOrName, directoryType, isSilent, isNoPartsCheck) {
					if(!ox.fs.client.isSupported()) return ox.error('omnia.tools.fs.client.deleteFile: Only available in cordova');
					var t0 = ox.t0('omnia.tools.fs.client.deleteFile: ' + fileEntryOrName);

					// Check for parts
					if(!isNoPartsCheck && typeof fileEntryOrName == 'string' && fileEntryOrName.substr(fileEntryOrName.length - 4) != '.jpg') {
						var list = await ox.fs.client.getFileParts(fileEntryOrName);
						t0.bp('Checked for parts, ' + list.length + ' part(s) found');
						
						if(list.length > 1) {
							var isDeleted = true;
							for(var i = 0; i < list.length; i++) {
								var item = list[i];
								isDeleted = isDeleted && await ox.fs.client.deleteFile(item.fileEntry, directoryType, isSilent, true);
							}
							return isDeleted;
						}
					}
					
					var fileEntry = typeof fileEntryOrName == 'string' ? await ox.fs.client.getFile(fileEntryOrName.split('/').join('#'), directoryType, {create: false}) : fileEntryOrName;
					var isDeleted = false;
					if(!fileEntry) { t0.bp('File not found, name = ' + fileEntryOrName); return false; }
					
					await new Promise(resolve => {
						
						//log('omnia.tools.fs.client.deleteFile: url = ' + fileEntry.nativeURL);
						
						fileEntry.remove(file => {
							isDeleted = true;
							if(!isSilent) log('omnia.tools.fs.client.deleteFile: File deleted, url = ' + fileEntry.nativeURL);
							resolve();
						}, e => {
							ox.error('omnia.tools.fs.client.deleteFile: Error: ' + e.code, {e});
                			resolve();
						}, () => {
							ox.error('omnia.tools.fs.client.deleteFile: File does not exist');
							resolve();
						});

					});
					
					return isDeleted;
				},
				getFile: async function(name, directoryType, options, isSilent, isReturnDir) {
					if(!ox.fs.client.isSupported()) return ox.error('omnia.tools.fs.client.getFile: Only available in cordova');
					var error = (e, resolve) => {
						var msg = '';
				
						switch (e.code) {
							case FileError.QUOTA_EXCEEDED_ERR:
								msg = 'Storage quota exceeded';
								break;
							case FileError.NOT_FOUND_ERR:
								msg = 'File not found';
								break;
							case FileError.SECURITY_ERR:
								msg = 'Security error';
								break;
							case FileError.INVALID_MODIFICATION_ERR:
								msg = 'Invalid modification';
								break;
							case FileError.INVALID_STATE_ERR:
								msg = 'Invalid state';
								break;
							default:
								msg = 'Unknown error';
							break;
						};
						
						if(!isSilent) ox.error('omnia.tools.fs.client.getFile: Error: ' + msg + ' (\'' + name + '\')');
						resolve();
					};
					
					var dir = ox.fs.client.getDataDirectory(directoryType);
					var r = {};
					await new Promise(resolve => {
					
						window.resolveLocalFileSystemURL(dir, dirEntry => {
							r.dirEntry = dirEntry;
							
							dirEntry.getFile(name.split('/').join('#'), options || {create: false}, fileEntry => { 
								r.fileEntry = fileEntry;
								resolve();
							}, e => error(e, resolve));
						}, e => error(e, resolve));
						
					});
					
					if(isReturnDir) return r;
					return r.fileEntry;
				},
				
				getRootDirectory: async function(directoryType, isGetContent, prefixFilter, extFilter) {
					if(!ox.fs.client.isSupported()) return ox.error('omnia.tools.fs.client.getRootDirectory: Only available in cordova');

					var error = (e, resolve) => {
						ox.error('omnia.tools.fs.client.getRootDirectory: Error: ', {e});
						resolve();
					};
					
					var dir = ox.fs.client.getDataDirectory(directoryType);
					var r = {};
					
					await new Promise(resolve => {
						
						window.resolveLocalFileSystemURL(dir, dirEntry => {
							
							// Read directory entries
							var reader = dirEntry.createReader();
							reader.readEntries(async function(entries) { 
								
								try {
									//log('omnia.tools.fs.client.getRootDirectory: ' + entries.length + ' entrie(s) loaded');
									r = {dir: dirEntry, entries}; 
									
									// Load content
									for(var i = 0; i < entries.length; i++) {
										var fileEntry = entries[i];
										var read = isGetContent ? await ox.fs.client.readFile(fileEntry) : null;
										
										r.entries[i] = {
											fileEntry,
											meta: {
												name: fileEntry.name.substr(fileEntry.name.lastIndexOf('#') + 1),
												directory: '/' + (fileEntry.name.includes('#') ? fileEntry.name.substr(0, fileEntry.name.lastIndexOf('#')).split('#').join('/') + '/' : ''),
												filename: fileEntry.name,
												url: decodeURIComponent(fileEntry.nativeURL),
											},
										};
										if(isGetContent && read.content) r.entries[i].data = read.content;
									}
									
									//log('omnia.tools.fs.client.getRootDirectory: Content loaded');
									resolve(); 
								}
								catch(e) {
									error(e, resolve);
								}
								
							}, e => error(e, resolve));
						});
						
					});
					
					if(prefixFilter) return typeof prefixFilter == 'boolean' || prefixFilter == '#' ? r.entries.filter(item => !item.fileEntry.name.includes('#')) : r.entries.filter(item => item.fileEntry.name.substr(0, prefixFilter.length) == prefixFilter);
					if(extFilter) return r.entries.filter(item => item.fileEntry.name.substr(item.fileEntry.name.length - extFilter.length) == extFilter);
					return r.entries;
				},
				clearRootDirectory: async function(directoryType, entries) {
					if(!ox.fs.client.isSupported()) return ox.error('omnia.tools.fs.client.getRootDirectory: Only available in cordova');
					
					log('omnia.tools.fs.client.clearDirectory');
					if(!entries) entries = await ox.fs.client.getRootDirectory(directoryType);
					var deleted = 0;
					for(var i = 0; i < entries.length; i++) deleted += await ox.fs.client.deleteFile(entries[i].fileEntry, directoryType) ? 1 : 0;
					
					log('omnia.tools.fs.client.clearDirectory: ' + deleted + ' item(s) deleted');
					return deleted;
				},
				getFileParts: async function(fileName, directoryType) {
					fileName = fileName.split('#').join('/');
					
					var list = await ox.fs.client.listFolder('/' + fileName.substr(0, fileName.lastIndexOf('/') + 1), null, directoryType, true);
					list = list.files.filter(f => f.meta.filename.split('#').join('/').substr(0, fileName.length) == fileName);
					list = ox.arr.sortByKey(list, obj => obj.meta.filename);
					
					return list;
				},
				
				stable: async function(mode) {
					log('omnia.tools.fs.client.stable');
					
					if(mode == 'always') {
						if(window.omniasource != 'device') return;
						ox.fs.client.stableConfirm(() => ox.fs.client.stable());
						return;
					} 
					if(mode == 'once') {
						var stable = await ox.fs.client.readFile('release/stable', 'external', 'text', true);
						if(!stable) {
							if(window.omniasource != 'device') return;
							ox.fs.client.stableConfirm(async () => {
								await ox.fs.client.writeFile('release/stable', 'external', 'ok');
								ox.fs.client.stable();
							});
						} else {
							ox.fs.client.stable();
						}
						return;
					} 
					if(mode == true) await ox.fs.client.deleteFile('release/stable', 'external', true);
					await ox.fs.client.deleteFile('release/unstable', 'external', true);
				},
				stableConfirm: function(onDone) {
					ox.ov.confirm({
						content: 'Omnia has been started properly',
						labelButton: 'Ok',
						cssButton: 'ox-green',
						isModal: true,
						action: () => { onDone(); }
					});
				},
			},
		},
		
		// Classes
		
		File: {
			
			clsId: 'omnia.tools.File',
			isOmniaFile: true,
			
			// Static
			
			defaults: {
				/*'omnia-calendar': {
					meta: {
						id: 'ox-calendar',
					},
				},
				'omnia-news': {
					meta: {
						id: 'ox-news',
					},
				},
				'omnia-jobs': {
					meta: {
						id: 'ox-jobs',
					},
				},*/
			},
			CLOSED: 0,
			OPEN: 1,
			OPEN_ACTIVE: 2,
			
			// Core data
			
			meta: null,
			data: null,
			data0: null,
			location: null,
			
			// References
			
			file: null,
			ref: null,
			refArray: null,
			parents: null,
			attr: null,
			history: null,
			registerChecksum: null,
			registerLastSave: null,
			isSilent: false,
			//seq: null,
			
			init: function(args) {
				//log('omnia.tools.File.init');
				
				if(args.file) {
					args.meta = args.file.meta;
					args.data = args.file.data;
					this.file = args.file;
				}
				if(args.isSilent) this.isSilent = true;

				// Set Meta
				this.setMeta(args.meta);
				if(args.owner) this.meta.owner = args.owner;
				if(args.type) this.meta.type = args.type;
				if(args.id) this.meta.id = args.id;
				if(args.location) this.setLocation(args.location);
				if(this.meta.location) this.setLocation(this.meta.location);
				
				// Add defaults
				var template = omnia.tools.File.defaults[this.meta.type];
				if(template) {
					if(template.meta) $.extend(this.meta, ox.copy(template.meta));
					if(template.data && !args.data) args.data = ox.copy(template.data);
				}

				// Set data
				this.clearData();
				if(args.data) this.setData(args.data);
				
				if(args.history) this.history = args.history;

				if(args.isSave) this.save();
				if(args.isSync) this.sync('sync');
				if(args.isSyncData) this.sync('sync-data');
				if(args.isLog) log(this.toObject());
				if(args.isSilent) this.isSilent = true;
				
				//log('omnia.tools.File.init: ' + this);
			},
			destroy: function() {
				delete this.meta;
				delete this.data;
				delete this.ref;
				delete this.parents;
				delete this.history;
				delete this.data0;
				delete this.location;
			},
			
			// Static functions
			
			create: function(args) {
				return ox.create(omnia.tools.File, args || {});
			},
			
			// Public I/O functions
			
			save: function(args) { return this.sync('save', args); },
			sync: function(method, args) {
				try {
					// Parameters
					if(!args) args = {};
					if(!args.id) args.id = ox.id();

					if(!args.location && !this.location) {
						if(method != 'sync') {
							args.success = false;
							if(args.onDone) args.onDone(args);
							return false;
						}
					} else {
						if(args.location) this.setLocation(args.location);
						else args.location = this.location;
					}

					log('omnia.tools.File.sync: method = ' + method + ', ' + this);

					// Store on location
					switch(args.location) {
						case 'omnia-storage': 
							this.syncLocalStorageFile(method, args);
							break;
					}
			
					// Sync
					if((method == 'sync' || method == 'sync-data') && this.meta.link && this.meta.link.service) {
						//if(args.file.meta.link.isSync) { omnia.tools.error('omnia.app.Frame.sync: Sync is ongoing'); return; }
						this.meta.link.isSync = true;
						
						switch(this.meta.link.service) {
							case 'cloud':
								delete args.remote;
								log('omnia.tools.File.sync: Sync to cloud');
								this.syncCloud(args);
								break;
							case 'cloud2':
								log('omnia.tools.File.sync: Sync to cloud2');
								this.syncCloud2(args);
								break;
						}
						return true;
					}
					
					if(args.onDone) args.onDone(args);
					return true;
				}
				catch(e) {
					ox.error('omnia.tools.File.sync: Failed, ' + this);
					log({e});
					args.success = false;
					if(args.onDone) args.onDone(args);
				}
			},
			
			// Private I/O functions
			
			syncLocalStorageFile: function(method, args) {
				if(!args) args = {};
				log('omnia.tools.File.syncLocalStorageFile: method = ' + method);
					
				if(!app || !app.space) {
					args.isSavedToLocation = false;
					if(args.onDone) args.onDone(args);
					return false;
				}
				
				var wasLoaded = false;

				if(method == 'load' || method == 'load-data' || method == 'load-save' || method == 'sync' || method == 'sync-data') {
					var isLoad = method == 'load' || method == 'load-data';
					var isMetaOverwrite = method == 'load' || method == 'sync';
					
					var file = app.space.getFile(this.meta.id);
					if(file) {
						
						if(method == 'load' || (!this.data && method == 'sync')) {
							log('omnia.tools.File.syncLocalStorageFile: Overwrite meta from AppSpace')
							this.setMeta(file.meta);
							wasLoaded = true;
						}
						if(file.data && (isLoad || !this.data)) {
							log('omnia.tools.File.syncLocalStorageFile: Overwrite data from AppSpace')
							this.setData(file.data);
							wasLoaded = true;
						}
					}
				}

				if(!wasLoaded && (method == 'save' || method == 'load-save' || method == 'sync' || method == 'sync-data')) {
					log('%comnia.tools.File.syncLocalStorageFile: Save to AppSpace', 'color:#FF7F50');
					//if(!(args.lastsave === false)) this.meta.lastsave = ox.now();
					
					//if(method == 'save' || method == 'load-save') this.meta.lastsave = ox.now();
					args.isSavedToLocation = app.space.saveFile(this.toObject(true), args.isOverwrite);
				
					if(!args.isSavedToLocation || args.isSavedToLocation < 0) ox.error('omnia.tools.File.syncLocalStorageFile: Save to AppSpace failed');
				}
				return true;
			},
			syncCloud: function(args) {
				//log('#omnia.tools.File.syncCloud');

				var me = this;
				if(!args) return;
				if(!args.remote) args.remote = {meta: {}};
				if(!args.remote.meta) args.remote.meta = {};
				if(args.loop === undefined) args.loop = 0;
				else args.loop++; 

				// Authentication
				if(!this.meta.link.token || !this.meta.link.url) {
					log('omnia.tools.File.syncCloud: Request token');
					
					if(args.onTokenRequest && args.onTokenFail) {
						args.onTokenRequest({
							next: function(token, url) { 
								if(!token || !token.length) args.onTokenFail(args);
								else {
									if(url) me.meta.link.url = url;
									if(token) me.meta.link.token = token;
									me.syncCloud(args);
								}
							}, 
							url: me.meta.link.url,
						});
					} else {
						if(args.onDone) args.onDone(args);
					}
					return;
				}
			
				// Import from remote to local
				if(args.remote.data && (args.remote.meta.lastsave > this.meta.lastsave || !this.data)) {

					log('omnia.tools.File.syncCloud: Imported from remote file (end of queue)');
					//log('omnia.tools.File.syncCloud: Imported from remote file (end of queue), data = ', args.remote.data);
					this.setData(args.remote.data);

					this.meta.lastsync = omnia.tools.now();
					if(args.remote.meta.lastsave) this.meta.lastsave = args.remote.meta.lastsave;
					if(args.remote.meta.size) this.meta.size = args.remote.meta.size;
					
					if(args.remote.meta.latestid) this.meta.latestid = args.remote.meta.latestid;
					else delete this.meta.latestid;

					delete this.meta.link.isSync;
					this.save({isOverwrite: true, lastsave: false});

					log('%comnia.tools.File.syncCloud: Imported from remote file (end of queue)', 'color:#aa00ff');

					if(args.onDone) { args.status = 'inbound'; args.hasChanged = true; args.onDone(args); }
					return;
				}
				
				// Offline
				if(0 && !window.navigator.onLine) {
					omnia.tools.error('omnia.tools.File.syncCloud: No internet connection (window.navigator.onLine = ' + window.navigator.onLine + ')');
					if(args.onEvent) args.onEvent({evt: 'offline', id: 'ox-event-offline'});
					delete this.meta.link.isSync;
					this.save();
					
					if(args.onDone) { args.onDone(args); }
					return;
				} else {
					if(args.onEvent) args.onEvent({evt: 'online', replace: true, id: 'ox-event-offline'});
				}
				
				// Save from local to remote
				if(this.data && args.remote.meta.lastsave && args.remote.meta.lastsave < this.meta.lastsave) {

					// Save to server
					if(args.isSend) {

						args.next = function () { me.syncCloud(args); };
						
						var json = ox.copy(me.toObject()); //omnia.tools.jsonCopy(args.file);
						delete json.meta.link;
						delete json.meta.open;
						delete json.meta.thumb;

						//log('#history');
						//log(json.meta.history);
						//delete args.file.meta.history;

						var dataStr = JSON.stringify(json);
						var size = JSON.stringify(this.data).length;
						
						// Size validation
						if(!size/* || (this.meta.size && parseInt(this.meta.size) - size > 50000)*/) {
							ox.error('omnia.tools.File.syncCloud: Data size is suspicious, data was not sent (old size = ' + this.meta.size + ', new size = ' + size + ')');
							
							if(!args.isSilent && args.onEvent) args.onEvent({evt: 'errornet', text: ' ' + this.meta.link.url, id: args.id});
							delete this.meta.link.isSync;
							return false;
						}
						this.meta.size = size;
					
						log('%comnia.tools.File.syncCloud: Local file is newer. Send full data to \'' + me.meta.link.url + '\' (' + omnia.tools.string.toSize(dataStr.length, true) + ')', 'color:blue');
						if(!args.isSilent && args.onEvent) args.onEvent({evt: 'saveStart', text: ' ' + me.meta.link.url, id: args.id});

						omnia.tools.net.get({
							server: 'https://haustein.org/omnia/app/server.php',
							param: {
								cmd: 'save',
								url: me.meta.link.url,
								token: me.meta.link.token,
								data: dataStr,
							},
							type: 'text',
							method: 'POST',
							id: args.id,
							timeout: 60000,
	
							onProgressSend: function(bytes, e, args2) { 
								if(args.onEvent) args.onEvent({evt: 'saveSend', text: ' ' + omnia.tools.string.toSize(bytes) + (e.lengthComputable ? ' / ' + omnia.tools.string.toSize(e.total) : ''), id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
							},
							onProgress: function(bytes, e, args2) { 
								if(args.onEvent) args.onEvent({evt: 'saveReceive', text: ' ' + bytes + ' bytes', id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
							},
							onResponse: function(args2) { 
								if(args.onEvent) args.onEvent({evt: 'saveEnd', text: ' ' + me.meta.link.url, id: args.id, url: me.meta.link.url});
								me.syncCloudDataValidation(args2, args); 
							},
						});
					} else {
						log('%comnia.tools.File.syncCloud: Local file is newer. Not sent', 'color:#aa00ff'/*, {remote: args.remote, local: this.toObject()}*/);
						//if(!args.isSilent) omnia.ui.board2.trigger({evt: omnia.app.events.outbound, id: args.id});

						delete this.meta.link.isSync; 
						if(args.onDone) { args.status = 'outbound'; args.onDone(args); }
					}
					return;
				}
				
				// Load meta
				if(this.data && !args.remote.meta.type && !args.loop) {
					log('%comnia.tools.File.syncCloud: Load meta \'' + this.meta.link.url + '\'', 'color:blue');
					if(!args.isSilent && args.onEvent) args.onEvent({evt: 'loadMetaStart', id: args.id});
	
					args.next = function () { 
						if(me.meta.lastsave > me.meta.lastsync && args.remote.meta.lastsave > me.meta.lastsave) {
							var doNothing = function() {
								ox.error('omnia.tools.File.syncCloud: Do not overwrite');
							};
							var saveLocal = function() {
								me.meta.lastsave = args.remote.meta.lastsave + 1;
								me.syncCloud(args);
							}
							var overwriteLocal = function() { me.syncCloud(args); };
							
							if(0 && args.onOverwrite) {
								if(args.isDialogOpen) return;
								
								args.isDialogOpen = true;
								args.onOverwrite({onDone: function(isOverwrite) {
									delete args.isDialogOpen;
									
									if(!isOverwrite) {
										if(args.isAutomatic) doNothing();
										else saveLocal();
									} else {
										overwriteLocal();
									}
								}});
							} else {
								if(args.isAutomatic) doNothing();
								else saveLocal();
							}
							
							return;
						}
						me.syncCloud(args);
					};
					omnia.tools.net.get({
						server: 'https://haustein.org/omnia/app/server.php',
						param: {
							cmd: 'loadmeta',
							url: me.meta.link.url,
							token: me.meta.link.token,
						},
						method: 'POST',
						id: args.id,
						timeout: 30000,

						onProgressSend: function(bytes, e, args2) { 
							if(!args.isSilent && args.onEvent) args.onEvent({evt: 'loadMetaSend', text: ' ' + omnia.tools.string.toSize(bytes), id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
						},
						onProgress: function(bytes, e, args2) { 
							if(!args.isSilent && args.onEvent) args.onEvent({evt: 'loadMetaReceive', text: ' ' + omnia.tools.string.toSize(bytes), id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
						},
						onResponse: function(args2) {
							if(!args.isSilent && args.onEvent) args.onEvent({evt: 'loadMetaEnd', id: args.id});
							me.syncCloudDataValidation(args2, args);
						},
					});
					return;
				}
				
				// Get full data
				if(!this.data || (!args.remote.data && args.remote.meta.lastsave > me.meta.lastsave)) {
					log('%comnia.tools.File.syncCloud: Remote file is newer. Load full \'' + me.meta.link.url + '\'', 'color:blue');
					if(args.onEvent) args.onEvent({evt: 'loadStart', text: ' ' + me.meta.link.url, id: args.id});

					args.next = function () { me.syncCloud(args); };
					omnia.tools.net.get({
						server: 'https://haustein.org/omnia/app/server.php',
						param: {
							cmd: 'load',
							url: me.meta.link.url,
							token: me.meta.link.token,
						},
						method: 'POST',
						id: args.id,
						timeout: 30000,

						onProgressSend: function(bytes, e, args2) { 
							if(args.onEvent) args.onEvent({evt: 'loadSend', text: ' ' + omnia.tools.string.toSize(bytes), id: args2.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
						},
						onProgress: function(bytes, e, args2) { 
							args.bytes = bytes;
							if(args.onEvent) args.onEvent({evt: 'loadReceive', text: ' ' + omnia.tools.string.toSize(bytes), id: args2.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
						},
						onResponse: function(args2) { 
							if(args.onEvent) args.onEvent({evt: 'loadEnd', text: ' ' + me.meta.link.url + ' (' + omnia.tools.string.toSize(args.bytes) + ')', id: args.id, url: me.meta.link.url, bytes: args.bytes});
							me.syncCloudDataValidation(args2, args); 
						},
					});
					return;
				}
				
				// Synced
				if(this.data && args.remote.meta.lastsave == this.meta.lastsave) {
					this.meta.lastsync = omnia.tools.now();
					
					log('%comnia.tools.File.syncCloud: Data is in sync', 'color:#aa00ff');
					if(!args.isSilent && args.onEvent) args.onEvent({evt: 'inSync', text: ' ' + this.meta.link.url, id: args.id});
					args.status = 'synced';
				} else {
					log('%comnia.tools.File.syncCloud: No further action', 'color:#aa00ff');
					log(this.toObject());
				}

				delete this.meta.link.isSync; 
				this.save();
				if(args.onDone) { args.onDone(args); }
			},
			syncCloudDataValidation: function(args2, args) {
				var error = null;
				//log('omnia.tools.File.syncCloudDataValidation');
				
				try {
				
					// Check response
					if(!args2 || !args2.response || typeof args2.response != 'object') {
						error = 'parse';
					} else {
		
						// Check net ok
						if(!args2.response.success) {
							error = args2.response.str == 'timeout' ? 'timeout' : 'net'
						} else {
		
							// Check server ok
							if(args2.type == 'text') args2.data = JSON.parse(args2.response.dataStr);
							
							if(args2.data && args2.data.status && args2.data.status != 'ok') {
								error = args2.data.status == 'access denied' ? 'auth' : 'server';
							} else {
								if(args.bytes && args2.data.bytes && parseInt(args.bytes) != parseInt(args2.data.bytes)) {
									error = 'size';
								}
								
								// Data ok
							}
							
						} 
					}
					
				}
				catch(e) {
					error = 'unknown';
				}
				if(error) ox.error('omnia.tools.File.syncCloudDataValidation: error = ' + error);
				
				switch(error) {
					case 'unknown':
					case 'parse':
					case 'net':
						if(!args.isSilent && args.onEvent) args.onEvent({evt: 'errornet', text: ' ' + this.meta.link.url, id: args.id});
						delete this.meta.link.isSync;
						break;
					case 'timeout':
						if(!args.isSilent && args.onEvent) args.onEvent({evt: 'errortimeout', text: ' ' + this.meta.link.url, id: args.id});
						delete this.meta.link.isSync;
						break;
					case 'auth':
						if(this.meta.link && this.meta.link.token) delete this.meta.link.token;
						if(args.onTokenFail) args.onTokenFail(args);
						delete this.meta.link.isSync;
						return;
						break;
					case 'server':
						if(/*!args.isSilent && */args.onEvent) args.onEvent({evt: 'errorserver', text: ' ' + this.meta.link.url, id: args.id});
						delete this.meta.link.isSync;
						break;
					case 'size':
						if(args.onEvent) args.onEvent({evt: 'errorserver', text: ' ' + this.meta.link.url + ' - File size is differend', id: args.id});
						delete this.meta.link.isSync;
						break;
					default:
						log('omnia.tools.File.syncCloudDataValidation: Data ok');

						//if(!args.isSilent && args2.data.status) omnia.ui.board2.trigger({evt: omnia.app.events.info, text: args.file.meta.link.url + '<br>status: ' + args2.data.status + '<br>partial: ' + args2.data.partial + '<br>', id: omnia.tools.getUniqueId()});
						
						args.remote = args2.data;
						if(args.remote.meta && args.remote.data) args.remote.meta.size = JSON.stringify(args.remote.data).length;
						if(args.next) args.next();
				}
				
				if(error) {
					omnia.tools.error('omnia.tools.File.syncCloudDataValidation: Data failed, error = ' + error);
					log({args, args2});
					delete this.meta.link.isSync;

					if(args.onDone) { args.onDone(args); }
				}
			},
			syncCloud2: function(args) {
				var me = this;
				if(!args) args = {};
				
				var server = omnia.tools.net.server;// == 'https://haustein.info/server-dev/' ? 'https://haustein.info/server-dev/' : 'https://haustein.info/server/';
				
				// Load data
				if(!this.data) {
					log('omnia.tools.File.syncCloud2: Load data, server = ' + server);

					omnia.tools.net.get({
						server: server,
						param: {
							cmd: 'file',
							task: 'load',
							url: this.meta.link.url,
							token: this.meta.link.token,
						},
						type: args.type || 'text',
						onResponse: function(args2) {
							log('omnia.tools.File.syncCloud2.onResponse: success = ' + args2.response.success); 
							if(args2.response.success) {
								me.setData({v: args2.response.dataStr});

								me.meta.link.checksum0 = ox.str.checksum(args2.response.dataStr);
								me.data0 = {v: args2.response.dataStr};
							} 
							args.response = args2.response;
							if(args.onDone) args.onDone(args);
						}
					});
					
					return;
				}
				
				// Save patch
				var isPatch = !args.isNoPatch && this.data0;
				log('omnia.tools.File.syncCloud2: Save' + (!isPatch ? '' : ' patch') + ', server = ' + server);
 
				if(!this.data || (!this.data.v && !this.data.c)) {
					ox.error('omnia.tools.File.syncCloud2: Error: Data empty');
					if(args.onDone) args.onDone(args);
					return;
				}

 				var data = this.toObject().data.v;
				var checksum1 = ox.str.checksum(data);
				var param;
				
				if(isPatch) {
					var checksum0 = ox.str.checksum(this.data0);
					var isChanged = checksum0 != checksum1;
	
					var dmp = new diff_match_patch();
					var patch = dmp.patch_make(this.data0.v, data);
					var patchText = dmp.patch_toText(patch);

					param = {
						cmd: 'file',
						task: 'savepatch',
						url: this.meta.link.url,
						patches: patchText,
						checksum0: this.meta.link.checksum0,
						checksum1: checksum1,
					};
				} else {
					param = {
						cmd: 'file',
						task: 'save',
						url: this.meta.link.url,
						file: data,
						checksum1: checksum1,
					};
				}
				ox.net.get({
					server: server,
					param: param,
					method: 'POST',
					type: 'text',
					id: args.id,
					timeout: 30000,
									
					onProgressSend: function(bytes, e, args2) { 
						if(args.onEvent) args.onEvent({evt: 'saveSend', text: ' ' + omnia.tools.string.toSize(bytes) + (e.lengthComputable ? ' / ' + omnia.tools.string.toSize(e.total) : ''), id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
					},
					onProgress: function(bytes, e, args2) { 
						if(args.onEvent) args.onEvent({evt: 'saveReceive', text: ' ' + bytes + ' bytes', id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
					},
					onResponse: function(args2) {
						args.response = args2.response;
						args.args2 = args2;
						
						args.next = function() {
							if(args.onEvent) args.onEvent({evt: 'saveEnd', text: ' ' + me.meta.link.url + (args.remote && args.remote.meta && args.remote.meta.exports ? ', ' + args.remote.meta.exports.length + ' file(s) exported' : ''), id: args.id, url: me.meta.link.url});
							args.status = args.args2 && args.args2.data && args.args2.data.status ? args.args2.data.status : 'unknown';

							// Reset data0
							log('omnia.tools.File.syncCloud2: Reset data0');
							me.meta.link.checksum0 = ox.str.checksum(data);
							me.data0 = {v: data};
							
							if(args.onDone) args.onDone(args);
						}
						
						me.syncCloudDataValidation(args2, args); 
					},
				});	
			},
			
			// I/O functions - v2
			
			sync2: function(args) {
				var me = this;
				if(!args) args = {};

				if(!args.sync) {
					args.sync = {
						step: 1,
						errors: [], 
						auth: 0,
						error: function(error) {
							args.sync.errors.push(error);
							//ox.error(me.clsId + '.sync2: ' + error);
						},
						next: function(error) { 
							if(error) args.sync.error(error);
							me.sync2(args); 
						}
					};
					log('%c' + this.clsId + '.sync2: Start, id = ' + this.meta.id, 'color:green');
				} else {
					args.sync.step++;
					log(this.clsId + '.sync2: -- Step ' + args.sync.step + (args.sync.fail ? ' (fail)' : '') + ', id = ' + this.meta.id);
				
					if(args.sync.step > 20) {
						ox.error(this.clsId + '.sync2: Too many loops');
						return false;
					}
				}
				
				// Conditions
				
				try {
					var isFlowFail = args.sync.fail;
					
					var isLocation = this.location;
					var isLoadRef = isLocation && !this.meta.lastsave;
					var isLocationFile = args.sync.location;
					var isLocationFileNewer = isLocationFile && args.sync.location.meta && (!this.meta.lastsave || args.sync.location.meta.lastsave > this.meta.lastsave);
					var isLocationSynced = !isLocation || args.sync.isLocationSynced;
					var isLocationNotExist = args.sync.isLocationNotExist;
					
					var isLinked = this.meta.link;
					var isLinkedAuth = isLinked && this.meta.link.token !== undefined;
					var isLinkOnly = this.meta.link && this.meta.link.linkonly;
					var isData = this.data != null;
					var isLocalChanges = isData && !this.meta.lastsync || this.meta.lastsave > this.meta.lastsync;
					var isSend = args.isSend;
						
					var isRemote = args.sync.remote !== undefined;
					var isRemoteData = args.sync.remote && args.sync.remote.data;
					var isRemoteNewer = args.sync.remote && args.sync.remote.meta && args.sync.remote.meta.lastsave > this.meta.lastsave;
					var isRemoteEqual = args.sync.remote && args.sync.remote.meta && args.sync.remote.meta.lastsave == this.meta.lastsave;
					
					// States
					//log({isLocationSynced, isLinkedAuth, isLocalChanges, isRemoteNewer, isData, isRemote});					
					if(isFlowFail) {
						switch(args.sync.fail) {
							case 'auth':
								log(this.clsId + '.sync2: Token try ' + (args.sync.auth + 1));
								delete args.sync.fail;
								delete this.meta.link.token;
								return args.sync.next();
								break;
							/*case 'auth-noinput':
							case 'auth-tryout':
								if(args.onTokenFail) args.onTokenFail(args);
								break;*/
							default:
								//if(args.sync.errors.length) args.sync.errors.forEach((e) => { ox.error(this.clsId + '.sync2: ' + e); });
								log('%c' + this.clsId + '.sync2: Sync failed, id = ' + this.meta.id, 'color:red');
								if(args.onDone) args.onDone(args);
								break;
						}
					} 
					else if(!isLocationSynced && !isLocationFile && !isLocationNotExist) this.syncLoadLocation(args);
					else if(!isLocationSynced && isLocationFile && (isLoadRef || !isData || isLocationFileNewer)) this.syncGetFromLocation(args, isLoadRef);
					else if(!isLocationSynced && isLocationFile && isData && !isLocationFileNewer) this.syncSaveToLocation(args);
					else if(!isLocationSynced && isLocation && isLocationNotExist) this.syncSaveToLocation(args);
					else if(isLocationSynced && isLinked && !isLinkedAuth) this.syncRequestToken(args);
					else if(isLocationSynced && isLinkedAuth && !isData && !isRemoteData) this.syncLoadRemote(args);
					else if(isLocationSynced && isLinkedAuth && !isData && isRemoteData) this.syncGetDataFromRemote(args);
					else if(isLocationSynced && isLinkedAuth && !isRemote) this.syncLoadRemote(args, true);
					else if(isLocationSynced && isLinkedAuth && !isLocalChanges && isRemote && !isRemoteEqual) this.syncCheckRemoteMeta(args);
					else if(isLocationSynced && isLinkedAuth && isLocalChanges && !isRemoteNewer && isSend) this.syncSendRemote(args); 
					else if(isLocationSynced && isLinkedAuth && isLocalChanges && isRemoteNewer) this.syncSolveRemoteConflict(args);
					else {
						//if(args.sync.errors.length) args.sync.errors.forEach((e) => { ox.error(this.clsId + '.sync2: ' + e); });
						log('%c' + this.clsId + '.sync2: File is in sync, id = ' + this.meta.id, 'color:green');
						if(args.onDone) args.onDone(args);
					}
				}
				catch(e) {
					ox.error(this.clsId + '.sync2: Error: ' + e, e.stack);
				}
			},
			
			syncRequestToken: function(args) {
				if(!args || !args.sync) return;
				var me = this;
				
				if(!args.onGetInput) {
					args.sync.fail = 'auth-noinput';
					ox.error(this.clsId + '.syncRequestToken: Token not available, onGetInput handler not defined');
					return args.sync.next('Token not available, onGetInput handler not defined');
				}
				if(args.sync.auth > 2) {
					args.sync.fail = 'auth-tryout';
					ox.error(this.clsId + '.syncRequestToken: Too many token trys');
					return args.sync.next('Too many token trys');
				}
				
				ox.error(this.clsId + '.syncRequestToken: Request user input');
				args.sync.auth++;
				args.onGetInput('token', function(token) {
					me.meta.link.token = token;
					args.sync.next();
				}); 
			},
			
			syncLoadLocation: function(args) {
				if(!args || !args.sync) return;
				if(!app || !app.space) return args.sync.next('Location not available');

				var file = app.space.getFile(this.meta.id);
				if(!file) {
					args.sync.isLocationNotExist = true;
					log(this.clsId + '.syncLoadLocation: Could not find file on ' + this.location);
				} else {
					log(this.clsId + '.syncLoadLocation: Received file id = ' + this.meta.id);
					args.sync.location = file;
				}
				
				args.sync.next();
			},
			syncGetFromLocation: function(args, isOverwriteMeta) {
				if(!args || !args.sync) return;
				if(!args.sync.location) return args.sync.next('Could not sync location');
				var file = args.sync.location;

				if(isOverwriteMeta) {
					log(this.clsId + '.getFromLocation: Loaded meta from ' + this.location);
					this.setMeta(file.meta);
				}
				
				if(file.data) {
					log(this.clsId + '.getFromLocation: Loaded data from ' + this.location);
					this.setData(file.data);
				} else {
					log(this.clsId + '.getFromLocation: No data available');
				}
				
				args.sync.isLocationSynced = true;
				args.sync.next();
			},
			syncSaveToLocation: function(args) {
				if(!args || !args.sync) return;
				if(!app || !app.space) return args.sync.next('Location not available');

				log(this.clsId + '.saveToLocation: Save file id = ' + this.meta.id);
				if(!this.meta.lastsave) this.meta.lastsave = ox.now();
				args.sync.isSavedToLocation = app.space.saveFile(this.toObject(true), args.isOverwrite);
				
				if(!args.sync.isSavedToLocation || args.sync.isSavedToLocation < 0) {
					ox.error(this.clsId + 'syncSaveToLocation: Save to AppSpace failed');
					args.sync.error('Save to AppSpace failed');
				}
				delete args.sync.isLocationNotExist;
				args.sync.isLocationSynced = true;
				args.sync.next();
			},
			
			syncLoadRemote: function(args, isMetaOnly) {
				if(!args || !args.sync) return;
				var me = this;
				
				var isOnline = this.checkOnline(args);
				if(!isOnline) {
					args.sync.fail = 'offline';
					return args.sync.next('No internet connection');
				}
				if(args.isSimulate && args.remote) {
					log('%c' + this.clsId + '.loadRemote: Simulate load \'' + this.meta.link.url + '\'' + (isMetaOnly ? ' meta only' : ''), 'color:blue');
					args.sync.remote = isMetaOnly ? {meta: args.remote.meta} : args.remote;
					return args.sync.next();
				}
				
				log('%c' + this.clsId + '.loadRemote: Load \'' + this.meta.link.url + '\'' + (isMetaOnly ? ' meta only' : ''), 'color:blue');
				if(args.onEvent) {
					if(isMetaOnly && !args.isSilent) args.onEvent({evt: 'loadMetaStart', id: args.id});
					else args.onEvent({evt: 'loadStart', text: ' ' + this.meta.link.url, id: args.id});
				}

				ox.net.get({
					server: 'https://haustein.org/omnia/app/server.php',
					param: {
						cmd: isMetaOnly ? 'loadmeta' : 'load',
						url: me.meta.link.url,
						token: me.meta.link.token,
					},
					method: 'POST',
					id: args.id,
					timeout: 30000,

					onProgressSend: function(bytes, e, args2) { 
						if(!args.onEvent) return;
						
						if(isMetaOnly && !args.isSilent) args.onEvent({evt: 'loadMetaSend', text: ' ' + ox.str.toSize(bytes), id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
						else args.onEvent({evt: 'loadSend', text: ' ' + ox.str.toSize(bytes), id: args2.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
					},
					onProgress: function(bytes, e, args2) { 
						if(!args.onEvent) return;
						
						args.bytes = bytes;
						if(isMetaOnly && !args.isSilent) args.onEvent({evt: 'loadMetaReceive', text: ' ' + omnia.tools.string.toSize(bytes), id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
						else args.onEvent({evt: 'loadReceive', text: ' ' + omnia.tools.string.toSize(bytes), id: args2.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
					},
					onResponse: function(args2) { 
						if(args.onEvent) {
							if(!args.isSilent) args.onEvent({evt: 'loadMetaEnd', id: args.id});
							else args.onEvent({evt: 'loadEnd', text: ' ' + me.meta.link.url + ' (' + ox.str.toSize(args.bytes) + ')', id: args.id, url: me.meta.link.url, bytes: args.bytes});
						}
						
						var error = me.validateResponse(args2, args);
						if(error) args.sync.fail = error;
						else args.sync.remote = args2.data;
						
						args.sync.next(error ? 'Load remote data error: ' + error : '');
					},
				});
			},
			syncSendRemote: function(args) {
				if(!args || !args.sync) return;
				var me = this;
				
				var isOnline = this.checkOnline(args);
				if(!isOnline) {
					args.sync.fail = 'offline';
					return args.sync.next('No internet connection');
				}
				
				// Prepare data
				var json = ox.copy(me.toObject()); //omnia.tools.jsonCopy(args.file);
				delete json.meta.link;
				delete json.meta.open;
				delete json.meta.thumb;

				var dataStr = JSON.stringify(json);
				var size = JSON.stringify(this.data).length;
				
				// Size validation
				if(!size/* || (this.meta.size && parseInt(this.meta.size) - size > 50000)*/) {
					ox.error(this.clsId + '.syncSendRemote: Data size is suspicious, data was not sent (old size = ' + this.meta.size + ', new size = ' + size + ')');
					if(!args.isSilent && args.onEvent) args.onEvent({evt: 'errornet', text: ' ' + this.meta.link.url, id: args.id});
					
					args.sync.fail = 'errornet';
					return args.sync.next('Data size is suspicious, data was not sent');
				}
				this.meta.size = size;
			
				log('%c' + this.clsId + '.syncSendRemote: Send full data to \'' + me.meta.link.url + '\' (' + omnia.tools.string.toSize(dataStr.length, true) + ')', 'color:blue');
				if(!args.isSilent && args.onEvent) args.onEvent({evt: 'saveStart', text: ' ' + me.meta.link.url, id: args.id});

				omnia.tools.net.get({
					param: {
						cmd: 'save',
						url: me.meta.link.url,
						token: me.meta.link.token,
						data: dataStr,
					},
					type: 'text',
					method: 'POST',
					id: args.id,
					timeout: 60000,

					onProgressSend: function(bytes, e, args2) { 
						if(args.onEvent) args.onEvent({evt: 'saveSend', text: ' ' + ox.str.toSize(bytes) + (e.lengthComputable ? ' / ' + ox.str.toSize(e.total) : ''), id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
					},
					onProgress: function(bytes, e, args2) { 
						if(args.onEvent) args.onEvent({evt: 'saveReceive', text: ' ' + bytes + ' bytes', id: args.id, bytes: bytes, progress: e ? e.lengthComputable : null, total: e ? e.total : null});
					},
					onResponse: function(args2) { 
						if(args.onEvent) args.onEvent({evt: 'saveEnd', text: ' ' + me.meta.link.url, id: args.id, url: me.meta.link.url});
						
						var error = me.validateResponse(args2, args);
						if(error) args.sync.fail = error;

						args.sync.next(error ? 'Send data to remote error: ' + error : '');
					},
				});
			},
			syncGetDataFromRemote: function(args) {
				if(!args || !args.sync || !args.sync.remote) return;
				
				if(!this.data || this.meta.lastsave < args.sync.remote.meta.lastsave) {
					log(this.clsId + '.syncGetDataFromRemote');
					
					this.setData(args.sync.remote.data);
					this.meta.lastsync = ox.now();
					if(args.sync.remote.meta.lastsave) this.meta.lastsave = args.sync.remote.meta.lastsave;
					if(args.sync.remote.meta.size) this.meta.size = args.sync.remote.meta.size;
					if(args.sync.remote.meta.latestid) this.meta.latestid = args.sync.remote.meta.latestid;
					else delete this.meta.latestid;
				}
			
				if(!this.meta.link.linkonly) args.isLocationSynced = false;
				args.sync.next();
			},
			syncCheckRemoteMeta: function(args) {
				if(!args || !args.sync || !args.sync.remote) return;
				
				log(this.clsId + '.syncCheckRemoteMeta');
				if(!this.meta.lastsave || args.sync.remote.meta.lastsave > this.meta.lastsave) delete this.data;
				
				args.sync.next();
			},
			syncSolveRemoteConflict: function(args) {
				if(!args || !args.sync || !args.sync.remote) return;
				
				if(!args.onGetInput) {
					args.sync.fail = 'conflict-noinput';
					return args.sync.next('There is a data conflict, onGetInput handler not defined');
				}
				
				args.onGetInput('conflict-remote', function(isOverwriteLocal) {
					if(isOverwriteLocal) delete me.data;
					else me.meta.lastsave = args.sync.remote.meta.lastsave + 1;
					
					args.sync.next();
				});
			},
			
			validateResponse: function(argsRequest, args) {
				var error = null;

				try {
				
					// Check response
					if(!argsRequest || !argsRequest.response || typeof argsRequest.response != 'object') {
						error = 'parse';
					} else {
		
						// Check net ok
						if(!argsRequest.response.success) {
							error = argsRequest.response.str == 'timeout' ? 'timeout' : 'net'
						} else {
		
							// Check server ok
							if(argsRequest.type == 'text') argsRequest.data = JSON.parse(argsRequest.response.dataStr);
							
							if(argsRequest.data && argsRequest.data.status && argsRequest.data.status != 'ok') {
								error = argsRequest.data.status == 'access denied' ? 'auth' : 'server';
							} else {
								if(args.bytes && argsRequest.data.bytes && parseInt(args.bytes) != parseInt(argsRequest.data.bytes)) {
									error = 'size';
								}
								
								// Data ok
							}
							
						} 
					}
					
				}
				catch(e) {
					error = 'unknown';
				}
				if(error) ox.error(this.clsId + '.validateResponse: error = ' + error);
				
				return error;
			},
			checkOnline: function(args) {
				if(!args || !args.sync) return;
			
				if(!window.navigator.onLine) {
					omnia.tools.error(this.clsId + '.checkOnline: No internet connection');
					if(args.onEvent) args.onEvent({evt: 'offline', id: 'ox-event-offline'});
					return false;
				}
				
				if(args.onEvent) args.onEvent({evt: 'online', replace: true, id: 'ox-event-offline'});
				return true;
			},
			
			// Compress
			
			compress: async function(filename) {
				if(!window.JSZip) { ox.error('omnia.tools.File.compress: JSZip library not found'); return false; }
				log('omnia.tools.File.compress');
				
				var JSZip = window.JSZip;
				var zip = new JSZip();
				var data = JSON.stringify(this.toObject().data); 
				zip.file(filename || 'data.json', data); 
				var ref = {};
				await zip.generateAsync({
					type: 'string',
					compression: "DEFLATE",
					compressionOptions: {level: 9},
				}).then(compressed => { ref.compressed = compressed; }); 
				var meta = ox.copy(this.meta);
				meta.compressed = 1;
				
				return {meta, data: ref.compressed};
			},
			decompress: async function(compressed, filename) {
				if(!window.JSZip) { ox.error('omnia.tools.File.compress: JSZip library not found'); return false; }
				if(!compressed) compressed = this;
				log('omnia.tools.File.decompress');

				var JSZip = window.JSZip;
				var zip = new JSZip();
				var zipData = await zip.loadAsync(compressed.data);
				var zipFile = zipData.file(filename || 'data.json');
				var data = await zipFile.async("string");
				data = JSON.parse(data);
				var meta = this.meta = ox.copy(compressed.meta);
				delete meta.compressed;
				this.data = data;
				
				return {meta, data};
			},
			
			// Public export functions
			
			toObject: function(isForSave) {
				var r = {};
				if(this.meta) r.meta = this.meta;
				if(this.data && (!isForSave || !this.meta.link || !this.meta.link.linkonly)) r.data = this.data;
				//if(this.history) r.history = this.history;
				return r; //{meta: this.meta, data: this.data, history: this.history};
			},
			toData: function() {
				return {
					meta: this.meta,
					data: this.data,
					ref: this.ref,
					parents: this.parents,
					attr: this.attr,
					history: this.history,
					registerLastSave: this.registerLastSave,
					registerChecksum: this.registerChecksum,
				};
			},
			toString: function() { 
				return 'ox.File[type: ' + this.meta.type + ', id: ' + this.meta.id + (this.meta.open ? ', open: ' + this.meta.open : '') + (this.meta.link ? ', link: ' + this.meta.link.service + '://' + this.meta.link.url : '') + (this.location ? ', loc: ' + this.location : '') + (this.meta.lastsave ? ', lastsave: ' + (new Date(parseInt(this.meta.lastsave))).toLocaleDateString('de-DE', ox.d.format.full) : '') + ']'; 
			},
			export: function() { return JSON.stringify(this.toObject()); },
			count: function() { return Object.keys(this.ref).length; }, 
			size: function() { return this.export().length; },
			logSize: function() {
				var s = this.size();
				log('omnia.tools.File.logSize: ' + this.count() + ' nodes, json size = ' + ox.str.toSize(s) + ' (' + ox.str.toSize(s, true) + ')');
			},
			log: function(isCopy) {
				log(isCopy ? ox.copy(this.toObject()) : this.toObject());
			},
			
			// Public reference functions
			
			getId: function() { 
				return this.meta.id; 
			},
			getAttr: function(aid) {
				return this.attr ? this.attr[aid] : null;
			},
			getType: function() {
				return this.meta.type;
			},
			getRoot: function() {
				if(!this.data) return false;
				return this.data;
			},
			getNode: function(nid) { 
				if(typeof nid == 'object') nid = nid.id;
				return this.ref[nid]; 
			},
			getNodes: function(isNotRegister) {
				return this.nodeToFlat(isNotRegister);
			},
			getRefsOrdered: function() {
				var r = [];
				var n = this.data || {};
				
				var f = n => { 
					r.push(n); 
					if(n.c) n.c.forEach(nc => f(nc));
				}
				f(n);
				
				return r;
			},
			getParent: function(nid) { 
				if(typeof nid == 'object') nid = nid.id;
				return this.parents[nid];
			},
			getPath: function(nid) {
				var r = [];
				var n = typeof nid == 'string' ? this.ref[nid] : nid;
				
				do {
					n = this.parents[n.id];
					if(n) r.push(this.ref[n.id]);
				} while(n);
				
				return r;
			},
			getPos: function(nid) {
				if(typeof nid == 'object') nid = nid.id;
				var p = this.parents[nid];
				
				if(!p || !p.c) return 0;
				return ox.arr.getPos(p.c, this.ref[nid]);
			},
			getLevel: function(nid) {
				var p = this.getPath(nid);
				return p.length - 1;
			},
			getRandom: function(keys) {
				var c = keys ? keys.length : this.count();
				if(!c) return false;
				
				if(!keys) keys = Object.keys(this.ref);
				var nid = keys[Math.floor(c * Math.random())];
				return this.ref[nid];
			},
			getOwner: function() {
				return this.meta.owner;
			},
			getOpenState: function() { 
				return this.meta.open; 
			},
			getData: function() {
				return this.data;
			},
			isEqual: function(args) {
				var data0 = (args.file0 || this).data;
				var data1 = (args.file || args.file1).data;
				var dataStr0 = JSON.stringify(data0); 
				var dataStr1 = JSON.stringify(data1);
				
				var isEqual = dataStr0 == dataStr1;
				if(args.isLog) {
					log('omnia.tools.File.isEqual: Data ' + (isEqual ? 'is equal' : 'is NOT queal, differences = '));
					//log(this.getObjPatch(this.nodeToFlat(data0), this.nodeToFlat(data1)));
					
					var file0 = ox.File.create({data: ox.copy(data0)});
					file0.register();

					var file1 = ox.File.create({data: ox.copy(data1)});
					file1.register();
					
					ox.each(file0.ref, function(id, node0) {
						if(!file1.ref[id]) {
							log({node0: node0});
							return;
						}
						var node1 = file1.ref[id];
						
						var nodeStr0 = JSON.stringify(node0); // file0.getFlatNode(node);
						var nodeStr1 = JSON.stringify(node1); //file0.getFlatNode(file1.ref[id]);
						
						if(nodeStr0 != nodeStr1) log({node0: node0, node1: node1});
					});
					var diff = function(n0, n1) {}
				}
				return dataStr0 == dataStr1;
			},
			find: function(v, isEqual, isNotRegister, isParse, parseOptions, isFirst, isParent, isKeepOrder) {
				var t0 = ox.now();
				
				if(typeof v == 'object' && v.v) {
					isEqual = v.isEqual;
					isNotRegister = v.isNotRegister;
					isParse = v.isParse;
					parseOptions = v.parseOptions;
					isFirst = v.isFirst;
					isParent = v.isParent;
					v = v.v;
				}
				
				if(!isNotRegister) this.register();
				
				var me = this;
				var r = [];
				var isRegExp = v instanceof RegExp; 
				var ql = isRegExp ? v : (v && typeof v == 'string' ? v.toLowerCase() : null);
				if(!ql) return [];

				ox.each(isKeepOrder ? this.refArray : this.ref, function(id, node) {
					if(!node || !node.v) return;
					
					try {
						var vl = node && node.v ? node.v.toString().toLowerCase() : '';
						if(
							(isRegExp && v.test(node.v)) || (
								!isRegExp && (
									(isEqual && ql == vl) || 
									(
										!isEqual && 
										vl.length >= ql.length && 
										vl.indexOf(ql) >= 0
									)
								)
							)
						) r.push(node);
					}
					catch(e) { ox.error({e, node, parent: me.getParent(node.id), ref: me.ref, id}); }
				});
				
				if((omnia.window.isServer || (app && app.debug)) && !this.isSilent) log('omnia.tools.File.find: v = \'' + v + '\' in ' + (ox.now() - t0) + ' ms (' + this.count() + ' nodes)');
				
				if(isParse) {
					for(var i = 0; i < r.length; i++) r[i] = ox.File.nodeToData(r[i], parseOptions);
				}
				
				if(isParent) return r.length ? this.getParent(r[0].id) : null;
				if(isFirst) return r.length ? r[0] : null;
				return r;
			},
			getSizes: function(nodes) {
				if(!nodes) nodes = this.find('#f', true);
				nodes = nodes.map((n) => {
					var nodeFile = ox.File.create({data: n});
					return {
						node: n,
						size: nodeFile.size(),
					};
				});
				nodes.sort((a, b) => b.size - a.size);
				return nodes;
			},

			// Public data convertion
			
			nodeToData: function(node, args, isSub, isLog) {
				
				// Parameters
				// node - node to analyse
				// args 
				//   isRender
				//   isLocalization - translate 'tx-..' strings
				//   isNoMarkup - ?
				//   isArgs - ?
				//   isKeepText - Do not summarize text of sub values
				// isSub - recursive call
	
				if(!node) node = this.data;
				if(!args) args = {};
				if(typeof args == 'boolean') args = {isRender: args};

				var isRender = args.isRender;
				var self = omnia.tools.File.nodeToData;
				var r = {};
				
				var defaultNodeToRender = function(v, id, oid) { 
					
					// Consider HTML tags
					var render = omnia.ui.text.markup.render(v);
					
					var nn = document.createElement('span');
					nn.innerHTML = ox.str.textToBullets(render.html);

					if(nn.childNodes.length > 1) {
						var html = '';
						$.each(nn.childNodes, function(i, node) {
							if(node.nodeName == '#text') html += '<span class="ox-textblock">' + node.nodeValue + '</span>';
							else html += node.outerHTML; //$(node).text() ? $(node).addClass('ox-textblock')[0].outerHTML : node.outerHTML;
						});
						
						return {t: 'span', css: id ? 'ox-id-' + id : '', html: html, "data-value": v};
					}

					// Return full text
					return {t: 'span', css: 'ox-textblock' + (id ? ' ox-id-' + id : ''), html: v, "data-value": v, "data-oid": oid}; 
				};
				
				// Parse
				try {
					var hasAttr = false; // Inline attr
					var isOid = false;
					var isArgs = false;
					var isArray = false;
					var id = null;
					
					// Value
					if(node.v && isSub) {
						var vLower = node.v.toString().toLowerCase();
						var attrs = node.v.toString().match(/[#]attr-([^\s]+)/i);
						hasAttr = attrs && attrs.length > 1; 
					
						var render = args.isNoMarkup ? {text: '', oids: []} : omnia.ui.text.markup.render(node.v);
					
						// Parse attribute - split to id, content
						var id = '';
						var content = '';
						if(hasAttr) {
							id = attrs[1].toLowerCase();
							content = node.v.split(attrs[0]).join('').trim();
							if(id == 'template') id = 'oid';
							else {
								isArray = id == 'array';
								isOid = id == 'oid' || id == 't';// || id == 'args';
								isArgs = id == 'args' || id == 'style' || (args.isArgs && !isOid && node.c && node.c.length >= 1 && node.c[0].v && node.c[0].v.toString().indexOf('#attr') > -1);
							}
							if(args.isArgs) id = attrs[1];
						}
						
						if(args.isNoMarkup && id && !node.c) {
							r[id] = args.isLocalization && content.substr(0, 3) == 'tx-' ? ox.tx('#' + content.substr(3)) : content;
						} else {
					
							// Get tag
							var tag = render.oids.length && omnia.ui[render.oids[0]] && node.v.indexOf('#document') == -1 ? omnia.ui[render.oids[0]] : null;
							if(node.v.indexOf('#d') >= 0 && node.v.indexOf('#doc') == -1) tag = {
								data: {
									nodeToData: function(v) { return ox.d.parse2(v.trim().substr(2)); }
								}
							}; // Render date tag
	
							// Set value
							if(id && id.length) { 
							
								// Labeled value
								if(!r.elements) r.elements = [];
							
								// Inline value
								var v = (render.text || '').trim();
								var vConverted = null; 
	
								if(tag && tag.data && tag.data.nodeToRender && isRender) {
									vConverted = tag.data.nodeToRender(content, {isOnParsed: true, node: {data: node}}); // Render node
								} else if(id != 'oid' && id != 'name' && isRender) {
									vConverted = defaultNodeToRender(v, node.id, id); //{t: 'span', css: 'ox-textblock a', html: v, "data-value": v};
								} else {
									vConverted = tag && tag.data && tag.data.nodeToData ? tag.data.nodeToData(content.trim()) : v; // Parse tag data into object
								}
								if(!vConverted['data-oid']) vConverted['data-oid'] = id;
								if(vConverted) r[id] = vConverted;
								
								if(id != 'oid') {
									var el = {oid: id};
									if(node.id) el.id = node.id;
									if(content) el.v = content;
									if(node.c) el.c = node.c;
									r.elements.push(el);
								}	
							} else {
								// Unlabeled value
								if(node.v && node.v.length) {
								
									if(tag && tag.data && tag.data.nodeToRender && isRender) r = tag.data.nodeToRender(node.v, {isOnParsed: true, node: {data: node}}); // Doesn't work with inline tags
									else r.v = node.v;
								}
							}	
						}
					}
//log('#1 ' + node.c.length);
					// Childs
					if(node.c && node.c.length && (!args.depth || !isSub || args.depth <= isSub)) { 
						var c = [];
						var elements = [];
						var idxs = {};
						var isSubArray = false;
//log('#2')						
						ox.each(node.c, function(i, nodeSub) { 
							var sub = self(nodeSub, args, !isSub ? 1 : isSub + 1, isLog);
								
							if(isArray) { 
								var cc = {};
								if(sub.id && sub.v) cc[sub.id] = sub.v;
								else cc = sub;
								if(cc.v && Object.keys(cc).length == 1 && typeof cc.v == 'string') cc = cc.v;
								c.push(cc);
								//log({id: 'array', sub, c});
							} else if(sub && sub.id == 'array') { 
								//log({id: 'subarray', sub});
								isSubArray = true;
								r = sub.c ? sub.c : (sub.v ? sub.v.c : {});
							} else if(sub && sub.id) {
								// Sub attributes numbered
								
								if(!idxs[sub.id]) idxs[sub.id] = 1;
								else idxs[sub.id]++;
								var idn = sub.id + (idxs[sub.id] > 1 ? idxs[sub.id] : '');

								r[idn] = args.isLocalization && sub.v && typeof sub.v == 'string' && sub.v.substr(0, 3) == 'tx-' ? ox.tx('#' + sub.v.substr(3)) : sub.v; //sub.v;
							} else {
								c.push(sub);
							}

							if(isSub <= 2 && sub && sub.elements && sub.elements.length) elements = elements.concat(sub.elements);
						});
					
						if(hasAttr && !isOid && !isArgs && !isArray) { 
							var isText = c.filter(function(nodeSub) { return nodeSub.v && !nodeSub.oid && !nodeSub.t; }).length == c.length;
							var isOids = c.filter(function(nodeSub) { return nodeSub.oid || nodeSub.t; }).length;
						
							if(id && id.length) {
								r[id] = {c: c};
								var copyFormat = {type: 'text', indent: '', bullet: '', startLevel: 1, br: ' ', brTag: '<br>', useTags: 2};
								
								if(isText) {
									var text = args.isNoMarkup && args.isKeepText && c.length == 1 ? c[0].v : omnia.app.Mindmap.getText({v: '', c: c}, copyFormat);
									
									if(isRender) r[id] = defaultNodeToRender(text.trim(), node.id, id); //{t: 'span', css: 'ox-textblock b', html: text.trim(), "data-value": text.trim()};
									else r[id] = text.trim();
								} else {
									$.each(c, function(k, child) {
										if(c[k].v && !c[k].oid && !c[k].t) c[k] = defaultNodeToRender(omnia.app.Mindmap.getText({v: '', c: [{v: c[k].v}]}, copyFormat), node.id, id); //{t: 'span', css: 'ox-textblock d', html: omnia.app.Mindmap.getText({v: '', c: [{v: c[k].v}]}, copyFormat)};
									});
									
									r[id] = isOids ? {c: c} : c[0];
								}
							}
						} else {
							if(c && c.length) r.c = c;
						}
						if(elements.length) r.elements = elements;
					}
				}
				catch(e) {
					ox.error('omnia.tools.File.nodeToData: Parse error, node.v = \'' + node.v + '\'');
					log({error: e.stack, node});
					r = {};
				}

				// Output
				if(!r) r = {};
				var rr = isSub ? (hasAttr && !isOid ? {id: id, v: r[id]} : r) : r;
				if(r.elements) rr.elements = r.elements;
				if(r.c) rr.c = r.c;
				if(isArgs) rr = {id: id, v: r};
				//if(isArray) rr = {v: r.c};
				//if(isArgs) log({id, isOid, rr, r});
				//if(!isOid && rr.c && rr.c.length == 1 && rr.c[0].oid) rr = rr.c[0];

				if(args.isNoElements) {
					delete rr.elements;
					if(isArgs) delete rr.v.elements;
				}
				
				if(isLog) log({id: 'omnia.tools.File.nodeToData', node, args, isSub, isLog, rr, r});
				return rr;
			}, // Convert to data values
			dataToNode: function(data, isNoIds, attrFormat) {
				if(!data) return false;
				var node = {};
			
				$.each(data, function(id, value) {
					if(!value || value == '' || (typeof value == 'object' && !Object.keys(value).length)) return;
					
					if(id == 'v' || id == 's' || id == 'id' || id == 'c') {
						node[id] = value;	
					} else {
						if(!node.c) node.c = [];
						
						var item = {v: !id ? '...' : (attrFormat ? attrFormat + id : '#attr-' + id)};
						switch(typeof value) {
							case 'object':
								if(Array.isArray(value)) item.c = value.map(item => (typeof item == 'object' ? ox.File.dataToNode(item, isNoIds, attrFormat) : {v: item.toString()}));
								else item.c = ox.File.dataToNode(value, isNoIds).c;
								item.s = 1;
								break;
							case 'string':
								item.c = [{v: value}];
								break;
							case 'number':
								item.c = [{v: value.toString()}];
								break;
							/*default:
								item.c = value;
								break;*/
						}
						
						/*var item = {
							v: '#attr-' + id,
							c: [typeof value == 'string' ? {v: value} : value],
						};*/
						
						if(!isNoIds) item.id = data.id || ox.id();
						if(item.v || (item.c && item.c.length && (item.c.length > 1 || (item.c[0].v || item.c[0].c)))) node.c.push(item);
					}
				});
				return node;
			},
			nodeToFlat: function(isNotRegister) {
				if(!isNotRegister) this.register();
				//log(this.ref);
				
				var me = this;
				var r = [];
				ox.each(this.ref, function(id, node) {
					var n = me.getFlatNode(node);
					if(node.id === me.data.id) n.root = true;
					r.push(n);
				});
				
				return r;
			}, // Convert to flat node array
			flatToNode: function(flat) {
				if(!flat || !flat.length) return;
				
				var rootId = null;
				var ref = {};
				ox.each(flat, function(idx, node) {
					ref[node.id] = node;
					if(node.root) rootId = node.id;
				});
			
				var args = {};
				args.getNode = function(id) {
					var n = ref[id];
					if(!n) {
						ox.error('omnia.tools.File.flatToNode: Node not found in reference, id = ' + id);
						return;
					}
					n = ox.copy(n);
					if(n.c) {
						for(var i = 0; i < n.c.length; i++) {
							if(typeof n.c[i] == 'string') n.c[i] = args.getNode(n.c[i]); //ref[n.c[i]];
						}
					}
					return n;
				};
				
				var node = args.getNode(rootId);
				delete node.root;
				
				return node;
			},
				
			// Public setting functions
			
			setMeta: function(meta) {
				this.meta = meta || {};
				if(!this.meta.created) this.meta.created = ox.now();
				//if(!this.meta.lastsave) this.meta.lastsave = ox.now();
				if(!this.meta.id) this.meta.id = ox.id();
				if(!this.meta.type) this.meta.type = 'omnia';
				if(!this.meta.owner) this.meta.owner = ox.id();
				
				if(this.file) this.file.meta = this.meta;
			},
			setData: function(data) {
				this.data = data || {};
				
				if(this.file) this.file.data = this.data;
				//this.register();
			},
			
			setOpenState: function(state, isSave, callback) {
				this.meta.open = state;
				if(isSave) this.save({onDone: callback});
			},
			setLocation: function(location) {
				//log('omnia.tools.File.setLocation: ' + location);
				this.location = location;
			},
			
			// Public operations
			
			text: function(nid, v) { 
				this.prop(nid, 'v', v);
				
				/*var n = null;
				if(typeof nid == 'object') nid = nid.id;
				if(!nid || !(n = this.ref[nid])) return false;
				
				var vo = n.v;
				n.v = v; 
				
				this.history.push(['t', nid, v, vo]);
				return true;*/
			},
			
			prop: function(nid, name, value) {
				if(name == 'c') return false;
				
				var n = null;
				if(typeof nid == 'object') nid = nid.id;
				if(!nid || !(n = this.ref[nid])) return false;
				
				// Set property
				var valueOld = n[name];
				if(value === undefined) delete n[name]; 
				else n[name] = value; 
				
				this.addHistory('p', [nid, name, value], valueOld);
				return true;
			},
			append: function(child, targetParentId, pos) {
				if(typeof child == 'string') child = this.createNode(child);

				//if(!targetParentId) return false;
				if(!targetParentId) {
					if(!this.data || !this.data.id) {
						this.data = child;
						this.register(child);
						
						this.addHistory('a', [child, null]);
						return child;
					} else {
						return this.append(child, this.data.id, pos);
					}
				}

				var p = null;
				if(typeof targetParentId == 'object') targetParentId = targetParentId.id;
				if(!(p = this.ref[targetParentId])) return false;
				
				// Append
				if(!p.c) p.c = [];
				if(pos !== undefined) ox.arr.insertAt(p.c, pos, child);
				else p.c.push(child);
				
				this.register(child, p);
				
				this.addHistory('a', [child, targetParentId, pos]);
				return child;
			},
			remove: function(nid) {
				if(typeof nid == 'object') nid = nid.id;
				//log('omnia.tools.File.remove: nid = ' + nid);

				var n = null, p = null, pos = null;
				if(!(n = this.ref[nid])) { ox.error('omnia.tools.File.remove: Error: Reference not found id = ' + nid); return false; }
				
				/*if(n === this.data) {
					this.clear();
					return true;
				}*/
				
				// Remove
				if((p = this.parents[nid]) && p.c) {
					pos = ox.arr.remove(p.c, n);
					if(!p.c.length) delete p.c;
				}
				
				this.unregister(n);
				
				this.addHistory('r', nid, p ? [p.id, pos] : null);
				return pos;
			},
			move: function(nid, targetParentId, pos) {
				if(!nid || !targetParentId) return false;
				
				if(typeof nid == 'object') nid = nid.id;
				if(typeof targetParentId == 'object') targetParentId = targetParentId.id;
				
				var n = null, p0 = null, p1 = null;
				if(nid == this.data.id) return false; // Root
				if(!(n = this.ref[nid])) return false; // Node not found
				
				p0 = this.parents[nid];
				if(!(p1 = this.ref[targetParentId]) || p1.id == nid) return false; // Target not found
				
				var path = this.getPath(p1.id);
				var isRecursive = false;
				path.forEach(function(p) { if(p.id == nid) isRecursive = true; });
				if(isRecursive) return false;
				
				// Move
				var pos0 = ox.arr.remove(p0.c, n);
				if(!p0.c.length) delete p0.c;
				
				if(!p1.c) p1.c = [];
				if(pos !== undefined) ox.arr.insertAt(p1.c, pos, n);
				else p1.c.push(n);
				
				this.register(n, p1, true);
					
				/*var pos = this.remove(nid);
				if(!(p1 = this.ref[targetParentId])) {
					this.append(n, p0.id, pos);
					return false;
				}
				this.append(n, p1.id, pos);*/
				
				this.addHistory('m', [nid, targetParentId], [p0.id, pos0]);
				return true;
			},
			changeRandom: function(count, keys, isLog) {
				if(count) {
					var t0 = ox.now();
					var keys = this.getKeys();
					for(var i = 0; i < count; i++) this.changeRandom(null, keys, isLog);
					
					log('omnia.tools.File.changeRandom: Changed ' + count + ' nodes in ' + (ox.now() - t0) + ' ms, ' + Math.round((ox.now() - t0) / count) + ' ms per change');
					return;
				}
				
				var op = Math.floor(Math.random() * 4);
				var n = this.getRandom(keys);
				
				switch(op) {
					case 0:
						if(isLog) log('%comnia.tools.File.text', 'color:#a0a0a0');
						this.text(n, ox.str.getRandomText());
						break;
				/*	case 1:
						this.prop(n, 'count', Math.round(Math.random() * 10));
						break;*/
					case 1:
						if(isLog) log('%comnia.tools.File.append', 'color:#a0a0a0');
						this.append(ox.str.getRandomText(), n);
						break;
					case 2:
						//if(isLog) log('omnia.tools.File.remove');
						//this.remove(n);
						//break;
					case 3:
						if(isLog) log('%comnia.tools.File.move', 'color:#a0a0a0');
						var t = this.getRandom(keys);
						this.move(n, t);
						break;
				}
			},
			
			// Public helper functions
			
			copy: function(owner) {
				var t0 = ox.now();
				var obj = ox.copy(this.toObject());
				obj.meta.owner = owner || ox.id();
				
				var file = ox.create(omnia.tools.File, {meta: obj.meta, data: obj.data, history: obj.history});
				file.meta.id = this.meta.id;
				
				log('omnia.tools.File.copy: Copied in ' + (ox.now() - t0) + ' ms');
				return file;
			},
			clearData: function() {
				delete this.data;
				
				this.history = [];
				this.ref = {};
				this.refArray = [];
				this.parents = {};
			},
			generate: function(d, level, maxChilds) {
				var isMindmap = false;
				
				if(!d || typeof d == 'number') {
					// Root
					var t0 = ox.now();
					
					maxChilds = d || 10;
					d = isMindmap ? {v: '', c: [{/*left*/}, {/*left*/}]} : {};
					level = 0;
					
					if(isMindmap) {
						d.v = ox.str.getRandomText();
						this.generate(d.c[0], level + 2, maxChilds);
						this.generate(d.c[1], level + 2, maxChilds);
					} else {
						this.generate(d, level + 1, maxChilds);
					}

					// Return
					//this.meta = { created: ox.now() };
					
					log('omnia.tools.File.generate: Generated in ' + (ox.now() - t0) + ' ms, maxChilds = ' + maxChilds);
					
					/*this.data = d;
					this.register(); */
					
					this.setData(d);
					return d;
				} else {
					// Fill data
					d.id = ox.id();
					d.v = ox.str.getRandomText();// + ' (' + level + ')' + ' - ' + (1 - level / 40);
					
					if(Math.random() < (1 - level / 10)) {
						var cs = Math.round(Math.random() * maxChilds);
						if(cs) d.c = [];
						for(var i = 0; i < cs; i++) {
							var c = {};
							this.generate(c, level + 1, maxChilds);
							d.c.push(c);
						}
					}
				}
			},
			getFlatNode: function(node) {
				if(!node) return false;
				
				var n = {};
				ox.each(node, function(id, value) {
					//if(id != 'c' && id != 'time') 
						n[id] = value;	
				});
				if(node.c) {
					n.c = [];
					for(var j = 0; j < node.c.length; j++) n.c.push(node.c[j].id);
				}
				
				//n.cs = ox.str.checksum(JSON.stringify(n));
				return n;
			},
			cleanUp: function() {
				//if(this.meta && this.meta.type == 'omnia-mindmap') {
					//var d = {v: ''};
				//}
			},

			// Private functions
			
			createNode: function(v) {
				var r = {
					id: ox.id(),
				};
				if(v !== undefined) r.v = v.toString();
				
				return r;
			},
			register: function(n, parent, isNotRecursive) {
				if(!n) {
					var t0 = ox.now();
					var checksum = null;
					
					var hasNotChanged = 
						(this.meta.lastsave && this.registerLastSave == this.meta.lastsave) || (
							this.registerChecksum && 
							this.registerChecksum == (
								checksum = ox.str.checksum(JSON.stringify(this.data))
							)
						);
					
					//var checksum = ox.str.checksum(JSON.stringify(this.data));
				
					if(!hasNotChanged) {
						this.registerChecksum = checksum;
						this.registerLastSave = this.meta.lastsave;
	
						this.ref = {};
						this.refArray = [];
						this.parents = {};
						this.attr = {};
						//this.seq = {};
						
						if(this.data) this.register(this.data);
					}
					
					if(!hasNotChanged && !this.isSilent) log('omnia.tools.File.register: Registered ' + this.count() + ' nodes in ' + (ox.now() - t0) + ' ms ' + (hasNotChanged ? '(cached)' : ''));
					return;
				}
				
				// Register data
				//if(isForceNewIds) delete n.id;
				if(!n.id || this.ref[n.id]) {
					n.id = ox.id();
					if(this.ref[n.id]) log('%comnia.tools.File.register: Doubled ID removed', 'color:#a0a0a0');
				}
				if(this.ref[n.id]) ox.error('omnia.tools.File.register: ID is double, id = ' + n.id);
				
				this.ref[n.id] = n;
				this.refArray.push(n);
				if(parent) this.parents[n.id] = parent;
				
				if(n.v && n.v.length > 6) {
					var m = null;
					if(m = n.v.match(/([\*#]attr-)([^\s]*)/i)) {
						var aid;
						if(m[2]) {
							aid = m[2].toLowerCase();
							if(!this.attr[aid]) this.attr[aid] = {c: []};
							this.attr[aid].c.push({node: n});
						}
					}
				}

				//log('omnia.tools.File.register: ' + n.id);
				
				/*var r = {};
				$.each(n, function(id, val) {
					if(id != 'c') r[id] = val;
					else {
						r.c = [];
						val.forEach(function(c) { r.c.push(c.id); });
					}
				});
				this.seq[n.id] = r;*/
				
				if(!isNotRecursive && n.c && n.c instanceof Array) {
					for(var i = 0; i < n.c.length; i++) this.register(n.c[i], n);
				}
			},
			unregister: function(n, isNotRecursive) {
				delete this.ref[n.id];
				delete this.parents[n.id];
				
				//log('omnia.tools.File.unregister: ' + n.id);

				if(!isNotRecursive && n.c && n.c instanceof Array) {
					for(var i = 0; i < n.c.length; i++) this.unregister(n.c[i]);
				}
			},
			getKeys: function() {
				return Object.keys(this.ref);
			},
			
			// Private history functions
			
			addHistory2: function() {
				if(!this.history || !this.history.length) {
					this.history = [
						{
							data: JSON.stringify(this.data),
						}
					];
				} else {
					//var p = ox.str.getPatch(this.history[0].data, this.data);
					//this.history.push({patch: p});
					
					var lastHistory = this.history[this.history.length - 1];
					var dataStr = lastHistory.data; //this.getDataFromHistory();
					delete lastHistory.data;
					var p = {
						patch: ox.str.getPatch(this.data, dataStr), 
						data: JSON.stringify(this.data),
						//changes: this.getObjPatch(this.data, dataStr),
					};

					this.history.push(p);
				}
			},
			getDataFromHistory2: function(idx) {
				if(idx === undefined) idx = this.history.length - 2; //this.history.length - 1;
				if(idx < 0) idx = this.history.length - 1 + idx;
				//return ox.str.applyPatch(this.history[idx].patch, this.history[0].data);
				
				var dataStr = this.history[this.history.length - 1].data;
				
				for(var i = this.history.length - 2; i >= idx; i--) {
					dataStr = !this.history[i].patch ? '' : ox.str.applyPatch(this.history[i].patch, dataStr);
				}
				return dataStr;	
			},
			
			addHistory: function(isNotRegister) { 
				var t0 = ox.now();
				var c = null;
				
				if(!this.history || !this.history.length) {
					this.history = [
						{
							data: this.nodeToFlat(isNotRegister),
						}
					];
				} else {
					if(this.historyCursor < this.history.length - 1) {
						var data = this.getDataFromHistory(this.historyCursor + 1);
						this.history[this.historyCursor].data = data;
						this.history = this.history.splice(0, this.historyCursor + 1);
					}

					var last = this.history[this.history.length - 1];
					var lastData = last.data; 
					delete last.data;
					
					var currentData = this.nodeToFlat(isNotRegister);
					var p = {
						data: currentData,
						changes: c = this.getObjPatch(lastData, currentData),
					};

					this.history.push(p);
				}
				
				this.historyCursor = this.history.length - 1;
				//log('%comnia.tools.File.addHistory: in ' + (ox.now() - t0) + ' ms, ' + (c ? c.length : 0) + ' changes', 'color:#a0a0a0'/*, {changes: c, history: ox.copy(this.history)}*/);
			},
			
			historyCursor: 0,
			undo: function() {
				if(!this.historyCursor) return false;
				log('omnia.tools.File.undo: reset to ' + this.historyCursor + ', set cursor to ' + (this.historyCursor - 1));
				
				//var changes = ox.copy(this.history[this.historyCursor]).changes;
				
				var flat = this.getDataFromHistory(this.historyCursor);
				var node = this.flatToNode(flat);
				this.setData(node);
				
				this.historyCursor--;
				//this.history[this.historyCursor].data = node;

				return true; //changes;
			},
			redo: function() {
				if(this.historyCursor >= this.history.length - 1) return false;
				log('omnia.tools.File.redo: reset to ' + (this.historyCursor + 2) + ', set cursor to ' + (this.historyCursor + 1));

				//var changes = ox.copy(this.history[this.historyCursor]).changes;
				this.historyCursor++;

				var flat = this.getDataFromHistory(this.historyCursor + 1);
				var node = this.flatToNode(flat);
				this.setData(node);
				//this.history[this.historyCursor].data = node;
			
				return true; //changes;
			},
			
			getDataFromHistory: function(idx) {
				var t0 = ox.now();
				
				if(idx === undefined) idx = this.history.length - 1;
				if(idx < 0) idx = this.history.length + idx;
				if(idx <= 0) idx = 1;

				var data = this.history[this.history.length - 1].data;
				if(idx >= this.history.length) return data; // on redo
				
				var n = 0;
				for(var i = this.history.length - 1; i >= idx; i--) {
					//log('i ' + i);
					data = this.applyObjPatch(this.history[i].changes, data);
					n++;
				}

				log('omnia.tools.File.getDataFromHistory: idx = ' + idx + ', in ' + (ox.now() - t0) + ' ms, ' + Math.round((ox.now() - t0) / n) + ' ms per history item');
				//log({data, history: this.history, historyCursor: this.historyCursor})
				return data;
			},
			getObjPatch: function(file0, file1) {
				var t0 = ox.now();
				var changes = [];
				
				var file0Ref = {};
				ox.each(file0, function(id, node0) {
					file0Ref[node0.id] = node0;
				});
	
				var file1Ref = {};
				ox.each(file1, function(id, node1) {
					file1Ref[node1.id] = node1;
					if(!file0Ref[node1.id]) changes.push({node1: node1});
				});
		
				ox.each(file0, function(id, node0) {
					var node1 = file1Ref[node0.id];
					if(!node1) {
						changes.push({node0: node0});
					} else if(node0.v && node1.v && node0.v.length != node1.v.length) {
						changes.push({node0: node0, node1: node1});
					} else if(node0.c && node1.c && node0.c.length != node1.c.length) {
						changes.push({node0: node0, node1: node1});
					} else if(node0.cs && node1.cs) {
						if(node0.cs != node1.cs) changes.push({node0: node0, node1: node1});
					} else {
						if(JSON.stringify(node0.c) != JSON.stringify(node1.c)) {
							changes.push({node0: node0, node1: node1});
						} else if(node0.v != node1.v) {
							changes.push({node0: node0, node1: node1});	
						}
					} 
				});
				
				//log('%comnia.tools.File.getObjPatch: in ' + (ox.now() - t0) + ' ms', 'color:#a0a0a0');
				//log({file0Ref, file1Ref});
				return changes;
			},
			applyObjPatch: function(changes, file1) {
				if(!changes || !changes.length || !file1) return;

				var t0 = ox.now();
				
				file1 = ox.copy(file1);
				var file1Ref = {};
				ox.each(file1, function(id, node1) {
					file1Ref[node1.id] = node1;
				});
				
				var t1 = ox.now();

				for(var i = changes.length - 1; i >= 0; i--) {
					var c = changes[i];
					if(!c.node0) {
						//log('added');
						delete file1Ref[c.node1.id]; // Was added
					} else if(!c.node1) {
						//log('removed');
						file1Ref[c.node0.id] = c.node0; // Was deleted
					} else {
						if(JSON.stringify(c.node0.c) != JSON.stringify(c.node1.c)) {
							//log('childs');
							file1Ref[c.node1.id].c = c.node0.c; // Childs have changed
						}
						if(c.node0.v != c.node1.v) {
							//log('value ' + c.node1.v + ' -> ' + c.node0.v);
							file1Ref[c.node1.id].v = c.node0.v; // Value changes
						}
					}
				}
				
				var t2 = ox.now();
				
				var flat = [];
				ox.each(file1Ref, function(id, node) {
					flat.push(node);
				});
				
				var t3 = ox.now();
				
				log('%comnia.tools.File.applyObjPatch: in ' + (ox.now() - t0) + ' ms' + ', t0-t1: ' + (t1-t0) + ', t1-t2: ' + (t2-t1) + ', t2-t3: ' + (t3-t2), 'color:#a0a0a0');
				return flat;
			},
		},
		AppSpace: {
			defaults: {
				base: {
					meta: {
						//userid: null,
						type: 'omnia-appspace',
						asid: null,

						env: {
							created: null,
							lastsave: null,
						},
						
						usecases: {},
						settings: {},
						sessions: [],
					},
					data: {c: []},
				}
			},
			
			clsId: 'omnia.tools.AppSpace',
			id: 'omnia',
			storagelimit: 2000000,
			file: null,
			isLocalStorage: false,
			saveId: null,
			file: null,
			args: null,
			
			init: function(args) {
				log('%c' + this.clsId + '.init: start after ' + (ox.now() - omnia.tools.console.start) + ' ms', 'color:green');

				// Init
				var platform = omnia.tools.browser.platform;
				if(ox.pf.isDesktop) this.storagelimit = 5000000;
				if(args.id) this.id = args.id;
				
				// Load
				this.args = args;
				//this.load(args);
			},
			load: async function(args) {
				var me = this;
				var t0 = ox.t0(this.clsId + '.load');
				
				// Load from localStorage
				if(me.isLocalStorage = this.args.isLocalStorage) me.file = await me.loadStorage(args);
				
				if(!me.file) {
					log(this.clsId + '.init: New space id = ' + me.id);
					me.create(args);
				} else {
					log(this.clsId + '.init: Space existing id = ' + me.id);
					if(!me.file.data) me.file.data = {};
					if(!me.file.data.c) me.file.data.c = [];
					//if(me.file.meta && me.file.meta.sessions) delete me.file.meta.sessions;
				}
				if(ox.pf.envId) ox.pf.envId += '_' + me.getId();
					
				// Save data initially
				if((!me.file.data || $.isEmptyObject(me.file.data)) && args.data) {
					log(this.clsId + '.init: Add data');
					me.file.data = args.data;
					me.save();
				}

				t0.bp('done');
				//log('%c' + this.clsId + '.load: done, ' + (ox.now() - omnia.tools.console.start) + ' ms', 'color:green');
			},
			
			// Public Functions - Service
			
			getDataFile: function() {
				return this.file;
			},
			getData: function() {
				return this.file.data;
			},
			
			// Public Functions - Use cases
			
			getFiles: function() {
				return this.file && this.file.data && this.file.data.c ? this.file.data.c : [];
			},
			getFilesDataAsMap: function() {
				var files = app.space.getFiles();
				var maps = files.filter((file) => file.meta && file.meta.type && (file.meta.type == 'omnia-mindmap' || file.meta.type == 'omnia') && file.data && typeof file.data == 'object');
				maps = maps.map((map) => { return ox.copy(map.data); });
				
				log('omnia.tools.AppSpace.getFilesDataAsMap: ' + files.length + ' file(s), ' + maps.length + ' map(s) found');
				return ox.File.create({data: {c: maps}});
			},
			getFile: function(id) {
				if(!this.file || !this.file.data || !this.file.data.c || !this.file.data.c.length) return false;
				var found = this.file.data.c.filter(function(file) { return file && file.meta && file.meta.id && file.meta.id == id; });
				return found.length ? found[0] : false;
			},
			getFileByLink: function(link) {
				if(!this.file || !this.file.data || !this.file.data.c || !this.file.data.c.length) return false;
				var found = this.file.data.c.filter(function(file) { return file && file.meta && file.meta.id && file.meta.link && file.meta.link.service == link.service && file.meta.link.url == link.url; });
				return found.length ? found[0] : false;
			},
			getId: function() {
				return this.id + '-' + this.file.meta.asid;
			},
			
			saveFile: function(newFile, isOverwrite) {
				try {
					
					if(!newFile || !newFile.meta || !newFile.meta.id) return false;
					var file = this.getFile(newFile.meta.id);

					if(!file && newFile.meta.link) {
						file = this.getFileByLink(newFile.meta.link);
					}
				
					if(isOverwrite && file) {
						var deleteSuccess = this.deleteFile(file.meta.id);
						if(!deleteSuccess) {
							ox.error('omnia.tools.AppSpace.saveFile: id = ' + file.meta.id + ' could not be overwritten');
							return false;
						}
						file = false;
					}
					if(!file) {
						log('omnia.tools.AppSpace.saveFile: id = ' + newFile.meta.id + ', replaced');
						this.file.data.c.push(newFile);
						this.save();
						
						return true;
					} else if((file.meta && file.meta === newFile.meta) && ((!file.data || file.data && file.data === newFile.data))) {
						log('omnia.tools.AppSpace.saveFile: id = ' + newFile.meta.id + ', linked');
						if(!file.data) file.data = newFile.data;
						//log(ox.copy(file));
						//log(ox.copy(newFile));
						//log(file.meta === newFile.meta + ' ' + file.data)
						this.save();
						
						return true;
					} else {
						ox.error('omnia.tools.AppSpace.saveFile: id = ' + newFile.meta.id + ' already exists');
						return -2;
					}
				}
				catch(e) {
					ox.error('omnia.tools.AppSpace.saveFile: id = ' + newFile.meta.id + ' failed');
					log(e);
					return -1;
				}
			},
			deleteFile: function(id) {
				try {
					if(!this.file || !this.file.data || !this.file.data.c || !this.file.data.c.length) return false;
	
					var n = this.file.data.c.filter(function(file) { return file && file.meta && file.meta.id && file.meta.id != id });
					if(n) {
						log('omnia.tools.AppSpace.deleteFile: id = ' + id);
						this.file.data.c = n;
						this.save();
						
						return true;
					}
					return false;
				}
				catch(e) {
					ox.error('omnia.tools.AppSpace.deleteFile: id = ' + id + ' failed');
					log(e);
					return false;
				}
			},
			
			clearFileData: function(id) {
				log('omnia.tools.AppSpace.clearFileData: id = ' + id);

				var file = this.getFile(id);
				if(file && file.data) {
					delete file.data;
					this.save();
					return true;
				} 
				return false;
			},
			clearFilesData: function() {
				log('omnia.tools.AppSpace.clearFilesData');
				
				var files = this.getFiles();
				if(files.length) {
					$.each(files, function(idx, file) {
						if(file && file.data) delete file.data;
					});
					this.save();
				}
			},
			clearFilesTips: function() {
				log('omnia.tools.AppSpace.clearFilesTips');
				
				var files = this.getFiles();
				if(files.length) {
					$.each(files, function(idx, file) {
						if(file && file.meta && file.meta.tips) delete file.meta.tips;
					});
					this.save();
				}
			},
			clear: function(args) {
				log('omnia.tools.AppSpace.clear');

				if(this.file) delete this.file; 
				this.create(args);
			},
			kill: function() {
				this.clearStorage();
				delete app.space;
				delete this;
			},

			save: function(args) {
				if(this.isInitial) return;
				var me = this;
				if(!this.file || !this.file.meta || this.file.meta.compressed) return;

				//log('omnia.tools.AppSpace.save');
				
				this.saveId = omnia.tools.getUniqueId();
				var mySaveId = this.saveId;
				
				ox.el.onRefresh(function() {
					if(mySaveId != me.saveId) {
						//log('omnia.tools.AppSpace.save: There is a newer handler');
						return;
					}
					//log('omnia.tools.AppSpace.save: Execute');
					me.saveId = null;
	
					// Prepare data
					var isNew = !me.file.meta.env.lastsave;
					me.file.meta.env.lastsave = omnia.tools.now();
					
					// Save
					if(me.isLocalStorage) me.saveStorage(args);
				});
			},
			track: function(args) {
				log('omnia.tools.AppSpace.track: ' + args.ucid + '-' + args.uctp + (args.value ? '-' + args.value : ''));
				return;
				
				var now = omnia.tools.now();
				var sessions = this.file.meta.sessions;
				var usecases = this.file.meta.usecases;
				
				// New session
				if(!sessions.length || (now - sessions[sessions.length - 1].lastsave > omnia.tools.date.hour * 2)) {
					sessions = this.file.meta.sessions = sessions.filter(function(item) { return !item.sent; });
					sessions.push(this.createSession());
				}
				
				if(typeof args == 'string') args = {ucid: args};
				
				var uc = [args.ucid];
				if(!args.uctp) args.uctp = '';
				if(!args.value) args.value = '';

				usecases[args.ucid] = usecases[args.ucid] ? usecases[args.ucid] + 1 : 1;
				//sessions[sessions.length - 1].usecases += (sessions[sessions.length - 1].usecases.length ? '_' : '') + (args.ucid + (!args.uctp && !args.value ? '' : '-' + args.uctp) + (args.value ? '-' + args.value : ''));
				sessions[sessions.length - 1].lastsave = now;

				if(!args.isNoSave) this.save();
			},
			
			setSetting: function(scope, id, value) {
				if(!this.file || !this.file.meta) return;
				if(!this.file.meta.settings) this.file.meta.settings = {};
				if(!this.file.meta.settings[scope]) this.file.meta.settings[scope] = {};
				
				if(value && value != '') this.file.meta.settings[scope][id] = value;
				else this.removeSetting(scope, id); //delete this.file.meta.settings[scope][id];
			},
			getSetting: function(scope, id) {
				//log({id: 'omnia.tools.AppSpace.getSetting', file: this.file});
				if(!this.file || !this.file.meta || !this.file.meta.settings || !this.file.meta.settings[scope]) return null;
				if(id === true) return this.file.meta.settings[scope];
				return this.file.meta.settings[scope][id];
			},
			removeSetting: function(scope, id) {
				if(!this.file || !this.file.meta || !this.file.meta.settings || !this.file.meta.settings[scope]) return;

				delete this.file.meta.settings[scope][id];
				if($.isEmptyObject(this.file.meta.settings[scope])) delete this.file.meta.settings[scope];
				if($.isEmptyObject(this.file.meta.settings)) delete this.file.meta.settings;
			},
			clearSettings: function() {
				delete this.file.meta.settings;
			}, 
			
			// Public events
			
			onInitEnd: function() {
				var me = this;
				//me.isInitial = false;
				
				setTimeout(function() { me.save(); }, 1);
			},

			// Private functions
			
			create: function(args) {
				log('omnia.tools.AppSpace.create');
				var f = this.file = omnia.tools.jsonCopy(this.defaults.base);
				
				f.meta.asid = 'as-' + omnia.tools.getUniqueId();
				f.meta.env.created = omnia.tools.now();
				if(args && args.data) f.data = args.data;

				this.save();
			},
			createSession: function() {
				var now = omnia.tools.now();
				return {
					appversion: app && app.version ? app.version : null,
					omniaversion: omnia.version,
					//resolution: window.screen.width + 'x' + window.screen.height,
					useragent: navigator.userAgent,
					platform: omnia.tools.browser.getEnironment2(),
					query: window.location.search,

					created: now,
					lastsave: now,
					usecases: '',
				};
			},
			
			loadStorage: async function(args) {
				try {
					if(!localStorage) { ox.error(this.clsId + '.loadStorage: No localStorage available'); return false; }
				
					var dataStr = localStorage[this.id];
					if(!dataStr || dataStr == 'null') { ox.error(this.clsId + '.loadStorage: No localStorage data found'); return false; }
			
					var json = {};
					json = JSON.parse(dataStr);
					if(!json || !json.meta || !json.data) { ox.error(this.clsId + '.loadStorage: localStorage data broken, wrong content'); return false; }

					if(json.meta.compressed) {
						var file = ox.File.create(json);
						await file.decompress();
						json = file.toObject();
						log(this.clsId + '.loadStorage: Decompressed');
					}

					log(this.clsId + '.loadStorage: Loaded id = ' + this.id);
					return json;
				}
				catch(e) {
					ox.error(this.clsId + '.loadStorage: Error', {e});
					return false;
				}
			},
			saveStorage: function(args) {
				if(this.isInitial) return;
				
				var t0 = ox.now();
				
				var me = this;
				var ev = app.events; 
				if(!args) args = {};
				if(!args.events) args.events = omnia.tools.create(omnia.tools.Events, {});

				if(!localStorage) {
					ox.error(this.clsId + '.saveStorage: No localStorage available');
					args.events.add(ev.noLocalStorage);
					return false;
				}

				/*var size = unescape(encodeURIComponent(JSON.stringify(localStorage))).length;
				
				if(size > this.storagelimit) {
					omnia.tools.error('omnia.tools.AppSpace.saveStorage: LocalStorage (' + omnia.tools.string.toSize(this.storagelimit) + ') limit exceeded');
					omnia.tools.console.logStorageSize();
					return false;
				}*/

				try {
					//var dataStr = JSON.stringify(this.file);
					//localStorage[this.id] = dataStr;

					var save = async function() {
						var file = ox.File.create(me.file);
						var compressed = await file.compress();
						localStorage[me.id] = JSON.stringify(compressed);
						
						//log({id: 'saveStorage', compressed});

						log('%comnia.tools.AppSpace.saveStorage: Success (' + (ox.now() - t0) + ' ms)', 'color:#FF7F50');
						//log('omnia.tools.AppSpace.saveStorage: Success, size total = ' + size + ' Bytes');
						
						if(args.onDone) args.onDone(true);
						return true;
					}
					save();
				}
				catch(e) {
					ox.error('omnia.tools.AppSpace.saveStorage: Failed', {e});
					if(args.onDone) args.onDone(false);
 					return false;
				}
				
			},
			clearStorage: function(id) {
				log('omnia.tools.AppSpace.clearStorage');
				try {
					delete localStorage[id || this.id];
					return true;
				}
				catch(e) {
					omnia.tools.error('omnia.tools.AppSpace.clearStorage: Failed');
					log(e);
					return false;
				}
			},
			
			sendSpace: function() {
				return;
				
				//if(this.isInitial) return;

				log('omnia.tools.AppSpace.sendSpace');
				var meta = omnia.tools.jsonCopy(this.file.meta);
				
				meta.env.appid = app && app.id ? app.id : null,
				meta.env.lang = navigator.language || navigator.userLanguage;
				delete meta.sessions;
				
				//log(meta);
				//log(this.file);
				
				omnia.tools.net.get({
					//server: this.server,
					param: {
						cmd: 'trackspace',
						data: meta,
					},
					method: 'POST',
					noLog: true,
					onResponse: function(args) {
						//log(args);
					},				
				});
			},
			sendSessions: function() {
				return;
				
				//if(this.isInitial) return;

				//log('omnia.tools.AppSpace.sendSessions');
				var sessions = this.file.meta.sessions;
				var asid = this.file.meta.asid;
				var me = this;
				
				$.each(sessions, function(i, session) {
					if(session.lastsend == session.lastsave) return;
					
					session.asid = asid;
					session.lastsend = session.lastsave;
					delete session.sent;
					
					log('omnia.tools.AppSpace.sendSessions: Session ' + omnia.tools.date.dateTimeStr(session.created) + ' to ' + omnia.tools.date.dateTimeStr(session.lastsave));
					
					//var dataStr = JSON.stringify(session);
					//log(session);
					//log('# session: ' + dataStr.length + ' Bytes');
					//log(session.usecases);

					omnia.tools.net.get({
						//server: me.server,
						param: {
							cmd: 'tracksession',
							data: session,
						},
						method: 'POST',
						noLog: true,
						onResponse: function(args) {
							//log(args);
							if(!args.response || !args.response.success || !args.response.dataStr) return;
							
							try {
								var json = JSON.parse(args.response.dataStr);
								if(!json || !json.status || json.status != 'ok') return;
							} catch(e) {
								return;
							}
							
							session.sent = true;
						},				
					});
				});
			},
		},
		History: {
			stack: [],
			savepoint: 0,
			pointer: null,
			onChange: null,
			
			init: function(args) {
				this.clear();
				this.onChange = args.onChange;
			},
			clear: function() {
				this.stack = [];
				this.savepoint = 0;
				this.pointer = -1;
			},
			finish: function() {
				this.savepoint = this.stack.length;
			},
			isFinish: function() {
				return this.savepoint < this.stack.length;
			},
			getStack: function(isAll) {
				if(isAll) return this.stack;
				if(this.savepoint) return this.stack.slice(this.savepoint, this.pointer + 1);
				return this.stack.slice(0, this.pointer + 1);
			},
			add: function(task) {
				if(!task) return;
				
				this.stack = this.stack.slice(0, this.pointer + 1);
				this.stack.push(task);

				this.pointer = this.stack.length - 1;
				
				log('omnia.tools.Undo.add: idx = ' + (this.pointer + 1) + ' / ' + this.stack.length + ', savepoint = ' + this.savepoint);
				if(this.onChange) this.onChange(this.getStack());
			},
			undo: function() {
				if(this.pointer < 0) return false;
				log('omnia.tools.Undo.undo');
				
				//var task = this.stack[this.stack.length - 1];
				var task = this.stack[this.pointer];
				if(!task || !task.undo) return;

				task.undo(task);
				
				this.pointer--;

				log('omnia.tools.Undo.undo: idx = ' + (this.pointer + 1) + ' / ' + this.stack.length);
				if(this.onChange) this.onChange(this.getStack());
			},
			redo: function() {
				if(this.pointer >= this.stack.length - 1) return;

				this.pointer++;

				var task = this.stack[this.pointer];
				if(!task || !task.redo) return;
				
				task.redo(task);
				
				log('omnia.tools.Undo.redo: idx = ' + (this.pointer + 1) + ' / ' + this.stack.length);
				if(this.onChange) this.onChange(this.getStack());
			},
		}, //
		Time: {
			
			// Variables
			
			t0: null,
			t1: null,
			isNoYear: false,
			isRecurring: false,
			count: null,
			tzone0: null,
			tzone1: null,
			
			// Constants
			
			clsId: 'omnia.tools.Time',
			YEAR: 365 * 24 * 60 * 60 * 1000,
			WEEK: 7 * 24 * 60 * 60 * 1000,
			DAY: 24 * 60 * 60 * 1000,
			HOUR: 60 * 60 * 1000,
			MIN: 60 * 1000,
			SEC: 1000,
		
			// Constructors
			
			init: function(args) {
				this.reset(this.parse(args));
			},
			
			// Public functions
			
			test: function() {
				// Init
				
				var now = new Date();
				oxt = ox.T;
				var d0 = new Date(2000, 10, 23);
				var d1 = new Date(2001, 05, 1, 11, 34, 10);
				var ts0 = d0.getTime();
				var t0 = ox.t0();
				
				// Create and reset
				oxt.create().log('Create', now);
				oxt.now().log('Now', now);
				oxt.create(ts0).now().log('Now reset', now);
				
				oxt.today().log('Today', new Date(now.getFullYear(), now.getMonth(), now.getDate()));
				oxt.create(d1).today().log('Today reset', new Date(2001, 05, 1, 0, 0, 0));
				oxt.yesterday().log('Yesterday', new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1, 0, 0, 0));
				oxt.create(d1).yesterday().log('Yesterday reset', new Date(2001, 04, 31));
				oxt.tomorrow().log('Tomorrow', new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0, 0));
				oxt.create(d1).tomorrow().log('Tomorrow reset', new Date(2001, 05, 02));
				oxt.year(2000).log('Year', new Date(2000, 0, 1));
				oxt.create(d1).year(2000).log('Year reset', new Date(2000, 0, 1));
				oxt.monday().log('Monday');
				oxt.create(d1).monday().log('Monday reset', new Date(2001, 4, 28));
				oxt.week(42).log('Week: 42');
				oxt.week(42, 2021).log('Week: 42/2021');
				oxt.create(d0).week(42).log('Week reset: Week 42/2000');
				
				oxt.create(ts0).log('Timestamp', new Date(2000, 10, 23));
				oxt.create(2000, 10, 23).log('Arguments', new Date(2000, 10, 23)); 
				oxt.create('2000-11-23_10:20:01').log('String', new Date(2000, 10, 23, 10, 20, 1));
				oxt.create(d0).log('Date', new Date(2000, 10, 23)); 
				oxt.create({t0: d0}).log('Object Date', new Date(2000, 10, 23)); 
				oxt.create({t0: ts0}).log('Object Timestamp', new Date(2000, 10, 23)); 
				oxt.create({t0: d0, t1: d1}).log('Span', {t0: new Date(2000, 10, 23), t1: new Date(2001, 05, 1, 11, 34, 10)});
				oxt.create({t0: d0, isRecurring: true, isNoYear: true}).log('Recurring');
				oxt.create({week: 42}).log('Arguments Week: Week 42');
				oxt.create(oxt.create(d0)).log('Time', d0);
				
				oxt.now().move(oxt.DAY).log('Move: Today + 1 day');
				
				// String parse
				oxt.create('10-04').log('s1', {t0: new Date('1970', 9, 4), isNoYear: true});
				oxt.create('19-10-04').log('s2', new Date(2019, 9, 4));
				oxt.create('2019-10-04').log('s3', new Date(2019, 9, 4));
				oxt.create('19-10-04_12:34').log('s4', new Date(2019, 9, 4, 12, 34));
				oxt.create('19-10-04_12:34/13:10').log('s5', {t0: new Date(2019, 9, 4, 12, 34), t1: new Date(2019, 9, 4, 13, 10)});
				oxt.create('19-10-04_12:34/10:10').log('s6', {t0: new Date(2019, 9, 4, 10, 10), t1: new Date(2019, 9, 4, 12, 34)});
				oxt.create('19-10-04_12:34/10-06_14:10').log('s7', {t0: new Date(2019, 9, 4, 12, 34), t1: new Date(2019, 9, 6, 14, 10)});
				oxt.create('19-10-04_12:34/19-10-06_14:10').log('s8', {t0: new Date(2019, 9, 4, 12, 34), t1: new Date(2019, 9, 6, 14, 10)});
				oxt.create('19-10-04_12:34/20-10-07_15:10').log('s9', {t0: new Date(2019, 9, 4, 12, 34), t1: new Date(2020, 9, 7, 15, 10)});
				oxt.create('19-10-04/01-05').log('s10', {t0: new Date(2019, 9, 4), t1: new Date(2020, 0, 6)});
				oxt.create('19-10-04_12:34_Europe,Berlin/20-10-07_15:10_Europe,Berlin').log('s11', {t0: new Date(2019, 9, 4, 12, 34), t1: new Date(2020, 9, 7, 15, 10)});
				oxt.create('19-w4').log('s12: Week 04/2019', {t0: new Date(2019, 0, 28, 0, 0, 0), t1: new Date(2019, 1, 4)});
				oxt.create('19-w24').log('s13: Week 24/2019', {t0 : new Date(2019, 5, 17, 0, 0, 0), t1: new Date(2019, 5, 24)});
				oxt.create('19-w24-3').log('s14: Week 24 Wed/2019', new Date(2019, 5, 19, 0, 0, 0));
				oxt.create('19-w24/w26').log('s15: Week 24-26/2019', {t0: new Date(2019, 5, 17, 0, 0, 0), t1: new Date(2019, 6, 8)});
				oxt.create('19-w24-2/w26-3').log('s16: Week 24 Tue-Week 26 Wed/2019', {t0: new Date(2019, 5, 18, 0, 0, 0), t1: new Date(2019, 6, 3, 24)});
				oxt.create('21-12-13/22-01-07').log('s17', {t0: new Date(2021, 11, 13), t1: new Date(2022, 0, 7)});
				oxt.create('19-10-04_00:00_Europe,Berlin').log('s18', new Date(2019, 9, 4));
				oxt.create('19-10-04_10:00-0500').log('s19:', new Date(2019, 9, 4, 17, 0, 0)); 
				oxt.create('19-10-04_10:00:00.000_America,New.York').log('s20:', new Date(2019, 9, 4, 16, 0, 0)); 
				oxt.create('22-10-06_09:35_Europe,Berlin/22-10-06_12:25_America,New.York').log('s21:', new Date(2019, 9, 4, 16, 0, 0)); 

				oxt.week(43, 2021).log('DST Summer to Winter', {t0: new Date(2021, 9, 25, 0, 0, 0), t1: new Date(2021, 10, 1)});
				oxt.create('2021-w43').log('DST Summer to Winter - String', {t0: new Date(2021, 9, 25, 0, 0, 0), t1: new Date(2021, 10, 1)});
				
				[
					{s: 'ms: 100ms', t: '21-01-01/00:00:00.100'},
					{s: 'secs: 10s 300ms', t: '21-01-01/00:00:10.300'},
					{s: 'secs flat: 10s', t: '21-01-01/00:00:10'},
					{s: 'mins: 9min 9s', t: '21-01-01/00:09:09'},
					{s: 'mins flat: 50min', t: '21-01-01/00:50:00'},
					{s: 'hours: 10h 10min 10s', t: '21-01-01/10:10:10'},
					{s: 'hours flat: 10h', t: '21-01-01/10:00:00'},
					{s: 'day: 1d 10h 10min 10s', t: '21-01-01/01-02_10:10:10'},
					{s: 'day flat: 1d', t: '21-01-01/01-01_23:59:59.999'},
					{s: 'days: 10d 10h 10min 10s', t: '21-01-01/01-10_10:10:10'},
					{s: 'days flat: 10d', t: '21-01-01/01-10'},
					{s: 'month', t: '21-01-01/02-01_10:10:10'},
					{s: 'year', t: '21-01-01/22-02-01_10:10:10'},
					{s: 'years', t: '21-01-01/42-02-01_10:10:10'},
				].forEach(function(item) { var time = oxt.create(item.t); log('Duration ' + item.s + ': ' + time.getDurationString() + ' | ' + time.getDurationFullString()); });

var d20 = new Date(2022, 9, 30, 3, 0, 0);
var d20UTC = new Date();
d20UTC.setTime(d20.getTime() - d20.getTimezoneOffset() * ox.T.MIN);

log({d20, str: d20.toString(), iso: d20.toISOString(), utc: d20.toUTCString(), 
	offset: d20.getTimezoneOffset(),
	date: d20.toLocaleDateString('de-DE', {year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', timeZone: 'America/New_York'}),
	
	s: d20UTC.toISOString(),
	NewYork: this.getTimezoneOffset(d20, 'America/New_York'),
	Berlin: this.getTimezoneOffset(d20, 'Europe/Berlin'),
	Calcutta: this.getTimezoneOffset(d20, 'Asia/Calcutta'),
});
				t0.bp('Test done');
			},
			
			// Create & reset
 
			now: function() {
				if(!this.t0) return ox.create(ox.T, new Date());
				this.t0 = new Date();
				return this;
			},
			create: function(year, month, day, hours, min, sec, ms) { 
				if(!arguments.length) return ox.T.now();
				var args = arguments.length == 1 ? 
					year : 
					(
						arguments.length == 2 ? 
							{t0: year, t1: month} : 
							new Date(year, month || 0, day || 1, hours || 0, min || 0, sec || 0, ms || 0)
					);
				return ox.create(ox.T, args);
			},
			reset: function(args) {
				if(args.week) return this.week(args.week);
				
				this.t0 = args.t0;
				this.t1 = args.t1 && args.t1.clsId ? args.t1.t0 : args.t1;
				this.isNoYear = args.isNoYear;
				this.isRecurring = args.isRecurring;
				this.count = args.count;
				if(args.tzone0) this.tzone0 = args.tzone0;
				if(args.tzone1) this.tzone1 = args.tzone1;
				
				return this;
			},
			move: function(ms, days) {
				if(days !== undefined) {
					this.t0.setDate(this.t0.getDate() + days);
					if(this.t1) this.t1.setDate(this.t1.getDate() + days);
				} else {
					this.t0.setTime(this.t0.getTime() + ms);
					if(this.t1) this.t1.setTime(this.t1.getTime() + ms);
				}
				return this;
			},
			setDuration: function(ms, days) {
				if(!this.t1) {
					this.t1 = new Date();
					this.t1.setTime(this.t0.getTime());
				}
				if(days !== undefined) {
					this.t1.setDate(this.t0.getDate() + days);
				} else {
					this.t1 = new Date();
					this.t1.setTime(this.t0.getTime() + ms);
				}
			},
			copy: function(obj) {
				if(!obj) obj = this;
				
				if(!obj.t1) return ox.T.create({t0: obj.t0.getTime(), isRecurring: obj.isRecurring});
				return ox.T.create({t0: obj.t0.getTime(), t1: obj.t1.getTime(), isRecurring: obj.isRecurring});
			},
			
			today: function(offset, isRound) {
				var d = this.t0 || new Date();
				
				if(isRound && d.getHours() > 12) d.setDate(d.getDate() + 1);
				
				d = new Date(d.getFullYear(), d.getMonth(), d.getDate());
				if(offset) d.setDate(d.getDate() + offset);
				
				if(!this.t0) return ox.create(ox.T, d);
				this.t0 = d;
				return this;
			}, // (Move) x
			tomorrow: function() {
				return this.today(1);
			}, // (Move) x
			yesterday: function() {
				return this.today(-1);
			}, // (Move) x
			monday: function(date) {
				var time = ox.T.create(date || this.t0 || new Date());
				time.today();

				var day = time.t0.getDay();
				//time.move((-1 * day + (day == 0 ? -6 : 1)) * ox.T.DAY);
				time.move(null, -1 * day + (day == 0 ? -6 : 1));
				
				if(!this.t0) return time;
				this.t0 = time.t0;
				return this;
			}, // Move x
			firstOfMonth: function(date) {
				var time = ox.T.create(date || this.t0 || new Date());
				time.today();
				time.move(null, -1 * (time.t0.getDate() - 1));

				if(!this.t0) return time;
				this.t0 = time.t0;
				return this;
			},
		
			week: function(weekNo, year) { 
				var time = this.year(year);
				time.monday();
				//time.move(ox.T.WEEK * weekNo);
				time.move(null, 7 * weekNo);
				time.t0.setHours(0);
				time.t0.setMinutes(0);
				time.t0.setSeconds(0);
				//time.t1 = new Date(time.t0.getTime() + ox.T.WEEK - 1);
				time.t1 = ox.T.create(time.t0.getTime()).move(null, 7).t0;
				
				if(!this.t0) return time;
				this.t0 = time.t0;
				this.t1 = time.t1;
				return this;
			}, // Move x
			year: function(year) {
				var d = this.t0 ? new Date(this.t0.getFullYear(), 0, 1) : new Date((new Date()).getFullYear(), 0, 1);
				if(year) d.setYear(year);
				
				if(!this.t0) return ox.create(ox.T, d);
				this.t0 = d;
				return this;
			},
			
			trim: function(obj, isToDay) {
				obj = this.parse(obj);
				obj = this.copy(obj);
				
				var t0 = new Date();
				t0.setTime(this.t0.getTime());
				var t1 = this.t1 ? new Date() : null;
				if(t1) t1.setTime(this.t1.getTime());
				
				if(this.isRecurring) {
					t0.setYear(obj.t0.getFullYear());
					if(t1 && obj.t1) t1.setYear(obj.t1.getFullYear());
				}
				if(obj.isRecurring) {
					obj.t0.setYear(t0.getFullYear());
					if(t1 && obj.t1) obj.t1.setYear(t1.getFullYear());
				}
				
				var d = ox.T.create({
					t0: t0.getTime() > obj.t0.getTime() ? t0.getTime() : obj.t0.getTime(),
					t1: t1 && obj.t1 ? (t1.getTime() < obj.t1.getTime() ? t1.getTime() : obj.t1.getTime()) : null,
				});
				if(isToDay && d.getDays() < 1) {
					d.today();
					d.setDuration(ox.T.DAY);
				}
				
				return d;
			},
		
			// Convert
			
			getDetails: function(ref) {
				var now = new Date();
				var isRef = ref !== undefined;
				if(!ref) ref = now;
				
				var duration = this.getDuration();
				var r = {
					t0: this.t0,
					t0ISOString: this.t0 ? this.t0.toString() : null,
					t0Timestamp: this.t0 ? this.t0.getTime() : null,
					t1: this.t1,
					t1ISOString: this.t1 ? this.t1.toString() : null,
					t1TimeStamp: this.t1 ? this.t1.getTime() : null,
					isNoYear: this.isNoYear,
					isRecurring: this.isRecurring,
					count: this.count,
					tzone0: this.tzone0,
					tzone1: this.tzone1,
					
					timeTag: this.getTimeTag(isRef ? ref : null),
					timeTagShort: this.getTimeTag(isRef ? ref : null, 'short'),
					timeTagFull: this.getTimeTag(isRef ? ref : null, 'weekdays'),
					
					hoursTag: this.getTimeTag(isRef ? ref : null, null, true),
					
					week0: this.getWeek(),
					week1: this.t1 ? this.getWeek(this.t1) : null,
					
					duration: duration,
					durationString: this.getDurationString(duration),
					durationFullString: this.getDurationFullString(duration),
					isOn: this.t1 && ref.getTime() >= this.t0 && ref.getTime() <= this.t1,
					
					vectorString: this.getVectorString(ref),
					vectorRef: ref,
					now,
				};
				
				return r;
			},
			getLength: function(isFullDays) {
				if(!this.t1) return 0;
				if(isFullDays) {
					var d = this.t1.getTime() - this.t0.getTime();
					return Math.round(d / ox.T.DAY) * ox.T.DAY;
				}
				
				return this.t1.getTime() - this.t0.getTime();
			},
			getDuration: function(t0, t1, isTimestamp) {
				if(!t0) t1 = this.t1;
				if(!t0) t0 = this.t0;
				if(t1 && t1.clsId) t1 = t1.t0;
				if(isTimestamp) return t1.getTime() - t0.getTime(); 
				
				var diff = !t1 ? 0 : Math.abs(t1.getTime() - t0.getTime());
				var time = diff;
				
				var year0 = !t0 ? null : t0.getFullYear() + this.getDayInYear(t0).p;
				var year1 = !t0 || !t1 ? year0 : t1.getFullYear() + this.getDayInYear(t1).p;
				
				var days = (diff - diff % ox.T.DAY);
				diff -= days;
				days /= ox.T.DAY;
				var hours = (diff - diff % ox.T.HOUR);
				diff -= hours;
				hours /= ox.T.HOUR;
				var mins = (diff - diff % ox.T.MIN);
				diff -= mins;
				mins /= ox.T.MIN;
				var secs = (diff - diff % ox.T.SEC);
				diff -= secs;
				secs /= ox.T.SEC;
				var ms = diff;
			
				return {
					time,
					years: Math.abs(year1 - year0),
					daysFloat: time / ox.T.DAY,
					days,
					hours,
					mins,
					secs,
					ms,
				};
				
			},
			getDays: function() {
				if(!this.t1) return 0;
				return (this.t1.getTime() - this.t0.getTime()) / ox.T.DAY;
			},
			getDate: function() {
				return this.t0;
			},
			getWeek: function(date) {
				if(!date) date = this.t0;
				if(!date) return null;
				
				if(typeof date == 'number') {
					var dateObj = new Date();
					dateObj.setTime(date);
					date = dateObj;
				}				
				
				var target = new Date(date.valueOf());
				var dayNr = (date.getDay() + 6) % 7;
				target.setDate(target.getDate() - dayNr + 3);
				var firstThursday = target.valueOf();
				target.setMonth(0, 1);
				
				if(target.getDay() != 4) {
					target.setMonth(0, 1 + ((4 - target.getDay()) + 7) % 7);
				}
				return 1 + Math.ceil((firstThursday - target) / 604800000);
			},			
			getTime: function() {
				return this.t0.getTime();
			},
			isEqualTo: function(obj) {
				obj = this.parse(obj);
				
				if(!obj.t0) return false;
				if(obj.t0.getTime() != this.t0.getTime()) return false;
				if((obj.t1 && (!this.t1 || obj.t1.getTime() != this.t1.getTime())) || (!obj.t1 && this.t1)) return false;
				//if(obj.isNoYear != this.isNoYear) 
				
				return true;
			},
			isToday: function() {
				var now = new Date(); 
				return this.t0.getFullYear() == now.getFullYear() && this.t0.getMonth() == now.getMonth() && this.t0.getDate() == now.getDate();
			},
			isWithin: function(obj) {
				obj = this.parse(obj);
				
				if(!obj.t0) return false;
				if(this.t1 && obj.t1) return this.t0.getTime() <= obj.t0.getTime() && this.t1.getTime() >= obj.t1.getTime();
				if(this.t1) return this.t0.getTime() <= obj.t0.getTime() && this.t1.getTime() >= obj.t0.getTime();
				return this.t0.getTime() == obj.t0.getTime();
				
				//if(this.t0.getTime() <= obj.t0.getTime() && (!this.t1 || !obj.t1 || this.t1.getTime() >= obj.t1.getTime())) return true;
				//return false;
			},
			isOverlap: function(obj) { 
				//return this.isWithin(obj);
				obj = this.parse(obj);
				obj = this.copy(obj);

				if(!obj.t0) return false;
				
				var t0 = new Date();
				t0.setTime(this.t0.getTime());
				var t1 = this.t1 ? new Date() : null;
				if(t1) t1.setTime(this.t1.getTime());				
				
				if(this.isRecurring) {
					t0.setYear(obj.t0.getFullYear());
					if(t1 && obj.t1) t1.setYear(obj.t1.getFullYear());
				}
				if(obj.isRecurring) {
					obj.t0.setYear(t0.getFullYear());
					if(t1 && obj.t1) obj.t1.setYear(t1.getFullYear());
				}
				
				if(t1 && obj.t1) {
					return (t0.getTime() <= obj.t0.getTime() && t1.getTime() >= obj.t1.getTime()) || 
						(t0.getTime() >= obj.t0.getTime() && t0.getTime() < obj.t1.getTime()) || 
						(t0.getTime() <= obj.t0.getTime() && t1.getTime() > obj.t0.getTime()) ||
						(t0.getTime() >= obj.t0.getTime() && t1.getTime() <= obj.t1.getTime())
					;
				}
				if(t1) return t0.getTime() <= obj.t0.getTime() && t1.getTime() > obj.t0.getTime();
				return t0.getTime() == obj.t0.getTime();
			},
			isTime: function(obj) {
				obj = obj ? this.parse(obj) : this;
				
				return obj.t0.getHours() || obj.t0.getMinutes() || obj.t0.getSeconds() || (obj.t1 && (obj.t1.getHours() || obj.t1.getMinutes() || obj.t1.getSeconds()));
			},
			splitDateByWeek: function() {
				var dates = [];
				
				var t = this.copy();
				
				if(!this.t1) return [t];
				
				var t0 = this.t0.getTime();
				var t1 = this.t1.getTime();
				
				var r0 = ox.T.monday({t0, t1});
				r0.setDuration(ox.T.WEEK);
				
				var i = 0;
				do {
					dates.push({
						offset: r0.t0.getTime() < t0 ? 0 : r0.t0.getTime() - t0,
						time: ox.T.create({
							t0: r0.t0.getTime() < t0 ? t0 : r0.t0.getTime(), 
							t1: r0.t1.getTime() > t1 ? t1 : r0.t1.getTime(),
						}), 
					});
					r0.move(ox.T.WEEK);
				} while(++i < 100 && r0.t0.getTime() < t1)
				
				return dates;
			},
			gap: function(t0, t1) {
				return this.create({t0, t1: t1 || new Date()}).getDurationFullString();
			},
			toCurrentTimezone: function(isFrom) {
				try {
					var tzoneNow = (new Date()).getTimezoneOffset();
					
					var t0 = new Date();
					t0.setTime(this.t0.getTime());
					var tzone0 = t0.getTimezoneOffset();
					if(tzoneNow != tzone0) t0.setTime(t0.getTime() + (tzoneNow - tzone0) * ox.T.MIN * (isFrom ? -1 : 1));
					
					var t1 = this.t1 ? new Date() : null;
					if(t1) {
						t1.setTime(this.t1.getTime());
						var tzone1 = t1.getTimezoneOffset();
						if(tzoneNow != tzone1) t1.setTime(t1.getTime() + (tzoneNow - tzone1) * ox.T.MIN * (isFrom ? -1 : 1));
					}
					
					return ox.T.create(t0, t1);
				}
				catch(e) { ox.error({id: 'omnia.tools.Time.toCurrentTimezone', e}); }
			},
				
			// Output
			
			log: function(s, result) { //return;
				if(result) {
					var c = this.isEqualTo(result);
					result = ox.T.create(result);
					log((c ? '%cCorrect ' : '%cFalse ') + (s || ''), c ? 'color:green' : 'color:red; font-weight:bold');
					if(!c) log({
						time: this.getDetails(), 
						result: result.getDetails(),
					}); else log({time: this.getDetails()});
					return;
				}
				if(s) return log(s, {time: this.getDetails()});
				log({time: this.getDetails()});
			},
			toObj: function() {
				var d = this.getDetails();
			//	d.ref = this;
				return '<span class="_ml10"><!--i class="mr5 fa fa-calendar-alt"></i-->: ' + d.timeTagShort.t0 + (this.t1 ? '-' + d.timeTagShort.t1 : '') + '</span>';
			},
			getTimeTag: function(ref, format, isTimeOnly) {
				var isSameDay = !this.t1 || (this.t0.getFullYear() == this.t1.getFullYear() && this.t0.getMonth() == this.t1.getMonth() && this.t0.getDate() == this.t1.getDate());
				return {
					t0: this.getTimeTagString(this.t0, null, this.isNoYear, ref, format, isTimeOnly && isSameDay),
					t1: this.t1 && this.t0 ? this.getTimeTagString(this.t1, this.t0, this.isNoYear, null, format, isTimeOnly && isSameDay) : '',
				}
			},
			getTimeTagString: function(d, pre, isNoYear, ref, format, isTimeOnly) {
				if(!d) d = this.t0;
				var now = new Date();
				if(!d) return '';
				if(ref && ref.clsId) ref = ref.t0;
				
				var isNoDate = isTimeOnly;

				var isTime = (d.getHours() || d.getMinutes() || d.getSeconds()) && !(pre && pre.getHours() == 0 && pre.getMinutes() == 0 && pre.getSeconds() == 0 && d.getHours() == 23 && d.getMinutes() == 59 && d.getSeconds() == 59);
				var f = isNoDate || (pre && pre.getMonth() == d.getMonth() && pre.getDate() == d.getDate() && pre.getFullYear() == d.getFullYear()) ? {} : {'month': (format == 'short' ? '2-digit' : 'short'), 'day': '2-digit'};
				if(d.getFullYear() != now.getFullYear() && (!pre || pre.getFullYear() != d.getFullYear() || pre.getFullYear() != now.getFullYear())) f['year'] = '2-digit';
				if(isTime) {
					f['hour'] = '2-digit';
					f['minute'] = '2-digit';
					if(d.getSeconds()) f['second'] = '2-digit';
				} 
				if(ref && f.hour && ref.getFullYear() == d.getFullYear() && ref.getMonth() == d.getMonth() && ref.getDate() == d.getDate()) { delete f.year; delete f.month; delete f.day; }
				if(isNoYear) delete f['year'];
				if(format == 'weekdays') f['weekday'] = 'long';
				
				return d.toLocaleString('de-DE', f).split(',').join('');
			},
			getDurationString: function(duration, isNoSec, isDaysOnly) {
				try {
			
					var d = typeof duration == 'number' ? ox.T.create({t0: 0, t1: duration}).getDuration() : (duration || this.getDuration());
					var hLabel = ox.tx(d.hours == 1 ? 'hour' : 'hours').toLowerCase();
					var dayLabel = ox.tx(d.days == 1 ? 'day' : 'days').toLowerCase();
					var yearLabel = ox.tx(d.years == 1 ? 'year' : 'years').toLowerCase();
					var years = Math.round(Math.abs(d.years) * 10) / 10;
					
					if(Math.abs(d.years) >= 1) return years + '&nbsp;' + yearLabel;
					if((Math.abs(d.days) && isDaysOnly) || (Math.abs(d.days) > 2 || (d.days >= 1 && d.hours == 0 && d.mins == 0 && d.secs == 0))) return d.days + '&nbsp;' + dayLabel;
					if(Math.abs(d.days) > 0) return d.days + 'd&nbsp;' + d.hours + 'h';
					if(isDaysOnly || (Math.abs(d.hours) >= 1)) return (d.hours ? d.hours + (d.mins ? 'h&nbsp;' : ' ' + hLabel) : '') + (d.mins ? (d.mins < 10 ? '0' : '') + d.mins + 'min' : '');
					if(d.mins) return d.mins + (!isNoSec && d.secs ? 'min&nbsp;' + d.secs + 's' : '&nbsp;min');
					if(!isNoSec && d.secs) return d.secs + (d.ms ? (d.ms / 1000).toString().substr(1) : '') + '&nbsp;sec';
					if(!isNoSec) return d.ms + '&nbsp;ms';
					return '';
					
				}
				catch(e) {
					ox.error('omnia.tools.Time.getDurationString: Error: ' + e);
					return '';
				}
			},
			getDurationFullString: function(duration) {
				var d = duration || this.getDuration();
				var years = Math.round(Math.abs(d.years) * 10) / 10;
				
				var isYear = d.years >= 1;
				var isDay = isYear || d.days;
				var isHour = isDay || d.hours;
				var isMin = isHour || d.mins;
				var isSec = isMin || d.secs;

				return ('' + (isYear ? years + 'y, ' : '') + 
					(isDay ? d.days + 'd ' : '') + 
					(isHour ? d.hours + 'h ' : '') + 
					(isMin ? d.mins + 'min ' : '') + 
					(isSec ? d.secs + 's ' : '') + 
					(d.ms ? d.ms + 'ms' : '')).trim();	
				
				/*return '' + (d.years >= 1 ? years + 'y, ' : '') + 
					(d.years >= 1 || d.days ? d.days + 'd ' : '') + 
					(d.years >= 1 || d.days || d.hours ? d.hours + 'h ' : '') + 
					(d.years >= 1 || d.days || d.hours || d.mins ? (d.mins < 10 ? '0' : '') + d.mins + 'min ' : '') + 
					(d.secs ? (d.secs < 10 && (d.hours || d.mins || d.days || d.years >= 1) ? '0' : '') + d.secs + 's' : '') + 
					(!d.days && !d.hours && !d.mins && !d.secs ? d.ms + ' ms' : '');	
				*/
			},
			getVectorString: function(ref) {
				if(!this.t0) return '';
				
				var r = ref.getTime();
				var t0 = this.t0.getTime();
				var t1 = this.t1 ? this.t1.getTime() : t0;
				var duration0 = this.getDuration(this.t0, ref);
				var duration1 = this.getDuration(this.t1 || this.t0, ref);
				var gds = this.getDurationString;
				
				if(r < t0) return 'in ' + gds(duration0);
				else if(r > t1) return (t1 != t0 ? 'ended ' : '') + gds(duration1) + (!this.isRecurring ? ' ago' : '') + (t1 != t0 ? ', started ' + gds(duration0) + ' ago' : '');
				else if(r != t0) return 'since ' + gds(duration0) + ' (day ' + (Math.floor(duration0.daysFloat) + 1) + '), ' + gds(duration1) + ' remaining';
				else return 'now';
				
				return '';
			},
			getDateId: function() {
				return this.t0.getFullYear() + '-' + (this.t0.getMonth() < 9 ? '0' : '') + (this.t0.getMonth() + 1) + '-' + (this.t0.getDate() < 10 ? '0' : '') + this.t0.getDate();
			}, 

			// Private functions
			
			parse: function(obj) {
				//log({id: 'Time.parse', obj});
			
				try {

					if(typeof obj == 'number') { 
						if(obj && obj < 53) return this.parse({week: obj}); // Week
						else if(obj && obj < ox.T.YEAR) {
							var d = new Date();
							return this.parse({t0: d, t1: d.getTime() + obj}); // Span
						}
						else return this.parse({t0: obj}); // Timestamp
					} else if(typeof obj == 'string') { 
						return this.parse(this.parseString(obj));
					} else if(typeof obj == 'object') { 
						if(obj instanceof Date) return this.parse({t0: obj}); // Date
						//if(obj instanceof omnia.tools.Time) return this.parse(obj.getDetails());
						if(!obj.clsId && obj.week) return this.parse(ox.T.week(obj.week, obj.year).getDetails());
						
						var t0 = this.tsToDate(obj.t0);
						var t1 = this.tsToDate(obj.t1);
						
						var args = {
							t0: t0 && t1 && t1.getTime() < t0.getTime() ? t1 : t0,
							t1: t0 && t1 && t1.getTime() < t0.getTime() ? t0 : t1,
							isNoYear: obj.isNoYear,
							isRecurring: obj.isRecurring,
							count: obj.count,
							tzone0: obj.tzone0,
							tzone1: t1 ? obj.tzone1 : null,
						}; //log({parse: args})
						if(!args.t0) ox.error('omnia.tools.Time: No time set');
						return args;
						
					} else return false;
				
				}
				catch(e) {
					ox.error('omnia.tools.Time.parse: Error: ' + e);
				}
			},
			parseString: function(s, ref) {
				try { 
					var yThreshold = 40;
				
					s = s.trim();
					s = s.split('_').join('T');
					s = s.split('-w').join('-W');
					s = s.split('/w').join('/W');
					
					var hasTime = s.indexOf('T') >= 0;
					var d = s.split('/'); // Dates
					var d0 = d[0].split('-');
					var isDayShift = false;
			
					if(ref) {
						//var step = '';
						var d0l = d0.length;
						if(s[0] == 'W') {
							// Week
							//step = 'week';
							if(d0.length == 1) d0.push(7);
							d0.unshift(ref.getFullYear());
						} else if(d0.length == 1 && s[2] == ':') {
							// Time only 10:00:10 or 10:00
							//var s00 = s00.split('-');
							//if(s.length == 5) d0[0] += ':00.999';
							//if(s.length == 8) d0[0] += '.999';
							d0[0] = 'T' + d0[0];
							//step = 'time ' + (d0[0]); 
							//d0.unshift(s00[1]);
							//d0.unshift(s00[0]);
							d0[0] = (ref.getDate() < 10 ? '0' : '') + ref.getDate() + d0[0];
							d0.unshift((ref.getMonth() < 9 ? '0' : '') + (ref.getMonth() + 1));
							d0.unshift(ref.getFullYear());
						} else if(d0.length == 1) {
							// Day only 04
							//step = 'day';
							d0.unshift(ref.getMonth() < 9 ? '0' : '' + (ref.getMonth() + 1));
							d0.unshift(ref.getFullYear());
							//d0[2] += 'T23:59:59';
						} else if(d0.length == 2) {
							// Day and Month only 03-01
							//step = 'month';
							d0.unshift(ref.getFullYear()/* + (parseInt(d0[0]) < ref.getMonth() + 2 ? 1 : 0)*/);
							//d0[2] += 'T23:59:59.999';
							isDayShift = s.length == 5;
						}
						
						if(d0l < 3 && ref.getMonth() > d0[1]) d0[0] = (parseInt(d0[0]) + 1).toString();

						//log('#' + s + ' -> ' + d0.join('-') + (isDayShift ? ' +1 day' : ''));
					}
					
					var isWeek0 = d0[d0.length - 1][0] == 'W' || d0[d0.length - 2][0] == 'W';
					var isNoYear = d0.length < 3 && !isWeek0;
				
					// Full year
					var year0 = isNoYear ? 1970 : parseInt(d0[0]);
					if(year0 < 100) year0 = (year0 < yThreshold ? 2000 : 1900) + year0;
					
					// Add timezone
					var tzone0 = null;
					if(!isWeek0) {
						var dayIdx = isNoYear ? 1 : 2;
						var dayStr = d0[dayIdx];
						var day0 = dayStr.split('T');
						
						if(day0.length == 3) {
							tzone0 = day0[2].split(',').join('/').split('.').join('_');
							day0.pop();
						} else if(day0.length == 1) {
							day0.push('00:00:00');
						}
						d0[dayIdx] = day0.join('T');
					} 
					
					var date0 = isNoYear ? d0.slice(0, 2).join('-') : d0.slice(1).join('-');
					var s0 = year0 + '-' + date0;
					if(tzone0) s0 += this.getTimezoneOffset(s0, tzone0);
					
					if(isWeek0 && d0.length == 2) {
						d.push(s0 + '-7');
						s0 += '-1';
					}
					var isSpan = d.length >= 2;
				}
				catch(e) {
					ox.error('omnia.tools.Time.parseString: Error: ' + e);
				}
				
				//if(!ref) log({s0, tzone0});
				
				var t0 = isWeek0 ? 
					ox.T.week(parseInt(s0.substr(6, 2)), s0.substr(0, 4)).move(null, (parseInt(s0[s0.length - 1]) - 1) + (ref ? 1 : 0)).t0 : 
					ox.T.create(new Date(s0)).move(null, isDayShift ? 1 : 0).t0;
					
				var time1 = isSpan ? this.parseString(d[1], t0) : null;
				var t1 = isSpan ? time1.t0 : null;
				var tzone1 = isSpan ? time1.tzone0 : null;
	//log({tzone0, tzone1})
				return {t0, t1, tzone0, tzone1, isNoYear: t0.getFullYear() == '1970' && !t1};
			}, // Move x
			tsToDate: function(t) { 
				if(t instanceof Date) return t;
				if(typeof t == 'number') {
					var d = new Date();
					d.setTime(t);
					return d;
				}
				return null;
			},
			getDayInYear: function(d) {
				var start = (new Date(d.getFullYear(), 0, 1)).getTime();
				var end = (new Date(d.getFullYear(), 11, 31, 23, 59, 59, 999)).getTime();
				var diff = d.getTime() - start;
				var p = diff / (end - start);
				var day = diff / ox.T.DAY;
				return {p, day};
			},
			getTimezoneOffset: function(obj, zone) {
				obj = this.parse(obj);
				
				var time = new Date();
				time.setTime(obj.t0.getTime() - obj.t0.getTimezoneOffset() * ox.T.MIN);
				var ts = time.toISOString();
				var time2 = new Date();
				time2.setTime(time.getTime() + obj.t0.getTimezoneOffset() * ox.T.MIN);
			
				var f = {year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', timeZone: zone};
				var f2 = {year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit'};
				
				for(var g = -1200; g <= 1200; g += 50) {
					var gap = g.toString();
					if(gap % 100) gap = gap.substr(0, gap.length - 2) + '30'; //gap.split('50').join('30');
					if(gap >= 0) gap = '+' + gap; 
					if(g > -1000 && g < 1000) gap = gap[0] + '0' + gap.substr(1);
					if(g == 0) gap = '+0000';
					
					var t = new Date(ts.substr(0, ts.length - 1) + gap);
					//log(g + ' ' + ts + gap + ' - ' + t.toLocaleDateString('de-DE', f) + ' - ' + time2.toLocaleDateString('de-DE', f2));// + ' ' + t.toISOString());
					if(t.toLocaleDateString('de-DE', f) == time2.toLocaleDateString('de-DE', f2)) return gap;
				}
				
				return false;
			},	
		},

		Image: {
			
			// Constants
			
			//pxPerCm: 595.28 / 21, // 72 dpi / 2.54 cm per inch
			//pxPerInch: 595.28 / 21 * 2.54, // 72 ppi/dpi
			format: 'image/jpeg',
			quality: .8,
			
			// Variables
			
			url: null,
			img: null,
			loaded: false,
			onLoaded: function() {},
			name: null,

			// Public functions
			
			init: function(args) {
				log('omnia.tools.Image.init');
				
				var me = this;
				
				// Set image
				var img = me.img = new Image();
				img.crossOrigin = 'Anonymous';
				img.onload = function(e) {
					log('omnia.tools.Image.init: Image loaded');
					me.loaded = true;
					
					if(me.onLoaded) me.onLoaded(me);
				};
				
				/*
				var isData = args.url && args.url.substr(0, 4) == 'data';
				if(isData) {
					img.src = args.url;
					if(args.onLoaded) args.onLoaded(args, me);
				} else {
					if(args.url || args.files) this.load(args);
				}*/
				
				this.load(args);
			},
			load: function(args) {
				var me = this;
				if(args.onLoaded) this.onLoaded = function() { args.onLoaded(args, me); }
				
				// Load from data
				var isData = args.url && args.url.substr(0, 4) == 'data';
				if(isData) {
					log('omnia.tools.Image.load: From data');
					this.img.src = args.url;
					return;
				}
				
				// Load from file
				if(args.files) {
					var file = args.files[0];
					if(file) {
						var reader = new FileReader();
						reader.onloadstart = function(e) {
							log('%comnia.tools.Image.load: From file', 'color:#0000ff;');
							if(args.onLoadStart && typeof args.onLoadStart == 'function') args.onLoadStart(e.loaded, e.total, e);
						};
						reader.onprogress = function(e) {
							log('%comnia.tools.Image.load: From file, ' + omnia.tools.string.toSize(e.loaded) + ' / ' + omnia.tools.string.toSize(e.total), 'color:#a0a0a0;');
							if(args.onLoadProgress && typeof args.onLoadProgress == 'function') args.onLoadProgress(e.loaded, e.total, e);
						};
						reader.onloadend = function(e) { 
							log('%comnia.tools.Image.load: From file, ' + omnia.tools.string.toSize(e.total), 'color:#aa00ff;');
							me.img.src = reader.result;
						}
						reader.readAsDataURL(file);
						me.name = file.name;
					}
					return;
				}
				
				// Load from URL
				log('omnia.tools.Image.load: From URL');
				var server = 'https://haustein.org/omnia/app/server.php?cmd=download&url=';
				if(args.url.substr(0, server.length) != server) args.url = server + encodeURI(args.url);
				this.url = args.url;
				this.img.src = args.url;
			},
			getUrl: function() {
				return this.url;
			}, 
			getSrc: function() {
				return img.src;
			},
			toBase64: function(args) {
				var url = this.getCanvas(args).toDataURL(args.format || omnia.tools.Image.format, args.quality || omnia.tools.Image.quality);
				log('omnia.tools.Image.toBase64: format = ' + (args.format || omnia.tools.Image.format) + ', quality = ' + (args.quality || omnia.tools.Image.quality) + ', size = ' + ox.str.toSize(url.length));
				return url;
			},
			width: function() { return this.img.width; },
			height: function() { return this.img.height; },
			getDim: function() {
				return {w: this.img.width, h: this.img.height};
			},
			getCanvas: function(args) {
				if(!args) args = {};
				return this.draw(args);
			},
			
			rotate: function(args) {
				var dim = this.getDim();
				var isRot = args.degrees == 90 || args.degrees == 270;
				var canvas = this.createCanvas({w: isRot ? dim.h : dim.w, h: isRot ? dim.w : dim.h});
				
				this.clear({canvas: canvas});
				this.rot({canvas: canvas, degrees: args.degrees});
				
				return canvas.toDataURL(args.format, args.quality);
			},
			
			// Private functions
			
			createCanvas: function(args) {
				var dim = this.getDim();
				var canvas = document.createElement('CANVAS');
				canvas.width = args && args.w ? args.w : dim.w;
				canvas.height = args && args.h ? args.h : dim.h;
				
				return canvas;
			},
			
			// Operations
			
			draw: function(args) {
				log('omnia.tools.Image.draw: Canvas = ' + Math.round(args.w) + ' x ' + Math.round(args.h) + ' px');
				if(!args) args = {};
				
				var canvas = args.canvas ? args.canvas : document.createElement('CANVAS');
				var ctx = canvas.getContext('2d');
				
				var img = this.img;
				
				var iw = img.width;
				var ih = img.height;
				
				var w = (args.w || iw) * (args.f || 1);
				var h = (args.h || ih) * (args.f || 1);
				if(args.isNoOversize && w > iw) { w = iw; h = w / args.w * args.h; }
				if(args.isNoOversize && h > ih) { h = ih; w = h / args.h * args.w; }
				
				canvas.width = w;
				canvas.height = h;
				
				if(args.pos && (args.pos == 'fill' || args.pos == 'fit')) {
					if(ih >= h && w / iw * ih <= h) {
						args.pos = args.pos == 'fill' ? 'height' : 'width';
					} else if(iw >= w && h / ih * iw <= iw) {
						args.pos = args.pos == 'fill' ? 'width' : 'height';
					} else {
						args.pos = 'none';
					}
				}
				
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				ctx.fillStyle = "rgba(255, 255, 255, 0)";
				//ctx.globalCompositeOperation = "lighter";
				ctx.globalCompositeOperation = "destination-over";
				ctx.globalAlpha = 1;
				ctx.fillRect(0, 0, canvas.width, canvas.height);
				
				//log('omnia.tools.Image.drawImage: Image size = ' + Math.round(w) + ' x ' + Math.round(h) + ' px, pos = ' + args.pos + ', quality = ' + args.quality + ', format = ' + args.format);
				
				switch(args.pos) {
					case 'height': 
						var sw = ih/h * w;
						var x = /*args.xpos !== undefined ? args.xpos : */(iw - sw) / 2;
						
						log('omnia.tools.Image.draw: Rendered size = ' + Math.round(w) + ' x ' + Math.round(h) + ' px, pos = ' + Math.round(x) + ' x 0, scaled size = ' + Math.round(sw) + ' x ' + Math.round(ih) + ' px (scale to ' + args.pos + '), image size: ' + Math.round(img.width) + 'x' + Math.round(img.height) + ' px, quality = ' + args.quality + ', format = ' + args.format);
						//log(args);
						//log(args.xpos !== undefined);
						ctx.drawImage(img, x, 0, sw, ih, 0, 0, w, h);
						break;
					
					case 'width':
						var sh = iw/w * h;
						var y = /*args.ypos !== undefined ? args.ypos : */(ih - sh) / 2;
						
						log('omnia.tools.Image.draw: Rendered size = ' + Math.round(w) + ' x ' + Math.round(h) + ' px, pos = 0 x ' + Math.round(y) + ', scaled size = ' + Math.round(iw) + ' x ' + Math.round(sh) + ' px (scale to ' + args.pos + '), image size: ' + Math.round(img.width) + 'x' + Math.round(img.height) + ' px, quality = ' + args.quality + ', format = ' + args.format);
						ctx.drawImage(img, 0, y, iw, sh, 0, 0, w, h);
						break;
						
					case 'none':
					default:
						log('omnia.tools.Image.draw: Rendered size = ' + Math.round(w) + ' x ' + Math.round(h) + ' px, pos = none, image size: ' + Math.round(img.width) + ' x ' + Math.round(img.height) + ' px, quality = ' + args.quality + ', format = ' + args.format);
						ctx.drawImage(img, 0, 0);
						break;
				}

				return canvas;
			},
			rot: function(args) {
        		var ctx = args.canvas.getContext('2d');
				ctx.save();
				ctx.translate(args.canvas.width / 2, args.canvas.height / 2);
				ctx.rotate(args.degrees * Math.PI / 180);
				ctx.drawImage(this.img, -this.img.width / 2, -this.img.height / 2);
				ctx.restore();
			},
			clear: function(args) {
				var ctx = args.canvas.getContext('2d');
				ctx.clearRect(0, 0, args.canvas.width, args.canvas.height);
				return ctx;
			},
		},
		Tips: {
			tips: {},
			file: {meta: {tips: {}}},
			
			register: function(cfg) {
				log('omnia.tools.Tips.register: id = ' + cfg.id);
				
				omnia.tools.Tips.tips[cfg.id] = cfg;
				if(!cfg.file) cfg.file = omnia.tools.Tips.file;
				if(!cfg.file.meta.tips) cfg.file.meta.tips = {};
				if(cfg.pre && typeof cfg.pre == 'string') cfg.pre = cfg.pre.split(',');
				
				omnia.tools.Tips.show();
			},
			show: function() {
				log('omnia.tools.Tips.show');

				$.each(omnia.tools.Tips.tips, function(idx, tip) {
					var isShow = !tip.file.meta.tips[tip.id];
					if(tip.pre) {
						$.each(tip.pre, function(j, p) {
							p = p.trim();
							if(!tip.file.meta.tips[p]/* || tip.file.meta.tips[p] == 1*/) isShow = false;
						});
					}
					
					log('omnia.tools.Tips.show: id = ' + tip.id + ', show = ' + isShow + ', tooltip: ' +  tip.tooltip);

					if(isShow) {
						if(tip.tooltip) tip.tooltip.remove();
						tip.elem.addClass('ox-has-tooltip');
						var elem = omnia.tools.html.node({oid: 'tooltip', css: 'ox-dark ox-persistent ox-dimigo bold ox-bounce ox-large ox-closable ox-hidden' + (tip.isLeft ? ' ox-left' : '') + (tip.css ? ' ' + tip.css : ''), content: tip.content}, tip.elem);
						if(tip.style) { if(typeof tip.style == 'string') elem.attr('style', tip.style); else elem.css(tip.style); }
						tip.elem.on(omnia.tools.browser.CLICK, function(e) { omnia.tools.Tips.onClick(e, tip.id); });

						tip.tooltip = elem;

						var rh = tip.h ? tip.h : tip.elem.outerHeight();
						var h = elem.outerHeight();
						if(!h) h = 35;
						if(!rh) rh = 35;
						
						setTimeout(function() { elem.css('top', ((rh - h) / 2) + 'px'); }, 1);
						
						elem.find('.ox-id-close').on(omnia.tools.browser.CLICK, function(e) { omnia.tools.Tips.onClick(e, tip.id, false); });
						
						setTimeout(function() { elem.removeClass('ox-hidden'); }, 100);
					}
				});
			},
			onClick: function(e, id, isNotRemove) {
				var tip = omnia.tools.Tips.tips[id];
				tip.file.meta.tips[tip.id] = omnia.tools.now();
				
				if(!isNotRemove && tip.tooltip) tip.tooltip.remove();
				
				omnia.tools.Tips.show();
			},
		},
		Loader: {
			items: 0,
			loaded: 0,
			isLoaded: false,
			
			onLoadHandler: null,
			onLoaded: function() {},

			init: function(args) {
				this.reset(args);
			},
			reset: function(args) {
				this.isLoaded = false;
				
				this.items = args.items;
				if(args.onLoad) this.onLoadHandler = args.onLoad;
				if(args.onLoaded) this.onLoaded = args.onLoaded;
				this.loaded = 0;
			},
			onLoad: function(args) {
				this.loaded++;
				if(this.onLoadHandler) this.onLoadHandler(this.loaded, this.items, args);

				if(this.loaded == this.items) { 
					this.isLoaded = true;
					this.onLoaded();
				}
			},
		},
		Queue: {
			init: function(args) {
				if(!args.queue || !args.task) {
					log('omnia.tools.Queue: Parameter missing');
					return;
				}
				if(!args.delay) args.delay = 1;
				
				// Run
				this.batch(args);
			},
			batch: function(args) {
				if(!args.batch) {
					args.onDone = function() {};
					this.run(args);
					return;
				}
				
				var me = this;
				var idx = 0;
				var queue = [];
				
				var onBatchDone = function() {
					idx += args.batch; 
					if(idx < args.queue.length) newBatch();
					else {
						log('omnia.tools.Queue: Queue done');
						if(args.onDone) args.onDone();
					}
				};
				var newBatch = function() {
					log('omnia.tools.Queue: New batch, idx = ' + idx);
					
					queue = args.queue.slice(idx, idx + args.batch);
					me.run({
						queue: queue,
						task: args.task,
						id: args.id,
						onDone: onBatchDone,
						idx: idx,
					});
				};
				newBatch();
			},
			run: function(args) {
				//log('omnia.tools.Queue.run: queue = ' + args.queue.length);
				
				if(!args.queue.length && args.onDone) {
					args.onDone();
					return;
				}
				
				var done = 0;
				var count = args.queue.length;
				
				ox.each(args.queue, function(idx, item) {
					try {
						setTimeout(function() { 
							args.task(
								item, 
								(args.idx ? args.idx : 0) + idx, 
								function() { if(++done >= count) args.onDone(); }, 
								args.queue
							); 
						}, idx * args.delay);
					}
					catch(e) {
						log('omnia.tools.Queue' + (args.id ? ' (' + args.id + ')' : '') + ': Failed to trigger task ' + idx + ', error = ' + e);
					}
				});
			},
		},
		Stopwatch: {
			t0: null,
			lt: null,
			id: null,
			isOff: null,
			
			create: function(id, isOff, isLogStart) {
				return ox.create(omnia.tools.Stopwatch, {id: id, isOff: isOff, isLogStart: isLogStart});
			},
			init: function(args) {
				this.isOff = args.isOff;
				
				this.id = args.id;
				this.t0 = this.lt = ox.now();
				
				if(args.isLogStart) log('%c' + (this.id || 'omnia.tools.Stopwatch.init') + ': Start', 'color:lightseagreen');
			},
			bp: function(n, css, lg) {
				lg = lg || log;
				var now = ox.now();
				if(!this.isOff) {
					var s = 
						(css ? '%c' : '') + 
						(this.id || 'omnia.tools.Stopwatch.bp') + ': ' + 
						(n ? '' + n + ': ' : '') + 
						(now - this.lt) + ' ms' + 
						(this.lt != this.t0 ? ' (' + (now - this.t0) + ' ms)' : '');
						
					if(css) lg(s, css); else lg(s);
				}
				this.lt = now;
				
				return (this.lt != this.t0 ? '' + (now - this.t0) + ' ms' : '');
			},
			error: function(error) {
				ox.error((this.id ? this.id + ': ' : '') + 'Error: ' + error);
				return false;
			},
		},
	},
}

omnia.tools.init();
ox = {
	t: omnia.tools,
	tx: omnia.tools.text,
	arr: omnia.tools.array,
	b: omnia.tools.browser,
	client: omnia.tools.client,
	css: omnia.tools.element.setClass,
	copy: omnia.tools.jsonCopy,
	create: omnia.tools.create,
	d: omnia.tools.date,
	t0: omnia.tools.Stopwatch.create,
	error: omnia.tools.error,
	keys: omnia.tools.keys,
	id: omnia.tools.getUniqueId,
	lib: omnia.lib,
	markup: (v, a) => omnia.ui.text.markup.render(v, a),
	net: omnia.tools.net,
	node: omnia.tools.html.node,
	now: omnia.tools.now,
	pdf: omnia.tools.pdf,
	pf: omnia.tools.browser.platform,
	ov: omnia.ui.overlay,
	el: omnia.tools.element,
	error: omnia.tools.error,
	str: omnia.tools.string,
	tr: omnia.tools.track,
	ui: omnia.ui,
	each: omnia.tools.each,
	fs: omnia.tools.fs,
	
	
	File: omnia.tools.File,
	T: omnia.tools.Time,
	Time: omnia.tools.Time,
}; 
 
