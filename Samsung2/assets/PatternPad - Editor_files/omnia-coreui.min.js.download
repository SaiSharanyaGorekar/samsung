omnia.ui.bar2.html = {
							
							t: 'nav', css: 'rel ox-bar2', c: [
								{t: 'div', css: 'rel ox-childs ox-id-childs'}
							]
							
};omnia.ui.bar3.html = {
							
							t: 'nav', css: 'ox-bar3',
							
};omnia.ui.frame.html = {
							
							t: 'section', oxid: 'text', css: 'ox-frame'
							
};omnia.ui.frame2.handler = {
			
							clsId: 'omnia.ui.frame2.handler', 
							id: null,
							root: null,
							tabs: null,
							panels: null,
							activateHandler: {},
							closeHandler: {},
							
							init: function(args) {
								this.root = args.root;
								this.root.data('ox-handler-frame', this);
								
								// Set Tabs & Panels
								this.setTabs();
								this.updateTabs();
								this.setPanels();
			
								// Set Events
								if(args.onActivate) this.onActivate = args.onActivate;					
								if(args.onDeactivate) this.onDeactivate = args.onDeactivate;					
								if(args.tabArgs) {
									$.each(args.tabArgs, function(id, tabA) {
										if(tabA.onActivate) this.activateHandler[id] = tabA.onActivate;
										if(tabA.onClose) this.closeHandler[id] = tabA.onClose;
									}); 
								}
								
								var me = this;
								this.id = ox.id();
								var isDynamic = this.setOrientation();
								if(isDynamic) window.addEventListener("orientationchange", function() { me.setOrientation(); });
							},
							
							// Public functions - Service
			
							getRoot: function() { return this.root; },
							isHidden: function(barId) {
								var bar = this.root.find('> .ox-bar2' + (barId !== undefined ? '.' + barId : ''));
								return bar.hasClass('ox-hidden');
							},
							getTab: function(id, barId) {
								if(!id) id = this.getActiveTab(barId);
								return this.root.find((barId ? barId : '> .ox-bar2:first') + ' > .ox-childs > .ox-tab.ox-id-tab-' + id);
							},
			
							// Public functions - View
							
							activate: function(id, isInternal) {
								var tabId = this.root.find('.ox-bar2:first > .ox-childs > .ox-id-tab-' + id);
								var frame = this.root.find('> .ox-id-tab-' + id);
								var handler = !frame ? null : frame.data('ox-handler-tab') || frame.data('ox-handler');
								
								if($(tabId).hasClass('ox-active') && (!handler || (handler && handler.isActive))) {
									//log(handler);
									log('omnia.ui.frame2.handler.activate: is already active');
									return;
								}
								if(!isInternal) log('omnia.ui.frame2.handler.activate: id = ' + id);
			
								$.each(this.tabs, function(idx, tab) {
									tab = $(tab);
									tab.removeClass('ox-active');
									setTimeout(function() { tab[0].blur(); }, 1);
									if(tab.hasClass('ox-id-tab-' + id)) {
										tab.addClass('ox-active');
									}
								});
								
								if(this.onActivate) this.onActivate(id);
								this.updateTabs();
								
								/*var me = this;
								ox.el.onRefresh(function() {
									me.onResize(null, true);
									log('#activate > resize')
								});*/
								//this.onResize(); 
							},
							toggleVisible: function(force, barId) {
								log('omnia.ui.frame2.toggleVisible' + (force !== undefined && force != null ? ': force = ' + force : ''));
								var bar = this.root.find('> .ox-bar2' + (barId !== undefined ? '.' + barId : ''));
								
								if(force !== undefined && force != null) {
									if(force) bar.removeClass('ox-hidden');
									else bar.addClass('ox-hidden');
								} else {
									bar.toggleClass('ox-hidden');
								}
							},
							toggleFullscreen: function(body, isNotNativeFullscreen) {
								var me = this;
								var isFull = this.isHidden();
								if(!body) body = this.root;
			
								this.toggleVisible();
								if(!isNotNativeFullscreen) this.setFullscreen(!isFull, body, function() { me.toggleFullscreen(body, true); });
							},
							setFullscreen: function(isOn, elem, onClose) {
								log('omnia.ui.frame2.handler.setFullscreen: isOn = ' + isOn);
								
								if(!elem) elem = this.root;
			
								var me = this;
								ox.css(this.root, 'ox-fullscreen', isOn);
								//this.root.css(isOn ? {'position': 'fixed', 'top': 0, 'left': 0, 'width': '100vw', 'height': '100vh', 'z-index': 10000000} : {'position': '', 'top': '', 'left': '', 'width': '', 'height': '', 'z-index': ''});
								this.onResize();
			
								try {
									if(ox.pf.framework == 'cordova') { 
										if(isOn) StatusBar.hide();
										else StatusBar.show();
									} else {
										var id = ox.id();
										omnia.tools.browser.addFullscreenHandler(function(isOn) { 
											if(isOn) return;
				
											me.setFullscreen(false);
											if(onClose) onClose();
											ox.b.removeFullscreenHandler(id);
										}, id);
										omnia.tools.browser.fullscreen(isOn, elem);
									}
								}
								catch(e) {
									ox.error('omnia.ui.frame2.handler.setFullscreen: Failed');
									log(e);
								}
							},
							
							// Public functions - Change
							
							addTab: function(args) {
								//log('omnia.ui.frame2.handler.addTab: label = ' + args.label);
			
								var bar = this.root.find((args.barId ? args.barId : '.ox-bar2:first') + ' > .ox-childs');
								var body = this.root;
				
								omnia.tools.html.node({oid: args.isStatic ? 'tabstatic' : 'tab', css: 'ox-id-tab-' + args.id + (args.cssTab ? ' ' + args.cssTab : ''), label: args.label}, bar);
								
								if(args.onActivate) this.activateHandler[args.id] = args.onActivate;
								if(args.onClose) this.closeHandler[args.id] = args.onClose;
								if(args.frame) {
									args.frame.css = (args.frame.css ? args.frame.css + ' ' : '') + 'ox-id-tab-' + args.id;
									var frame = omnia.tools.html.node(args.frame, {root: body, onTop: args.onTop, pos: args.pos});
								}
				
								if(!args.noUpdate) this.update();
								if(args.isActive) this.activate(args.id, true);
								
								//log('%comnia.ui.frame2.handler.addTab: label = ' + args.label + ', done after ' + (omnia.tools.now() - omnia.tools.console.start) + ' ms', 'color:green');
								if(args.frame) return frame;
							},
							renameTab: function(html, id, barId) {
								var label = this.root.find((barId ? barId : '> .ox-bar2:first') + ' > .ox-childs > .ox-tab.ox-id-tab-' + id + ' > .ox-id-label');
								label.html(html);
							},
							toggleSticky: function(id, barId) {
								var tab = this.getTab(id, barId);

								log('omnia.ui.frame2.toggleSticky: id = ' + id + ' ' + (tab.hasClass('ox-sticky') ? 'off' : 'on'));
								this.setTabStatus(id, tab.hasClass('ox-sticky') ? null : 'sticky');
							},
							setTabStatus: function(id, status, barId) {
								var tab = this.getTab(id, barId);
								var frame = this.root.find('> .ox-id-tab-' + id);
			
								switch(status) {
									case 'sticky': 
										tab.addClass('ox-sticky');
										frame.addClass('ox-sticky');
										
										frame.appendTo(frame.parent());
			
										break;
									default:
										tab.removeClass('ox-sticky');
										frame.removeClass('ox-sticky');
										break;
								}
								this.updateTabs();
							},
							closeTab: function(id, isForce, barId) {
								var me = this;
			
								//if(!id) id = this.getActiveTab(barId);
								//var tab = this.root.find((barId ? barId : '> .ox-bar2:first') + ' > .ox-childs > .ox-tab.ox-id-tab-' + id);
								var tab = this.getTab(id, barId);
								var isBreadcrumb = tab.hasClass('ox-breadcrumb');
								
								//if(!tab || !tab.length) return;
								//var isActive = tab.hasClass('ox-active');
			
								var frame = this.root.find('> .ox-frame2.ox-id-tab-' + id);
								var isChanged = false;
								
								
								if(frame) {
									frame = $(frame);
									var handler = frame.data('ox-handler-tab') || frame.data('ox-handler');
								
									var isToClose = false;
			
									if(!isForce && handler && handler.onClose) isToClose = handler.onClose({close: function() { me.closeTab(id, true); }});
									else isToClose = true;
									
									if(isToClose) {
										isChanged = true;
										frame.remove();
										tab.remove();
										delete handler;
									} else {
										return;
									}
								} else {
									isChanged = true;
									tab.remove();
								}
								
								if(this.closeHandler[id]) {
									this.closeHandler[id](this);
									delete this.closeHandler[id];
								}
			
								if(this.activateHandler[id]) {
									delete this.activateHandler[id];
								}
			
								this.setTabs(true);
								if(isChanged) this.updateTabs(isBreadcrumb);
							},
							reset: function(args) {
								if(args.onActivate) this.onActivate = args.onActivate;					
								if(args.onDeactivate) this.onDeactivate = args.onDeactivate;					
							},
							
							// Public events
			
							onResize: function(frame, wasCalled) {
								var f = null;
								if(this.root.hasClass('ox-resize') && (f = this.root.data('ox-handler')) && (f != this) && f.onResize) f.onResize();
//if(frame) log(this.root);								
								var dynObjs = ox.el.get('.ox-resize', frame || this.root); //  (frame || this.root).find('.ox-resize');
//if(frame) log({root: this.root, resize: dynObjs});
								//if(dynObjs && !(dynObjs instanceof Array)) dynObjs = [dynObjs];
//if(frame) log(dynObjs);
//if(wasCalled) log({root: this.root, dynObjs})
								if(!dynObjs || !dynObjs.length) return;
//log({dynObjs})								
//var me = this;
//if(frame) log({root: me.root, resize: dynObjs});	
								$.each(dynObjs, function(il, dynObj) {
									var handler = $(dynObj).data('ox-handler');
//if(frame) log({root: me.root, resize: $(dynObj)});								
//if(handler && handler.onResize) log('jo');
//else log(handler);
									if(handler && handler.onResize) handler.onResize();
								});
								
			
							},
			
							// Service functions
							
							getId: function(elem, type) {
								if(!type) type = 'tab';
								var css = $(elem).attr('class').toString();
								
								var id = css.split('ox-id-' + type + '-');
								if(id.length > 1) { return id[1].split(' ')[0]; }
								
								return false;
							},
							getActiveTab: function(barId) {
								var tab = this.root.find((barId ? barId : '> .ox-bar2:first') + ' > .ox-childs > .ox-tab.ox-active');
								return this.getId(tab);
							},
							activateLast: function() {
								this.activate(this.getId(this.tabs[this.tabs.length - 1]), true);
							},
							closeActiveTab: function() {
								this.closeTab(this.getActiveTab());
							},
							closeAfterTab: function(id, barId) {
								var me = this;
								var isAfter = false;
								
								$.each(this.tabs, function(idx, tab) {
									var tid = me.getId(tab);
									if(isAfter) me.closeTab(tid);
									
									if(tid == id) isAfter = true;
								});
							},
							closeAllTabs: function() {
								var me = this;
								$.each(this.tabs, function(idx, tab) {
									var tid = me.getId(tab);
									me.closeTab(tid);
								});
							},
			
							// Service functions - Init
							
							update: function() {
								//log('omnia.ui.frame2.handler.update');
			
								this.setTabs();
								this.updateTabs();
							},
							setTabs: function(isNoEvents) {
								var me = this;
								var tabs = this.tabs = this.root.find('> .ox-bar2 .ox-tab');
							
								var bar = $(this.root.find('> .ox-bar2:first'));
								if(bar.hasClass('ox-hideroot')) {
									var bread = this.root.find('> .ox-bar2 .ox-tab.ox-breadcrumb');
									ox.css(bread, 'ox-hidden', bread.length == 1);
								}
								if(bar.hasClass('ox-hideroot-bar')) {
									var bread = this.root.find('> .ox-bar2 .ox-tab.ox-breadcrumb');
									ox.css(bar, 'ox-hidden', bread.length == 1);
								}
			
								if(!isNoEvents) {
									$.each(tabs, function(idx, tab) {
										tab = $(tab);
										var id = me.getId(tab);
										
										if(id) {
											var isSet = tab.data('ox-frame-isset');
											if(!isSet) {
												tab.data('ox-frame-isset', true);
				
												var isStatic = tab.hasClass('ox-static');
												var isSticky = tab.hasClass('ox-sticky');
												
												ox.el.click(tab, () => { 
													//tab[0].scrollIntoView({behavior: "smooth"}); 
													if(!tab.hasClass('ox-active')) {
														me.activate(id);
														if(tab.hasClass('ox-breadcrumb')) { me.closeAfterTab(id); }
													} else {
														if(tab.hasClass('ox-editable') && !tab.hasClass('ox-edit')) {
															var label = ox.el.get('label', tab);
															tab.addClass('ox-edit');
															ox.node({
																oid: 'inputfield', 
																css: 'ox-slim ox-focus t00 w100 h100 ox-col-ui-dialog-1-back', 
																style: 'position:absolute', 
																input: {style: 'padding-left:5px;'}, 
																clear: {style: 'height:35px; right:5px;'}, 
																placeholder: '#name',
																args: {
																	value: label.text(),
																	onEnter: function() {  },
																},
															}, tab);
														}
													}
												}, this.id);
												
												ox.el.click(tab.find('.ox-close'), () => me.closeTab(id), this.id);
												
												ox.el.setContext(tab, [
													isStatic ? null : {oid: 'button', css: 'ox-id-close', label: '#close', click: function() { me.closeTab(id); }},
													{oid: 'button', css: 'ox-id-close', label: '#sticky', click: function() { me.setTabStatus(id, !tab.hasClass('ox-sticky') ? 'sticky' : false); }},
												]);
											}
										}
									});
								}		
								//this.updateTabs();
							},
							setPanels: function() {
								var me = this;
								var panels = this.panels = this.root.find('> .ox-bar2 .ox-panel-handler');
								var isVert = this.root.hasClass('ox-vert');
								
								$.each(panels, function(idx, panelHandler) {
									panelHandler = $(panelHandler);
									var id = me.getId(panelHandler, 'panel');
									if(id) {
										var panel = me.root.find('.ox-id-panel-' + id + ':not(.ox-panel-handler)');
										panel.addClass('cropped _ani-005');
										var h = panel.height(); //css('height');
										var hasLabel = panelHandler.html().length;
										
										var handle = $('<i class="fa fa-caret-right ' + (hasLabel ? 'ox-before' : '') + '"></i>');
										panelHandler.html('<span class="ox-id-panel-label">' + panelHandler.html() + '</span>');
										panelHandler.prepend(handle);
										
										var isDown = panelHandler.hasClass('ox-caret-down') || panelHandler.hasClass('ox-down');
										var isUp = panelHandler.hasClass('ox-up');
										var isChevron = panelHandler.hasClass('ox-chevron');
										
										var action = function(ev, e, isInit) {
											if(!isInit) panelHandler.toggleClass('ox-active');
											var isOpen = panelHandler.hasClass('ox-active');
											handle.attr('class', 
												(hasLabel ? 'ox-before' : '') + 
												(isChevron ? ' ox-font-11 fa fa-chevron-' : ' fa fa-caret-') + (
													isDown ? (isOpen ? 'up' : 'down') : (
														isUp ? (isOpen ? 'down' : 'up') : 
														(isOpen ? 'down' : 'right')
													)
												)
											);
											//panel.css('' + (isVert ? 'width' : 'height'), isOpen ? (h ? h : 'auto') : 0);
											if(isOpen) panel.removeClass('ox-hidden'); else if(!panel.hasClass('ox-inactive')) panel.addClass('ox-hidden');
											
											panelHandler.blur();
										};
										
										panelHandler.on(omnia.tools.browser.CLICK, action);
										panelHandler.data('ox-panel-handler', action);
										action(null, null, true);
										
									}
								});
							},
							setOrientation: function() {
								var platform = omnia.tools.browser.platform;
								try {
									var isLandscape;
									if(platform.os == 'ios') {
										isLandscape = window.orientation !== undefined ? (window.orientation % 180 == 0 ? screen.width > screen.height : screen.height > screen.width) : (window.matchMedia !== undefined ? window.matchMedia("(orientation: landscape)").matches : null);
									} else {
										isLandscape = screen.width > screen.height;
									}
									if(isLandscape === null) return;
								}
								catch(e) {
									log(e);
									return;
								}
								var isDynamic = false;
							
								if(this.root.hasClass('ox-short')) {
									if(isLandscape) this.root.addClass('ox-vert');
									else this.root.removeClass('ox-vert');
									isDynamic = true;
								}
								if(this.root.hasClass('ox-long')) {
									if(!isLandscape) this.root.addClass('ox-vert');
									else this.root.removeClass('ox-vert');
									isDynamic = true;
								}
								
								if(isDynamic) {
									log('omnia.ui.frame2.setOrientation: w = ' + window.innerWidth + ', h = ' + window.innerHeight + ', isLandscape = ' + isLandscape);
								}
								return isDynamic;
							},
							updateTabs: function(isLast) {
								var me = this;
								var tabs = this.tabs;
								var stat = {};
								
								if(!tabs.length) return;
								var isNoneActive = true;
								var isShowAll = me.root.hasClass('ox-showall');
								
								/*tabs.sort(function(a, b) { 
									var aa = $(a).hasClass('ox-active');
									var ba = $(b).hasClass('ox-active');
									
									if(aa) return 1;
									if(!aa && ba) return -1;
									return 0;
								});*/
								
								$.each(tabs, function(idx, tab) {
									tab = $(tab);
									var id = me.getId(tab);
			
									if(id) {
										var isSticky = tab.hasClass('ox-sticky');
										var isActive = tab.hasClass('ox-active');
										if(isActive) isNoneActive = false;
										var frame = me.root.find('> .ox-id-tab-' + id);
				
										if(frame) {
											frame = $(frame);
											var handler = frame.data('ox-handler-tab') || frame.data('ox-handler');
											
											if(isActive || isSticky) {
												// Set frame active
												frame.removeClass('ox-hidden');

												// Resize all lists because width was not there before
												window.requestAnimationFrame(function() {
													me.onResize(frame);
												});
												
												if(me.activateHandler[id]) me.activateHandler[id](id);
												if(frame.onActivate) frame.onActivate(frame);
												if(handler && handler.onActivate) handler.onActivate(handler);
											} else {
												// Set frame inactive
												if(handler && handler.onBeforeDeactivate) handler.onBeforeDeactivate();
												if(!isShowAll) {
													frame.addClass('ox-hidden');
													//frame.css('visibility', 'hidden');
												}
												if(frame.onDeactivate) frame.onDeactivate(frame);
												if(handler && handler.onDeactivate) handler.onDeactivate(handler);
											}
										}
									}
								});
								
								if(isNoneActive) {
									//log('omnia.ui.frame2.handler.updateTabs: No tab active anymore');
									//log(tabs[0].attr('class'));
									this.activate(this.getId(tabs[isLast ? tabs.length - 1 : 0]), true);
								}
							},

};omnia.ui.frame2.html = {
							
							t: 'section', css: 'ox-frame2'
							
};omnia.ui.loadcontent.handler = {
							
							clsId: 'omnia.ui.loadcontent.handler',
							
							root: null,
							timeStart: null,
							t0: null,
							t1: null,
							isNotBytes: null,
							isError: null,
							interval: null,
							txt: null,
			
							init: function(args) {
								this.root = args.root;
							},
							destroy: function() {
								if(this.interval) clearInterval(this.interval);
								this.root.remove();
								delete this;
							},
							
							// Helper
							
							getRoot: function() {
								return this.root;
							},
							
							start: function() {
								this.progress();
							},
							off: function() {
								this.progress(false);
							},
							error: function(headline, subline) {
								this.progress(headline, subline, null, true);
							},
							
							setTimer: function(isClear, txt) {
								if(this.root.hasClass('ox-baronly')) return;
								
								var me = this;
								if(this.interval) {
									clearInterval(this.interval);
									//log('omnia.ui.loadcontent.setTimer: Stopped');
								}
								
								this.timeStart = omnia.tools.now();
								
								if(!isClear) this.interval = setInterval(function() { 
									if(!document.contains(me.root[0])) {
										me.destroy();
										log('omnia.ui.loadcontent.setTimer: Stopped (Element removed)');	
									} else {
										me.progress(me.t0 || true, me.t1, me.isNotBytes, me.isError, me.txt); 
									}
								}, 500);
							},
							p: function(args) {
								if(args.stop) return this.progress(false);
								this.progress(args.t0, args.t1, args.isNotBytes, args.isError, args.text, args.title);
							},
							progress: function(t0, t1, isNotBytes, isError, txt, title) {
								var isBytes = t0 !== undefined && t0 != false && t1;
								var isStart = t0 === undefined;
								var isOff = t0 == false;
								var now = omnia.tools.now();
								
								t0 = t0 && typeof t0 == 'string' && t0[0] == '#' ? ox.tx(t0) : t0;
								t1 = t1 && typeof t1 == 'string' && t1[0] == '#' ? ox.tx(t1) : t1;
								
								this.t0 = t0;
								this.t1 = t1;
								this.isNotBytes = isNotBytes;
								this.isError = isError;
								this.txt = txt;
								
								var root = this.root;
								var progress = root.find('.ox-id-progress');
								var label = root.find('.ox-id-label');
								var sprinner = root.find('.ox-id-spinner');
								var bar = root.find('.ox-id-bar');
								
								if(title) label.html(title[0] == '#' ? ox.tx(title) : title);
								
								if(!txt && isStart || !this.timeStart || root.hasClass('ox-hidden') && t0 != true) this.setTimer(null);
								if(!isOff) root.removeClass('ox-hidden'); else { root.addClass('ox-hidden'); this.setTimer(true); }
								
								var time = now - this.timeStart < 2000 ? '' : (isError ? '' : (t0 && t0 != true ? ' - ' : '') + omnia.tools.date.timeDiff(this.timeStart, now, true));
//log({l: 'time', time, timeDiff: omnia.tools.date.timeDiff(this.timeStart, now, true)});								
								progress.html(txt ? ox.tx(txt) : ((isStart || t0 == true ? '' : (isBytes ? (!isNotBytes && t1 > 200 ? omnia.tools.string.toSize(t0) + ' / ' + omnia.tools.string.toSize(t1) : t0 + ' / ' + t1) : t0)) + time));
								//log('omnia.ui.loadcontent.progress: ' + progress.html());	
//log({t0, t1, isBytes})
								bar.css('width', isError ? '100%' : (isBytes ? (t0 / t1 * 100) + '%' : 0));
								
								if(isError) {
									bar.removeClass('col-blue-back col-green-back');
									bar.addClass('col-red-back');
									sprinner.addClass('ox-hidden');
									label.addClass('col-red');
									label.html('<i class="fa fa-exclamation-triangle mr10"></i>' + (t0 ? t0 : omnia.tools.t('error-occured')));
									progress.text(txt ? txt : (t1 ? t1 : ''));
									
									this.setTimer(true);
								} else {
									if(bar.hasClass('col-red-back')) { // Was error
										label.html(omnia.tools.t('loading')); 
										label.removeClass('col-red');
										sprinner.removeClass('ox-hidden');
									}
			
									if(isBytes && t0 == t1) { 
										bar.removeClass('col-blue-back col-red-back');
										bar.addClass('col-green-back');
									} else {
										bar.removeClass('col-green-back col-red-back');
										bar.addClass('col-blue-back');
									}
								}
//log(bar)								
								if(progress.text() == '') progress.addClass('ox-hidden'); else progress.removeClass('ox-hidden');
							},

};omnia.ui.loadcontent.html = {
								
							oid: 'frame2', css: 'ox-loadcontent ox-id-loadcontent rel', c: [
								{t: 'div', css: 'ox-id-headline ox-font-headline col-medium-4 ox-h3 semibold ox-dark-col-white-75', c: [
									{t: 'i', css: 'ox-id-spinner fa fa-spinner fa-pulse fa-3x fa-fw', style: {'font-size': '16px', 'margin-right': '5px'}},
									{t: 'span', css: 'ox-id-label', text: '#loading'},
								]},
								{t: 'div', css: 'ox-id-progress font col-medium-4 mt5 ox-hidden ox-dark-col-dark'},
								{t: 'div', css: 'ox-id-bar abs t00 col-blue-back _ox-dark-col-blue-back ani-02', style: {'height': '5px', 'width': '0'}},
							]
							
};omnia.ui.loaddialog.handler = {

							root: null,
							loader: null,
							/*open: function(args) {
								omnia.ui.overlay.show({
									frame: {oid: 'loaddialog', caption: [{oid: 'label', text: 'Load Content'}], onReady: function(elem, loaddialog) {
										if(args.p) loaddialog.loader.p(args.p);

										args.loader = loaddialog.loader;
										args.loaddialog = loaddialog;
										if(args.onOpen) args.onOpen(args);
									}},
									onRendered: function(overlay) {
										args.overlay = overlay;
									},
								});
							},*/
							init: function(args) {
								this.root = args.root;
								var e = ox.el.getAll(args.root, true);
								
								this.loader = args.root.find('.ox-id-loader').data('ox-handler');
								if(args.onClose) {
									e['close-bar'].removeClass('ox-hidden');
									ox.el.click(e.close, args.onClose);
								}
							},
							getRoot: function() {
								return this.root;
							},

};omnia.ui.loaddialog.html = {
							
							oid: 'frame2', css: 'ox-overlay-content ox-bottom-safe ox-col-ui-dialog-1-back', c: [
								{oid: 'bar2', css: 'ox-id-caption col-highlight ox-p15 ox-center ox-line'},
								{oid: 'bar2', css: 'ox-overlay ox-flex ox-right ox-close-bar ox-id-close-bar flex-fix ox-id-head ox-hidden', c: [
									{oid: 'button', css: 'ox-id-close ox-id-x ox-medium', label: '<i class="ma ma-18">close</i>'},
								]},
								{oid: 'loadcontent', css: 'ox-id-loader ox-flat ox-col-ui-dialog-1-back'},
							]
							
};omnia.ui.topnav.html = {
							
							oid: 'bar2', css: 'ox-topnav ox-flat-top ox-large ox-overlay ox-col-ui-dialog-1-back row m0-i', c: [
								{t: 'div', css: 'ox-id-logo hidden-xs col-sm-3 _hidden-sm col-md-3', c: [
									{t: 'a', css: 'ox-id-logolink ml15', c: [
										{t: 'img', title: '', css: 'ox-id-logoimage ox-id-image vmiddle p0-i', src: '', style: {'height': '45px', 'margin-top': '5px'}},
									]},
								]},
								{t: 'div', css: 'ox-id-logomobile col-xs-2 hidden-sm hidden-md hidden-lg', c: [
									{t: 'a', css: 'ox-id-logolinkmobile', c: [
										{t: 'img', title: '', css: 'ox-id-logoimage ox-id-image vmiddle', src: '', style: {'height': '35px', 'margin-top': '10px'}},
									]},
								]},
								{t: 'div', css: 'ox-id-tabs hidden-xs hidden-sm col-md-4 hcenter _ox-d '},
								{t: 'div', css: 'ox-id-tabsmobile col-xs-4 _hidden-sm hidden-md hidden-lg _hcenter'},
								{t: 'div', css: 'ox-id-secondarymobile col-xs-6 col-sm-5 _hidden-sm hidden-md hidden-lg hright'},
								{t: 'div', css: 'hidden-xs hidden-sm col-md-5 hright _ox-d2', c: [
									{t: 'span', css: 'ox-id-secondary'},
									{
										t: 'a', 
										css: 'ox-id-getstarted ox-button ox-inline ox-env-phone-hidden ox-alone-left ox-static br4 ox-medium', 
										text: 'Get Started', 
										style: {
											//'min-height': '38px', 
											//'height': '38px', 
											//'margin-top': '7.5px', 
											'margin-right': '15px', 
											'border': '1px solid #26588a', 'z-index': 3,
											'line-height': '33px',
										},
										href: '#',
									},
								]},
		
							],			
							
};omnia.ui.view.handler = {
							
							clsId: 'omnia.ui.view.handler',
							
							asset: {
								clsId: 'omnia.ui.view.handler.asset',
								
								id: null,
								view: null,
								
								frame: null,
								handler: null,
								win: null,
								control: null,
								
								isStatic: false,
								isFixed: false,
								label: null,
								
								onClose: null,
								onActivate: null,
								onDeactivate: null,
								
								state: null,
								
								create: function(args) {
									return ox.create(omnia.ui.view.handler.asset, args);
								},
								init: function(args) {
									try {
										var asset = {};
										var isFrame = args.frame && args.frame instanceof jQuery;
										if(isFrame && args.frame.data('ox-view-info')) asset = args.frame.data('ox-view-info');
										if(isFrame && !asset.id && !args.id) args.id = ox.el.getClassByPrefix(args.frame, 'ox-id-frame-', false, true);
										
										this.id = args.id || asset.id || ox.id();
										this.view = args.view;
										
										this.frame = ox.node(args.frame);
										if(this.frame.getRoot) this.frame = this.frame.getRoot();
										this.handler = this.frame.data('ox-handler');
										this.win = args.win;
										this.control = args.control;
										
										this.onClose = args.onClose;
										this.onActivate = args.onActivate;
										this.onDeactivate = args.onDeactivate;
										
										this.isStatic = args.isStatic || asset.isStatic;
										this.isFixed = args.isFixed || asset.isFixed || (this.frame && this.frame.hasClass('ox-view-fixed'));
										this.label = args.label || asset.label || (args.file && args.file.meta && args.file.meta.name ? args.file.meta.name : false) || (this.frame ? this.frame.label || this.frame.attr('label') : '');
										
										this.state = {};
										
										if(this.frame && this.frame instanceof jQuery) this.frame.data('ox-view-info', this);
									}
									catch(e) { ox.error(this.clsId + '.init', e); }
								},
							},
							
							args: null,
							root: null,
							
							mode: null,
							assets: null,
							currentState: null,
							
							container: null,
							controlsElem: null,
							addPlaceHolder: null,
							
							splitLayouts: {
								'cols-equal': {			grid: {'display': 'grid', 'grid-auto-flow': 'column',	'grid-auto-columns': '1fr',	'grid-auto-rows': '',		'grid-template-columns': '',									'grid-template-rows': '',						'grid-gap': '5px'}, label: 'Cols'},
								'cols-narrow-first': {	grid: {'display': 'grid', 'grid-auto-flow': 'column',	'grid-auto-columns': '',	'grid-auto-rows': '',		'grid-template-columns': 'fit-content(25%) auto', 				'grid-template-rows': '',						'grid-gap': '5px'}, label: 'Cols, Narrow Frist'},
								'cols-narrow-last': {	grid: {'display': 'grid', 'grid-auto-flow': 'column',	'grid-auto-columns': '',	'grid-auto-rows': '',		'grid-template-columns': 'auto fit-content(300px)',				'grid-template-rows': '',						'grid-gap': '5px'}, label: 'Cols, Narrow Last'},
								//'cols-half-first': {	grid: {'display': 'grid', 'grid-auto-flow': 'column',	'grid-auto-columns': '',	'grid-auto-rows': '',		'grid-template-columns': '50% auto',							'grid-template-rows': '',						'grid-gap': '5px'}, label: 'Cols, Half first'},
								'cols-2': {				grid: {'display': 'grid', 'grid-auto-flow': '',			'grid-auto-columns': '',	'grid-auto-rows': '',		'grid-template-columns': '1fr 1fr', 							'grid-template-rows': '',						'grid-gap': '5px'}, label: 'Cols 2'},
								'cols-3': {				grid: {'display': 'grid', 'grid-auto-flow': '',			'grid-auto-columns': '',	'grid-auto-rows': '',		'grid-template-columns': '1fr 1fr 1fr', 						'grid-template-rows': '',						'grid-gap': '5px'}, label: 'Cols 3'},
								
								'rows-equal': {			grid: {'display': 'grid', 'grid-auto-flow': 'row',		'grid-auto-columns': '',	'grid-auto-rows': '1fr',	'grid-template-columns': '',									'grid-template-rows': '',						'grid-gap': '5px'}, label: 'Rows'},
								'rows-narrow-last': {	grid: {'display': 'grid', 'grid-auto-flow': 'row',		'grid-auto-columns': '',	'grid-auto-rows': '1fr',	'grid-template-columns': '',									'grid-template-rows': 'auto fit-content(25%)',	'grid-gap': '5px'}, label: 'Rows, Narrow Last'},
								
								//'cols-narrow-first-last': {grid: {'display': 'grid', 'grid-auto-flow': 'column', 'grid-template-columns': '25% auto 25%', 'grid-gap': '5px'}, label: 'Cols, Narrow aside'},
							},
							
							init: function(args) {
								this.args = args;
								this.render(args);
							},
							
							// Public functions - UI 615759
							
							activate: function(idOrIdx) {
								this.setState(idOrIdx);
							},
							add: function(args) {
								return this.addWindow(args);
							},
							remove: function(id) {
								this.removeWindow(id);
							},
							move: function(id) {
								return this.moveFrame(id);
							},
							reset: function(args) {
								if(args.onActivate) this.args.onActivate = args.onActivate;					
								if(args.onDeactivate) this.args.onDeactivate = args.onDeactivate;					
							},
							get: function() {
								return this.windows;
							},
							toggleVisible: function() {
								this.root.find('> .ox-id-controls').toggleClass('ox-hidden');
							},
							toggleSticky: function() {},
							
							// Public events
							
							onResize: function(frame, wasCalled) {
								var f = null;
								if(this.root.hasClass('ox-resize') && (f = this.root.data('ox-handler')) && (f != this) && f.onResize) f.onResize();
								var dynObjs = ox.el.get('.ox-resize', frame || this.root); 
								if(!dynObjs || !dynObjs.length) return;
								dynObjs.forEach(dynObj => {
									var handler = $(dynObj).data('ox-handler');
									if(handler && handler.onResize) handler.onResize();
								});
							},
							
							// Protected functions - UI
							
							getRoot: function() {
								return this.root;
							},
							render: function(args) {
								this.root = args.root;
								this.root.data('ox-view-handler', this);
								
								this.mode = args.mode || ox.el.getClassByPrefix(this.root, 'ox-mode-');
								this.mode = this.mode.replace('ox-mode-', '');
								
								this.windows = [];
								//var e = this.elems = ox.el.getAll(args.root, true);
								
								this.initControls();
								this.setState();
							},
							
							// Protected functions - UI - Windows
							
							initControls: function() {
								var me = this;
								var mode = this.mode;
								
								// Control element
								this.controls = [];
								var controlsElem = this.controlsElem = this.root.find('> .ox-id-controls');
								if(controlsElem.find('.ox-childs')) controlsElem = this.controlsElem = controlsElem.find('.ox-childs');
								
								// Existing frames
								this.assets = [];
								var frames = this.getFrames('frame-');
								
								if(mode == 'tabs' || mode == 'breadcrumb') {
									var contrainer = this.container = ox.node({oid: 'frame', oxid: 'view-container', css: 'ox-view-container'}, this.root);
									
									frames.forEach(frame => {
										
										// Asset
										var asset = ox.create(me.asset, {frame, isStatic: true, view: me});
										this.assets.push(asset);
										
										// Window
										asset.win = ox.node(me.getWindowItem({mode, body: asset.frame}));
										ox.el.moveTo(asset.frame, contrainer);	
										
										// Control
										if(controlsElem) {
											var context = () => {};
											var activate = () => asset.state.isActive ? context() : me.setState(asset.id);
											var close = () => me.remove(asset.id);
											
											var tab;
											var ce = controlsElem.find('> .ox-id-frame-' + asset.id);
											if(ce.length) {
												tab = ce;
												ox.el.click(ce.find('.ox-id-handle'), activate);
												ox.el.click(ce.find('.ox-id-close'), close);
												ox.el.setContext(tab, me.getControlItemMenu(asset.id));
											} else {
												tab = ox.node(me.getControlItem(asset), controlsElem);
											}
											context = ox.el.getContext(tab, me.getControlItemMenu(asset.id), true);
											asset.control = tab;
										}
										
									});
								} else if(mode == 'split') {
									frames.forEach(frame => {
										
										// Asset
										var asset = ox.create(me.asset, {frame, isStatic: true, view: me});
										this.assets.push(asset);
										
										// Window
										var isWinAlready = frame.hasClass('ox-windowinline');
										var wcss = frame.attr('wcss') || '';
										var win = isWinAlready ? frame : ox.node(me.getWindowItem({mode, id: asset.id, title: asset.label, isStatic: true, css: (me.args.isHeadless ? 'ox-no-head' : '') + ' ' + wcss}));
										if(!isWinAlready) {
											frame.after(win);
											ox.el.moveTo(frame, win.find('.ox-id-body'));
										}
										
										ox.el.setContext(win.find('.ox-id-caption'), me.getControlItemMenu(asset.id), true);
										if(ox.pf.method == 'mouse') ox.el.setContext(win.find('.ox-id-caption'), me.getControlItemMenu(asset.id));
										
										asset.win = win;
									});
								} else {
									log(this.clsId + '.initControls: Mode not supported');
								}
							},
							getWindows: function() {
								return this.assets;
							},
							addWindow: function(args) {
								log(this.clsId + '.addWindow: id = ' + (args || {}).id);
								
								var me = this;
								if(!args) args = {};
								args.view = me;
								var mode = this.mode;
								
								if(mode == 'tabs' || mode == 'breadcrumb') {
									
									// Asset
									var asset = ox.create(this.asset, args);
									this.assets.push(asset);
									
									// Window
									asset.win = ox.node(me.getWindowItem({mode, body: asset.frame}));
									ox.node(asset.win, this.container);
									
									// Control
									if(this.controlsElem) {
										var tab = ox.node(this.getControlItem({oid: asset.isStatic || mode == 'breadcrumb' ? 'tabstatic' : 'tab', id: asset.id, label: asset.label, asset}), this.controlsElem);
										asset.control = tab;
									}
									
									this.setState(asset.id);
									
									return asset.handler || asset.frame;
								} else if(mode == 'split') {
									
									// Asset
									var asset = ox.create(this.asset, args);
									this.assets.push(asset);
									
									// Window
									var win = ox.node(me.getWindowItem({mode, id: asset.id, title: asset.label, body: asset.frame, isStatic: asset.isStatic}), this.root);
									
									ox.el.setContext(win.find('.ox-id-caption'), me.getControlItemMenu(asset.id), true);
									if(ox.pf.method == 'mouse') ox.el.setContext(win.find('.ox-id-caption'), me.getControlItemMenu(asset.id));
									
									asset.win = win;
									
									this.setState();

									return asset.handler || asset.frame;
								} else {
									log(this.clsId + '.addWindow: Mode not supported');
								}
								
								
							},
							removeWindow: function(id, isNotTriggerEvent, isAfterMoved) {
								log(this.clsId + '.removeWindow: id = ' + id);
								
								var mode = this.mode;
								var asset = this.getAssetById(id);
								if(!asset) return ox.error(this.clsId + '.removeWindow: Window not found (id = ' + id + ')');
								
								if(mode == 'tabs' || mode == 'breadcrumb') {
									var assetIdx = this.assets.findIndex(a => a === asset);
									var wasActive = asset.control && asset.control.hasClass('ox-active');
									
									if(!isNotTriggerEvent && asset.onClose) asset.onClose(asset.frame);
									if(asset.control) asset.control.remove();
									asset.win.remove();
									
									this.assets = this.assets.filter(a => a !== asset);
									
									if(wasActive) this.setState(assetIdx == 0 ? 0 : assetIdx - 1, isNotTriggerEvent);
								} else if(mode == 'split') {
									if(!isNotTriggerEvent && asset.onClose) asset.onClose(asset.frame);
									asset.win.remove();
								
									this.assets = this.assets.filter(a => a !== asset);
									
									this.setState();
								} else {
									log(this.clsId + '.removeWindow: Mode not supported (id = ' + id + ')');
								}
							},
							setAddPlaceholder: function(isOn, onSelect) {
								if(!isOn) {
									if(this.addPlaceHolder) this.addPlaceHolder.remove();
									return;
								}
								
								var mode = this.mode;
								var cfg = {oid: 'buttonicon', icon: 'fa fa-plus', css: 'ox-yellow ox-col-ui-dialog-1-back', click: () => onSelect(this)};

								if(mode == 'tabs') {
									this.addPlaceHolder = ox.node(cfg, this.controlsElem);
								} else if(mode == 'split') {
									this.addPlaceHolder = ox.node(cfg, this.root);
								}
							},
							moveFrame: function(id) {
								var me = this;
								var asset = this.getAssetById(id);
								if(!asset) return false;
								
								var views = this.getAllViews(true);
								var onSelect = view => {
									var f = asset.frame.detach();
									f.removeClass('ox-notvisible');
									me.removeWindow(id, true, true);
									
									asset.frame = f;
									view.add(asset); //{id: asset.id, frame: f, label: asset.label, isStatic: asset.isStatic, isFixed: asset.isFixed});
									
									views.forEach(v => v.setAddPlaceholder(false));
									
									view.setState();
									me.setState();
								};
								
								if(views.length == 1) { onSelect(views[0]); return true; }
								else views.forEach(v => v.setAddPlaceholder(true, onSelect));
								
								return true;
							},
							setState: function(idOrIdx, isNotTriggerEvent) {
								var me = this;
								var mode = this.mode;
								var assets = this.assets;

								if(mode == 'tabs' || mode == 'breadcrumb') {
									if(!idOrIdx) idOrIdx = 0;
									var activeIdx = -1;
									
									assets.forEach((asset, idx) => {
										var isActive = asset.id == idOrIdx || idx == idOrIdx;
										if(isActive) activeIdx = idx;
										asset.state.isActive = isActive;
										
										// Control
										if(asset.control) ox.css(asset.control, 'ox-active', mode != 'breadcrumb' && isActive);
										
										// Window
										if(!isNotTriggerEvent && !isActive && asset.onBeforeDeactivate) asset.onBeforeDeactivate(asset.id);
										ox.css($(asset.win), 'ox-notvisible abs-i t00', !isActive);
										if(!isNotTriggerEvent && !isActive && asset.onDeactivate) asset.onDeactivate(asset.id);
										if(!isNotTriggerEvent && isActive && asset.onActivate) asset.onActivate(asset.id);
									});
									
									// Breadcrump
									if(mode == 'breadcrumb') for(var i = assets.length - 1; i > activeIdx; i--) me.removeWindow(assets[i].id, true);
									
									// Event
									if(!isNotTriggerEvent && me.args.onActivate) me.args.onActivate(idOrIdx);
									
								} else if(mode == 'split') {
									
									// Layout
									if(!idOrIdx) idOrIdx = this.currentState || this.args.layout || 'cols-equal';
									this.currentState = idOrIdx;
									var layout = this.splitLayouts[idOrIdx];
									if(!layout) return;
									var css = ox.copy(layout.grid);
									Object.keys(css).forEach(id => { if(css[id].includes('%c%')) css[id] = css[id].replace('%c%', assets.length - 1); });
									this.root.css(css);
									this.root.css('grid-gap', this.assets.length > 1 ? '5px' : '0px');
									
									if(!ox.pf.isPhone) ox.css(this.root, 'p5', this.assets.length > 1);
									
								} else {
									log(this.clsId + '.setState: Mode not supported');
								} 
							},
							getControlItemMenu: function(id, isBar) {
								var me = this;
								var mode = this.mode;
								var asset = this.getAssetById(id);
								
								var menu = [
									{oid: 'label', text: asset.label},
									{oid: 'sep'},
									mode != 'tabs' ? null : {oid: 'button', oxid: 'close', label: '#activate', click: () => me.setState(id)},
									asset.isFixed ? null : {oid: 'button', oxid: 'close', label: '#move', click: () => me.moveFrame(id)},
									mode != 'split' ? null : {oid: 'sep'},
									mode != 'split' ? null : Object.keys(this.splitLayouts).map(id => { 
										if(ox.pf.isPhone && id.substr(0, 5) == 'cols-') return null;
										var l = me.splitLayouts[id]; 
										return {oid: 'button', oxid: 'close', label: 'Layout: ' + l.label, click: () => me.setState(id)}; 
									}),
								];
								
								//var parentAsset = this.root.data('ox-view-info');
								//if(parentAsset && parentAsset.view) menu = menu.concat(view.getControlItemMenu(parentAsset.id));
								
								if(isBar) return {oid: 'bar2', css: 'ox-context', c: menu};
								return menu;
							},
							getControlItem: function(args) {
								var me = this;
								var mode = args.mode || this.mode;
								
								if(mode == 'tabs' || mode == 'breadcrumb') {
									var ref = {};
									var	context = asset => { log('#1')
										var c = ox.el.getContext(asset.control, me.getControlItemMenu(args.id), true);
										c(); 
									};
									var activate = () => { var a = args.asset || args; a.state && a.state.isActive ? context(a) : me.setState(a.id); };
								//	var activate = () => me.setState(args.id);
									var close = () => me.remove(args.id);
									
									return {
										oid: args.oid || 'tabstatic', 
										css: '' + (mode == 'breadcrumb' ? ' ox-breadcrumb' : ''),
										oxid: 'frame-' + args.id, 
										label: {html: args.label || args.id},
										handle: {click: args.click || activate},
										close: {click: close},
										context: me.getControlItemMenu(args.id),
									}
								}
							},
							getWindowItem: function(args) {
								if(args.mode == 'tabs' || args.mode == 'breadcrumb') {
									return {oid: 'frame', c: [args.body]};
								} else if(args.mode == 'split') {
									var close = () => this.remove(args.id);
									return {
										oid: 'windowinline', 
										css: 'ox-no-options' + (!args.isStatic ? '' : ' ox-no-close') + ' ' + args.css, 
										title: args.title || '', body: args.body,
										close: {click: close},
									};
								}
							},
							
							// Protected functions - Service
							
							getAssetById: function(id) {
								return this.assets.find(a => a.id == id);
							},
							getLabel: function() {
								return this.root.attr('label') || this.args.label;
							},
							
							// Protected functions - UI Service
							
							getFrames: function(id) {
								return this.root.find('> *[class*=\'ox-id-' + id + '\']').get().map(e => $(e));
							},
							getAllViews: function(isNotSelf) {
								var me = this;
								return ox.el.get('.ox-view').get().map(v => $(v).data('ox-view-handler')).filter(v => !isNotSelf || (isNotSelf && v !== me));
							},
							
};omnia.ui.view.html = {
							
							oid: 'frame', css: 'ox-view',
							
};omnia.ui.button.events = {

							init: function(elem, target) {
								if(omnia.tools.browser.platform.method == 'mouse') return;
								
								/*elem.on('mousedown touchstart', omnia.ui.button.events.onDown);
								elem.on('mouseup touchend', omnia.ui.button.events.onUp);
								if(target) elem.data('ox-down-target', target);
								
								$('.ox-frame2').on('scroll', omnia.ui.button.events.onUp);
								$('.ox-scrollable').on('scroll', omnia.ui.button.events.onUp);
								*/
								
								elem.off('mousedown.ox-b touchstart.ox-b mouseup.ox-b touchend.ox-b');
								elem.on('mousedown.ox-b touchstart.ox-b', omnia.ui.button.events.onDown);
								elem.on('mouseup.ox-b touchend.ox-b', omnia.ui.button.events.onUp);
								if(target) elem.data('ox-down-target', target);
								
								$('.ox-frame2,.ox-scrollable').off('scroll.ox-b');
								$('.ox-frame2,.ox-scrollable').on('scroll.ox-b', omnia.ui.button.events.onUp);
							},
							onDown: function(e) {
								$('.ox-down').removeClass('ox-down');
								try {
									var t = $(this).data('ox-down-target');
									if(t) t.addClass('ox-down');
									else $(this).addClass('ox-down');
								}
								catch(e) {
									$(this).addClass('ox-down');
								}
							},
							onUp: function(e) {
								$('.ox-down').removeClass('ox-down');
							},
							refresh: function() {
								$('.ox-down').removeClass('ox-down');
								$('.ox-frame2').on('scroll', omnia.ui.button.events.onUp);
								$('.ox-scrollable').on('scroll', omnia.ui.button.events.onUp);
							},

};omnia.ui.button.html = {
							
							t: 'button', onRendered: 'omnia.ui.button.events.init', css: 'ox-button ox-id-label'
							
};omnia.ui.buttonicon.html = {
							
							t: 'button', onRendered: 'omnia.ui.button.events.init', css: 'ox-button rel', c: [
								{t: 'i', css: 'ox-id-icon rel', c: [
									{t: 'i', css: 'ox-id-icon2 ox-id-icon-2 abs t00 ox-font-10', style: {'left': 12, 'top': 10}}, 
								]}, 
								{t: 'span', css: 'ox-id-label'}
							]
						
};omnia.ui.buttonmore.html = {
							
							oid: 'buttonicon', css: 'ox-more', icon: 'fa fa-angle-down col-medium-4 ox-font-11-i'
							
};omnia.ui.label.html = {

							t: 'span', css: 'ox-label ox-id-text'
							
};omnia.ui.panel.html = {
							
							oid: 'button', css: 'ox-panel-handler'
							
};omnia.ui.sep.html = {
							
							t: 'span', css: 'ox-sep'
							
};omnia.ui.tab.html = {

							t: 'div', css: 'ox-tab rel', c: [
								{t: 'button', onRendered: 'omnia.ui.button.events.init', oxid: 'label handle', css: 'ox-button ox-label-button'},
								{t: 'button', onRendered: 'omnia.ui.button.events.init', oxid: 'close', css: 'ox-button ox-square ox-close ox-medium', c: [
									{t: 'i', css: 'ma ma-16', text: 'close'},
								]},
							]

};omnia.ui.tabstatic.html = {

							t: 'div', css: 'ox-tab ox-static rel', c: [
								{t: 'button', onRendered: 'omnia.ui.button.events.init', oxid: 'label handle', css: 'ox-button'},
							],

};omnia.ui.tabiconstatic.html = {

							t: 'div', css: 'ox-tab ox-static rel', c: [
								{t: 'button', onRendered: 'omnia.ui.button.events.init', oxid: 'handle', css: 'ox-button w100', c: [
									{t: 'i', oxid: 'icon', css: 'hcenter'}, 
									{t: 'span', oxid: 'label'}
								]},
							],

};omnia.ui.tablink.html = {

							t: 'a', href: '#', title: '', css: 'ox-id-tablink ox-button ox-medium ox-static flex-center', style: {'line-height': '55px', 'height': '55px'}, c: [
								{t: 'i', css: 'ox-id-icon inline vtop', style: {'line-height': '55px', 'height': '55px'}},	
								{t: 'span', css: 'ox-id-label inline vtop', style: {'line-height': '55px', 'height': '55px'}},	
							]

};omnia.ui.tablinkactive.html = {

							t: 'div', title: '', css: 'ox-id-tablinkactive ox-button ox-medium flex-center', style: {'line-height': '50px', 'height': '55px', 'border-top': '3px solid #26588a'}, c: [
								{t: 'i', css: 'ox-id-icon vtop', style: {'line-height': '50px', 'height': '55px'}},	
								{t: 'span', css: 'ox-id-label vtop', style: {'line-height': '50px', 'height': '55px'}},	
							]
							
};omnia.ui.dialog.html = {

							oid: 'frame2', css: 'ox-dialog ox-overlay-content', onReady: function(elem) { 
								setTimeout(function() { 
									if($(elem).hasClass('ox-dark') || $(elem).hasClass('ox-black') || $(elem).hasClass('ox-blue')) $(elem.find('.ox-id-head')).addClass('ox-dark');  
									if($(elem).hasClass('ox-actions-context')) ox.el.get('actions', elem).addClass('ox-context flex-column-reverse');
				
									var title = $(elem.find('.ox-id-title'));
									if(!title.text()) title.addClass('ox-hidden');
									
									if($(elem).hasClass('ox-actions-line') || 1) $(elem.find('.ox-id-actions')).addClass('ox-line');  
									if($(elem).hasClass('ox-caption-line') || 1) $(elem.find('.ox-id-caption')).addClass('ox-line');  
								}, 1); 
							}, c: [
								{oid: 'bar2', css: 'ox-small ox-caption ox-id-caption col-highlight ox-col-ui-dialog-1-back ox-split ox-center flex-fix ox-id-head ox-flat', c: [
									{oid: 'label', css: 'ox-id-title'},
								]},
								{oid: 'bar2', css: 'ox-small ox-overlay ox-flex ox-right ox-close-bar ox-id-close-bar flex-fix ox-id-head', c: [
									{oid: 'button', css: 'ox-id-close ox-id-x ox-medium', label: '<i class="ma ma-16" style="line-height:35px !important">close</i>'},
								]},
								//{t: 'div', css: 'ox-childs ox-id-childs ox-id-body ox-col-ui-dialog-1-back ox-dark-col-white-75 scrollable _flex-1'},
								{oid: 'frame2', css: 'ox-childs ox-id-childs ox-body ox-id-body ox-col-ui-dialog-1-back ox-dark-col-white-75 ox-content _flex-1'},
								{oid: 'bar2', css: 'ox-end ox-split ox-id-actions ox-actions ox-col-ui-dialog-1-back flex-fix _ox-line ox-bottom-safe', c: [
									{oid: 'button', css: 'ox-id-close ox-id-cancel ox-inline ox-alone', label: '#cancel'},
								]},
							]
							
};omnia.ui.popup.html = {
							
							oid: 'dialog', css: 'ox-popup ox-nocaption ox-noclose'
							
};omnia.ui.windowinline.html = {
							
							oid: 'frame', css: 'ox-windowinline br4', c: [
								{oid: 'bar2', oxid: 'head', css: 'z2 ox-small ox-border-thin-bottom-i ox-stretch col-highlight ox-col-ui-dialog-1-back flex-fix ox-flat', c: [
									{oid: 'button', oxid: 'title caption', css: 'ox-medium ox-left ox-weight-regular-i ox-font-12-i', style: {'padding-right': 90}},
								]},
								{oid: 'bar2', oxid: 'options-bar head', css: 'z2 ox-small ox-overlay ox-flex ox-right ox-close-bar flex-fix', c: [
									{oid: 'buttonicon', oxid: 'options', css: 'ox-medium', icon: 'fa fa-ellipsis-h'},
									{oid: 'button', oxid: 'close x', css: 'ox-medium', label: '<i class="ma ma-16" style="line-height:35px !important">close</i>'},
								]},
								{oid: 'frame2', oxid: 'childs body', css: 'z1 ox-childs ox-body ox-col-ui-dialog-1-back ox-dark-col-white-75 ox-dark-col-black-back'},
							],
							
};omnia.ui.accordeon.handler = {

							args: null,
							init: function(args) {
								this.args = args;
								this.root = args.root;
								
								// items
								// css
								// cssBar
								
								this.render(args.items);
							},
							render: function(items) {
								var cfg = [];
								$.each(items, function(i, item) {
									
									var id = ox.id();
									var strip = [];
									
									// Handle
									var label = [{t: 'i', css: 'ox-id-handle ox-font-10-i fa fa-chevron-right', style: 'width:20px; line-height:100%;'}];
									if(item.label && typeof item.label == 'string') label.push({t: 'span', text: item.label}); else label = label.concat(item.label);
									
									strip.push({oid: 'bar2', css: 'ox-accordeon-handle _ox-alone ox-noflex ' + (item.cssBar ? item.cssBar : ''), c: [
										{oid: 'button', css: 'hleft-i w100 ox-medium', c: label, click: function(e, elem) { 
											// Body
											var f = elem.parent().parent().parent();
											var body = f.find('.ox-id-accordeon-item-' + id)
											body.toggleClass('ox-hidden'); 
											var isOpen = !body.hasClass('ox-hidden');
			
											// Handle
											var b = elem.find('.ox-id-handle');
											ox.css(b, 'fa-chevron-right', !isOpen);
											ox.css(b, 'fa-chevron-down', isOpen);
										}},
									]});
									
									var body = item.body && item.body instanceof Array ? item.body : [item.body];
									$.each(body, function(j, bodyElem) {
										if(!bodyElem) return;
										
										if(bodyElem.t || bodyElem.oid) bodyElem.css = (bodyElem.css || '') + ' ox-hidden ox-id-accordeon-item-' + id;
										strip.push(bodyElem);
									});
									
									cfg.push({t: 'div', css: 'ox-accordeon-item ' + item.css || '', c: strip});
								});
								
								ox.node(cfg, this.root);
							},
							getRoot: function() {
								return this.root;
							},

};omnia.ui.accordeon.html = {

							t: 'div', css: 'ox-accordeon'
							
};omnia.ui.expandable.html = {

							t: 'div', c: [
								{oid: 'bar2', css: 'ox-stretch ox-id-expand-bar ox-small', c: [
									{oid: 'button', css: 'ox-id-expand-button col-medium-4 ox-dark-col-dark', click: function(e, elem) {
										var root = elem.parent().parent().parent();
										var bar = elem.parent().parent();
										var icon = elem.find('.ox-id-icon');
										var content = root.find('> .ox-id-body');

										var isContentClose = root.hasClass('ox-content-close');
										var isUpwards = root.hasClass('ox-upwards');
										
										content.toggleClass('ox-hidden');
										if(!isContentClose) {
											var isClosed = content.hasClass('ox-hidden');
											ox.css(icon, 'fa-angle-down', isUpwards ? !isClosed : isClosed);
											ox.css(icon, 'fa-angle-up', isUpwards ? isClosed : !isClosed);
										} else {
											bar.toggleClass('ox-hidden');
											content.addClass('hand');
											var id = ox.id();
											content.on(ox.b.CLICK + '.' + id, function() {
												bar.toggleClass('ox-hidden');
												content.toggleClass('ox-hidden');
												content.off(ox.b.CLICK + '.' + id);
												content.removeClass('hand');
												content.blur();
											});	
										}
										
										elem.blur();
									}, c: [
										{t: 'i', css: 'ox-id-icon fa fa-angle-down', onRendered: function(elem) {
											ox.el.onRefresh(function() {
												var root = elem.parent().parent().parent().parent();
												var isUpwards = root.hasClass('ox-upwards');
												
												ox.css(elem, 'fa-angle-down', !isUpwards);
												ox.css(elem, 'fa-angle-up', isUpwards);
											});
										}},
										{t: 'span', css: 'ox-id-barlabel ox-empty-hidden ml10'},
									]},
								]},
								{t: 'div', css: 'ox-id-body ox-childs ox-id-childs ox-hidden'},
							],

};omnia.ui.iscroll.handler = {

							scroll: null,
							init: function(args) {
								var me = this;
								var root = args.root;
								delete args.root;
						
								try { 
									if(!IScroll) {
										ox.error('iScroll not defined');
										return;
									}
									
									setTimeout(function() {
										me.scroll = new IScroll(root[0], args);
									}, 1);
								}
								catch(e) {
									ox.error('iScroll not defined', e);
								}
							},

};omnia.ui.iscroll.html = {
							
							t: 'div', css: 'ox-iscroll ox-id-iscroll-wrapper ox-childs cropped'
							
};omnia.ui.bartile.html = {
						
							t: 'div', css: 'ox-bartile ox-col-ui-dialog-1-back ox-dark-col-pitch-3-back p10 ox-border ox-dark-border-none rel', c: [
								{oid: 'headline', oxid: 'title', css: 'ox-h5 mb10 col-highlight ox-dark-col-medium-4'},
								{t: 'div', oxid: 'body childs', css: 'ox-body ox-childs'},
							],
							
};omnia.ui.griditem.html = {
						
							t: 'div', css: 'ox-griditem ox-id-button ox-inline rel col-white-back ox-dark-col-pitch-3-back inline cropped', style: 'overflow:hidden', onRendered: function(elem, args) { 
								if(args && args.items) {
									var m = ox.el.get('menu-button', elem, true);
									if(m) m.setItems(args.items);
								}
								omnia.ui.button.events.init(elem, ox.el.get('button', elem));
								//omnia.ui.button.events.init(elem);
								if(args && args.onSelect) ox.el.get('image', elem).on(ox.b.CLICK, function(e) { args.onSelect(e); })
							}, c: [
								{t: 'div', css: 'abs t00 w100 h100 backcover ox-id-image cropped', c: [
									{t: 'div', css: 'ox-id-back abs t00 w100 h100'},
									{t: 'div', css: 'ox-id-fade col-blue-25-back _ox-fadeout-black-50 abs t00 w100 h100'},
									//{t: 'div', css: 'ox-id-cursor abs t00 w100 h100 ox-hidden'},
									{t: 'div', css: 'ox-id-title-block z1 cropped ox-font-headline ox-font-14 semibold flex flex-vmiddle', c: [
										{t: 'i', css: 'ox-id-icon'},
										{t: 'div', css: 'inline ox-id-title wrap'},
									]},
									{oid: 'button', css: 'ox-id-button abs t00 w100 h100 z1'},
								]},
								{oid: 'bar2', css: 'ox-flex ox-overlay ox-right ox-id-dropdown ox-end', style: {'z-index': 3}, c: [
									{oid: 'dropdown', css: 'ox-medium hright ox-id-menu-button', args: {isMenu: 'v'}},
								]},
							]
							
};omnia.ui.list.handler = {

							args: null,
			
							clsId: 'omnia.ui.list.handler', 
							id: null,
							root: null,
							head: null,
							body: null,
							
							isDark: false,
							isFold: false,
							isGrid: false,
							isDrag: false,
							isDragMove: false,
							isAdd: false,
							isAddAll: false,
							isFull: false,
							
							useBrowserFullscreen: true,
							gridInfo: {
								w: 200,
								wPhone: 150,
								gap: 15,
								ratio: 16 / 9,
							},
							gridCache: null,
							loopId: null,
							loop: null,
							empty: null,
							progress: null,
							
							init: function(args) {
								//var t0 = ox.t0('_' + this.clsId + '.init');
								//t0.bp('Start');
								
								var me = this;
								var platform = omnia.tools.browser.platform;
								
								if(args.show && !args.show()) return; 
								
								this.args = {};
								
								this.args = args;
								this.id = omnia.tools.getUniqueId();
								this.root = args.root;
								this.body = this.root.find('.ox-body');
								this.head = this.root.find('.ox-head');
								
								// Options
								this.isDark = this.root.hasClass('ox-dark');
								this.isFold = this.root.hasClass('ox-fold');
								if(this.isFold) this.setFold();
			
								if(args.gridInfo && args.gridInfo.width && !args.gridInfo.w) args.gridInfo.w = args.gridInfo.width;
								if(args.gridInfo !== undefined) this.gridInfo = {w: args.gridInfo.w, wPhone: args.gridInfo.wPhone, gap: args.gridInfo.gap, ratio: args.gridInfo.ratio};
								var isGrid = this.root.hasClass('ox-grid');
								if(isGrid) {
									$(window).on('resize.ox-list-' + this.id, function() { 
										//log('window.onResize event');
										me.onResize(); 
									});
									this.onResize();
								}
								
								this.isDrag = this.root.hasClass('ox-drag');
								
								if(args.hasKeys || this.root.hasClass('ox-keys')) this.setKeys();
								if(args.useBrowserFullscreen != undefined) this.useBrowserFullscreen = args.useBrowserFullscreen;
			
								if(this.head.text() == '') this.head.addClass('ox-hidden');
								
								this.isAdd = this.root.hasClass('ox-add');
								//this.isAddAll = this.root.hasClass('ox-add-all');
								
								if(args.empty) this.empty = args.empty;
			
								// Dummy data
								if(args.itemTemplate) {
									args.getItem = function(idx, item, list) {
										
										var r = null;
										if(args['data-template']) {
											var oid = args['data-template'];
											ox.each(item, function(id, value) {
												if(oid.indexOf('%' + id + '%')) oid = oid.split('%' + id + '%').join(value);
											});
									
											r = args.itemTemplate && typeof args.itemTemplate == 'object' ? args.itemTemplate.c.filter(function(item) { return item.oid == oid; })[0] : {oid: oid, css: ''};
										} else {

											r = typeof args.itemTemplate == 'object' ? args.itemTemplate.c[Math.floor(Math.random() * args.itemTemplate.c.length)] : {oid: args.itemTemplate, css: ''};
										}
										
										if(args.cssItems) {
											if(!r.css) r.css = '';
											r.css += ' ' + args.cssItems;
										}
										
										if(item) ox.each(item, function(id, value) { r[id] = value; });
										
										//log(r);
										return r;	
									};
									
									if(!args.data && args.datacount) {
										args.data = [];
										for(var i = 0; i < parseInt(args.datacount); i++) args.data.push({});
									}
								}
			
								// Actions
								if(args && (args.items || (args.data && args.getItem))) { 
									args.clear = true;
									args.initital = true;
									this.publish(args);
								} else {
									window.requestAnimationFrame(function() { me.refresh(); });
								}
								//t0.bp('Done');
								
								ox.el.onRefresh(function() {
									if(me.isDrag) me.setDrag(args);
									
								}); 
								
								this.onResize();
							},
							destroy: function() {
								$(window).off('resize.ox-list-' + this.id);
								delete this.args;
								delete this.loop;
								delete this.gridInfo;
							}, 
							
							// Use cases
							
							redraw: function() {
								log('omnia.ui.list.redraw');
								this.publish({data: this.args.data, clear: true});
							},
							clear: function(isNoRefresh) {
								//this.killLoop();
								//delete this.loop;
								//delete this.loopId;
								if(this.loop) {
									this.loop.isDead = true;
									this.loop.isPending = false;
									if(this.loop.p) this.loop.p.off('scroll.lazy');
									if(this.body) this.body.find('.ox-dummy').remove();
								}
								this.body.html('');
//log('#clear', this.body);								
								if(!isNoRefresh) this.refresh();
							},
							refresh: function() {
								//log('#omnia.ui.list.handler.refresh (' + this.getListId() + ')');
								
								var me = this;
								var platform = omnia.tools.browser.platform;
								
								var add = this.body.find('> .ox-add');
								var empty = this.body.find('> .ox-empty');
								var items = this.getItems();
								var hasItems = this.body.find('> *:not(.ox-hidden)').length; //items.length > 0;
								var isDragMove = this.isDragMove;
			
								// Update Add
								if(this.isAdd) {
									if(!add.length) {
										// Create
										if(this.args.addContent) {
											this.args.addContent.click = function(e, elem) { me.onAdd(e, elem); elem.blur(); };
											ox.node({t: 'div', css: 'ox-add ox-autosize flex-center ' + (me.args.cssAdd ? me.args.cssAdd : ''), c: [this.args.addContent]}, this.body);
										} else {
											var label = this.args.labelAdd ? this.args.labelAdd : '#add-item';
											ox.node({oid: 'button', css: 'ox-add ox-autosize br2 ' + (this.isDark ? ' ox-glass' : '') + (this.root.hasClass('ox-grid') ? '' : ' ' + (me.args.cssAdd ? ' _ox-soft ' + me.args.cssAdd : ' ox-blue ox-inline')), label: label, click: function(e, elem) { me.onAdd(e, elem); }}, this.body);
										}
									} else {
										// Move to the end
										/*if(!this.isDragMove) {
											add.remove();
											add.on(ox.b.CLICK, function(e) { me.onAdd(e); });
											this.body.append(add);
										}*/
									}
								} else {
									if(add.length) add.remove();
								}
			
								if(hasItems || this.isAdd) {
									// Update Events
//log('_Update events');									
									
									empty.remove();
									$.each(items, function(i, item) {
										item = $(item);
//log(item.text() + ' ' + item.hasClass('ox-event-hold'));
									//log({id: 'list.refresh', handlecss: me.args.dragHandle, item, handle: $(item.find(me.args.dragHandle))})	
									
										var itemH = item;
										if(me.args.dragHandle) item = $(item.find(me.args.dragHandle));
										omnia.ui.button.events.init(item);
							
										//if(!item.hasClass('ox-event-hold')) 
										omnia.tools.element.setEventHold(
											item, 
											function(e, item) { return me.onHold(e, item, itemH); }, 
											function(e, item) { me.onUp(e, item, itemH); }, 
											me.args.dragDelay
										);
									});
									this.onResize();
								} else {
									// Update Empty
									if(!empty.length && !this.args.isNoEmpty) {
										//var isHeadOff = this.head.hasClass('ox-hidden');
										var cfg = this.empty ? this.empty : {t: 'div', css: 'ox-font-headline col-medium-4 ox-h4 semibold ' + (this.isDark ? ' col-white' : ''), text: '#noitems'};
										if(!cfg.css) cfg.css = '';
										cfg.css += ' ox-id-empty ox-empty ' + (this.args.cssEmpty ? this.args.cssEmpty : '');
										ox.node(cfg, {root: this.body, onTop: true});
									}
								}
							},
							reset: function(args) {
								if(args.getItem) this.args.getItem = args.getItem;
								if(args.gridInfo) this.setGrid(args.gridInfo);
								if(args.empty) this.setEmpty(args.empty);
								if(args.isNoEmpty !== undefined) this.args.isNoEmpty = args.isNoEmpty; 
								if(args.data) this.publish({data: args.data});
								if(args.onAdd) this.args.onAdd = args.onAdd;
								if(args.onMoved) this.args.onMoved = args.onMoved;
								if(args.title) this.root.find('> .ox-id-title').removeClass('ox-hidden').html(args.title);
							},
							
							fillLazy: function(args, offset, onDone) {
								var me = this;
								var limit = args.limit || 15;
								
								if(!onDone) onDone = (offset, onDone) => { me.fillLazy(args, offset + limit, onDone); };
								if(!offset) offset = 0;
								
								if(!offset) this.loading(true);
								args.request(offset, data => { 
									me.loading({stop: true});
									
									if(!data || !data.length) {
										if(!offset) me.clear();
										return;
									}
									
									me.publish({
										clear: !offset,
										isLazy: true,
										getItem: (i, item) => args.getItem(item),
										data: data, 
										onDone: () => { onDone(offset, onDone); },
									});
								});
							},
							publish: function(args) {
								var lid = this.getListId();
								if(args.lazy || args.log) log('omnia.ui.list.handler.publish (' + lid + ')' + (args.clear ? ': clear ' : '') + (args.initital ? 'initital ' : ''));
								
								var t0 = ox.now();
								var me = this;
								var id = this.loopId = ox.id();
								var add = this.body.find('> .ox-add');
								var isLazy = args.lazy || args.isLazy;
							
								//if(!this.body.width() || !this.body.height()) isLazy = false;

								// Clear
								if(args.clear) this.clear(true);
			
								// Save parameter
								if(args.getItem) this.args.getItem = args.getItem;
								if(args.gridInfo) this.setGrid(args.gridInfo);
								if(args.empty) this.setEmpty(args.empty);
			
								// Data
								var start = 0 + (args.max ? args.page * args.max : 0);
								var end = start + (args.max ? args.max : (args.data ? args.data.length - 1 : args.items.length - 1));
								
								if(args.data) {
									if(this.args.data && !args.clear) {
										if((args.pos || args.pos == 0) && args.pos < this.args.data.length) this.args.data = this.args.data.slice(0, args.pos).concat(args.data, this.args.data.slice(args.pos));
										else this.args.data = this.args.data.concat(args.data);
									} else this.args.data = args.data;
								}
																
								// Remove loading
								if(this.progress) this.loading({stop: true});
								
								if(args.title) this.root.find('> .ox-id-title').removeClass('ox-hidden').html(args.title);

								// Create render loop
								if(end < start) {
									//log('omnia.ui.list.handler.publish (' + lid + '): Nothing to do, start = ' + start + ', end = ' + end);
									me.refresh();
									return;
								}
								
								var loop = this.loop = {
									id: id,
									i: start,
									j: start,
									start: start,
									end: end,
									wasDone: false,
									isPending: false,
									lazy: isLazy,
									step: !isLazy ? function() { me.step(args); } : function() { me.stepLazy(args); },
									log: args.log || this.args.log,
									pos: args.pos,
								};
			
								if(isLazy) {
									log('omnia.ui.list.handler.publish (' + lid + '): Lazy: New pipe, end = ' + end);
									loop.p = me.body && me.body.scrollParent ? me.body.scrollParent() : null;
									if(loop.p) loop.p.on('scroll.lazy', function(e) { if(!loop.isPending && loop.id == me.loopId) loop.step(null, true); });
								}
								
								if(isLazy) setTimeout(function() { loop.step() }, 1); 
								else loop.step();
							},
							step: async function(args) {
								var lid = this.getListId();
								var loop = this.loop;
								if(loop.id != this.loopId) return;
								
								var me = this;
								var elem = me.renderItem(args);
								
								//await ox.el.renderFrame();
								
								if(loop.i >= loop.end) {
									if(args.isLazy || args.log) log('#omnia.ui.list.handler.step (' + lid + '): Pipe done '/* + ox.d.timeDiff(t0, null, true)*/);
									loop.isPending = false;
									
									window.requestAnimationFrame(function() { me.refresh(); }); 
			
									//if(!loop.wasDone && args.onDone) args.onDone();
									//loop.wasDone = true;
			
									if(!loop.wasDone && args.onDone) {
										args.onDone(elem);
									}
									loop.wasDone = true;
								} else {
									if(!loop.wasDone && args.onPublish) args.onPublish(loop.i);
									
									loop.isPending = true;
									loop.i++;
									loop.step();
									//window.requestAnimationFrame(loop.step); 
								}
								
								if(loop.wasDone) this.killLoop();
							},
							stepLazy: function(args, dummy, isFromEvent) {
								var lid = this.getListId();
								var loop = this.loop;
								if(!loop || loop.id != this.loopId) {
									if(loop) loop.p.off('scroll.lazy');
									return;
								}
								
								if(loop.isDead) return;
								
								var me = this;
								var dummy = me.body.find('.ox-dummy:first');
								
								if(isFromEvent) {
									//log('omnia.ui.list.handler.stepLazy (' + lid + '): Lazy: Triggered from scroll (dummy = ' + (dummy ? dummy.attr('class') : 'none') + ') ' + loop.i + ' / ' + loop.end);
								}
								
								// Add dummy
								if(!dummy || !dummy.length) {
									//log('omnia.ui.list.handler.stepLazy (' + lid + '): Add dummy item no ' + loop.i + ' / ' + loop.end);
									dummy = $('<div class="ox-dummy ox-id-dummy-' + loop.i + '"></div>');
									me.body.append(dummy);
								} 
								
								// Render required item
								var isInViewport = omnia.tools.element.isInViewport(dummy, 2);
								if(isInViewport) {
									dummy.remove();
									me.renderItem(args);
									me.refresh(); 
								} 
			
								if(loop.start + loop.j >= loop.end + 1) {
									//log('omnia.ui.list.handler.stepLazy (' + lid + '): Remove scroll handler and dummies, i = ' + loop.i + ', j = ' + loop.j);
									loop.isPending = false;
									//loop.p.off('scroll.lazy');
									//me.body.find('.ox-dummy').remove();
			
									if(!loop.wasDone && args.onDone) args.onDone();
									loop.wasDone = true;
								} else {
									if(isInViewport) {
										if(!loop.wasDone && args.onPublish) args.onPublish(loop.i);
										loop.isPending = true;
										loop.i++;
										//log('omnia.ui.list.handler.stepLazy (' + lid + '): Loop is pending');
										window.requestAnimationFrame(function() { /*log('omnia.ui.list.handler.stepLazy (' + lid + '): New frame'); */loop.step() }); 
									} else {
										//log('omnia.ui.list.handler.publish (' + lid + '): Stop pipe, i = ' + loop.i);
										loop.isPending = false;
			
										/*if(!loop.wasDone && args.onDone) {
											args.onDone();
											loop.wasDone = true;
										}*/
									}
								}
								
								if(loop.wasDone) this.killLoop();
							},
							renderItem: function(args) {
								var t00 = ox.now();
								var me = this;
								var lid = this.getListId();
								var loop = this.loop;
								var add = this.body.find('> .ox-add');
								var pos = args.pos || args.pos == 0 ? args.pos + loop.i : (add.length ? add.index() : null); /// TODO: Needs to be improved
								
								var t0 = null;
								if(loop.lazy || loop.log) t0 = ox.t0(me.clsId + '.renderItem (' + lid + '): ' + loop.i + '/' + loop.end + (pos ? ', pos = ' + pos : '') /* + ' - ' + ox.d.timeDiff(t0, null, true)*/);
								
								var item = args.data ? me.args.getItem(pos ? pos : loop.i, args.data[loop.i], me) : args.items[loop.i];
								if(!item) return null;
			//if(loop.lazy || loop.log) log('omnia.ui.list.handler.renderItem (' + lid + '): ' + loop.i + '/' + loop.end + (pos ? ', pos = ' + pos : '') /* + ' - ' + ox.d.timeDiff(t0, null, true)*/);
							
								// Actual render
								//var t0 = ox.t0(this.clsId + '.renderItem (' + lid + '): Render ' + loop.i + '/' + loop.end);
								var elem = ox.node(item, {root: me.body, pos: pos});
								if(loop.lazy || loop.log) t0.bp('Done');
								
								if(elem && elem.getRoot) elem = elem.getRoot();
								if(elem && elem.addClass) elem.addClass('ox-list-item');
								
								if(elem && ox.pf.method != 'mouse') {
									//omnia.ui.button.events.init(elem);
									var buttons = ox.el.get('.ox-button', elem);
									omnia.ui.button.events.init(buttons);
								}
								//omnia.ui.button.events.init(elem);
								
								if(args.data && elem && elem.data) elem.data('ox-list-item-data', args.data[loop.i]);
								
								loop.j++;
								return elem;
							},
							killLoop: function() {
								if(!this.loop) return;
								
								if(this.loop.lazy) log('omnia.ui.list.handler.killLoop (' + this.getListId() + ')');
								this.loop.isPending = false;
								if(this.loop.p) this.loop.p.off('scroll.lazy');
								if(this.body) this.body.find('.ox-dummy').remove();
								delete this.loop;
								delete this.loopId;					
							},
							loading: function(args) {
								//log('omnia.ui.list.loading');
								if(!args) args = {};
								var me = this;
								
								// Append
								if(!this.progress && !args.stop) {
									this.progress = ox.node({oid: 'loadcontent', css: 't00 abs ox-left ox-instrip' + (this.args.cssItems || '')/*, onReady: function(elem, loadcontent) { me.progress = loadcontent; }*/}, this.root);
									//this.body.find('> .ox-empty').addClass('ox-hidden');
									this.body.addClass('ox-hidden'); //log({body: this.body})
									if(args) this.progress.p(args);
									return;
								}
								
								// Remove
								if(args.stop) {
									if(this.progress) {
										this.progress.destroy();
										delete this.progress;
									}
									//this.body.find('> .ox-empty').removeClass('ox-hidden');
									this.body.removeClass('ox-hidden'); //log({body: this.body})
									return;
								}
								
								// Update
								this.progress.p(args);
							},
							
							remove: function(data) {
								var item = this.getItemByData(data);
								if(item) item.remove();
								this.refresh();
							},
							removeConfirm: function(onRemove) {
								log('omnia.ui.list.handler.removeConfirm');
								
								var me = this;
								omnia.ui.overlay.show({
									delay: true,
									content: '#confirm-delete',
									ok: {oid: 'button', css: 'ox-alone ox-inline ox-red ox-id-close ox-id-focus ox-id-track-de-p-remove ', label: '#delete', click: function() {
										log('omnia.ui.list.handler.removeConfirm: Execute');
										onRemove();
									}},
								});
							},			
							prev: function() {
								if(this.isFull) {
									var active = this.getItems(true);
									this.scrollTo(active.prev('.ox-list-item'));
									return;
								}
			
								var a = omnia.tools.element.getInViewport(this.body);
								this.scrollTo(a.firstPart.index() === a.first.index() ? a.first.prev() : a.firstPart);
							},
							next: function() {
								if(this.isFull) {
									var active = this.getItems(true);
									this.scrollTo(active.next('.ox-list-item'));
									return;
								}
								
								var a = omnia.tools.element.getInViewport(this.body);
								this.scrollTo(a.firstPart.index() === a.first.index() ? a.first.next() : a.firstPart.next());
							},
							scrollTo: function(item, offsetTop) {
								if(offsetTop === undefined) offsetTop = 0;
								//log('omnia.ui.list.scrollTo: ' + (typeof item == 'object' ? $(item).attr('class') : item));
								
								var items = this.getItems();

								if(typeof item == 'number') {
									item = $(this.body.find('> .ox-list-item:eq(' + item + ')'));
								}
								if(!item || !item.length || !document.contains($(item)[0])) return;
								
								var isLast = $(item)[0] === items[items.length - 1];
								
								if(this.isFull) {
									items.addClass('ox-hidden');
									item.removeClass('ox-hidden');
									
									var page = item.data('ox-handler');
									//if(page) page.onResize(true);
									//this.onResize();
								
									return;
								} else {
									items.removeClass('ox-hidden');
								}
			
								// Scroll
								var shiftTop = this.body.offset().top - this.root.offset().top;
								var shiftLeft = this.body.offset().left - this.root.offset().left;
								$(item)[0].scrollIntoView(); //{behavior: 'smooth'});
								this.body.scrollParent()[0].scrollTop -= shiftTop - (isLast ? 0 : offsetTop);
								this.body.scrollParent()[0].scrollLeft -= shiftLeft;
								
								var itemHeight = $(item).height();
								var fromTop = $(item).offset().top - this.body.scrollParent().offset().top;
								var buffer = this.body.scrollParent().height() - itemHeight - fromTop;
								if(buffer > itemHeight / 2) this.body.scrollParent()[0].scrollTop -= buffer / 2;// + offsetTop;
							},
							
							setAdd: function(isAdd) {
								this.isAdd = isAdd;
								this.refresh();
							},
							setGrid: function(args) {
								//log('omnia.ui.list.setGrid: ' + (args == false ? 'off' : 'w = ' + args.w + ', cols = ' + args.cols));
								
								if(args == false) {
									this.isGrid = false;
									this.root.removeClass('ox-grid');
									this.updateGrid();
									return;
								}
								
								this.isGrid = true;
								this.root.addClass('ox-grid');
								if(args) this.gridInfo = {
									w: args.w !== undefined ? parseInt(args.w) : null, 
									wPhone: args.wPhone != undefined ? parseInt(args.wPhone) : null, 
									gap: args.gap != undefined ? parseInt(args.gap) : null, 
									ratio: args.ratio !== undefined ? parseFloat(args.ratio) : null, 
									cols: args.cols !== undefined ? parseInt(args.cols) : null, 
									gapW: args.gapW !== undefined ? parseInt(args.gapW) : null, 
									gapH: args.gapH !== undefined ? parseInt(args.gapH) : null, 
									rows: args.rows !== undefined ? parseInt(args.rows) : null,
									colsWidth: args.colsWidth !== undefined ? parseInt(args.colsWidth) : null,
									rowsHeight: args.rowsHeight !== undefined ? parseInt(args.rowsHeight) : null,
								};
								
								this.updateGrid();
							},
							setDrag: function(args, isInternal) {
								//log('#omnia.ui.list.handler.setDrag (' + this.getListId() + ')');
			
								var me = this;
								var platform = omnia.tools.browser.platform;
				
								if(typeof args == 'boolean') {
									// De-/Activate
									if(!isInternal) {
										this.isDrag = args;
										if(!args) this.setDrag(false, true);
										return;
									}
									
									// Handling
									var lists = !this.args.connect ? [this] : $(this.args.connect == 'all' ? '.ox-list' : '.ox-list.' + this.args.connect);
									$.each(lists, function(i, listElem) {
										var list = listElem.body ? listElem : $(listElem).data('ox-handler');
										if(list && list.body) {
											if(args) {
												list.isDragMove = true;
												if(list.body.hasClass('ui-sortable')) list.body.sortable('enable');
												//if(list.body.hasClass('ui-sortable')) list.body.addClass('col-highlight-10-back');
											} else {
												list.isDragMove = false;
												if(list.body.hasClass('ui-sortable')/* && (platform.method == 'touch' || !me.isDrag)*/) 
													list.body.sortable('disable');
												//if(list.body.hasClass('ui-sortable')) list.body.removeClass('col-highlight-10-back');
												//list.refresh();
												
											}
											//list.refresh();
										}
									});
									return;
								}
								
								// Initial setup
								if(args.connect && args.connect != 'all') this.root.addClass(args.connect);
								this.body.sortable({
									delay: args.dragDelay ? args.dragDelay : null,
									tolerance: "pointer",
									placeholder: (args.cssHelper ? args.cssHelper : (this.isDark ? 'col-white-05-back' : 'col-highlight-10-back') + ' br2 inline'),
									forcePlaceholderSize: true,
									start: function(e, ui) { me.onDragStart(e, ui); },
									stop: function(e, ui) { me.onDragStop(e, ui); },
									out: function(e, ui) { me.refresh(); },
									over: function(e, ui) { me.refresh(); },
									update: function(e, ui) { me.onDragUpdate(e, ui); },
									items: '> *:not(.ox-add)',
									appendTo: args.dragAppend ? $(args.dragAppend) : (args.dragNoGlobal ? 'parent' : document.body),
									helper: args.dragNoClone ? null : 'clone',
									containment: 'document',
									scrollSensitivity: 100,
									connectWith: !args.connect ? false : (args.connect == 'all' ? '.ox-list > .ox-body' : '.ox-list.' + args.connect + ' > .ox-body'),
									handle: args.dragHandle ? args.dragHandle : null,
								});
							
								this.setDrag(false, true);
							},
							setKeys: function(isOn) {
								var me = this;
								if(isOn === undefined || isOn) $(window).on('keydown.' + this.id, function(e) { 
									if(!document.contains(me.root[0])) $(window).off('keydown.' + me.id);
									else me.onKey(e); 
								});
								else $(window).off('keydown.' + this.id);
							},
							setFull: function(isOn, idx) {
								var me = this;
								if(isOn === undefined) isOn = true;
								var platform = ox.pf;
								
								this.isFull = isOn;
								this.setDrag(false/*this.isDrag*/, true);
								
								this.runItemCommand(function(i, item, handler) { if(handler && handler.onBeforeScreenChange) handler.onBeforeScreenChange(); });
								
								ox.css(this.root, 'ox-full', isOn);
								ox.css(this.root.scrollParent(), 'ox-fullscreen', isOn);
								
								var args = {bar: null};
								
								if(this.useBrowserFullscreen) {
									var id = ox.id();
									omnia.tools.browser.addFullscreenHandler(function(isOn) { 
										if(isOn) return;
			
										me.setFull(false);
										ox.b.removeFullscreenHandler(id);
									}, id);
									omnia.tools.browser.fullscreen(isOn, this.body);
								}
			
								if(isOn && !this.body.find('.ox-id-bar-full').length) {
									ox.node({
										oid: 'bar2', 
										css: 'ox-id-bar-full ox-overlay ox-glass ox-top-safe' + (platform.method == 'mouse' ? ' ox-off ox-split' : ' ox-stretch h100-i opa0-i'), 
										childs: platform.method == 'mouse' ? null : {css: 'flex-fix flex-column h100', 
										style: {'flex-direction': 'column', 'z-index': 100000}}, 
										onRendered: function(elem) { args.bar = elem; }, 
										c: [
											{
												oid: 'button', 
												css: '', //'ox-id-track-vf-b-close', 
												label: '#close-button', 
												style: platform.method == 'mouse' ? null : {'flex': 'inherit', 'height': '45px', 'border-bottom': '1px dashed white'}, 
												click: function() { 
													if(!args.bar.hasClass('opa0-i')) me.setFull(false); 
													else args.bar.toggleClass('opa0-i');
												}
											},
											{t: 'div', c: [
												{
													oid: 'button', 
													css: /*'ox-id-track-vf-b-prev' + */(platform.method == 'mouse' ? ' ox-inline' : ''), 
													label: '<i class="fa fa-arrow-left">', 
													style: platform.method == 'mouse' ? null : {'height': '100%', 'width': '40%', 'border-right': '1px dashed white'}, 
													click: function() { me.prev(); }
												},
												platform.method == 'mouse' ? null : {
													oid: 'button', 
													css: '', 
													label: '#menu', 
													style: platform.method == 'mouse' ? null : {'height': '100%', 'width': '20%'}, 
													click: function() {
														me.body.find('.ox-id-bar-full').toggleClass('opa0-i');
													}
												},
												{
													oid: 'button', 
													css: /*'_ox-id-track-vf-b-next' + */(platform.method == 'mouse' ? ' ox-inline' : ''), 
													label: '<i class="fa fa-arrow-right">', 
													style: platform.method == 'mouse' ? null : {'height': '100%', 'width': '40%', 'border-left': '1px dashed white'}, 
													click: function() { me.next(); }
												},
											]},
										]
									}, this.body);
									this.getItems().addClass('ox-full');
									this.scrollTo(idx ? idx : 0);
								} else {
									this.body.find('.ox-id-bar-full').remove();
									this.getItems().removeClass('ox-full');
									var active = this.getItems(true);
									this.scrollTo(active);
								}
								
								// Event
								setTimeout(function() { me.onResize(); }, 1);
								if(this.args.onFull) this.args.onFull(isOn);
			
								//window.requestAnimationFrame(function() { me.onResize(); });
							},
							setTitle: function(title) {
								this.root.find('.ox-id-headline').html(title);
							},
							setEmpty: function(empty) {
								this.empty = empty;
							},
							
							// Services
							
							getRoot: function() {
								return this.root;
							},
							getBody: function() {
								return this.body;
							},
							getCount: function() {
								return this.getItems().length;
							},
							getPos: function(data) {
								return this.getItemByData(data, true);
							},
							getSisterItem: function(data, offset) {
								var pos = this.getItemByData(data, true);
								if(pos == null) return false;
								
								var all = this.getDataArray();
								var posTarget = pos + offset; 
								if(posTarget < 0) posTarget += all.length;
								if(posTarget > all.length - 1) posTarget -= all.length;
							
								var dataTarget = all[posTarget];
								return this.getItemByData(dataTarget);
							},
							getDataArray: function() {
								var me = this;
								var newData = [];
								$.each(this.body.children(), function(i, item) { 
									var data = $(item).data('ox-list-item-data');
									if(data) newData.push(data); 
								});
								return newData;
							},
							getItemByData: function(data, isReturnPos) {
								var me = this;
								var found = null;
								$.each(this.body.children(), function(i, item) { 
									var dataItem = $(item).data('ox-list-item-data');
									if(dataItem && ((dataItem.id && data.id && dataItem.id == data.id) || (dataItem === data))) found = isReturnPos ? i : $(item); 
								});
								return found;
							},
							runItemCommand: function(cmd) {
								if(!cmd) return;
								
								var items = this.getItems();
								$.each(items, function(i, item) {
									item = $(item);
									var handler = item.data('ox-handler');
									cmd(i, item, handler);
								});
							},
							
							// Public events
							
							onAdd: function(e, elem) {
								try {
									if(this.args.onAdd) this.args.onAdd(this, elem);	
									//this.refresh();
								}
								catch(e) {
									log(e);
								}
							},
							onResize: function(onResized) {
								//log('#omnia.ui.list.handler.onResize', this.root);
								
								if(!document.contains(this.root[0])) {
									$(window).off('resize.ox-list-' + this.id);
									return;
								}
							
								var me = this;
								me.updateGrid();
								setTimeout(function() { 
									me.updateGrid();
									if(onResized) setTimeout(function() { onResized(); }, 1);
								}, 1); 
								//window.requestAnimationFrame(function() { me.updateGrid(); });
								
								//if(this.loop && this.loop.lazy) this.loop.step();
								//this.onItemsChanged();
							},
							onItemsChanged: function() {
								this.root.find('.z20000').removeClass('z20000');
								
								log('omnia.ui.list.handler.onItemsChanged: ' + this.loop);
								if(this.loop) this.loop.step();
							},
							
							// Private events
							
							onHold: function(e, item, itemHighlight) {
//log('#onHold');								
								if(!this.isDrag || this.isFull) return false;
								if(ox.pf.method != 'mouse' && item && !item.hasClass('ox-down')) {
									return false;
								}
								
								if(item) {
									this.setDragHighlight(itemHighlight || item, true);
									/*item = $(item);
									ox.el.getByClass(item, 'ox-id-dragelement').addClass('ox-shadow-5-i');
									item.addClass('z20000');*/
								}
								
								this.setDrag(true, true);
								return true; // to trigger the down event
							},
							onUp: function(e, item, itemHighlight) {
//log('#onUp');								
								if(item) {
									this.setDragHighlight(itemHighlight || item, false);
									/*item = $(item);
									ox.el.getByClass(item, 'ox-id-dragelement').removeClass('ox-shadow-5-i');
									item.removeClass('z20000');*/
									//item.css('z-index', 'unset');
								}
								this.setDrag(false, true);
							},
							onDragStart: function(e, ui) {
//log('#onDragStart');		
								if(!this.isDrag) return false;
								
								this.setDragHighlight(ui.helper, true);
								//ui.placeholder.height(ui.item.outerHeight());
								//ox.el.getByClass(ui.helper, 'ox-id-dragelement').addClass('ox-shadow-5-i');
								ui.helper.css({'-webkit-transform': 'rotate(3deg)', 'opacity': .9});
								//ui.helper.addClass('z20000');
								this.setDrag(true, true);
							},
							onDragStop: function(e, ui) {
//log('#onDragStop');
								this.setDragHighlight(ui.item, false);
								ui.item.css({'-webkit-transform': '', 'opacity': 1});
								//ox.el.getByClass(ui.item, 'ox-id-dragelement').removeClass('ox-shadow-5-i');
								//ui.item.removeClass('z20000');
								this.setDrag(false, true);
								
								this.refresh();
								this.updateGrid();
							},
							onDragUpdate: function(e, ui) {
								if(this.args.onMoved) this.args.onMoved(this, this.getDataArray(), e, ui);
							},
							onOpen: function() {
								this.root.removeClass('ox-closed');
							},
							onClose: function() {
								this.root.addClass('ox-closed');
								return true;
							},
							onKey: function(e) {
								if(!this.args.hasKeys) return;
								
								var code = e.originalEvent.keyCode;
								var metaKey = event.metaKey || event.ctrlKey;
								var isAppSpace = app && app.space;
								
								switch(code) {
									case 13: // Enter
										if(metaKey) { // Fullscreen
											this.setFull(!this.root.hasClass('ox-full'));
											//if(isAppSpace) app.space.track({ucid: 'vf', uctp: 'k', value: 'full'});
										}
										break;
									case 27: // ESC
										if(this.root.hasClass('ox-full') && !omnia.tools.browser.isFullscreen()) { // Fullscreen close
											this.setFull(false);
											//if(isAppSpace) app.space.track({ucid: 'vf', uctp: 'k', value: 'close'});
										}
										break;
									case 37: // left
										//if(!isTextEditorOpen) {
											this.prev();
											//if(isAppSpace) app.space.track({ucid: 'vf', uctp: 'k', value: 'prev'});
										//}
										break;
									case 38: // up
										//if(mode == 'full') {
											//this.prevPage();
											//if(isAppSpace) app.space.track({ucid: 'vf', uctp: 'k', value: 'prev'});
										//}
										break;
									case 39: // right
										//if(!isTextEditorOpen) {
											this.next();
											//if(isAppSpace) app.space.track({ucid: 'vf', uctp: 'k', value: 'next'});
										//}	
										break;
									case 40: // down
										//if(mode == 'full') {
											//this.nextPage();
											//if(isAppSpace) app.space.track({ucid: 'vf', uctp: 'k', value: 'next'});
										//}
										break;
								}
								
								//e.preventDefault();
								//e.stopPropagation();
							},
			
							// Private functions
							
							getListId: function() {
								var prefix = 'ox-id-list-';
								return ox.el.getClassByPrefix(this.root, prefix).toString().split(prefix).join('');
							},
							getItems: function(isVisible) {
								return this.body.find('> .ox-list-item' + (isVisible ? ':not(.ox-hidden)' : ''));
							},
							updateGrid: function() {
								if(!this.body) return;
								
								//var t0 = ox.t0('_' + this.clsId + (this.args.id ? ' (' + this.args.id + ')' : '') + '.updateGrid');
								
								var cssButtonGrid = this.args.cssAdd ? this.args.cssAdd : 'ox-soft';
								var cssButton = (this.args.cssAdd ? ' ' + this.args.cssAdd : 'ox-blue ox-inline');
								
								// Clear
								if(!this.root.hasClass('ox-grid')) {
									this.body.css({
										//'display': '',
										'grid-template-columns': '',
										'grid-template-rows': '',
										'grid-gap': '',
									});
									this.body.find('.ox-add').addClass(cssButton);
									if(this.body.hasClass('ui-sortable')) this.body.sortable('option', 'axis', (this.args.dragAxis ? this.args.dragAxis : false));
									return;
								}


								var platform = omnia.tools.browser.platform;
								var info = this.gridInfo;
								
								var n = this.body.find('.ox-list-item').length + (this.isAdd ? 1 : 0); 
								var w = this.body.width();
								if(!w) w = screen.width;
								
								var param = JSON.stringify({w, gi: this.gridInfo});
								//if(this.gridCache == param) return;
								this.gridCache = param;

								//if(this.args.id == 'ox-calendar2') t0.bp('Set ' + param);
								
								var colsWidth = info.colsWidth ? info.colsWidth + 'px' : '1fr';
								var rowsHeight = info.rowsHeight ? info.rowsHeight + 'px' : '1fr';
			
								var cols = info.cols ? info.cols : (!info.w ? 1 : Math.floor(w / (platform.device == 'phone' && info.wPhone ? info.wPhone : info.w)));
								if(!cols) cols = 1;

								var gapW = info.gap != undefined ? info.gap : (info.gapW != undefined ? info.gapW : null);
								var gapH = info.gap != undefined ? info.gap : (info.gapH != undefined ? info.gapH : null);
								var tileW = (w + gapW) / cols - gapW;
								var tileH = Math.floor(tileW / info.ratio);
			
								//log({gridInfo: info, gapW, gapH, tileW, tileH, colsWidth, cols});

								this.body.css({
									'grid-template-columns': 'repeat(' + cols + ', minmax(0, ' + colsWidth + '))', //'repeat(' + cols + ', ' + colsWidth + ')',
									'grid-template-rows': info.rows ? 'repeat(' + info.rows + ', ' + rowsHeight + ')' : (!info.ratio ? 'none' : 'repeat(' + (Math.ceil(n / cols)) + ', ' + tileH + 'px)'),
									'grid-auto-rows': !info.rows && !info.ratio ? 'min-content' : null,
									'grid-gap': (gapH ? gapH : 0) + 'px ' + (gapW ? gapW : 0) + 'px', //info.gap ? info.gap + 'px' : '0px',
								});

								if(cols > 1) this.body.find('> .ox-add').removeClass(cssButton).addClass(cssButtonGrid);
								else this.body.find('> .ox-add').removeClass(cssButtonGrid).addClass(cssButton);
								
								if(this.body.hasClass('ui-sortable')) this.body.sortable('option', 'axis', cols == 1 && platform.device == 'phone' ? 'y' : (this.args.dragAxis ? this.args.dragAxis : false));
								this.triggerOnResize(tileW, tileH);
							},
							triggerOnResize: function(w, h) {
								var me = this;
								
								window.requestAnimationFrame(function() {
									$.each(me.body.children(), function(i, child) {
										child = $(child);
										var handler = child.data && typeof child.data == 'function' ? child.data('ox-handler') : null;
										if(handler && handler.onResize) { handler.onResize(me.root.hasClass('ox-full'), w, h); }
									});
								});					
							},
							setFold: function() {
								var me = this;
								omnia.tools.html.node({oid: 'bar2', css: 'ox-end ox-stretch', c: [
									{oid: 'button', css: 'ox-id-show ox-show ox-border-top-i', label: '#show-button', click: function() { me.onOpen(); }},
									{oid: 'button', css: 'ox-id-hide ox-hide', label: '#hide-button', click: function() { me.onClose(); }},
								]}, this.root);
							},
							setDragHighlight: function(elem, isOn) {
								if(!elem) {
									var elem = $('.ox-id-list-draghighlight');
									isOn = false;
								}
			
								ox.css(elem, 'ox-id-list-draghighlight z20000', isOn);
			
								if(isOn) ox.el.getByClass(elem, 'ox-id-dragelement').addClass('ox-shadow-5-i ox-dark-shadow-none-i ox-dark-border');
								else ox.el.getByClass(elem, 'ox-id-dragelement').removeClass('ox-shadow-5-i ox-dark-shadow-none-i ox-dark-border');
							},

};omnia.ui.list.html = {

							oid: 'frame2', css: 'ox-list ox-trans no-crop ox-resize rel', c: [
								{oid: 'headline', css: 'ox-id-headline ox-head ox-id-title ox-id-label ox-h1 mb15'},
								{oid: 'frame2', css: 'ox-id-body ox-body ox-id-content ox-content ox-trans no-crop _ox-bottom-safe ox-left-safe ox-right-safe rel ox-inrow'},
							]
								
};omnia.ui.listgroups.handler = {

							args: null,
							init: function(args) {
								if(!args.data) return;
								this.args = args;
								
								if(args.data[0].group || args.groupBy) {
									var gs = {};
									var gby = args.groupBy || 'group';
									
									args.data.forEach(function(item) {
										if(!gs[item[gby]]) gs[item[gby]] = [];
										gs[item[gby]].push(item);
									});
									
									
									var l = [];
									ox.each(gs, function(gid, g) {
										l.push(args.getGroupHeader ? args.getGroupHeader(gid) : {oid: 'headline', css: args.cssGroup, text: gid});
										l = l.concat(g);					
									});
									
									args.data = l;
								}
								
								var groups = [];
								var lastGroup = null;
								for(var i = 0; i < args.data.length; i++) {
									var item = args.data[i];
									var isHead = item.oid || item.t;
									
									if(isHead || !i) {
										if(isHead) groups.push(item);
										lastGroup = {oid: 'list', css: args.cfg.css, args: {
											getItem: args.getItem,
											data: [],
											gridInfo: args.gridInfo,
										}};
										groups.push(lastGroup);
									}
									if(!isHead) lastGroup.args.data.push(item);
								}
								
								ox.node(groups, args.root);
							},
							getRoot: function() {
								return this.args.root;
							},

};omnia.ui.listgroups.html = {
							t: 'div'
};omnia.ui.strip.html = {

							t: 'section', css: 'ox-strip row ox-scrollable', onRendered: function(elem) {
								setTimeout(function() {
									var child = elem.find('> div');
									if(elem.hasClass('ox-narrow')) child.removeClass('col-md-offset-1 col-md-10').addClass('col-md-offset-2 col-md-8 col-lg-offset-3 col-lg-6');
									child.removeClass('ox-hidden');
								}, 1);
							} , c: [
								{t: 'div', css: 'col-xs-12 col-md-offset-1 col-md-10 ox-id-frame rel ox-childs ox-id-childs _ox-hidden'},
							]
							
};omnia.ui.detailsdialog.html = {
							
							oid: 'dialog', css: 'ox-detailsdialog', body: {css: 'flex-1'}
							
};omnia.ui.overlay.handler = {
							
							// Static variables
							
							clsId: 'omnia.ui.overlay.handler',
							isAnyOpen: false,
							
							// Variables
			
							root: null,
							overlay: null,
							elem: null,
							id: null,
							isOpen: false,
							isModal: false,
							
							frame: null,
							frameHandler: null,
			
							// Public events
						
							onClose: function() {},
							
							// Public functions
						
							init: function(args) {
								//log('omnia.ui.overlay.handler.init');
								//if(omnia.ui.overlay.handler.isAnyOpen) { omnia.tools.error('omnia.ui.overlay.handler.init: Popup still open'); return; }
								
								this.id = omnia.tools.getUniqueId();
								this.root = args.root || $('body');
								if(args.onClose) this.onClose = args.onClose;
								
								if(args.storeIn) args.storeIn.overlay = this;
								
								this.render(args);
								this.isOpen = true;
								omnia.ui.overlay.handler.isAnyOpen = true;
								
								if(args.onRendered) args.onRendered(this);
							},
							destroy: function() {
								if(this.isOpen) this.close();
							},
							render: function(args) {
								//log('omnia.ui.overlay.handler.render');
								var me = this;
			
								if(args.content || typeof args == 'string') {
									if(typeof args == 'string') args = {content: args};
									
									if(typeof args.content == 'string' || !args.content.length) {
										// Content as text or config
										args.frame = {oid: 'popup', c: [
											typeof args.content == 'string' ? {oid: 'text', css: 'ox-content-component ox-half ox-strip-end pl15 pr15', text: args.content} : args.content,
										], style: {'max-height': args.maxHeight}};
										if(args.ok) args.frame.actions = [
											typeof args.ok == 'function' ? {oid: 'button', css: 'ox-id-focus ox-inline ox-alone ox-id-close ox-blue ox-id-ok', label: '#ok', click: args.ok} : args.ok
										];
										if(args.actions) args.frame.actions = args.actions;
									} else {
										// Context menu
										args.frame = {oid: 'frame2', context: false, c: [{oid: 'bar2', css: 'ox-context', c: args.content}]};
									}
								}
							
								// Open blend
								var overlay = this.overlay = omnia.tools.html.node(omnia.ui.overlay.html, this.root);
								this.isModal = args.isModal;
								//if(!args.isModal) 
								overlay.find('.ox-blend2').on(omnia.tools.browser.CLICK + ' swipeend', function() { if(!me.isModal) me.close(); });
			
								if(args.css) overlay.addClass(args.css);
								if(args.styleOverlay) overlay.css(args.styleOverlay);
			
								var blend = args.blend;
								if(args.blend !== undefined) blend = overlay.find('.ox-blend2').css('opacity', args.blend);
								
								var frame = null;
								if(args.frame || args) {
									frame = omnia.tools.html.node(args.frame ? args.frame : args, overlay);
									if(!frame) { omnia.tools.error('omnia.ui.overlay.handler.render: Popup render fail'); return; }
									
									if(args.style) frame.css(args.style);
			
									this.frameHandler = frame;
									frame = frame.getRoot ? frame.getRoot() : frame;
									//frame.on(omnia.tools.browser.CLICK, function(e) { e.preventDefault() });
								
									var anchor = null;
									var dir = null;
									
									if(args.context) { dir = 'context'; anchor = $(args.elem); }
									if(args.dropdown) { dir = 'dropdown'; anchor = $(args.elem); }
									if(args.top) { dir = 'top'; anchor = $(typeof args.top != 'boolean' ? args.top : args.elem); }
									if(args.right) { dir = 'right'; anchor = $(typeof args.right != 'boolean' ? args.right : args.elem); }
									if(args.bottom) { dir = 'bottom'; anchor = $(typeof args.bottom != 'boolean' ? args.bottom : args.elem); }
									if(args.left) { dir = 'left'; anchor = $(typeof args.left != 'boolean' ? args.left : args.elem); }
			
									if(anchor) {
										overlay.addClass('ox-callout ox-nocenter');
										
										overlay.css('align-items', 'start');
										overlay.css('justify-content', 'left');
										
										//dir = 'top';
										
										var dim = {x: anchor.offset().left, y: anchor.offset().top, w: anchor[0].scrollWidth /*anchor.outerWidth()*/, h: anchor[0].scrollHeight /*anchor.outerHeight()*/};
										var dimFrame = {x: frame.offset().left, y: frame.offset().top, w: frame[0].scrollWidth /*frame.outerWidth()*/, h: frame[0].scrollHeight /*frame.outerHeight()*/};
			
										var offset = dir == 'dropdown' ? 0 : 15;
										var boundary = dir == 'context' || dir == 'dropdown' ? 0 : 45;
										
										var xr = dim.x + dim.w + offset;
										var xl = dim.x - dimFrame.w - offset;// - 15;
										var xv = dim.x + dim.w / 2 - dimFrame.w / 2;
			
										var yb = dim.y + dim.h + offset;// + 15;
										var yt = dim.y - dimFrame.h - offset;// - 15;
										var yh = dim.y + dim.h / 2 - dimFrame.h / 2;
										
										switch(dir) {
											case 'top':
												x = xv;
												y = yt;
												break;
											case 'bottom':
												x = xv;
												y = yb;
												break;
											case 'dropdown':
												x = args.dropdown != 'right' ? dim.x : dim.x + dim.w - dimFrame.w;
												y = dim.y;
												break;
											case 'left':
												x = xl;
												y = yh;
												break;
											case 'context':
												if(args.e) {
													x = args.e.originalEvent.clientX;
													y = args.e.originalEvent.clientY;
												} else {
													x = xr;
													y = yh;
												}
												break;
											case 'right':
											default:
												x = xr;
												y = yh;
												break;
										}
										
										//if(dir == 'context') log(args.e);
										
										var xmin = boundary;
										var ymin = boundary;
										var xmax = overlay.width() - boundary;
										var ymax = overlay.height() - boundary;
			
										var xminb = (x < xmin);
										var xmaxb = (x + dimFrame.w > xmax);
										var yminb = (y < xmin);
										var ymaxb = (y + dimFrame.h > ymax);
			
										//log('#dim x=' + x + ' xmin=' + xmin + ' xmax=' + xmax + ' dimFrame.w=' + dimFrame.w + ' bx: ' + xminb + ' ' + xmaxb + ' by: ' + yminb + ' ' + ymaxb);
			
										if(!args.isIgnoreBounds) {
											if(xminb && !xmaxb) { // right
												x = xr;
												if(dir != 'context' && dir != 'dropdown') { dir = 'right'; }
												else x = xl;
											}
											if(xmaxb && !xminb) {
												if(dir == 'dropdown') x = xr - dimFrame.w;
												else if((dir == 'context') && args.e) x = args.e.originalEvent.clientX - dimFrame.w;
												else x = xl;
												if(dir != 'context' && dir != 'dropdown') { y = yh; dir = 'left'; }
											}
											if(yminb && !ymaxb && dir != 'context') { // bottom
												y = yb;
												if(dir != 'context' && dir != 'dropdown') { dir = 'bottom'; }
											}
											if(ymaxb && !yminb) {
												if(dir == 'dropdown') y = yb - dimFrame.h;
												else if((dir == 'context') && args.e) y = args.e.originalEvent.clientY - dimFrame.h;
												else y = yt;
												if(dir != 'context' && dir != 'dropdown') { y = yh; dir = 'top'; }
											}
											
											if(x < xmin) x = xmin;
											if(y < ymin) y = ymin;
										}
			
										frame.css('left', x);
										frame.css('top', y);
			
										if(dir != 'context' && dir != 'dropdown') frame.addClass('ox-border-bubble-' + (dir == 'right' ? 'left' : (dir == 'left' ? 'right' : (dir == 'top' ? 'bottom' : 'top'))) + ' ox-bubble-dark no-crop');
									}
								}
			
								// Set events
								$('body').on('keyup.Popup' + this.id, function(e) { if(e.keyCode == 27) me.close(); return true; }); // ESC
								
								if(!args.isScroll) overlay.on('touchmove', function(e) { e.preventDefault(); });
								//else blend.on('touchmove', function(e) { e.preventDefault(); });
								else overlay.find('.ox-blend2').on('touchmove', function(e) { e.preventDefault(); });
								
								if(frame) {
									frame.data('ox-overlay', this);
			
									if(args.isFull) {
										overlay.css('display', 'block');
										frame.addClass('w100 h100');
									}
									
									frame.find('.ox-id-close').on(omnia.tools.browser.CLICK, function(e) { e.preventDefault(); e.stopPropagation(); me.close(); });
									frame.find('.ox-id-action').on(omnia.tools.browser.CLICK, function(e) { e.preventDefault(); e.stopPropagation(); me.close(true); });
									if(args.isCloseLabel || this.root.hasClass('ox-close-label')) frame.find('.ox-id-close').text(ox.tx('close'));
								
									var f = frame.find('.ox-id-focus');
									if(f && f.length) { setTimeout(function() { f[0].focus() }, 100); }
			
									$('button:not(.ox-ignore-tab)').attr('tabindex', -1);
									frame.find('button').attr('tabindex', 1);
									
									this.frame = frame;
								}
			
								setTimeout(function() {
									overlay.addClass('ox-open');
									//frame.find('.ox-action').focus();
								}, 1);
							},
							getRoot: function() {
								return this.root;
							},
							getOverlay: function() {
								return this.overlay;
							},
							close: function(isNoHandler) {
								//log('omnia.ui.overlay.handler.close');
								var t0 = ox.t0(this.clsId + '.close', true);
								
								if(!isNoHandler) this.onClose();
			
								var me = this;
								me.overlay.removeClass('ox-open');
								$('body').off('keyup.Popup' + this.id);
								
								/*setTimeout(function() {
									me.overlay.remove();
									$('button:not(.ox-ignore-tab)').attr('tabindex', 0);
								}, 150);*/
			
								omnia.ui.overlay.handler.isAnyOpen = false;
								this.isOpen = false;
								
								t0.bp(1);
								
								if(this.frameHandler && this.frameHandler.destroy) this.frameHandler.destroy();
								
								t0.bp(2);
								
								me.overlay.addClass('ox-hidden');
								ox.el.onRefresh(function() {
									me.overlay.remove();
									$('button:not(.ox-ignore-tab)').attr('tabindex', 0);
									
									t0.bp(3);
									ox.el.onRefresh(function() { 
										t0.bp(4); 
										
									});
								}, ox.pf.isPhone ? 150 : null);
							},

};omnia.ui.overlay.html = {

							t: 'div', css: 'ox-overlay-core ox-screen-rotation', c: [
								{t: 'div', css: 'ox-blend2 hand', context: false},
							]
							
};omnia.ui.searchframe.html = {

							oid: 'detailsdialog', css: 'ox-body-flex', onRendered: function(elem, args) { 
								//log('#omnia.ui.searchframe.onRendered: args = ', args);
								
								if(args) {
									var search = ox.el.get('searchfield', elem, true); //elem.find('.ox-searchfield').data('ox-handler');
								
									//log('#omnia.ui.searchframe.onRendered: search = ', search);
									if(search) {
										search.reset({
											onInput: args.onInput,
											onClear: args.onClear,
											focus: args.focus,
											value: args.value,
										});
									}
									
									if(args.placeholder) $(elem.find('.ox-id-searchinput')).attr('placeholder', args.placeholder);
								}
							}, c: [
								{oid: 'searchfield', css: 'ox-id-searchfield ox-border-bottom'},
								{oid: 'frame2', css: 'flex-1 ox-childs ox-id-childs ox-content ox-id-result ox-col-ui-dialog-0-back _ox-border-bottom'},
							]
							
};omnia.ui.board2.handler = {

			                // Constants
			                
			                timeout: 1000 * 3,
			                
			                // Variables
			                
			                root: null,
			                id: null,
			                isNoAni: false,
			                
			                // Public functions
			                
			                init: function(args) {
			                	log('omnia.ui.board2.init');
			
			                    var root = this.root = args.root;
			                    if(ox.pf.isPhone) root.addClass('ox-top-safe-childs');
			                    root.data('board', this);
			                    this.isNoAni = root.hasClass('ox-noani');
			                },
			                add: function(args) {
								var me = this;
								var evt = typeof args.evt == 'string' ? omnia.app.events[args.evt] : args.evt;
								var text = args.text;
								
								if(evt.type == 'hidden') return;
							
								if(args.id) {
									var e = this.root.find('.ox-process-' + args.id);
									if(e && e.length && !e.hasClass('ox-disappear')) {
										e.attr('class', 'ox-notification2 ox-id-text ox-appear ' + (me.isNoAni ? 'ox-noani ' : '') + (evt.css ? evt.css : '') + ' ox-evt-' + evt.id + (args.id ? ' ox-process-' + args.id : ''));
										e.html(evt.text + (text !== undefined ? text : ''));
			
										if(!evt.behave || evt.behave != 'sticky') setTimeout(function() { me.disappear(e); }, me.timeout);
										return;
									}
								}
								
								if(args.replace) return;
								
								var n = omnia.tools.html.node({
									oid: 'notification2', 
									css: (me.isNoAni ? 'ox-noani ' : '') + (evt.css ? evt.css : null) + ' ox-evt-' + evt.id + (args.id ? ' ox-process-' + args.id : ''), 
									text: evt.text + (text !== undefined ? text : ''),
								}, this.root);
								
								// Events
								setTimeout(function() { n.addClass('ox-appear'); }, 1);
								if(!evt.behave || evt.behave != 'sticky') setTimeout(function() { me.disappear(n); }, me.timeout);
								n.on(omnia.tools.browser.CLICK, function() { me.disappear(n); });
								
								return n;
							},
			                clear: function(args) {
								var me = this;
								var ns = this.board.find('.ox-notification2');
								$.each(ns, function(i, n) {
									me.disappear($(n));
								});
			                },
			                getRoot: function() {
			                	return this.root;
			                },
			                remove: function(args, isDirect) { 
								var e = this.root.find('.ox-process-' + args.id);
								if(isDirect) e.remove();
								else this.disappear(e);
			                },
			                
			                // Private functions
							
			                disappear: function(n) {
			                    n.removeClass('ox-appear'); 
			                    n.addClass('ox-disappear');
			    				
			                    setTimeout(function() { n.remove(); }, 210);
			                },

};omnia.ui.board2.html = {

			            	t: 'div', css: 'ox-board'
			            	
};omnia.ui.buttonfullscreen.handler = {

							args: null,
							root: null,
							elems: null,
							frame: null,
							
							init: function(args) {
								var me = this;
								this.args = args;
								this.root = args.root;
								this.elems = ox.el.getAll(args.root);
								
								setTimeout(function() {
									var frame = me.frame = args.frame ? (args.frame.getRoot ? args.frame : args.frame.data('ox-handler-frame')) : $(me.root.closest('section')).data('ox-handler-frame');
									if(!frame) return;
									
									me.elems.on.on(ox.b.CLICK, function() { me.set(true); });
									me.elems.off.on(ox.b.CLICK, function() { me.set(false); });
								}, 1);
							},
							getRoot: function() { return this.root; },
							set: function(isOn) {
								var me = this;
								me.toggleButtons(isOn);
			
								this.frame.setFullscreen(isOn, null, !isOn ? null : function() {
									me.toggleButtons(false);
								});
							},
							toggleButtons: function(isOn) {
								ox.css(this.elems.on, 'ox-hidden', isOn);
								ox.css(this.elems.off, 'ox-hidden', !isOn);
							},

};omnia.ui.buttonfullscreen.html = {
							
							t: 'span', c: [
								{oid: 'buttonicon', css: 'ox-id-on', icon: 'fa fa-expand'},
								{oid: 'buttonicon', css: 'ox-id-off ox-hidden', icon: 'fa fa-compress'},
							]

};omnia.ui.digitalclock.handler = {

							clsId: 'omnia.ui.digitalclock.handler',
							args: null,
							root: null,
							elems: null,
							interval: null,
							offset: 0,
			
							init: function(args) {
								// root, offset, is12, isSec
			
								var me = this;
								this.args = args;
								this.root = args.root;
								this.offset = args.offset !== undefined ? args.offset : 'local';
								this.elems = ox.el.getAll(args.root);

								// Analog
								if(this.args.type == 'analog') {
									this.root.addClass('ox-mode-dark');
									//this.elems.analog.addClass('ox-col-ui-dialog-1-back');
									//ox.node({t: 'img', src: 'http://haustein.info/omnia/images/clock.svg'}, this.elems.analog);
									
									this.elems.analog.html('<svg width="220" height="220" viewBox="0 0 220 220" fill="none" xmlns="http://www.w3.org/2000/svg">' +
										'<g transform="translate(110,110)">' + 
											'<circle r="97" class="x-clock-1-minute" fill="none" stroke-width="11" stroke="white" stroke-dasharray="4 46.789082" transform="rotate(-1.5)" />' +
											'<circle r="100" class="x-clock-5-minute"  fill="none" stroke-width="4" stroke="white" stroke-dasharray="2 8.471976" transform="rotate(-.873)" />' + 
		
											'<g id="hands" transform="rotate(180)">' +
												'<circle r="7" fill="#444444" />' +
												'<g class="ox-id-hour-hand" tabindex="0">' +
													'<line  class="x-clock-hour-hand" stroke-width="6" y2="65" stroke-linecap="round" stroke="#a0a0a0"  />' + 
												'</g>' +
												'<g class="ox-id-min-hand" tabindex="0">' +
													'<line class="x-clock-min-hand" stroke-width="4" y2="85" stroke-linecap="round" stroke="#ffffff" style="-webkit-filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .5))" />' +
												'</g>' +
												'<g class="ox-id-sec-hand">' +
													'<line class="x-clock-sec-hand" stroke-width="2" y1="-10" y2="95" stroke="#B4261A" style="-webkit-filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .5))" />' +
												'</g>' +
												'<circle r="3" fill="#B4261A" />' +
											'</g>' +
										'</g>' +
									'</svg>');
									
									if(this.args.size) {
										this.elems['analog'].css({'transform': 'scale(' + (this.args.size / 220) + ')', '-webkit-transform-origin': '50% 0'});
										this.elems['analog-wrapper'].css({'height': this.args.size});
									}
								}
								
								// Tip
								if(this.args.isTip) this.elems.tip.removeClass('ox-hidden');
								
								// Interval
								this.interval = setInterval(function() { 
									if(!document.contains(me.root[0])) {
										clearInterval(me.interval); 
										
										log('#' + me.clsId + ': Destroyed');
										return; 
									}
									me.setTime(); 
								}, args.isSec ? 500 : 1000);
								
								this.setTime();
							},
							setTime: function() {
								var now = new Date();
								
								// Offset
								if(typeof this.offset == 'number') {
									now.setTime(now.getTime() - (now.getTimezoneOffset() / -60) * 3600 * 1000);
									now.setTime(now.getTime() + this.offset * 60 * 60 * 1000);
								}
				
								// Numbers
								var h = now.getHours();
								var m = now.getMinutes();
								var s = now.getSeconds();
			
								m = (m < 10 ? "0" : "" ) + m;
								s = (s < 10 ? "0" : "" ) + s;
			
								var timeOfDay = (s < 12) ? "AM" : "PM";
								if(this.args.is12) {
									h = (h > 12) ? h - 12 : h;
									h = (h == 0) ? 12 : h;
								}
				
								var timeStr = h + ":" + m + (this.args.isSec ? ":" + s : "") + (this.args.is12 ? " " + timeOfDay : "");
								var dateStr = now.toLocaleTimeString(this.args.local || 'de-DE', ox.d.format.shortDay).split(',').join('');
								
								// Render
								this.elems.time.text(
									(this.args.isWeek ? 'W' + ox.d.getWeek(now) + ' ' : '') +
									(this.args.isDate ? 
										dateStr : 
										timeStr
									)
								);
								if(this.args.isTip) this.elems.tip.html('W' + ox.d.getWeek(now) + ' ' + dateStr);
								
								// Analog
								if(this.args.type == 'analog') {
									var hourDeg = ((h % 12) * 60) / 2; 
									var minDeg = (m / 60) * (360 / 12); 
									var hourRotateDeg = hourDeg + minDeg;
									var minRotateDeg = 360/60 * m;
									var secRotateDeg =  360/60 * s;
									
									this.elems.analog.find('.ox-id-hour-hand').css('transform', 'rotate(' + hourRotateDeg + 'deg)');
									this.elems.analog.find('.ox-id-min-hand').css('transform', 'rotate(' + minRotateDeg + 'deg)');
									this.elems.analog.find('.ox-id-sec-hand').css('transform', 'rotate(' + secRotateDeg + 'deg)');
								}
							},

};omnia.ui.digitalclock.html = {

							t: 'span', css: 'ox-has-tooltip rel', onRendered: 'omnia.ui.button.events.init', c: [
								{t: 'div', css: 'ox-id-analog-wrapper', c: [
									{t: 'div', css: 'ox-id-analog'},
								]},
								{t: 'span', css: 'ox-id-time thin', style: 'font-weight:400 !important'},
								{oid: 'tooltip', css: 'ox-hidden ox-id-tip ox-dark ox-bubble-dark ox-black abs', content: '', style: 'height:35px;top:5px;'},
							]

};omnia.ui.iconify.html = {

							t: 'span', css: 'iconify'/*, data-icon="fa:home"*/

};omnia.ui.iconbadge.html = {
							
							t: 'span', css: 'rel', c: [
								{t: 'i', css: 'ox-id-icon'},
								{t: 'span', css: 'ox-counter ox-id-counter'},
								{t: 'span', css: 'ox-id-label'},
							]
							
};omnia.ui.login.handler = {
							
							args: null,
							elems: null,
							root: null,
							hasCodeTried: false,
							
							init: function(args) {
								this.args = args;
								this.render();
								
								this.check();
								//ox.node({oid: 'obj', css: 'col-white-back', args: {obj: {'appspace': app.space.file, token: token}}}, this.root);
							},
							
							// Private functions - UI
							
							getRoot: function() {
								return this.root;
							},
							render: function() {
								var me = this;
								this.root = this.args.root;
								var e = this.elems = ox.el.getAll(this.root);
								
								e['button-request-open'].on(ox.b.CLICK, function() { me.setState('state-request'); });
								e['button-request-back'].on(ox.b.CLICK, function() { me.setState('state-start'); });
								e['button-request-send'].on(ox.b.CLICK, function() { me.onSubmit(); });
								e['button-request-done'].on(ox.b.CLICK, function() { me.setState('state-start'); });
								e['button-error-done'].on(ox.b.CLICK, function() { me.setState('state-request'); });
								e['button-enter'].on(ox.b.CLICK, function() { me.onEnter(); });
								
								ox.el.get('accesscode', this.root, true).reset({onEnter: function() { me.onEnter(); }});
								
								//ox.el.onRefresh(function() { ox.el.get('accesscode', me.root, true).focus(); });
							},
							setState: function(state) {
								ox.css(ox.el.get('state', this.root), 'ox-hidden', true);
								ox.css(this.elems[state], 'ox-hidden', false);
							},
							
							// Private functions - Logic
							
							check: function(token) {
								log('omnia.ui.login.check');
								
								var url = window.location.origin + window.location.pathname;

								if(!token) {
									token = app && app.space ? app.space.getSetting('login', 'token') : null;
									if(token) log('omnia.ui.login.check: Token found in AppSpace');
								}
								var isForwards = typeof token == 'string';
								
								// Check for code
								if(!token && !this.hasCodeTried && app && app.space && app.space.file && app.space.file.meta && app.space.file.meta.query) {
									var code = app.space.file.meta.query.code;
									
									if(!code && app.space.file.meta.query.mid) code = 'LIME';
									
									if(code) {
										log('omnia.ui.login.check: Code found in HomeSpace');
										
										this.onEnter(code);
										return;
									}
									
									/*var homespace = localStorage['omnia-web'];
									if(homespace) {
										try {
											homespace = JSON.parse(homespace);
										}
										catch(e) {}
										
										if(homespace && homespace.param) {
											var param = ox.str.urlStringToObject(homespace.param);
											if(param.code) {
												log('omnia.ui.login.check: Code found in HomeSpace');
												
												this.onEnter(param.code);
												return;
											}
										}
									}*/
								}
									
								// Check if token failed
								if(window.location.search) {
									var param = ox.str.urlStringToObject(window.location.search.substr(1));

									// Remove parameters
									if(!isForwards || (param && param.token && param.token == token)) {
										log('omnia.ui.login.check: Clear parameters');
	
										app.space.setSetting('login', 'token')
										app.space.save();
										
										isForwards = false;
										window.history.pushState({}, '', url);
									}
								}
								
								// Forward
								if(isForwards) {
									log('omnia.ui.login.check: Forward');
									
									/*app.space.setSetting('login', 'token', token);
									app.space.save({
										onDone: function() {
											window.location.replace(url + '?token=' + token);
										},
									});*/

									window.location.replace(url + '?token=' + token);
									return;
								}

								// Login
								ox.css(this.elems.core, 'ox-hidden', false);
							},
							
							// Private events
							
							onEnter: function(code) {
								if(!code) code = ox.el.get('accesscode', this.root, true).getValue();
								if(!code) return;
								
								var me = this;
								this.setState('state-loading');
								
								ox.net.get({
									server: window.location.origin + window.location.pathname,
									param: {cmd: 'gate', task: 'gettoken', code: code.toLowerCase()},
									onResponse: function(args2) {
										var token = args2 && args2.data && args2.data.status && (args2.data.status == 'ok') && args2.data.data && args2.data.data.v ? args2.data.data.v : null;
										me.onTokenReceived(token);
									},
								});
							},
							onTokenReceived: function(token) {
								log('omnia.ui.login.onTokenReceived: token = ' + token);
								
								if(!token) this.setState('state-start');
								ox.css(this.elems.codeerror, 'ox-hidden', token || !this.hasCodeTried);
								
								this.hasCodeTried = true;

								var me = this;
								if(token) {
									app.space.setSetting('login', 'token', token);
									app.space.save({
										onDone: function() {
											me.check(token);
										},
									});
									return;
								}
								//log(app.space.file.meta.settings);
								
								this.check(token);
							},
							onSubmit: function() {
								var form = ox.el.get('form-request', this.root, true).getValue();
								if(!form) return;
								
								var me = this;
								const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    							var isEMail = form.email && re.test(form.email.toLowerCase());
    
								ox.css(this.elems['form-request-error'], 'ox-hidden', !(!isEMail && (form.name || form.company)) && !(form.email && !isEMail));
								
								if(!isEMail) return;
								
								// Send
								this.setState('state-loading');
								
								var r = {email: form.email};
								if(form.name) r.name = form.name;
								if(form.company) r.company = form.company;
								
								ox.tr.track({
									ucid: 'request-access',
									data: r,
								}, function(isSuccess, args2) {
									me.onRequestSent(isSuccess);
								});

								/*ox.net.get({
									server: window.location.origin + window.location.pathname,
									param: {cmd: 'gate', task: 'requestcode', email: form.email, name: form.name, company: form.company},
									onResponse: function(args2) {
										var isSuccess = args2 && args2.data && args2.data.status && args2.data.status == 'ok';
										me.onRequestSent(isSuccess);
									},
								});*/
							},
							onRequestSent: function(isSuccess) {
								this.setState('state-confirm' + (!isSuccess ? '-error' : ''));
							},
							
};omnia.ui.login.html = {

							oid: 'frame2', css: 'flex flex-center', c: [
								{t: 'div', css: 'ox-id-core rel ox-hidden', style: 'width:400px; max-width:100%;', c: [
									{t: 'div', css: 'hcenter', c: [
										{t: 'img', src: 'https://slide.style/images/slide-logo-full-white.svg', style: 'height:35px;'},
									]},
									{t: 'div', css: 'ox-col-ui-dialog-1-back br4 mt15', style: 'margin-bottom:50px;', c: [
										
										{oid: 'frame2', css: 'ox-id-state ox-id-state-start', c: [
											{oid: 'headline', css: 'ox-h2 pl15 pr15 pt15 hcenter mb15', text: 'Preview Sign In'},
											{t: 'div', css: 'font pl15 pr15 pb10 col-medium-0', text: 'If you have received an access code, please enter it below.'},
											{t: 'div', css: 'font pl15 pr15 pb10 col-red bold ox-id-codeerror ox-hidden', text: 'The access code is not valid or has been expired.'},
											{oid: 'bar2', css: '_mt10 _ox-line ox-stretch ox-border-top-i ox-border-bottom-i', c: [
												{oid: 'inputfield', css: 'ox-id-accesscode', style: 'flex:10;', placeholder: '#accesscode'},
												{oid: 'button', css: 'ox-id-button-enter ox-blue ox-inline ox-alone', style: 'flex:2;', label: 'Enter<i class="ml10 fa fa-caret-right"></i>'},
											]},
											{t: 'div', css: 'font pl15 pr15 mt30 col-medium-0', text: 'If you have not yet received an access code yet, you can request one here.'},
											{oid: 'bar2', css: 'mt10 ox-stretch ox-border-top-i', c: [
												{oid: 'button', css: 'ox-id-button-request-open', label: '<span>Request Access</span><i class="fa fa-chevron-down ml10 ox-font-10"></i>'},
											]},
										]},
										
										{oid: 'frame2', css: 'ox-id-state ox-id-state-request ox-hidden', c: [,
											{oid: 'headline', css: 'ox-h2 pl15 pr15 pt15 hcenter mb15', text: 'Request Access'},
											{oid: 'bar2', css: 'mt10 ox-overlay t00 m0-i ox-hidden', c: [
												{oid: 'buttonicon', css: 'ox-id-button-request-back', icon: 'fa fa-arrow-left'},
											]},
											{t: 'div', css: 'font pl15 pr15 pb10 col-red bold ox-id-form-request-error ox-hidden', text: 'Please enter your e-mail address.'},
											{oid: 'form', css: 'ox-id-form-request ox-inbar ox-border-top-i', args: {
												items: [
													{oid: 'inputfield', css: 'ox-form-item ox-form-id-email ox-focus', placeholder: 'Please enter', formlabel: '<span class="bold">E-Mail</span>'},
													{oid: 'inputfield', css: 'ox-form-item ox-form-id-name', placeholder: 'optional', formlabel: '#name'},
													{oid: 'inputfield', css: 'ox-form-item ox-form-id-company', placeholder: 'optional', formlabel: '#company'},
												],
											}},
											{oid: 'bar2', css: 'ox-split ox-border-top-i _ox-large', c: [
												{oid: 'buttonicon', css: 'ox-id-button-request-back', icon: 'fa fa-arrow-left ox-before', label: '#cancel'},
												{oid: 'button', css: 'ox-id-button-request-send ox-blue ox-inline ox-alone', label: '<span>Send Request</span>'},
											]},
										]},
										
										{oid: 'frame2', css: 'ox-id-state ox-id-state-loading ox-hidden', c: [
											//{oid: 'headline', css: 'ox-h2 pl15 pr15 pt15 hcenter mb15', text: 'Request Access'},
											{oid: 'loadcontent', css: 'ox-border-top-i'},
										]},

										{oid: 'frame2', css: 'ox-id-state ox-id-state-confirm ox-hidden', c: [
											{oid: 'headline', css: 'ox-h2 pl15 pr15 pt15 hcenter mb15', text: 'Request Access'},
											{t: 'div', css: 'font pl15 pr15 pt15 mb15 ox-border-top-i col-dark hcenter', html: '<i class="fa fa-check ox-before"></i>Your request has been sent.'},
											{oid: 'bar2', css: 'ox-stretch ox-border-top-i', c: [
												{oid: 'button', css: 'ox-id-button-request-done', label: '#ok'},
											]},
										]},
										
										{oid: 'frame2', css: 'ox-id-state ox-id-state-confirm-error ox-hidden', c: [
											{oid: 'headline', css: 'ox-h2 pl15 pr15 pt15 hcenter mb15', text: 'Request Access'},
											{t: 'div', css: 'font pl15 pr15 pt15 mb15 ox-border-top-i col-red hcenter', html: 'Your request could not be sent. Please try again later.'},
											{oid: 'bar2', css: 'ox-stretch ox-border-top-i', c: [
												{oid: 'button', css: 'ox-id-button-error-done', label: '#ok'},
											]},
										]},										
									]},
								]},
							],
							
};omnia.ui.notification2.html = {
							
							t: 'div', css: 'ox-notification2 ox-id-text wrap'
							
};omnia.ui.tooltip.html = {

							t: 'div', css: 'ox-tooltip', c: [
								{t: 'span', css: 'ox-id-content ox-childs'},
								{oid: 'button', css: 'ox-close ox-medium abs r0 t0', label: '<i class="ma ma-18">close</i>'},
								//{t: 'div', css: 'ox-close ox-id-close abs w100 h100 t00 ox-d', click: function(e, elem) { elem.parent().addClass('ox-hidden'); }},
							]

};omnia.ui.placeholder.html = {
							
							t: 'div', css: 'ox-placeholder ox-col-placeholder ox-id-text'
							
};omnia.ui.image.handler = {
							
							clsId: 'omnia.ui.image.handler',
							
							// Data
							args: null,
							data: null,
							
							// UI
							root: null,
							
							init: function(args) {
								this.args = args || {};
								
								// Data
								this.data = {};
								try {
									if(args.v && args.v.substr(0, 11) == '#image-http') {
										this.data = {url: args.v.substr(7).trim()};
									} else if(args.v && args.v.substr(0, 7) == '#image-' && args.v.split('-').length > 3 && args.v.split('-')[1] == parseInt(args.v.split('-')[1])) {
										var s = args.v.split('-');
										this.data = {w: s[1], h: s[2], url: s.splice(3).join('-')};
									} else if(args.v && args.v.substr(0, 7) == '#image-') {
										this.data = ox.str.saveStringToObject(args.v.substr(7).trim()); 
										
									} else {
										this.data.url = args.url || args.cfg.url;
									}
								} 
								catch(e) { ox.error({id: this.clsId + '.init', e}); }
								//log({v: args.v.substr(0, 10) + '...' + args.v.substr(args.v.length - 10), args: args, data: this.data, d: decodeURIComponent(args.v.substr(7).trim())});					
			
								// UI
								var me = this;
								this.root = args.root;
								
								if(!this.data.url && this.data.meta && this.data.meta.provider) {
									this.render({status: 'loading'});
									window.requestAnimationFrame(function() { me.load(); });
									return;
								}
								
								this.render(args);
							},
							
							// Data
							
							load: function(args) {
								var me = this;
								var data = args ? args.data || {} : this.data;
								var render = args ? args.render || function() {} : function(args) { me.render(args); };
								
								if(!data.meta) return;
								
								var isPreview = args ? args.isPreview : (this.args ? this.args.isPreview : false);
								switch(data.meta.provider) {
									
									case 'google-photos':
										render({status: 'loading', provider: 'google-photos', icon: 'fab fa-google'});
										
										ox.net.google.init({
											isRequestSignIn: false,
											onSignedIn: function() {
												omnia.tools.net.google.getPhoto({
													photoId: data.meta.photoId,
													onLoaded: function(photo) {
														data.url = photo.baseUrl + '=w' + (isPreview ? 600 : 1000);
														data.urlFull = photo.baseUrl + '=w' + photo.mediaMetadata.width;
													
														render({details: {t: 'i', css: 'fab fa-google'}});
														if(args && args.onLoaded) args.onLoaded(args);
													},
													onError: function(e) {
														render({
															status: 'error', 
															error: '<i class="fab fa-google mr5"></i>Google Photos (' + (e && e.result && e.result.error && e.result.error.message ? e.result.error.message : 'Photo could not be loaded') + ')',
														});
													},
												});
											},
											onSignedOut: function() {
												log('omnia.ui.image.solveProvider: Failed, is not signed in');
												render({
													status: 'error', 
													error: '<i class="fab fa-google mr5"></i>Google Photos (Not signed in)',
												});
											},
											onError: function() { 
												log('omnia.ui.image.solveProvider: Failed, unknown error');
												render({
													status: 'error', 
													error: '<i class="fab fa-google mr5"></i>Google Photos (Sign-in error)',
												});
											},
										});
										break;
										
									case 'pixabay':
										render({status: 'loading', provider: 'pixabay'});
										ox.net.pixabay.get({
											param: {id: data.meta.id},
											onLoaded: function(args2) {
												//log(args2);
												if(!args2.images || !args2.images.length) return;
												
												data.url = args2.images[0].url;
												data.urlFull = args2.images[0].meta.imageURL;
												render({details: {t: 'span', css: 'font', text: '#pixabay'}});
												
												if(args && args.onLoaded) args.onLoaded(args);
											},
											onError: function(e) {
												render({status: 'error', error: 'Pixabay (Photo could not be loaded)'});
											},
										});
										
									default:
										render();
										break;
								}
							},
							
							// UI
							
							getRoot: function() {
								return this.root;
							},
							render: function(args) {
								if(!args) args = {};
								var me = this;
								var root = this.root;
								var isPreview = this.args.isPreview;
								root.html('');
								
								if(!args.w && this.data.w) args.w = this.data.w;
								if(!args.h && this.data.h) args.h = this.data.h;
								
								var cssBack = 'col-light-35-back ox-dark-col-pitch-2-back pt5 pb5 pl10 pr10 br4 ';
								
								switch(args.status) {
									case 'loading':
										if(this.args.isPreview) ox.node({t: 'span', css: 'col-medium-4', c: [
											{t: 'i', css: 'fa fa-spinner fa-pulse mr5'},
											{t: 'span', css: 'mr5', text: !args.provider ? '#loading-image' : 'loading'},
											!args.provider || !args.icon ? null : {t: 'i', css: 'mr5 ' + args.icon},
											!args.provider ? null : {t: 'span', text: '#' + args.provider},
										]}, root);
										root.addClass(cssBack);
										break;
										
									case 'error':
										if(this.args.isPreview) ox.node({t: 'div', css: 'col-red', html: args.error}, root);
										break;
									
									default:
										if(isPreview && this.data.url) {
											var isEmbedded = this.data.url.substr(0, 4) == 'data';
											if(!args.details) args.details = !isEmbedded ? {t: 'i', css: 'fa fa-link'} : {t: 'span', text: ox.str.toSize(this.data.url.length)};
											
											ox.node({t: 'div', css: 'abs t00 mt15 ml15 col-white', c: [args.details]}, root);
										}
										//root.attr('url', this.data.url);
										root.attr('urlfull', this.data.urlFull);
										
										root.addClass(cssBack + (this.data.fit ? ' backfit' : ' backcover'));
										ox.el.onRefresh(function() {
											root.css('background-image', 'url(' + (me.data.url || 'https://slide.style/images/image.jpg') + ')');
											root.removeClass(cssBack);
										});
										//root.css('background-image', 'url(' + (me.data.url || 'https://slide.style/images/image.jpg') + ')');
								
										if(args.w || isPreview) root.css('width', args.w ? args.w : (isPreview ? '300px' : '100%'));
										if(args.h || isPreview) root.css('height', args.h ? args.h : (isPreview ? '200px' : '100%'));
										
										//if(this.data.fit && root.hasClass('h100') && !root.hasClass('w100')) root.css('background-size', 'auto 100% !important');
										
										break;
								}
							},
							
							// Static functions
							
							solveProvider: function(args) {
								//log('omnia.ui.image.handler.solveProvider: ' + (args.data.meta ? args.data.meta.provider : 'No data'));
								if(!args.data || !args.data.meta) return false;
								
								switch(args.data.meta.provider) {
									case 'google-photos':
										args.loading('<i class="fab fa-google mr5"></i>Google Photos');
			
										omnia.tools.net.google.init({
											isRequestSignIn: false,
											onSignedIn: function() { 
												omnia.tools.net.google.getPhoto({
													photoId: args.data.meta.photoId,
													onLoaded: function(photo) {
														args.show(photo.baseUrl + '=w' + (args.width > 0 ? args.width : photo.mediaMetadata.width), photo.baseUrl + '=w' + photo.mediaMetadata.width, '<i class="fab fa-google mr5"></i>');
													},
													onError: function(e) {
														args.error('<i class="fab fa-google mr5"></i>Google Photos (' + (e && e.result && e.result.error && e.result.error.message ? e.result.error.message : 'photo could not be loaded') + ')');
													},
												});
											},
											onSignedOut: function() {
												log('omnia.ui.image.solveProvider: Failed, is not signed in');
												args.error('<i class="fab fa-google mr5"></i>Google Photos (not signed in)');
											},
											onError: function() { 
												log('omnia.ui.image.solveProvider: Failed, unknown error');
												args.error('<i class="fab fa-google mr5"></i>Google Photos (sign-in error)');
											},
										});
										break;
								}
							},

};omnia.ui.image.data = {

							defaultNode: {v: '#image'},
							defaultData: {oid: 'image'},
							
							nodeToRender: function(v, args) {
								var isPreview = !(args && args.isOnParsed);
//log('#nodeToRender ' + args.node.data.v);								
								return {oid: 'image', args: {v: v, isPreview: isPreview}};
								
								
								
								//
								var print = {
									none: function() { 
										return isPreview ? {t: 'span', css: 'col-medium-4 italic', text: 'Image...'} : null; 
									},
									loading: function(provider, onRendered) { 
										return !isPreview ? {t: 'span', onRendered: onRendered} : {
											t: 'span', 
											html: 
												'<i class="fa fa-spinner fa-pulse mr5 col-medium-4"></i><span class="col-medium-4 italic">' + 
												(!provider ? ox.tx('loading-image') : '<span class="italic mr5">' + ox.tx('loading') + '</span>' + provider) + 
												'...</span>', 
											onRendered: onRendered,
										};
									},
									error: function(error) { return !isPreview ? {t: 'span'} : {t: 'div', css: 'col-red', html: error}; },
									preview: function(url, urlFull, details) {
										return {t: 'div', css: 'cropped', style: 'width:300px', c: [
											{oid: 'image', css: 'ox-format-image', url: url, style: {'width': '300px', 'height': '200px'}},
											{t: 'div', css: 'abs t00 mt15 ml15 col-white', html: details},
										]};
									},
									show: function(url, urlFull) { return {oid: 'image', urlfull: urlFull, css: 'ox-format-image w100 h100', url: url}; },
								};
						
								if(!v || v.substr(0, 7) != '#image-') return print.none();
								var dataStr = v.substr(7).trim();
								var data = /*dataStr.substr(0, 4) == 'http' ? {url: dataStr} : */ox.str.saveStringToObject(dataStr); //omnia.ui.image.handler.stringToData(dataStr);
//log('_nodeToRender')
//log(data);								
								if(!data.url && data.meta) return print.loading(null, function(elem) {
									window.requestAnimationFrame(function() {
										omnia.ui.image.handler.solveProvider({
											data: data,
											loading: function(provider) { elem.html(''); ox.node(print.loading(provider, null), elem); },
											show: function(url, urlFull, details) { elem.html(''); ox.node(!isPreview ? print.show(url, urlFull) : print.preview(url, urlFull, details), elem); },
											error: function(error) { elem.html(''); ox.node(print.error(error), elem); },
											width: !isPreview ? 1000 : 600,
										});
									});
								});
								
								var isEmbedded = data.url.substr(0, 4) == 'data';
								return !isPreview ? print.show(data.url) : print.preview(data.url, !isEmbedded ? '<i class="fa fa-link"></i>' : omnia.tools.string.toSize(data.url.length));
							},
							nodeToData: function(v) {
								return ox.str.saveStringToObject(v.substr(7));
							},
							dataToNode: function(data) {
								return '#image-' + ox.str.objectToSaveString(data);
							},

};omnia.ui.nodelistitem.handler = {

							args: null,
							root: null,
							
							node: null,
							path: null,
							isExpand: false,
							isNoArrow: false,
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
			
								var isExpand = this.root.hasClass('ox-expand');
								this.isNoArrow = this.root.hasClass('ox-noarrow');
								if(ox.pf.method != 'mouse' && this.root.hasClass('ox-pathhover')) isExpand = true;
								if(isExpand) this.root.removeClass('ox-pathhover');
								
								this.isExpand = isExpand;
								this.node = args.node;
								this.path = args.path;
								
								this.render();
							},
							
							// UI
						
							render: function(node, path, isExpand, isNoArrow) {
								var me = this;
								
								if(!node) node = this.node;
								if(!path) path = this.path;
								if(isExpand === undefined) isExpand = this.isExpand;
								if(isNoArrow === undefined) isNoArrow = this.isNoArrow;
								var args = this.args;
		
								var render = ox.ui.text.markup.render(args.node.v, {node: {isLeft: function() { return false; }, data: args.node}});
								var onItemClick = args.onClick ? args.onClick : (!args.isNoActions && render.objs && render.objs.length && render.objs[0].onProcess ? render.objs[0].onProcess : null);
								//log({v: args.node.v, render, node: args.node});
						
								// Path			
								var f = '';
							
								$.each(path, function(i, p) {
									if(p.node) p = p.node;
									if(p.v) {
										var renderP = ox.ui.text.markup.render(p.v/*, {textOnly: true}*/);
										f = (renderP.text ? renderP.text : (p.v == '#f' || p.v == '#more' ? renderP.html : '...')) + (f ? '<i class="fa fa-caret-right ml5 mr5"></i>' + f : ''); //f.unshift({t: 'span', text: p.v + ' - '});
									}
								});
								
								args.root.html('');
								
								var onExpand = function(e, elem) { 
									elem.parent().find('.ox-id-path').removeClass('ox-hidden'); 
									elem.parent().find('.ox-id-actions').removeClass('ox-hidden'); 
									elem.addClass('ox-hidden'); 
								};
								ox.node([
									
									// Path
									!path ? null : {t: 'div', css: 'ox-id-path col-medium-4 wrap ' + (args.isNoNode ? '' : 'ox-font-12 mb5 ') + (isExpand ? ' ox-hidden hand pr30' : ''), html: f, click: !isExpand ? null : function(e, elem) { 
										elem.toggleClass('ox-hidden'); 
										elem.parent().find('.ox-id-clicker').removeClass('ox-hidden');
										elem.parent().find('.ox-id-expand').removeClass('ox-hidden');
										elem.parent().find('.ox-id-actions').toggleClass('ox-hidden');
									}},
									
									// Text
									args.isNoNode ? null : {t: 'div', css: 'ox-dark-col-white-75 wrap ' + render.css + (isExpand ? ' pr30' : '') + (args.css ? ' ' + args.css : ''), c: render.objs, html: render.objs ? null : (!args.node.v ? '...' : (render.html || render.text))},
									!args.actions ? null : {oid: 'bar2', css: 'ox-alone ox-split ox-id-actions ox-border-top-i' + (isExpand ? ' ox-hidden hand' : ''), c: args.actions},
									
									// Button
									!onItemClick && !(isExpand && isNoArrow) ? null : {oid: 'button', css: 'ox-d abs t00 w100 h100 ox-id-clicker', label: '', click: onItemClick ? function(e, elem) { onItemClick(e, elem, me, me.args.linksuffix); } : onExpand},
									!isExpand || !path || isNoArrow ? null : {oid: 'button', css: 'ox-id-expand ox-medium b0 r0 abs', style: {'max-height': 40}, label: '<i class="fa fa-angle-down col-medium-4"></i>', click: onExpand,
									},
									
									// Dropdown
									!args.actions ? null : {oid: 'dropdown', css: 'ox-id-expand ox-medium b0 r0 abs', style: {'max-height': 40}, args: {
										isMenu: true,
										items: args.actions,
									}},
								], args.root);
							},
							update: function() {
								this.render();
							},
							getRoot: function() {
								return this.root;
							},  
							
							// Data
							
							setNodeValue: function(v) {
								this.node.v = v;
							},

};omnia.ui.nodelistitem.html = {
							
							t: 'div', css: 'ox-nodelistitem rel font'
							
};omnia.ui.dropdown.handler = {

							clsId: 'omnia.ui.dropdown',
							args: null,
							root: null,
							items: null,
							isOpen: false,
							selected: null,
							value: null,
							form: null,
							isMenu: null,
							overlay: null,

							init: function(args) {
								this.args = args || {};
								this.root = args.root;
								if(!args.items) args.items = [];
								//this.items = args.items;
								this.setItems(args.items);
								this.isMenu = args.isMenu || args.menu;
								
								// Set data
								if(!args.label && args.cfg && args.cfg.label) args.label = args.cfg.label;
								//if(args.label && args.label[0] == '#') args.label = ox.tx(args.label.substr(1));
			
								// Set UI
								var me = this;
								this.root.on(ox.b.CLICK, function() { me.open(); });
								this.set(args.selected, true);
								
								//if(args.onSelect) this.onSelect = args.onSelect;
								
								if(args.value || args.set) this.reset(args);
							},
							
							// Public functions - UI
							
							reset: function(args) { 
								if(args.actions) this.args.actions = args.actions;
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.onOpen) this.args.onOpen = args.onOpen;
								if(args.onClose) this.args.onClose = args.onClose;
								if(args.isDynamic !== undefined) this.args.isDynamic = args.isDynamic;
								if(args.items) {
									this.setItems(args.items);
									if(this.isOpen) {
										this.open(true);
									}
								}
								
								if(args.getValue) this.args.getValue = args.getValue;
								if(args.setValue) this.args.setValue = args.setValue;
								if(args.set) this.args.set = args.set;
								if(args.getItems) this.args.getItems = args.getItems;
								
								if(args.selected != undefined) this.set(args.selected);
								if(args.value) this.setValue(args.value);
							},		
							getRoot: function() {
								return this.root;
							},
							getValue: function() {
								if(this.args.getValue) {
									return this.args.getValue();
								}
								
								if(this.args.isForm) return this.value;
								
								return !this.items || !this.items.length || (!this.selected && this.selected != 0) ? false : this.items[this.selected];
							},
							setValue: function(idxOrValue, isNoEvents) {
								if(this.args.setValue) {
									this.args.setValue(idxOrValue);
									return;
								}
								
								this.value = idxOrValue;
								if(this.args.isForm && this.args.set) {
									this.set();
									return;
								}
								
								var idx = false;
								$.each(this.items, function(i, item) {
									if((item.value && item.value == idxOrValue) || (item.v && item.v == idxOrValue) || (item.value == 0 && idxOrValue == 0) || (item.v == 0 && idxOrValue == 0)) idx = i;
								});
								if(!idx) idx == typeof idxOrValue == 'number' ? idxOrValue : 0;

								if(idx >= 0) this.set(idx, isNoEvents);
							},
							prevItem: function() { 
								if(!this.selected && this.selected != 0) return;
								if(this.items && this.selected > 0) this.set(this.selected - 1);
							},
							nextItem: function() { 
								if(!this.selected && this.selected != 0) return;
								if(this.items && this.selected < this.items.length - 1) this.set(this.selected + 1);
							},
							random: function() {
								if(!this.items) return;
								this.set(Math.floor(Math.random() * this.items.length), true);
							},
							
							// Private events
							
							onOpen: function(overlay, isUpdate) {
								if(overlay) this.overlay = overlay;
								//log('#dropdown.onOpen');
								if(this.args.onOpen) this.args.onOpen(overlay, isUpdate);
							},
							onClose: function(isReopen) {
								this.isOpen = false;
								//if(this.overlay && this.overlay.isOpen) this.overlay.close();
								delete this.overlay;// = null;
								
								try {
									if(this.args.isForm) {
										this.form.reset({onChanged: function() {}});
										if(this.args.set) this.set();
									}
									if(this.args.onClose) this.args.onClose(this.value);
					
								}
								catch(e) {}
								
								if(isReopen) this.open();
							},
							
							// Private functions - UI
							
							initOverlay: function(elem) { 
								var me = this;
								
								try {
									if(me.args.isForm) {
										var form = ox.el.get('.ox-id-data', elem);
										form = me.form = form.data('ox-handler');
							
										if(form && form.reset && form.setValue) {
											form.reset({
												onChanged: function(value, form) { 
													if(value && value.value) me.value = value.value; 
												},
											});
								
											if(me.value) form.setValue(me.value);
										} else {
											ox.error('omnia.ui.dropdown.onOpen: Error: Form not found');
											log({form, elem});
										}
										me.onOpen();
									}
								}
								catch(e) {
									ox.error('omnia.ui.dropdown.onOpen: Error: ' + e);
								}
							},
							open: function(isUpdate) {
								if(this.root.hasClass('ox-inactive')) return;

								var me = this;

								// Update content
								if(isUpdate) {
									log('omnia.ui.overlay.open: Reopen');
									
									if(this.overlay) this.overlay.close();
									this.onClose(true);
									return;
								}
								if(this.overlay) this.overlay.close();

								log('omnia.ui.overlay.open' + (isUpdate ? ': isUpdate = true' : ''));
								this.isOpen = true;
								
								// Get latest items
								if(this.args.getItems) this.setItems(this.args.getItems(this)); 
								
								// Build content
								var content = [];
								$.each(this.items, function(idx, item) {
									if(item != null) content.push(
										!item.oid && !item.t ? {
											oid: 'button', 
											css: 'ox-id-close ' + (me.args.cssButton || ''), 
											label: (idx == me.selected && !me.args.isNoSelect ? '<i class="fa fa-check ox-before ox-font-10-i"></i>' : '') + item.label, 
											click: function() { me.set(idx); }
										} : 
										(
											me.args.isForm ? 
												ox.copy(item) : 
												item
										)
									);
								});
								if(this.args.isUnselectable) content.unshift({oid: 'button', css: 'ox-id-close', label: '#unselect', click: function() { me.set(null); }});
								
								var isLoading = !isUpdate && me.args.isDynamic;
								if(isLoading || !content.length) content.push({oid: 'label', css: 'col-light-0 italic ml15 mr15', style: 'font-weight:400 !important;', text: (isLoading ? '#loading...' : '#noitems')});
								
								// Build body
								var type = this.args.type || (this.args.asToggle ? 'toggle' : (this.args.isPanel ? 'panel' : (this.args.isGrid ? 'grid' : 'bar')));
								switch(type) {
									case 'toggle':
										var body = {oid: 'frame', css: 'ox-inline ox-content', c: [ 
											{
												oid: 'bar2', 
												css: '_scrollable-y ox-height-flex ox-height-auto ox-id-content ox-col-ui-dialog-1-back ' + (ox.pf.isPhone ? '' : 'ox-shadow-light-5 _ox-dark-shadow-none abs'), 
												onRendered: elem => me.initOverlay(elem), 
												c: [
													{
														oid: 'toggle', 
														css: 'w100 wrap ml5 mr5', 
														args: {
															items: this.items, 
															cssItems: (this.args.cssItems || '') + (ox.pf.isPhone && 0 ? ' h45px-i' : ' h35px-i ox-inline br4 cropped'),
															active: me.selected,
															onSelect: (v, idx) => { 
																me.set(idx); 
																if(me.overlay) me.overlay.close(); 
															},
														},
													}, 
												], 
												style: {'max-width': '500px'},
											} 
										]};
										break;
									case 'panel':
										var body = {t: 'div', css: 'ox-id-content ox-col-ui-dialog-1-back ' + (ox.pf.isPhone ? '' : 'ox-shadow-light-5 _ox-dark-shadow-none abs'), onRendered: function(elem) { me.initOverlay(elem); }, c: content};
										break;
									case 'grid':
										var body = {oid: 'list', css: 'ox-id-content ox-col-ui-dialog-1-back ' + (ox.pf.isPhone ? '' : 'ox-shadow-light-5 _ox-dark-shadow-none abs'), onRendered: function(elem) { me.initOverlay(elem); }, args: {
											gridInfo: me.args.gridInfo || {gap: 1},
											items: content,
										}};
										break;
									case 'bar':
										var body = {oid: 'bar2', css: 'ox-id-content ox-context ' + (ox.pf.isPhone ? 'ox-large' : 'ox-shadow-light-5 _ox-dark-shadow-none scrollable-y'), onRendered: function(elem) { me.initOverlay(elem); }, c: content};
										break;
								}
								
								/*var body = ox.pf.isPhone ? (
									this.args.isPanel ? 
										{t: 'div', css: 'ox-id-content ox-col-ui-dialog-1-back', onRendered: function(elem) { me.initOverlay(elem); }, c: content} : 
										{oid: 'bar2', css: 'ox-id-content ox-context ox-large', onRendered: function(elem) { me.initOverlay(elem); }, c: content}
								) : (
									this.args.isPanel ? 
										{t: 'div', css: 'ox-id-content ox-shadow-light-5 ox-dark-shadow-none abs ox-col-ui-dialog-1-back', onRendered: function(elem) { me.initOverlay(elem); }, c: content} : 
										{oid: 'bar2', css: 'ox-id-content ox-context ox-shadow-light-5 ox-dark-shadow-none scrollable-y', style: {'max-height': '100%'}, onRendered: function(elem) { me.initOverlay(elem); }, c: content}
								);*/

								// Open
								if(ox.pf.isPhone) ox.ov.show({
									delay: true,
									onClose: function() { me.onClose(); },
									isScroll: true,
									frame: {
										oid: 'popup',
										css: 'ox-body-flex',
										style: this.args.styleOverlay || {'max-height': '80%'},
										close: this.args.close,
										c: [body],
										actions: this.args.actions,
									},
									onRendered: function(overlay) { me.onOpen(overlay, isUpdate); },
								});
								else ox.ov.show({
									delay: true,
									onClose: function() { me.onClose(); }, 
									dropdown: this.args.dropdown || 'right',
									elem: this.root,
									blend: ox.pf.isTablet ? .1 : 0,
									frame: body,
									isScroll: true,
									onRendered: function(overlay) { me.onOpen(overlay, isUpdate); },
									
								});
							},
							set: function(idx, isNoEvents) {
								if(idx === false) return;
								
								var isSelected, item;
								
								if(this.args.isForm && this.args.set) {
							//log('#dropdown.set', this.value)
									item = this.args.set(this.value);
									isSelected = item ? true : false;
									if(!item) item = {label: this.args.label || '#select-please'};
								} else {
									this.selected = idx;
									isSelected = !(!idx && idx != 0);
									item = !isSelected ? {label: this.args.label || /*ox.tx('select-please')*/ '#select-please'} : this.items[idx];
								}
								
								if(item && item.label && item.label[0] == '#') item.label = ox.tx(item.label.substr(1));
								
								var isHiddenFirst = this.args.isShowNotFirst && this.selected == 0;
								var label = this.isMenu ? null : (this.args.isFixedLabel || isHiddenFirst ? ox.tx(this.args.label) : item.label);
								var html = [
									this.args.isForm && item && (item.oid || item.t) ? item : (label ? {
										t: 'span', 
										css: (item.css ? item.css + ' ' : '') + (!this.args.isNoArrow ? 'mr10' : '') + ' ' + ((isSelected || this.args.isFixedLabel) && !isHiddenFirst ? 'ox-dark-col-white' : 'col-light-0 ox-dark-col-night-2' 
										),
										html: (this.args.preLabel ? '<span class="ox-before">' + this.args.preLabel + '</span>' : '') + label,
									} : null),
									this.args.isNoArrow ? null : {
										t: 'i', 
										css: 'ox-dark-col-white fa fa-' + (this.isMenu ? 'ellipsis-' + (this.isMenu == 'v' ? 'v' : 'h') : 'chevron-down ox-font-10-i' + ((isSelected || this.args.isFixedLabel) && !isHiddenFirst ? '' : ' _col-light-0 ox-dark-col-night-2')),
										style: {
											'line-height': '17px',
											'vertical-align': 'middle',
										},
									}
								];
								//log({html});
								this.root.html('');
								ox.node(html, this.root);
								
								/*this.root.html(
									(label ? '<span class="' + (item.css ? item.css + ' ' : '') + (!this.args.isNoArrow ? 'mr10' : '') + ' ' + (isSelected || this.args.isFixedLabel ? '' : 'col-light-0') + '">' + label + '</span>' : '') + 
									(this.args.isNoArrow ? '' : '<i class="fa fa-' + (this.isMenu ? 'ellipsis-' + (this.isMenu == 'v' ? 'v' : 'h') : 'chevron-down ox-font-10-i') + '" style="line-height:17px; vertical-align:bottom;"></i>')
								);*/
					
								if(!isNoEvents && this.args.onChanged) this.args.onChanged({value: this.getValue()});
								if(!isNoEvents && this.args.onSelect) this.args.onSelect(this.getValue());
							},
							
							// Private functions - Data

							setItems: function(items) {
								ox.each(items, function(i, item) {
									if(typeof item == 'number' || typeof item == 'string') items[i] = {label: item.toString(), v: item};
								});
								this.items = items;
							},

};omnia.ui.dropdown.html = {

							oid: 'button', css: 'ox-dropdown _flex-center', style: '_display:flex;'
							
};omnia.ui.input.html = {
							
							t: 'input', css: 'ox-input', onRendered: 'omnia.ui.button.events.init'
							
};omnia.ui.inputfield1.handler = {

							clsId: 'omnia.ui.inputfield.handler',
							id: null,
							args: null,
							clear: null,
							input: null,
							hasFocus: false,
							isToClear: false,
							lastValue: null,
							
							init: function(args) {
								if(!args.root) return;
								
								this.id = ox.id();
								this.args = args;
								this.root = args.root;
								
								var me = this;
								var clear = this.clear = ox.el.get('clear', args.root); //$(args.root.find('.ox-id-clear'));
								var input = this.input = ox.el.get('input', args.root); //$(args.root.find('.ox-id-input'));
			
								input.on('input', function() { me.onInput(); });
								input.on('focus', function() { me.onFocus(); });
								input.on('blur', function() { me.onBlur(); });
								clear.on(ox.b.CLICK_DOWN, function() { me.isToClear = true });
								clear.on(ox.b.CLICK_UP, function() { me.onClear(); me.isToClear = false; });
								$('body').on('keydown.' + this.id, function(e) { me.onKey(e); });
			//input.attr('inputmode', 'none');
								if(args.value) input[0].value = args.value;
								if(args.focus || args.root.hasClass('ox-focus')) ox.el.onRefresh(function() { input.focus(); /*window.requestAnimationFrame(function() { input.focus(); });*/ });
								
								var p;
								if(p = args.root.attr('placeholder')) {
									input.attr('placeholder', p[0] == '#' ? ox.tx(p.substr(1)) : p);
									args.root.removeAttr('placeholder');
								}
								if(p = args.root.attr('type')) {
									input.attr('type', p);
									args.root.removeAttr('type');
								}
								
								this.onInput();
							},
							destroy: function() {
								$('body').off('keydown.' + this.id);
							},
							reset: function(args) {
								if(args.onInput) this.args.onInput = args.onInput;
								if(args.onClear) this.args.onClear = args.onClear; //
								if(args.onChanged) this.args.onClear = args.onChanged;
								if(args.onBlur) this.args.onBlur = args.onBlur;
								if(args.onFocus) this.args.onFocus = args.onFocus;
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.onEnter) this.args.onEnter = args.onEnter; //
								if(args.value) this.setValue(args.value);
								if(args.focus) this.onFocus();
							},
							getRoot: function() { return this.root; },
							focus: function() {
								this.input.focus();
							},
							blur: function() {
								this.input.blur();
							},
							setValue: function(value) {
								if(value || value == '') this.input[0].value = value;
								this.onInput();
							},
							setStyle: function(hasFocus) {
								var hasValue = this.getValue().length;
								if(this.root.hasClass('ox-form-right') && !hasValue) ox.css(this.input, 'hright-i', !hasFocus);
								//this.input.css('padding-right', hasFocus ? 45 : 15);
								ox.css(this.clear, 'opa05', !hasValue);
								//ox.css(this.root, 'ox-flat', hasFocus);
								if(this.args.formitem && this.args.formitem instanceof jQuery) ox.css(this.args.formitem, 'ox-label-small', hasFocus);
							},
							getValue: function() {
								return this.input[0].value;
							},
							onFocus: function() {
								//this.hasFocus = true;
								this.root.addClass('ox-focused');
								
								var v = this.lastValue = this.getValue();
								ox.css(this.clear, 'ox-hidden', false); //!v.length);

								if(this.args.formitem || 1) {
									//this.args.formitem.addClass('ox-label-small');
									this.setStyle(true);
								}
								
								var me = this;
								ox.el.onRefresh(function() {
									me.hasFocus = true;
								});
								if(this.args.onFocus) this.args.onFocus(this.getValue());
							},
							onBlur: function() {
								if(this.isToClear) return; 
								this.root.removeClass('ox-focused');
								
								this.hasFocus = false;
								this.clear.addClass('ox-hidden');
								if(this.args.formitem || 1) {
									this.setStyle(false);
									//this.args.formitem.removeClass('ox-label-small');
								}
								
								if(this.getValue() != this.lastValue && this.args.onChanged) this.args.onChanged({value: this.getValue()});
								if(this.args.onBlur) this.args.onBlur(this.getValue());
								if(this.args.onSelect) this.args.onSelect(this.getValue());
							},
							onInput: function() {
								var v = this.getValue();
								ox.css(this.clear, 'ox-hidden', !v.length || !this.hasFocus);
								if(this.args.formitem || 1) this.setStyle(this.hasFocus);
			
								if(this.args.onInput) this.args.onInput(v, this.args.root);
								if(this.args.onChanged) this.args.onChanged({value: v});
							},
							onClear: function() {
								if(!this.hasFocus) {
									this.input.focus();
									return;
								}
								
								this.input[0].value = '';
								this.onInput();
								this.input[0].focus();
								this.onFocus();
			
								if(this.args.onClear) this.args.onClear();
								if(this.args.onChanged) this.args.onChanged({value: ''});
							},
							onKey: function(e) {
								if(!this.hasFocus) return;
								if(!document.contains(this.root[0])) { this.destroy(); return; }
			
								var code = e.keyCode;
								var metaKey = e.metaKey || e.ctrlKey;
								var shiftKey = e.shiftKey;
								if(!e.preventDefault) e.preventDefault = function() {};
								
								switch(code) {
									case omnia.tools.keys.ENTER:
									case omnia.tools.keys.RETURN:
										if(this.args.onEnter) this.args.onEnter();
										break;
								}
							},

};omnia.ui.inputfield1.html = {

							t: 'div', css: 'ox-inputfield ox-data rel flex', c: [
								{oid: 'input', css: 'ox-id-input _ox-d-i', inputmode: 'none'},
								{oid: 'buttonicon', css: 'flex-fix ox-inline ox-id-clear ox-hidden ox-superslim ox-ignore-tab', icon: 'fa fa-backspace', tabindex: -1},
								//{oid: 'button', css: 'ox-inline ox-id-clear ox-hidden abs ox-superslim ox-ignore-tab', label: '<i class="ma ma-18" style="line-height:37px;">close</i>', style: {'right': 5}, tabindex: -1},
							]
								
};omnia.ui.inputfield.html = {
							
							oid: 'textfield', css: 'ox-fix', style: 'height:45px !important', args: {
								onEnter: function() {},
							}
						
};omnia.ui.search.handler = {

							args: null,
							elems: null,
							root: null,
							
							search: null,
							list: null,
							
							init: function(args) {
								this.args = args;
								this.root = args.root;
								this.elems = ox.el.getAll(args.root);
								
								var me = this;
								if(args.legal) ox.node(args.legal, this.elems.legal);
								var search = this.search = ox.el.get('search-query', args.root, true);
								search.reset({
									onSearch: function(query) { me.onSearch(query); },
								});
								var list = this.list = ox.el.get('search-result', args.root, true);
								list.reset({
									getItem: function(idx, item) { return me.args.getItem(item); /*me.getResultItem(item);*/ },
								});
								
								ox.el.onRefresh(function() { 
									me.list.loading({title: args.loadLabel || '#loading'});
									me.request(); 
									
									if(me.args.isSearchHidden) {
										me.elems['search-bar'].addClass('ox-hidden');
										me.elems['search-result-wrapper'].css({'overflow': 'hidden', 'height': '100%', 'padding-top': '0px'});
									} else me.search.focus();
								});
							},
							getRoot: function() {
								return this.root;
							},
							onSearch: function(query) {
								this.list.clear();
								this.list.loading({title: this.args.loadLabel || '#loading'});
								
								this.request({query: query, page: 1});
							},
							
							request: function(args) {
								if(!args) args = {};
								log('omnia.ui.search.request', args);
			
								var me = this;
								var param;
								
								// Query
								if(!args.page) args.page = 1;
								args.param = this.args.getParam(args); /*args.query ? {
									keywords: args.query.split(' ').join('+'),
									numResults: 20,
									resultOffset: args.page * 20,
								} : {
									
								}*/
								if(!args.onDone && args.query) args.onDone = function() { args.page++; me.request(args); };
								args.next = function(args) { me.publishResults(args.results && args.results.length ? args : {isEmpty: true}); };
								//args.action = function(pattern) { };
			
								delete args.results;
								if(!args.onProgress) args.onProgress = function(bytes, total) { 
									me.list.loading({t0: ox.str.toSize(bytes), t1: ox.str.toSize(total)}); 
								};
							
								this.args.request(args);
								//omnia.tools.net.colourlovers.getPalettes(args);
							},
							publishResults: function(args) {
								log('omnia.ui.search.publishResults' + (args.results ? ': Publish ' + args.results.length + ' items' : ''));
								//log(args.results);
								var me = this;
								
								var list = this.list;
								if(args.isClear) list.clear();
								if(args.isEmpty) {
									list.loading({stop: true});
									return;
								}
								
								if(args.results && args.results.length) {
									list.publish({
										data: args.results,
										lazy: true,
										onDone: args.onDone,
									});
								}
							},
							
};omnia.ui.search.html = {
							
							oid: 'frame2', css: 'ox-col-ui-dialog-1-back rel', c: [
								{oid: 'bar2', css: 'ox-id-search-bar ox-stretch ox-line ox-overlay ox-col-ui-dialog-1-back', c: [
									{oid: 'searchfield', css: 'ox-id-search-query', placeholder: '#search'},
								]},
								{oid: 'frame2', css: 'ox-id-search-result-wrapper pb15 pt60 abs-i t0 b0', c: [
									{t: 'div', css: 'ox-id-legal'},
									{oid: 'list', css: 'ox-grid ox-id-search-result pl15 pr15', args: {
										gridInfo: {gap: 5},
									}},
								]},
							]
							
};omnia.ui.searchfield.handler = {

							id: null,
							clear: null,
							b: null,
							ok: null,
							input: null,
							args: null,
							hasFocus: false,
							isNoHttpSelect: false,
							
							init: function(args) {
								//log('#omnia.ui.searchfield.handler.init');
								if(!args.root) return;
								
								var me = this;
								
								this.id = ox.id();
								this.root = args.root;
								this.args = args;
								
								if(args.isNoHttpSelect) this.isNoHttpSelect = args.isNoHttpSelect;
								var clear = this.clear = $(args.root.find('.ox-id-clear'));
								var b = this.b = $(args.root.find('.ox-id-searchbutton'));
								var ok = this.ok = $(args.root.find('.ox-id-ok'));
								var input = this.input = $(args.root.find('.ox-id-searchinput'));
			
								clear.on(omnia.tools.browser.CLICK, function() { me.onClear(); });
								b.on(omnia.tools.browser.CLICK, function() { me.onSearch(); });
								ok.on(omnia.tools.browser.CLICK, function() { me.onOk(); });
								input.on('input', function() { me.onInput(); });
								input.on('focus', function() { me.onFocus(); });
								input.on('blur', function() { me.onBlur(); });
								$('body').on('keydown.' + this.id, function(e) { me.onKey(e); });
							
								var p;
								if(p = args.root.attr('placeholder')) {
									input.attr('placeholder', p[0] == '#' ? ox.tx(p.substr(1)) : p);
									args.root.removeAttr('placeholder');
								}
								if(args.value) input[0].value = args.value;
								if(args.focus) input.focus();
								
								this.onInput();
								this.args.root.data('ox-handler', this);
							},
							destroy: function() {
								$('body').off('keydown.' + this.id);
							},
							reset: function(args) {
								var me = this;
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.onClear) this.args.onClear = args.onClear;
								if(args.onSearch) this.args.onSearch = args.onSearch;
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.onOk) this.args.onOk = args.onOk;
								if(args.onInput) this.args.onInput = args.onInput;
								if(args.value) {
									this.input[0].value = args.value;
									this.updateButtons();
								}	
								
								if(args.focus) setTimeout(function() { me.input[0].focus(); }, 1);
							},
							getRoot: function() {
								return this.root;
							},
							updateButtons: function() {
								var v = this.getValue();
								if(v.length) this.clear.removeClass('ox-hidden'); else this.clear.addClass('ox-hidden');
								if(!this.isNoHttpSelect && v && (v.substr(0, 4) == 'http' || v.indexOf('://') > 0)) { 
									this.b.addClass('ox-hidden'); 
									this.ok.removeClass('ox-hidden'); 
								} else {
									if(v.length) this.b.removeClass('ox-hidden'); else this.b.addClass('ox-hidden');
									this.ok.addClass('ox-hidden');
									if(v && v.length) this.b.removeClass('ox-inactive'); else this.b.addClass('ox-inactive');
								}
							},
							getValue: function() {
								return this.input[0].value;
							},
							setValue: function(value) {
								this.input[0].value = value;
								this.onInput();
							},
							onInput: function() {
								this.updateButtons();
								if(this.args.onInput) this.args.onInput(this.getValue(), this.args.root);
							},
							onClear: function() {
								this.input[0].value = '';
								this.onInput();
								this.input[0].focus();
			
								if(this.args.onClear) this.args.onClear();
							},
							onSearch: function() {
								if(this.args.onSearch) this.args.onSearch(this.getValue());
								if(this.args.onSelect) this.args.onSelect(this.getValue());
								if(this.args.onChanged) this.args.onChanged({value: this.getValue()});
							},
							onOk: function() {
								if(this.args.onOk) this.args.onOk(this.getValue());
								if(this.args.onSelect) this.args.onSelect(this.getValue());
							},
							onKey: function(e) {
								if(!this.hasFocus) return;
								if(!document.contains(this.root[0])) { this.destroy(); return; }
			
								var code = e.keyCode;
								var metaKey = e.metaKey || e.ctrlKey;
								var shiftKey = e.shiftKey;
								if(!e.preventDefault) e.preventDefault = function() {};
								
								switch(code) {
									case omnia.tools.keys.ENTER:
									case omnia.tools.keys.RETURN:
										this.input.blur();
										this.onSearch();
										break;
								}
							},
							onFocus: function() {
								this.hasFocus = true;
								if(this.args.onFocus) this.args.onFocus(this.getValue());
							},
							onBlur: function() {
								this.hasFocus = false;
								if(this.args.onBlur) this.args.onBlur(this.getValue());
								if(this.args.onSelect) this.args.onSelect(this.getValue());
							},
							focus: function() {
								this.input.focus();
							},
							blur: function() {
								this.input.blur();
							},

};omnia.ui.searchfield.html = {
							
							t: 'div', css: 'rel ox-searchfield', css: 'ox-data', c: [
								{oid: 'input', css: 'ox-id-searchinput ox-id-input', placeholder: function() { return omnia.tools.t('search-keywords') }, style: {'padding-right': '85px'}},
								{oid: 'button', css: 'ox-inline ox-id-clear ox-hidden abs ox-superslim', label: '<i class="ma ma-18" style="line-height:37px;">close</i>', style: {'right': 50}},
								{oid: 'sep', css: 'ox-id-clear abs ox-hidden', style: {'right': 40, 'height': 35, 'top': 5}},
								{oid: 'button', css: 'ox-inline ox-hidden ox-id-searchbutton ox-id-searchbutton ox-inactive abs ox-slim', style: {'right': 5}, label: '<i class="fa fa-search"></i>'},
								{oid: 'button', css: 'ox-inline ox-id-ok ox-green ox-hidden abs ox-slim', label: '<i class="fa fa-check"></i>', style: {'right': 5}},
							]
							
};omnia.ui.searchfield2.html = {
							
							oid: 'textfield', css: 'ox-fix', style: 'height:45px !important', args: {
								onEnter: function() {},
								placeholder: '#search',
								cta: 'search',
							}
							
};omnia.ui.searchtextfield.html = {
						
							oid: 'textfield', args: {
								onEnter: function() {},
								placeholder: '#search',
								cta: 'search',
							}
							
};omnia.ui.textarea.html = {
							
							t: 'textarea', css: 'ox-textarea ox-col-ui-dialog-1-back _ox-col-placeholder', onRendered: 'omnia.ui.button.events.init'
							
};omnia.ui.textfield.handler = {

							clsId: 'omnia.ui.textfield.handler',

							id: null,
							args: null,
							root: null,
							elems: null,
							textarea: null,
							isCursorBlur: false,
							lastValue: null,
							placeholder: null,
							cursorBar: null,
							hasFocus: null,
							isRow: null,
							keyboard: null,
							
							init: function(args) { 
								this.args = args || {};
								this.id = ox.id();
								this.render(args);
							
								if(args.value) this.setValue(args.value);
								if(args.isFocus) this.focus();

								var me = this;
								ox.el.onRefresh(function() { 
									me.updateSize(); 
									if(args.isFocus) me.focus(); 
								});
							},
							render: function(args) { 
								var me = this;
								var root = this.root = args.root;
								var e = this.elems = ox.el.getAll(root, true);
							
								// Textarea
								var textarea = this.textarea = $(root.find('> textarea'));
								if(args.type) {
									//textarea.attr('type', args.type);
									textarea.addClass('ox-hidden');
									textarea = this.textarea = ox.node({oid: 'input', css: 'z1', type: 'password', autocomplete: 'off'}, root);
								}
								textarea.on('focus', function() { me.onFocus(); });
								textarea.on('blur', function() { me.onBlur(); });
								textarea.on('input', function(e) { me.onInput(e); });
								$('body').on('keydown.' + this.id, function(e) { me.onKey(e); });
								
								if(args.cfg.tcss) args.cssTextarea = args.cfg.tcss;
								if(args.cssTextarea) textarea.addClass(args.cssTextarea);
								
								// Placeholder
								var ph = this.placeholder = ox.el.get('.ox-id-placeholder-label', root);
								//if(root.attr('placeholder')) args.cfg.placeholder = root.attr('placeholder'); log({attr: root.attr('placeholder')});
								if(args.cfg.placeholder && !args.placeholder) args.placeholder = args.cfg.placeholder;
								if(args.placeholder) {
									ph.text(ox.tx(args.placeholder));
									ph.removeClass('ox-hidden');
								}
								
								// Size
								var isRow = false;
								var isAlwaysOn = this.args.isKeyboardOn == 'always';
								var isStatic = isRow || root.hasClass('ox-keyboard-on') || this.args.isKeyboardOn;
								
								//if(args.widthDyn) {
									//root.addClass('ox-no-cursor');
									//textarea.addClass('nowrap-i');
								//}
								if(root.hasClass('ox-fix') || this.args.heightFix) {
									this.args.heightFix = true;
									this.args.minHeight = root.height() - (ox.pf.method == 'touch' ? 35 : (isStatic ? 35 : 0));
									ox.css(textarea, 'flex-1', true);
									if(this.args.minHeight <= 45) {
										this.setRow(true);
										//root.addClass('flex-i flex-row-i ox-keyboard-on');
										isRow = true;
									}
									//$(root.find('.ox-id-bar-cursor')).removeClass('ox-flex').addClass('ox-border-dashed-top');
								} else {
									//textarea.css({'width': 'auto', 'height': 'auto'});
									this.updateSize();
								}
								this.isRow = isRow;
								
								// Options
								if(args.cfg.options && !args.options) args.options = args.cfg.options;
								if(args.cfg.cta && !args.cta) args.cta = args.cfg.cta;
								if(args.cta) {
									if(!args.options) args.options = [];
									
									//args.options.push({oid: 'sep', css: 'ox-focus-only m0-i' + (isRow ? ' h35px m0-i mt5 _ox-inline' : '')});
									if(typeof args.cta == 'string') {
										switch(args.cta.toLowerCase()) {
											case 'search':
												args.isInbar = true;
												args.options = args.options.concat([
													{oid: 'sep', css: 'ox-focus-only ox-inline'},
													{oid: 'buttonicon', css: 'ox-id-button-send _ox-green ox-inline ox-slim', icon: 'fa fa-search', click: function() { me.onEnter(); }},
												]);
												//args.options.push({oid: 'sep', css: 'ox-focus-only ox-inline'}),
												//args.options.push({oid: 'buttonicon', css: 'ox-green ' + (isRow ? ' ox-slim h35px ox-inline' : ' ox-medium'), icon: 'fa fa-search', click: function() { me.onEnter(); }});
												break;
										}
									} else {
										if(!args.cta.css) args.cta.css = '';
										//args.cta.css += ' h35px';
										args.cta.click = function() { me.onEnter(); };
										args.options.push(args.cta);
									}
								}
								if(args.options && args.options.length) isStatic = true;
							
								// Render
								this.keyboard = ox.node({
									oid: 'keyboard', 
									css: 'ox-inrow flex-fix z1000 ox-id-bar-cursor ' + 
										(this.args.heightFix && !isRow ? ' ox-border-dashed-top' : '') + 
										(isRow || args.isInbar ? ' ox-inbar' : '') +
										(args.options || isAlwaysOn ? ' ox-has-options' : ''), 
									args: {
										isStatic,
										isAlwaysOn,
										layout: !this.args.layout && isRow ? 'cursor-input' + (ox.pf.method == 'touch' && 0 ? '-mobile' : '') : (this.args.layout || 'cursor'),
										ref: root,
										options: args.options, 
										focus: root.hasClass('ox-focus'),
										onLayoutChanged: function() { me.onKeyboardLayoutChanged(); },
										onKeyPressed: function() {
											me.onInput();
										},
									},
								}, this.root);
								//omnia.ui.button.events.init(e.editfield);
								omnia.ui.button.events.init(e.back);
								
								//log({k: this.keyboard})
								
								this.updateBars();
								
							},
							destroy: function() {
								$('body').off('keydown.' + this.id);
								this.root.remove();
								delete this.args;
								delete this.root;
								delete this.lastValue;
								delete this;
							},
							
							// Public functions
							
							reset: function(args) {
								if(args.options) this.setOptions(args.options, args.layout);
								if(args.layout) this.setKeyboard(args.layout);
								if(args.onInput) this.args.onInput = args.onInput;
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.onBlur) this.args.onBlur = args.onBlur;
								if(args.onFocus) this.args.onFocus = args.onFocus;
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.onEnter) this.args.onEnter = args.onEnter;
								if(args.onSearch) this.args.onEnter = args.onSearch;
								if(args.value) this.setValue(args.value);
								if(args.focus) this.focus();
							},
							setValue: function(value, isFromLoading) {
								if(!isFromLoading) this.loading(false);
								this.textarea[0].value = value.split('<br>').join('\n');
								
								var me = this;
								ox.el.onRefresh(function() {
									//me.updateBars();
									me.updateSize();
								});
							},
							getValue: function(isPlain) {
								if(isPlain) return this.textarea[0].value;
								return this.textarea[0].value.split('\n').join('<br>').split('&amp;').join('&');
							},
							getRoot: function() { return this.root; },
							focus: function(isDelay) {
								if(isDelay) {
									var me = this;
									ox.el.onRefresh(function() { me.textarea.focus(); });
									return;
								}
								this.textarea.focus();
							},
							blur: function() {
								this.textarea.blur();
							},
							loading: function(isOn) {
								this.setValue('', true);
								this.placeholder.html(isOn ? '<i class="ox-font-13-i fa fa-spinner fa-pulse fa-3x fa-fw"></i>' : ox.tx(this.args.cfg.placeholder || ''));
								ox.css(this.placeholder, 'ox-hidden', !isOn);
								this.updateBars();
							},
							
							// Private functions
							
							updateSize: function() {
								this.updateWidth();
								this.updateBars();
							},
							updateWidth: function() {
								if(this.args.widthDyn) {
									var ta = this.textarea[0];
									var fr = this.args.content ? this.args.content[0] : (this.args.widthDyn ? this.root[0] : ta);
									var minW = this.args.minWidth || 35;
									var maxW = this.args.maxWidth || 300;
									if(ox.pf.method == 'touch' && minW < 220) minW = 220;
									
									ta.style.width = minW + 'px';
									this.textarea.addClass('nowrap-i');
									//ta.style.whiteSpace = 'nowrap !important';
									
									var w = ta.scrollWidth + 12;
									if(w < minW) w = minW;
									if(w > maxW) w = maxW;
	
									ta.style.width = w + 'px';
									var ph = this.args.paddingH;
									w += 2 * ph;
									fr.style.width = w + 'px';
	
									//ta.style.whiteSpace = w > maxW ? 'word-wrap !important' : 'nowrap !important';
									ox.css(this.textarea, 'nowrap-i', w < maxW);
								}
								//ta.scrollIntoView();
								
								var me = this;
								window.requestAnimationFrame(function() {
									me.updateHeight();
								});
							},
							updateHeight: function() { 
								var isTouch = ox.pf.method == 'touch';
								var ta = this.textarea[0];
								var fr = this.args.content ? this.args.content[0] : (this.args.widthDyn ? this.root[0] : ta);
								
								var minH = this.args.minHeight || 45;
								
								// Set to minimum
								ta.style.minHeight = minH + 'px';
								
								if(this.args.heightFix) {
							//		fr.style.height = ta.style.height = '45px';
									return;
								}
								
					//log('#updateHeight 1: ' + minH);			
								ta.style.height = '0px';
								
								var h = (this.args.heightEdit ? this.args.heightEdit : (ta.scrollHeight));
								
					//log('#updateHeight 2: ' + h);
								if(h < minH) h = minH;
								if(this.args.maxHeight && h > this.args.maxHeight) h = this.args.maxHeight;

								if(!this.args.heightFix) ta.style.height = h + 'px';

					//log('#updateHeight 3: ' + h + ' ' + ta.style.paddingTop);
								var ph = this.args.paddingV;// || parseInt(ta.style.paddingTop);

					//log('#updateHeight 4: ' + ph);
								h += 2 * ph;
								if(!this.args.heightFix) fr.style.height = h + 'px';
								
								//log('#updateHeight 5: ' + h);
							},
							updateBars: function() {
								//log('#updateBars ' + this.textarea[0].value + ' ' + this.root.hasClass('ox-text-right'));
								if(this.args.placeholder && this.textarea) ox.css(this.placeholder, 'ox-hidden', this.textarea[0].value.length);
								//ox.css(this.cursorBar, 'ox-hidden', !this.root.hasClass('ox-focused') && !this.isCursorBlur);
								
								var me = this;
								ox.el.onRefresh(function() {
									var w = me.elems.editfield.width();
									w = w <= 0 ? '100%' : (w + 30) + 'px';
									//log('#pw = ' + me.elems.editfield.width());
									me.elems['placeholder-label'].css('width', w);
									//me.elems['placeholder-label'].css('width', (me.elems.editfield.width() + 30) + 'px');
								});
							},
							setRow: function(isRow) {
								ox.css(this.root, 'flex-i flex-row-i ox-keyboard-on', isRow);
								this.isRow = isRow;
								if(this.keyboard) this.keyboard.getRoot().removeClass('ox-inbar');
								if(!isRow) {
									this.args.heightFix = false;
									this.root.css('height', 'auto');
								}
							},
							setKeyboard: function(layout) {
								this.args.layout = layout;
								if(this.keyboard) this.keyboard.setLayout(layout);
							},
							setOptions: function(options, isNoRender) {
								if(this.keyboard) this.keyboard.setOptions(options, true, isNoRender);
							},
							setPosition: function(pos, end) {
								omnia.tools.selection.setPosition(this.textarea, pos, end);
							},

							// Private events
						
							onFocus: function() {
								//log('#focus');
								
								this.hasFocus = true;
								this.root.addClass('ox-focused');
								this.elems.editfield.removeClass('ox-down');
								this.lastValue = this.getValue();
								this.updateBars();
								if(this.args.isSelectOnFocus) omnia.tools.selection.selectAll(this.textarea);
								if(this.args.onFocus) this.args.onFocus(this.getValue());
								
								//log(this.root);
							},
							onBlur: function() {
								//log('blur');
								
								this.hasFocus = false;
								if(this.isCursorBlur || this.args.isKeepFocus) this.textarea.focus(); 
								this.isCursorBlur = false;
								this.root.removeClass('ox-focused');
								this.updateBars();
								
								if(this.getValue() != this.lastValue && this.args.onChanged) this.args.onChanged({value: this.getValue()});
								if(this.args.onBlur) this.args.onBlur(this.getValue());
								if(this.args.onSelect) this.args.onSelect(this.getValue());
							},
							onInput: function(e) {
								this.updateSize();
								if(this.args.onInput) this.args.onInput(this.getValue(), this);
								if(this.args.onChanged) this.args.onChanged({value: this.getValue()});
							},
							onCursor: function(d) {
								//log('#onCursor');
								
								this.isCursorBlur = true;
								omnia.tools.selection.setPosition(this.textarea, d);
								
								this.textarea.focus();
								this.updateBars();
							},
							onClear: function() {
								this.isCursorBlur = true;
								this.textarea.focus();
								this.setValue('');
								this.onInput();
							},
							onEnter: function() {
								if(this.args.onEnter) this.args.onEnter(this.getValue());
							},
							onKey: function(e) {
								if(!this.hasFocus || !this.args.onEnter) return;
								if(!document.contains(this.root[0])) { this.destroy(); return; }
			
								var code = e.keyCode;
								var metaKey = e.metaKey || e.ctrlKey;
								var shiftKey = e.shiftKey;
								if(!e.preventDefault) e.preventDefault = function() {};
								
								switch(code) {
									case omnia.tools.keys.ENTER:
									case omnia.tools.keys.RETURN:
										this.onEnter();
										e.preventDefault();
										break;
								}
							},
							onKeyboardLayoutChanged: function() {
								this.setRow(false);
							},
							
};omnia.ui.textfield.html = {
							
							oid: 'frame2', css: 'ox-textfield ox-data ox-col-ui-dialog-1-back ox-dark-transparent-back _cropped no-crop', c: [
								{t: 'div', css: 'ox-hidden ox-id-placeholder-label _ox-id-editfield col-medium-2 ox-dark-col-night-2 abs t00 font', style: 'z-index:1001; pointer-events:none;', text: ''},
								{oid: 'textarea', css: 'ox-id-text ox-id-editfield transparent-i', style: {'z-index': 1}},
								{t: 'div', css: 'ox-id-back ox-id-bk abs t0 b0 l0 r0 _ox-d _w100 _h100', style: {'z-index': 0, '_left': '20px !important'}},
							]
							
};omnia.ui.toggle.handler = {

							clsId: 'omnia.ui.toggle.handler',
							id: null,
							root: null,
							//onActivate: null,
							active: 0,
							args: null,
							items: null,
							
							init: function(args) {
								this.id = 'ox-toggle-' + omnia.tools.getUniqueId();
								
								this.args = args;
								this.root = args.root.hasClass('ox-inbar') ? args.root.parent() : args.root;
								if(args.root.hasClass('ox-inbar')) args.root.addClass('ox-hidden');
								
								this.items = args.items;
							
								this.render(args);
								if(args.value) this.reset(args);
							},
							render: function(args) {
								var cfg = [];
								var me = this;
								var id = this.id;
								if(!args) args = this.args || {};
								var items = this.items;
					
								ox.el.get('.ox-id-toggle-' + this.id, this.root).remove();
								
								$.each(items, function(i, item) { 
									if(item) cfg.push({
										oid: 'button', 
										css: (!item.full && !args.cssItems ? 'ox-inline' : '') + ' ox-button-toggle ox-id-toggle-' + id + ' ox-id-toggle-' + id + '-' + i + (args.cssItems ? ' ' + args.cssItems : ' ox-slim') + (item.css ? ' ' + item.css : ''),
										style: item.style ? item.style : (args.styleItems ? args.styleItems : null),
										alt: item.alt,
										c: [{t: 'span', html: typeof item == 'string' ? item : item.label}], 
										click: item.notSelectable ? null : function() { me.activate(i); },
										clickdown: item.clickdown,
										clickup: item.clickup,
									});
								});
								omnia.tools.html.node(cfg, this.root);

								this.activate(typeof args.active == 'function' ? args.active() : (args.active || 0), true);
							},
							reset: function(args) {
								if(args.cssItems) this.args.cssItems = args.cssItems;
								if(args.onActivate) this.args.onActivate = args.onActivate;
								if(args.onChanged) this.args.onChanged = args.onChanged;
								if(args.onSelect) this.args.onSelect = args.onSelect;
								if(args.items) {
									//log('#items = ', args.items);
									this.items = args.items;
									this.render();
								}
								if(args.value) this.setValue(args.value, true);
								if(args.active) this.activate(args.active, true);
							},
							getRoot: function() {
								return this.root;
							},
							activate: function(idx, isNotTriggerEvent) {
								//log('omnia.ui.toggle.activate: idx = ' + idx);
								
								var cssActive = this.args.cssActive ? (typeof this.args.cssActive == 'array' ? this.args.cssActive[idx] : this.args.cssActive) : 
									'col-blue-15-back ox-dark-col-night-back ox-dark-col-white'; //'col-blue-25-back ox-dark-col-night-back ox-dark-col-white'; 
								var ts = this.root.find('.ox-id-toggle-' + this.id);
						
								$.each(ts, function(i, toggle) {
									$(toggle).removeClass(cssActive + ' ox-active');
								});
								
								$(this.root.find('.ox-id-toggle-' + this.id + '-' + idx)).addClass(cssActive + ' ox-active');
								this.active = idx;
							
								if(!isNotTriggerEvent && this.args.onActivate) this.args.onActivate(this.items[idx], idx, this.root);
								if(!isNotTriggerEvent && this.args.onSelect) this.args.onSelect(this.items[idx], idx, this.root);
								if(!isNotTriggerEvent && this.args.onChanged) this.args.onChanged({value: {item: this.items[idx], idx: idx}, root: this.root});
							},
							getActive: function() {
								return this.active;
							},
							getActiveItem: function() {
								if(!this.items || !this.items[this.active]) return null;
								return this.items[this.active];
							},
							getValue: function() {
								return this.getActiveItem();
							},
							setValue: function(idxOrValue, isNotTriggerEvent) {
								var idx = -1;
								//if(typeof idxOrValue == 'string') {
									$.each(this.items, function(i, item) {
			
										if((item.value && item.value == idxOrValue) || (item.v && item.v == idxOrValue) || (item.value == 0 && idxOrValue == 0) || (item.v == 0 && idxOrValue == 0)) idx = i;
									});
								//} else idx = idxOrValue;
							
								if(!idx) idx = 0;
								this.activate(idx, isNotTriggerEvent);
							},
							random: function() {
								if(!this.items) return;
								this.activate(Math.floor(Math.random() * this.items.length), true);
							},

};omnia.ui.toggle.html = {

							t: 'div', css: 'ox-toggle inline h100'
							
};