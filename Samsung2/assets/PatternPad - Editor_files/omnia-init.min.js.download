
				
				var clsId = 'omnia.index.init.core';
				window.omnialog = [];
				var log = (t, style) => { 
					window.omnialog.push({t, style, time: (new Date()).getTime()}); 
					console.log(t, style || ''); 
				}
				log(clsId + ': Start');
				
				var getFile = async (filename, isCreate) => { 
					try { 
						var error = (e, resolve) => { 
							if(resolve) { resolve(); return; }
							
							log('%c' + clsId + '.getFile: ' + e); 
							//if(typeof e != 'string') log(e); 
							return false;
						};
						if(!cordova || !cordova.file) return error('cordova not found');
						
						if(filename[0] == '/') filename = filename.substr(1);
						filename = filename.replace(/\//g, '#');
						var isAndroid = navigator.userAgent.match(/Android/i); 
						//if(!isAndroid) return error('ios not supported yet');
						var dir = isAndroid ? cordova.file.externalDataDirectory : cordova.file.syncedDataDirectory;
						var fileEntryFound = null;
						var content = null;
						var options = isCreate ? {create: true, exclusive: false} : {create: false};

						// Get file
						await new Promise(resolve => {
							window.resolveLocalFileSystemURL(dir, dirEntry => { dirEntry.getFile(filename, options, fileEntry => { fileEntryFound = fileEntry; resolve(); }, e => error(e, resolve)); }, e => error(e, resolve));
						}); 
						if(!fileEntryFound) return error('File not found on device, filename = /' + filename.split('#').join('/'));
						else log(clsId + '.getFile: File found on device, filename = /' + filename.split('#').join('/'));
						
						// Read file
						if(!isCreate) {
							await new Promise(resolve => {
								fileEntryFound.file(file => {
									var reader = new FileReader();
									reader.onloadend = () => { content = reader.result; resolve(); };
									reader.onerror = () => { resolve(); }
									reader.readAsText(file);
								});
							});
						}
						
						return content;
					}
					catch(e) {
						return error(e);
					}
				};
				var loadResource = async args => {
					
					// Get device file
					var file = args.source != 'device' ? null : await getFile('/release/' + args.src);
					if(args.source == 'device' && file) {
						var script = document.createElement("script");
						script.type = 'text/javascript';
						script.id = args.src;
						script.textContent = file;
						document.head.appendChild(script);
						
						log('%c' + clsId + '.loadResource: Loaded from device ' + args.src, 'color:#aa00ff');
						return true;
					}

					// Load from remote or local
					await new Promise(resolve => {
						var path = args.source == 'local' ? '' : 'https://haustein.info/';
						args.src = path + args.src;
						var unique = args.src.indexOf('omnia') >= 0 ? '?_=' + 'ID' + (new Date()).getTime().toString(16) + Math.round(Math.random() * 100000).toString(16) : '';
						var elem = document.createElement('script');
						elem.type = 'text/javascript';
						elem.src = args.src + unique;
						elem.onload = function() { resolve(); };
						document.head.appendChild(elem);
					});
					log('%c' + clsId + '.loadResource: Loaded ' + args.src, 'color:#aa00ff');
					return true;
				};

				// Get parameters
				var scripts = [].slice.call(document.getElementsByTagName('script'));
				var script = scripts.find(script => { var src = script.getAttribute('src'); return src && src.includes('omnia-init'); });
				var idx = script.getAttribute('idx');
				var isLocal = script.getAttribute('local') == 'true';
				var max = 0;
				window.onerror = (message, url, line) => { if(++max < 5) alert(message + ': ' + url + ' (Line ' + line + ')'); }
				
				var start = async () => {
					var unstable = !isLocal ? false : await getFile('/release/unstable');
					var appinfo = !isLocal ? false : await getFile('/release/appinfo.json');
					var source = window.omniasource = unstable === false && appinfo !== false ? 'device' : (isLocal ? 'local' : 'remote');
					log(clsId + '.start: source = ' + source + ' (unstable: ' + (unstable === false ? '0' : '1') + ', appinfo: ' + (appinfo === false ? '0' : '1') + ')');

					if(source == 'device') await getFile('release/unstable', true);
					await loadResource({source, src: 'omnia/lib/min/omnia.min.js'});
					await loadResource({source, src: 'omnia/lib/min/omnia-index-' + idx + '.min.js'});
					omnia.index.main();
					
				};
				
				var isCordova = false; try { isCordova = cordova ? true : false; } catch(e) {}
				if(!isLocal && !isCordova) start(); // Web
				else {
					log(clsId + ': Wait for deviceready (cordova not found yet)');
					document.addEventListener("deviceready", () => start(), false);
				}
				